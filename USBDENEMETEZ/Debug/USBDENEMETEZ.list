
USBDENEMETEZ.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fa20  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000538  0800fbf0  0800fbf0  0001fbf0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010128  08010128  00030414  2**0
                  CONTENTS
  4 .ARM          00000008  08010128  08010128  00020128  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010130  08010130  00030414  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010130  08010130  00020130  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010134  08010134  00020134  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002d4  20000000  08010138  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  200002d4  0801040c  000302d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000374  080104ac  00030374  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00001f38  20000414  0801054c  00030414  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  2000234c  0801054c  0003234c  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  00030414  2**0
                  CONTENTS, READONLY
 14 .comment      00000043  00000000  00000000  00030444  2**0
                  CONTENTS, READONLY
 15 .debug_info   0001dde1  00000000  00000000  00030487  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00003ffc  00000000  00000000  0004e268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 000017e8  00000000  00000000  00052268  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00001275  00000000  00000000  00053a50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0002b1ca  00000000  00000000  00054cc5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0001e22c  00000000  00000000  0007fe8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    000fce27  00000000  00000000  0009e0bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  00007a10  00000000  00000000  0019aee4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000061  00000000  00000000  001a28f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000414 	.word	0x20000414
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800fbd8 	.word	0x0800fbd8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000418 	.word	0x20000418
 800020c:	0800fbd8 	.word	0x0800fbd8

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9a6 	b.w	800102c <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	; (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9e08      	ldr	r6, [sp, #32]
 8000d6a:	460d      	mov	r5, r1
 8000d6c:	4604      	mov	r4, r0
 8000d6e:	460f      	mov	r7, r1
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d14a      	bne.n	8000e0a <__udivmoddi4+0xa6>
 8000d74:	428a      	cmp	r2, r1
 8000d76:	4694      	mov	ip, r2
 8000d78:	d965      	bls.n	8000e46 <__udivmoddi4+0xe2>
 8000d7a:	fab2 f382 	clz	r3, r2
 8000d7e:	b143      	cbz	r3, 8000d92 <__udivmoddi4+0x2e>
 8000d80:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d84:	f1c3 0220 	rsb	r2, r3, #32
 8000d88:	409f      	lsls	r7, r3
 8000d8a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d8e:	4317      	orrs	r7, r2
 8000d90:	409c      	lsls	r4, r3
 8000d92:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d96:	fa1f f58c 	uxth.w	r5, ip
 8000d9a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d9e:	0c22      	lsrs	r2, r4, #16
 8000da0:	fb0e 7711 	mls	r7, lr, r1, r7
 8000da4:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000da8:	fb01 f005 	mul.w	r0, r1, r5
 8000dac:	4290      	cmp	r0, r2
 8000dae:	d90a      	bls.n	8000dc6 <__udivmoddi4+0x62>
 8000db0:	eb1c 0202 	adds.w	r2, ip, r2
 8000db4:	f101 37ff 	add.w	r7, r1, #4294967295
 8000db8:	f080 811c 	bcs.w	8000ff4 <__udivmoddi4+0x290>
 8000dbc:	4290      	cmp	r0, r2
 8000dbe:	f240 8119 	bls.w	8000ff4 <__udivmoddi4+0x290>
 8000dc2:	3902      	subs	r1, #2
 8000dc4:	4462      	add	r2, ip
 8000dc6:	1a12      	subs	r2, r2, r0
 8000dc8:	b2a4      	uxth	r4, r4
 8000dca:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dce:	fb0e 2210 	mls	r2, lr, r0, r2
 8000dd2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dd6:	fb00 f505 	mul.w	r5, r0, r5
 8000dda:	42a5      	cmp	r5, r4
 8000ddc:	d90a      	bls.n	8000df4 <__udivmoddi4+0x90>
 8000dde:	eb1c 0404 	adds.w	r4, ip, r4
 8000de2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000de6:	f080 8107 	bcs.w	8000ff8 <__udivmoddi4+0x294>
 8000dea:	42a5      	cmp	r5, r4
 8000dec:	f240 8104 	bls.w	8000ff8 <__udivmoddi4+0x294>
 8000df0:	4464      	add	r4, ip
 8000df2:	3802      	subs	r0, #2
 8000df4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000df8:	1b64      	subs	r4, r4, r5
 8000dfa:	2100      	movs	r1, #0
 8000dfc:	b11e      	cbz	r6, 8000e06 <__udivmoddi4+0xa2>
 8000dfe:	40dc      	lsrs	r4, r3
 8000e00:	2300      	movs	r3, #0
 8000e02:	e9c6 4300 	strd	r4, r3, [r6]
 8000e06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0a:	428b      	cmp	r3, r1
 8000e0c:	d908      	bls.n	8000e20 <__udivmoddi4+0xbc>
 8000e0e:	2e00      	cmp	r6, #0
 8000e10:	f000 80ed 	beq.w	8000fee <__udivmoddi4+0x28a>
 8000e14:	2100      	movs	r1, #0
 8000e16:	e9c6 0500 	strd	r0, r5, [r6]
 8000e1a:	4608      	mov	r0, r1
 8000e1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e20:	fab3 f183 	clz	r1, r3
 8000e24:	2900      	cmp	r1, #0
 8000e26:	d149      	bne.n	8000ebc <__udivmoddi4+0x158>
 8000e28:	42ab      	cmp	r3, r5
 8000e2a:	d302      	bcc.n	8000e32 <__udivmoddi4+0xce>
 8000e2c:	4282      	cmp	r2, r0
 8000e2e:	f200 80f8 	bhi.w	8001022 <__udivmoddi4+0x2be>
 8000e32:	1a84      	subs	r4, r0, r2
 8000e34:	eb65 0203 	sbc.w	r2, r5, r3
 8000e38:	2001      	movs	r0, #1
 8000e3a:	4617      	mov	r7, r2
 8000e3c:	2e00      	cmp	r6, #0
 8000e3e:	d0e2      	beq.n	8000e06 <__udivmoddi4+0xa2>
 8000e40:	e9c6 4700 	strd	r4, r7, [r6]
 8000e44:	e7df      	b.n	8000e06 <__udivmoddi4+0xa2>
 8000e46:	b902      	cbnz	r2, 8000e4a <__udivmoddi4+0xe6>
 8000e48:	deff      	udf	#255	; 0xff
 8000e4a:	fab2 f382 	clz	r3, r2
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	f040 8090 	bne.w	8000f74 <__udivmoddi4+0x210>
 8000e54:	1a8a      	subs	r2, r1, r2
 8000e56:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e5a:	fa1f fe8c 	uxth.w	lr, ip
 8000e5e:	2101      	movs	r1, #1
 8000e60:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e64:	fb07 2015 	mls	r0, r7, r5, r2
 8000e68:	0c22      	lsrs	r2, r4, #16
 8000e6a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e6e:	fb0e f005 	mul.w	r0, lr, r5
 8000e72:	4290      	cmp	r0, r2
 8000e74:	d908      	bls.n	8000e88 <__udivmoddi4+0x124>
 8000e76:	eb1c 0202 	adds.w	r2, ip, r2
 8000e7a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e7e:	d202      	bcs.n	8000e86 <__udivmoddi4+0x122>
 8000e80:	4290      	cmp	r0, r2
 8000e82:	f200 80cb 	bhi.w	800101c <__udivmoddi4+0x2b8>
 8000e86:	4645      	mov	r5, r8
 8000e88:	1a12      	subs	r2, r2, r0
 8000e8a:	b2a4      	uxth	r4, r4
 8000e8c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e90:	fb07 2210 	mls	r2, r7, r0, r2
 8000e94:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e98:	fb0e fe00 	mul.w	lr, lr, r0
 8000e9c:	45a6      	cmp	lr, r4
 8000e9e:	d908      	bls.n	8000eb2 <__udivmoddi4+0x14e>
 8000ea0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ea4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ea8:	d202      	bcs.n	8000eb0 <__udivmoddi4+0x14c>
 8000eaa:	45a6      	cmp	lr, r4
 8000eac:	f200 80bb 	bhi.w	8001026 <__udivmoddi4+0x2c2>
 8000eb0:	4610      	mov	r0, r2
 8000eb2:	eba4 040e 	sub.w	r4, r4, lr
 8000eb6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000eba:	e79f      	b.n	8000dfc <__udivmoddi4+0x98>
 8000ebc:	f1c1 0720 	rsb	r7, r1, #32
 8000ec0:	408b      	lsls	r3, r1
 8000ec2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ec6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000eca:	fa05 f401 	lsl.w	r4, r5, r1
 8000ece:	fa20 f307 	lsr.w	r3, r0, r7
 8000ed2:	40fd      	lsrs	r5, r7
 8000ed4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ed8:	4323      	orrs	r3, r4
 8000eda:	fbb5 f8f9 	udiv	r8, r5, r9
 8000ede:	fa1f fe8c 	uxth.w	lr, ip
 8000ee2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ee6:	0c1c      	lsrs	r4, r3, #16
 8000ee8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000eec:	fb08 f50e 	mul.w	r5, r8, lr
 8000ef0:	42a5      	cmp	r5, r4
 8000ef2:	fa02 f201 	lsl.w	r2, r2, r1
 8000ef6:	fa00 f001 	lsl.w	r0, r0, r1
 8000efa:	d90b      	bls.n	8000f14 <__udivmoddi4+0x1b0>
 8000efc:	eb1c 0404 	adds.w	r4, ip, r4
 8000f00:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f04:	f080 8088 	bcs.w	8001018 <__udivmoddi4+0x2b4>
 8000f08:	42a5      	cmp	r5, r4
 8000f0a:	f240 8085 	bls.w	8001018 <__udivmoddi4+0x2b4>
 8000f0e:	f1a8 0802 	sub.w	r8, r8, #2
 8000f12:	4464      	add	r4, ip
 8000f14:	1b64      	subs	r4, r4, r5
 8000f16:	b29d      	uxth	r5, r3
 8000f18:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f1c:	fb09 4413 	mls	r4, r9, r3, r4
 8000f20:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000f24:	fb03 fe0e 	mul.w	lr, r3, lr
 8000f28:	45a6      	cmp	lr, r4
 8000f2a:	d908      	bls.n	8000f3e <__udivmoddi4+0x1da>
 8000f2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f30:	f103 35ff 	add.w	r5, r3, #4294967295
 8000f34:	d26c      	bcs.n	8001010 <__udivmoddi4+0x2ac>
 8000f36:	45a6      	cmp	lr, r4
 8000f38:	d96a      	bls.n	8001010 <__udivmoddi4+0x2ac>
 8000f3a:	3b02      	subs	r3, #2
 8000f3c:	4464      	add	r4, ip
 8000f3e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f42:	fba3 9502 	umull	r9, r5, r3, r2
 8000f46:	eba4 040e 	sub.w	r4, r4, lr
 8000f4a:	42ac      	cmp	r4, r5
 8000f4c:	46c8      	mov	r8, r9
 8000f4e:	46ae      	mov	lr, r5
 8000f50:	d356      	bcc.n	8001000 <__udivmoddi4+0x29c>
 8000f52:	d053      	beq.n	8000ffc <__udivmoddi4+0x298>
 8000f54:	b156      	cbz	r6, 8000f6c <__udivmoddi4+0x208>
 8000f56:	ebb0 0208 	subs.w	r2, r0, r8
 8000f5a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f5e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f62:	40ca      	lsrs	r2, r1
 8000f64:	40cc      	lsrs	r4, r1
 8000f66:	4317      	orrs	r7, r2
 8000f68:	e9c6 7400 	strd	r7, r4, [r6]
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	2100      	movs	r1, #0
 8000f70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f74:	f1c3 0120 	rsb	r1, r3, #32
 8000f78:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f7c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f80:	fa25 f101 	lsr.w	r1, r5, r1
 8000f84:	409d      	lsls	r5, r3
 8000f86:	432a      	orrs	r2, r5
 8000f88:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f8c:	fa1f fe8c 	uxth.w	lr, ip
 8000f90:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f94:	fb07 1510 	mls	r5, r7, r0, r1
 8000f98:	0c11      	lsrs	r1, r2, #16
 8000f9a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f9e:	fb00 f50e 	mul.w	r5, r0, lr
 8000fa2:	428d      	cmp	r5, r1
 8000fa4:	fa04 f403 	lsl.w	r4, r4, r3
 8000fa8:	d908      	bls.n	8000fbc <__udivmoddi4+0x258>
 8000faa:	eb1c 0101 	adds.w	r1, ip, r1
 8000fae:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fb2:	d22f      	bcs.n	8001014 <__udivmoddi4+0x2b0>
 8000fb4:	428d      	cmp	r5, r1
 8000fb6:	d92d      	bls.n	8001014 <__udivmoddi4+0x2b0>
 8000fb8:	3802      	subs	r0, #2
 8000fba:	4461      	add	r1, ip
 8000fbc:	1b49      	subs	r1, r1, r5
 8000fbe:	b292      	uxth	r2, r2
 8000fc0:	fbb1 f5f7 	udiv	r5, r1, r7
 8000fc4:	fb07 1115 	mls	r1, r7, r5, r1
 8000fc8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fcc:	fb05 f10e 	mul.w	r1, r5, lr
 8000fd0:	4291      	cmp	r1, r2
 8000fd2:	d908      	bls.n	8000fe6 <__udivmoddi4+0x282>
 8000fd4:	eb1c 0202 	adds.w	r2, ip, r2
 8000fd8:	f105 38ff 	add.w	r8, r5, #4294967295
 8000fdc:	d216      	bcs.n	800100c <__udivmoddi4+0x2a8>
 8000fde:	4291      	cmp	r1, r2
 8000fe0:	d914      	bls.n	800100c <__udivmoddi4+0x2a8>
 8000fe2:	3d02      	subs	r5, #2
 8000fe4:	4462      	add	r2, ip
 8000fe6:	1a52      	subs	r2, r2, r1
 8000fe8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fec:	e738      	b.n	8000e60 <__udivmoddi4+0xfc>
 8000fee:	4631      	mov	r1, r6
 8000ff0:	4630      	mov	r0, r6
 8000ff2:	e708      	b.n	8000e06 <__udivmoddi4+0xa2>
 8000ff4:	4639      	mov	r1, r7
 8000ff6:	e6e6      	b.n	8000dc6 <__udivmoddi4+0x62>
 8000ff8:	4610      	mov	r0, r2
 8000ffa:	e6fb      	b.n	8000df4 <__udivmoddi4+0x90>
 8000ffc:	4548      	cmp	r0, r9
 8000ffe:	d2a9      	bcs.n	8000f54 <__udivmoddi4+0x1f0>
 8001000:	ebb9 0802 	subs.w	r8, r9, r2
 8001004:	eb65 0e0c 	sbc.w	lr, r5, ip
 8001008:	3b01      	subs	r3, #1
 800100a:	e7a3      	b.n	8000f54 <__udivmoddi4+0x1f0>
 800100c:	4645      	mov	r5, r8
 800100e:	e7ea      	b.n	8000fe6 <__udivmoddi4+0x282>
 8001010:	462b      	mov	r3, r5
 8001012:	e794      	b.n	8000f3e <__udivmoddi4+0x1da>
 8001014:	4640      	mov	r0, r8
 8001016:	e7d1      	b.n	8000fbc <__udivmoddi4+0x258>
 8001018:	46d0      	mov	r8, sl
 800101a:	e77b      	b.n	8000f14 <__udivmoddi4+0x1b0>
 800101c:	3d02      	subs	r5, #2
 800101e:	4462      	add	r2, ip
 8001020:	e732      	b.n	8000e88 <__udivmoddi4+0x124>
 8001022:	4608      	mov	r0, r1
 8001024:	e70a      	b.n	8000e3c <__udivmoddi4+0xd8>
 8001026:	4464      	add	r4, ip
 8001028:	3802      	subs	r0, #2
 800102a:	e742      	b.n	8000eb2 <__udivmoddi4+0x14e>

0800102c <__aeabi_idiv0>:
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop

08001030 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001030:	b590      	push	{r4, r7, lr}
 8001032:	b085      	sub	sp, #20
 8001034:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001036:	f000 ff2a 	bl	8001e8e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800103a:	f000 f851 	bl	80010e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800103e:	f000 f9e3 	bl	8001408 <MX_GPIO_Init>
  MX_ETH_Init();
 8001042:	f000 f8b5 	bl	80011b0 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8001046:	f000 f97f 	bl	8001348 <MX_USART3_UART_Init>
  MX_USB_DEVICE_Init();
 800104a:	f009 fba9 	bl	800a7a0 <MX_USB_DEVICE_Init>
  MX_USART2_UART_Init();
 800104e:	f000 f94b 	bl	80012e8 <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 8001052:	f000 f9a9 	bl	80013a8 <MX_USART6_UART_Init>
  MX_TIM3_Init();
 8001056:	f000 f8f9 	bl	800124c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
HAL_TIM_Base_Start_IT(&TIM_USB_SIMULINK);
 800105a:	4818      	ldr	r0, [pc, #96]	; (80010bc <main+0x8c>)
 800105c:	f004 fa02 	bl	8005464 <HAL_TIM_Base_Start_IT>

//HAL_UART_Receive_IT(&huart2, (uint8_t*)RX_BUF1, 24);/////////////////////////
//HAL_UART_Receive_IT(&huart6, (uint8_t*)RX_BUF2, 24);
//
HAL_UART_Transmit_IT(&huart2, (uint8_t*)TX_BUF1, 16);
 8001060:	2210      	movs	r2, #16
 8001062:	4917      	ldr	r1, [pc, #92]	; (80010c0 <main+0x90>)
 8001064:	4817      	ldr	r0, [pc, #92]	; (80010c4 <main+0x94>)
 8001066:	f004 febb 	bl	8005de0 <HAL_UART_Transmit_IT>
HAL_UART_Transmit_IT(&huart6, (uint8_t*)TX_BUF2, 16);
 800106a:	2210      	movs	r2, #16
 800106c:	4916      	ldr	r1, [pc, #88]	; (80010c8 <main+0x98>)
 800106e:	4817      	ldr	r0, [pc, #92]	; (80010cc <main+0x9c>)
 8001070:	f004 feb6 	bl	8005de0 <HAL_UART_Transmit_IT>
//	  clearErrors(&uart_odrive1);
//	  HAL_Delay(10);
//	  clearErrors(&uart_odrive2);
////	  HAL_Delay(10);

	  uint8_t motor=1;
 8001074:	2301      	movs	r3, #1
 8001076:	71fb      	strb	r3, [r7, #7]
	  float position = desiredPositionFloatNum0.number;
 8001078:	4b15      	ldr	r3, [pc, #84]	; (80010d0 <main+0xa0>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	603b      	str	r3, [r7, #0]
	  sprintf((char*)TX_BUF, "p %u %.3f 0 0\r\n", motor, position);
 800107e:	79fc      	ldrb	r4, [r7, #7]
 8001080:	6838      	ldr	r0, [r7, #0]
 8001082:	f7ff fa81 	bl	8000588 <__aeabi_f2d>
 8001086:	4602      	mov	r2, r0
 8001088:	460b      	mov	r3, r1
 800108a:	e9cd 2300 	strd	r2, r3, [sp]
 800108e:	4622      	mov	r2, r4
 8001090:	4910      	ldr	r1, [pc, #64]	; (80010d4 <main+0xa4>)
 8001092:	4811      	ldr	r0, [pc, #68]	; (80010d8 <main+0xa8>)
 8001094:	f00b f9b6 	bl	800c404 <siprintf>
	  if(position >=0 )
 8001098:	edd7 7a00 	vldr	s15, [r7]
 800109c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80010a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010a4:	db03      	blt.n	80010ae <main+0x7e>
	  {
		  buflen=14;
 80010a6:	4b0d      	ldr	r3, [pc, #52]	; (80010dc <main+0xac>)
 80010a8:	220e      	movs	r2, #14
 80010aa:	701a      	strb	r2, [r3, #0]
 80010ac:	e002      	b.n	80010b4 <main+0x84>
		  //		  HAL_UART_Transmit(&uart_odrive2,TX_BUF ,14, 2000);
	  }
	  else
	  {
//		  HAL_UART_Transmit(&uart_odrive2,TX_BUF ,15, 2000);
		  buflen=15;
 80010ae:	4b0b      	ldr	r3, [pc, #44]	; (80010dc <main+0xac>)
 80010b0:	220f      	movs	r2, #15
 80010b2:	701a      	strb	r2, [r3, #0]
	  }

	  HAL_Delay(100);
 80010b4:	2064      	movs	r0, #100	; 0x64
 80010b6:	f000 ff47 	bl	8001f48 <HAL_Delay>
  {
 80010ba:	e7db      	b.n	8001074 <main+0x44>
 80010bc:	20000518 	.word	0x20000518
 80010c0:	20000740 	.word	0x20000740
 80010c4:	20000564 	.word	0x20000564
 80010c8:	20000774 	.word	0x20000774
 80010cc:	20000674 	.word	0x20000674
 80010d0:	20000ae8 	.word	0x20000ae8
 80010d4:	0800fc8c 	.word	0x0800fc8c
 80010d8:	200007a8 	.word	0x200007a8
 80010dc:	200007c6 	.word	0x200007c6

080010e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b094      	sub	sp, #80	; 0x50
 80010e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010e6:	f107 0320 	add.w	r3, r7, #32
 80010ea:	2230      	movs	r2, #48	; 0x30
 80010ec:	2100      	movs	r1, #0
 80010ee:	4618      	mov	r0, r3
 80010f0:	f00b f9eb 	bl	800c4ca <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010f4:	f107 030c 	add.w	r3, r7, #12
 80010f8:	2200      	movs	r2, #0
 80010fa:	601a      	str	r2, [r3, #0]
 80010fc:	605a      	str	r2, [r3, #4]
 80010fe:	609a      	str	r2, [r3, #8]
 8001100:	60da      	str	r2, [r3, #12]
 8001102:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001104:	f003 f88c 	bl	8004220 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001108:	4b27      	ldr	r3, [pc, #156]	; (80011a8 <SystemClock_Config+0xc8>)
 800110a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800110c:	4a26      	ldr	r2, [pc, #152]	; (80011a8 <SystemClock_Config+0xc8>)
 800110e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001112:	6413      	str	r3, [r2, #64]	; 0x40
 8001114:	4b24      	ldr	r3, [pc, #144]	; (80011a8 <SystemClock_Config+0xc8>)
 8001116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001118:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800111c:	60bb      	str	r3, [r7, #8]
 800111e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001120:	4b22      	ldr	r3, [pc, #136]	; (80011ac <SystemClock_Config+0xcc>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001128:	4a20      	ldr	r2, [pc, #128]	; (80011ac <SystemClock_Config+0xcc>)
 800112a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800112e:	6013      	str	r3, [r2, #0]
 8001130:	4b1e      	ldr	r3, [pc, #120]	; (80011ac <SystemClock_Config+0xcc>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001138:	607b      	str	r3, [r7, #4]
 800113a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800113c:	2301      	movs	r3, #1
 800113e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001140:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001144:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001146:	2302      	movs	r3, #2
 8001148:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800114a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800114e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001150:	2304      	movs	r3, #4
 8001152:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001154:	2348      	movs	r3, #72	; 0x48
 8001156:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001158:	2302      	movs	r3, #2
 800115a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 800115c:	2303      	movs	r3, #3
 800115e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001160:	f107 0320 	add.w	r3, r7, #32
 8001164:	4618      	mov	r0, r3
 8001166:	f003 f86b 	bl	8004240 <HAL_RCC_OscConfig>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d001      	beq.n	8001174 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001170:	f000 fb16 	bl	80017a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001174:	230f      	movs	r3, #15
 8001176:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001178:	2302      	movs	r3, #2
 800117a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800117c:	2300      	movs	r3, #0
 800117e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001180:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001184:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001186:	2300      	movs	r3, #0
 8001188:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800118a:	f107 030c 	add.w	r3, r7, #12
 800118e:	2102      	movs	r1, #2
 8001190:	4618      	mov	r0, r3
 8001192:	f003 faf9 	bl	8004788 <HAL_RCC_ClockConfig>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	d001      	beq.n	80011a0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800119c:	f000 fb00 	bl	80017a0 <Error_Handler>
  }
}
 80011a0:	bf00      	nop
 80011a2:	3750      	adds	r7, #80	; 0x50
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	40023800 	.word	0x40023800
 80011ac:	40007000 	.word	0x40007000

080011b0 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80011b4:	4b1f      	ldr	r3, [pc, #124]	; (8001234 <MX_ETH_Init+0x84>)
 80011b6:	4a20      	ldr	r2, [pc, #128]	; (8001238 <MX_ETH_Init+0x88>)
 80011b8:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80011ba:	4b20      	ldr	r3, [pc, #128]	; (800123c <MX_ETH_Init+0x8c>)
 80011bc:	2200      	movs	r2, #0
 80011be:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80011c0:	4b1e      	ldr	r3, [pc, #120]	; (800123c <MX_ETH_Init+0x8c>)
 80011c2:	2280      	movs	r2, #128	; 0x80
 80011c4:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80011c6:	4b1d      	ldr	r3, [pc, #116]	; (800123c <MX_ETH_Init+0x8c>)
 80011c8:	22e1      	movs	r2, #225	; 0xe1
 80011ca:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80011cc:	4b1b      	ldr	r3, [pc, #108]	; (800123c <MX_ETH_Init+0x8c>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80011d2:	4b1a      	ldr	r3, [pc, #104]	; (800123c <MX_ETH_Init+0x8c>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80011d8:	4b18      	ldr	r3, [pc, #96]	; (800123c <MX_ETH_Init+0x8c>)
 80011da:	2200      	movs	r2, #0
 80011dc:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80011de:	4b15      	ldr	r3, [pc, #84]	; (8001234 <MX_ETH_Init+0x84>)
 80011e0:	4a16      	ldr	r2, [pc, #88]	; (800123c <MX_ETH_Init+0x8c>)
 80011e2:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80011e4:	4b13      	ldr	r3, [pc, #76]	; (8001234 <MX_ETH_Init+0x84>)
 80011e6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80011ea:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80011ec:	4b11      	ldr	r3, [pc, #68]	; (8001234 <MX_ETH_Init+0x84>)
 80011ee:	4a14      	ldr	r2, [pc, #80]	; (8001240 <MX_ETH_Init+0x90>)
 80011f0:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80011f2:	4b10      	ldr	r3, [pc, #64]	; (8001234 <MX_ETH_Init+0x84>)
 80011f4:	4a13      	ldr	r2, [pc, #76]	; (8001244 <MX_ETH_Init+0x94>)
 80011f6:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80011f8:	4b0e      	ldr	r3, [pc, #56]	; (8001234 <MX_ETH_Init+0x84>)
 80011fa:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80011fe:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8001200:	480c      	ldr	r0, [pc, #48]	; (8001234 <MX_ETH_Init+0x84>)
 8001202:	f001 f869 	bl	80022d8 <HAL_ETH_Init>
 8001206:	4603      	mov	r3, r0
 8001208:	2b00      	cmp	r3, #0
 800120a:	d001      	beq.n	8001210 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 800120c:	f000 fac8 	bl	80017a0 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8001210:	2238      	movs	r2, #56	; 0x38
 8001212:	2100      	movs	r1, #0
 8001214:	480c      	ldr	r0, [pc, #48]	; (8001248 <MX_ETH_Init+0x98>)
 8001216:	f00b f958 	bl	800c4ca <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800121a:	4b0b      	ldr	r3, [pc, #44]	; (8001248 <MX_ETH_Init+0x98>)
 800121c:	2221      	movs	r2, #33	; 0x21
 800121e:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8001220:	4b09      	ldr	r3, [pc, #36]	; (8001248 <MX_ETH_Init+0x98>)
 8001222:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8001226:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8001228:	4b07      	ldr	r3, [pc, #28]	; (8001248 <MX_ETH_Init+0x98>)
 800122a:	2200      	movs	r2, #0
 800122c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 800122e:	bf00      	nop
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	20000468 	.word	0x20000468
 8001238:	40028000 	.word	0x40028000
 800123c:	200007c8 	.word	0x200007c8
 8001240:	20000374 	.word	0x20000374
 8001244:	200002d4 	.word	0x200002d4
 8001248:	20000430 	.word	0x20000430

0800124c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b088      	sub	sp, #32
 8001250:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001252:	f107 0310 	add.w	r3, r7, #16
 8001256:	2200      	movs	r2, #0
 8001258:	601a      	str	r2, [r3, #0]
 800125a:	605a      	str	r2, [r3, #4]
 800125c:	609a      	str	r2, [r3, #8]
 800125e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001260:	1d3b      	adds	r3, r7, #4
 8001262:	2200      	movs	r2, #0
 8001264:	601a      	str	r2, [r3, #0]
 8001266:	605a      	str	r2, [r3, #4]
 8001268:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800126a:	4b1d      	ldr	r3, [pc, #116]	; (80012e0 <MX_TIM3_Init+0x94>)
 800126c:	4a1d      	ldr	r2, [pc, #116]	; (80012e4 <MX_TIM3_Init+0x98>)
 800126e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72-1;
 8001270:	4b1b      	ldr	r3, [pc, #108]	; (80012e0 <MX_TIM3_Init+0x94>)
 8001272:	2247      	movs	r2, #71	; 0x47
 8001274:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001276:	4b1a      	ldr	r3, [pc, #104]	; (80012e0 <MX_TIM3_Init+0x94>)
 8001278:	2200      	movs	r2, #0
 800127a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 800127c:	4b18      	ldr	r3, [pc, #96]	; (80012e0 <MX_TIM3_Init+0x94>)
 800127e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001282:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001284:	4b16      	ldr	r3, [pc, #88]	; (80012e0 <MX_TIM3_Init+0x94>)
 8001286:	2200      	movs	r2, #0
 8001288:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800128a:	4b15      	ldr	r3, [pc, #84]	; (80012e0 <MX_TIM3_Init+0x94>)
 800128c:	2200      	movs	r2, #0
 800128e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001290:	4813      	ldr	r0, [pc, #76]	; (80012e0 <MX_TIM3_Init+0x94>)
 8001292:	f004 f88f 	bl	80053b4 <HAL_TIM_Base_Init>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d001      	beq.n	80012a0 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 800129c:	f000 fa80 	bl	80017a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012a4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80012a6:	f107 0310 	add.w	r3, r7, #16
 80012aa:	4619      	mov	r1, r3
 80012ac:	480c      	ldr	r0, [pc, #48]	; (80012e0 <MX_TIM3_Init+0x94>)
 80012ae:	f004 fa71 	bl	8005794 <HAL_TIM_ConfigClockSource>
 80012b2:	4603      	mov	r3, r0
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d001      	beq.n	80012bc <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80012b8:	f000 fa72 	bl	80017a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012bc:	2300      	movs	r3, #0
 80012be:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012c0:	2300      	movs	r3, #0
 80012c2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80012c4:	1d3b      	adds	r3, r7, #4
 80012c6:	4619      	mov	r1, r3
 80012c8:	4805      	ldr	r0, [pc, #20]	; (80012e0 <MX_TIM3_Init+0x94>)
 80012ca:	f004 fc8f 	bl	8005bec <HAL_TIMEx_MasterConfigSynchronization>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d001      	beq.n	80012d8 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80012d4:	f000 fa64 	bl	80017a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80012d8:	bf00      	nop
 80012da:	3720      	adds	r7, #32
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	20000518 	.word	0x20000518
 80012e4:	40000400 	.word	0x40000400

080012e8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80012ec:	4b14      	ldr	r3, [pc, #80]	; (8001340 <MX_USART2_UART_Init+0x58>)
 80012ee:	4a15      	ldr	r2, [pc, #84]	; (8001344 <MX_USART2_UART_Init+0x5c>)
 80012f0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80012f2:	4b13      	ldr	r3, [pc, #76]	; (8001340 <MX_USART2_UART_Init+0x58>)
 80012f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80012f8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80012fa:	4b11      	ldr	r3, [pc, #68]	; (8001340 <MX_USART2_UART_Init+0x58>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001300:	4b0f      	ldr	r3, [pc, #60]	; (8001340 <MX_USART2_UART_Init+0x58>)
 8001302:	2200      	movs	r2, #0
 8001304:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001306:	4b0e      	ldr	r3, [pc, #56]	; (8001340 <MX_USART2_UART_Init+0x58>)
 8001308:	2200      	movs	r2, #0
 800130a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800130c:	4b0c      	ldr	r3, [pc, #48]	; (8001340 <MX_USART2_UART_Init+0x58>)
 800130e:	220c      	movs	r2, #12
 8001310:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001312:	4b0b      	ldr	r3, [pc, #44]	; (8001340 <MX_USART2_UART_Init+0x58>)
 8001314:	2200      	movs	r2, #0
 8001316:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001318:	4b09      	ldr	r3, [pc, #36]	; (8001340 <MX_USART2_UART_Init+0x58>)
 800131a:	2200      	movs	r2, #0
 800131c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800131e:	4b08      	ldr	r3, [pc, #32]	; (8001340 <MX_USART2_UART_Init+0x58>)
 8001320:	2200      	movs	r2, #0
 8001322:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001324:	4b06      	ldr	r3, [pc, #24]	; (8001340 <MX_USART2_UART_Init+0x58>)
 8001326:	2200      	movs	r2, #0
 8001328:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800132a:	4805      	ldr	r0, [pc, #20]	; (8001340 <MX_USART2_UART_Init+0x58>)
 800132c:	f004 fd0a 	bl	8005d44 <HAL_UART_Init>
 8001330:	4603      	mov	r3, r0
 8001332:	2b00      	cmp	r3, #0
 8001334:	d001      	beq.n	800133a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001336:	f000 fa33 	bl	80017a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800133a:	bf00      	nop
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	20000564 	.word	0x20000564
 8001344:	40004400 	.word	0x40004400

08001348 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800134c:	4b14      	ldr	r3, [pc, #80]	; (80013a0 <MX_USART3_UART_Init+0x58>)
 800134e:	4a15      	ldr	r2, [pc, #84]	; (80013a4 <MX_USART3_UART_Init+0x5c>)
 8001350:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001352:	4b13      	ldr	r3, [pc, #76]	; (80013a0 <MX_USART3_UART_Init+0x58>)
 8001354:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001358:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800135a:	4b11      	ldr	r3, [pc, #68]	; (80013a0 <MX_USART3_UART_Init+0x58>)
 800135c:	2200      	movs	r2, #0
 800135e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001360:	4b0f      	ldr	r3, [pc, #60]	; (80013a0 <MX_USART3_UART_Init+0x58>)
 8001362:	2200      	movs	r2, #0
 8001364:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001366:	4b0e      	ldr	r3, [pc, #56]	; (80013a0 <MX_USART3_UART_Init+0x58>)
 8001368:	2200      	movs	r2, #0
 800136a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800136c:	4b0c      	ldr	r3, [pc, #48]	; (80013a0 <MX_USART3_UART_Init+0x58>)
 800136e:	220c      	movs	r2, #12
 8001370:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001372:	4b0b      	ldr	r3, [pc, #44]	; (80013a0 <MX_USART3_UART_Init+0x58>)
 8001374:	2200      	movs	r2, #0
 8001376:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001378:	4b09      	ldr	r3, [pc, #36]	; (80013a0 <MX_USART3_UART_Init+0x58>)
 800137a:	2200      	movs	r2, #0
 800137c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800137e:	4b08      	ldr	r3, [pc, #32]	; (80013a0 <MX_USART3_UART_Init+0x58>)
 8001380:	2200      	movs	r2, #0
 8001382:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001384:	4b06      	ldr	r3, [pc, #24]	; (80013a0 <MX_USART3_UART_Init+0x58>)
 8001386:	2200      	movs	r2, #0
 8001388:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800138a:	4805      	ldr	r0, [pc, #20]	; (80013a0 <MX_USART3_UART_Init+0x58>)
 800138c:	f004 fcda 	bl	8005d44 <HAL_UART_Init>
 8001390:	4603      	mov	r3, r0
 8001392:	2b00      	cmp	r3, #0
 8001394:	d001      	beq.n	800139a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001396:	f000 fa03 	bl	80017a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800139a:	bf00      	nop
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	200005ec 	.word	0x200005ec
 80013a4:	40004800 	.word	0x40004800

080013a8 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80013ac:	4b14      	ldr	r3, [pc, #80]	; (8001400 <MX_USART6_UART_Init+0x58>)
 80013ae:	4a15      	ldr	r2, [pc, #84]	; (8001404 <MX_USART6_UART_Init+0x5c>)
 80013b0:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80013b2:	4b13      	ldr	r3, [pc, #76]	; (8001400 <MX_USART6_UART_Init+0x58>)
 80013b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013b8:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80013ba:	4b11      	ldr	r3, [pc, #68]	; (8001400 <MX_USART6_UART_Init+0x58>)
 80013bc:	2200      	movs	r2, #0
 80013be:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80013c0:	4b0f      	ldr	r3, [pc, #60]	; (8001400 <MX_USART6_UART_Init+0x58>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80013c6:	4b0e      	ldr	r3, [pc, #56]	; (8001400 <MX_USART6_UART_Init+0x58>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80013cc:	4b0c      	ldr	r3, [pc, #48]	; (8001400 <MX_USART6_UART_Init+0x58>)
 80013ce:	220c      	movs	r2, #12
 80013d0:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013d2:	4b0b      	ldr	r3, [pc, #44]	; (8001400 <MX_USART6_UART_Init+0x58>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80013d8:	4b09      	ldr	r3, [pc, #36]	; (8001400 <MX_USART6_UART_Init+0x58>)
 80013da:	2200      	movs	r2, #0
 80013dc:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013de:	4b08      	ldr	r3, [pc, #32]	; (8001400 <MX_USART6_UART_Init+0x58>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013e4:	4b06      	ldr	r3, [pc, #24]	; (8001400 <MX_USART6_UART_Init+0x58>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80013ea:	4805      	ldr	r0, [pc, #20]	; (8001400 <MX_USART6_UART_Init+0x58>)
 80013ec:	f004 fcaa 	bl	8005d44 <HAL_UART_Init>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d001      	beq.n	80013fa <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 80013f6:	f000 f9d3 	bl	80017a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80013fa:	bf00      	nop
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	20000674 	.word	0x20000674
 8001404:	40011400 	.word	0x40011400

08001408 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b08c      	sub	sp, #48	; 0x30
 800140c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800140e:	f107 031c 	add.w	r3, r7, #28
 8001412:	2200      	movs	r2, #0
 8001414:	601a      	str	r2, [r3, #0]
 8001416:	605a      	str	r2, [r3, #4]
 8001418:	609a      	str	r2, [r3, #8]
 800141a:	60da      	str	r2, [r3, #12]
 800141c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800141e:	4b47      	ldr	r3, [pc, #284]	; (800153c <MX_GPIO_Init+0x134>)
 8001420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001422:	4a46      	ldr	r2, [pc, #280]	; (800153c <MX_GPIO_Init+0x134>)
 8001424:	f043 0304 	orr.w	r3, r3, #4
 8001428:	6313      	str	r3, [r2, #48]	; 0x30
 800142a:	4b44      	ldr	r3, [pc, #272]	; (800153c <MX_GPIO_Init+0x134>)
 800142c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142e:	f003 0304 	and.w	r3, r3, #4
 8001432:	61bb      	str	r3, [r7, #24]
 8001434:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001436:	4b41      	ldr	r3, [pc, #260]	; (800153c <MX_GPIO_Init+0x134>)
 8001438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143a:	4a40      	ldr	r2, [pc, #256]	; (800153c <MX_GPIO_Init+0x134>)
 800143c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001440:	6313      	str	r3, [r2, #48]	; 0x30
 8001442:	4b3e      	ldr	r3, [pc, #248]	; (800153c <MX_GPIO_Init+0x134>)
 8001444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001446:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800144a:	617b      	str	r3, [r7, #20]
 800144c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800144e:	4b3b      	ldr	r3, [pc, #236]	; (800153c <MX_GPIO_Init+0x134>)
 8001450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001452:	4a3a      	ldr	r2, [pc, #232]	; (800153c <MX_GPIO_Init+0x134>)
 8001454:	f043 0301 	orr.w	r3, r3, #1
 8001458:	6313      	str	r3, [r2, #48]	; 0x30
 800145a:	4b38      	ldr	r3, [pc, #224]	; (800153c <MX_GPIO_Init+0x134>)
 800145c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145e:	f003 0301 	and.w	r3, r3, #1
 8001462:	613b      	str	r3, [r7, #16]
 8001464:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001466:	4b35      	ldr	r3, [pc, #212]	; (800153c <MX_GPIO_Init+0x134>)
 8001468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146a:	4a34      	ldr	r2, [pc, #208]	; (800153c <MX_GPIO_Init+0x134>)
 800146c:	f043 0302 	orr.w	r3, r3, #2
 8001470:	6313      	str	r3, [r2, #48]	; 0x30
 8001472:	4b32      	ldr	r3, [pc, #200]	; (800153c <MX_GPIO_Init+0x134>)
 8001474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001476:	f003 0302 	and.w	r3, r3, #2
 800147a:	60fb      	str	r3, [r7, #12]
 800147c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800147e:	4b2f      	ldr	r3, [pc, #188]	; (800153c <MX_GPIO_Init+0x134>)
 8001480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001482:	4a2e      	ldr	r2, [pc, #184]	; (800153c <MX_GPIO_Init+0x134>)
 8001484:	f043 0308 	orr.w	r3, r3, #8
 8001488:	6313      	str	r3, [r2, #48]	; 0x30
 800148a:	4b2c      	ldr	r3, [pc, #176]	; (800153c <MX_GPIO_Init+0x134>)
 800148c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148e:	f003 0308 	and.w	r3, r3, #8
 8001492:	60bb      	str	r3, [r7, #8]
 8001494:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001496:	4b29      	ldr	r3, [pc, #164]	; (800153c <MX_GPIO_Init+0x134>)
 8001498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149a:	4a28      	ldr	r2, [pc, #160]	; (800153c <MX_GPIO_Init+0x134>)
 800149c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80014a0:	6313      	str	r3, [r2, #48]	; 0x30
 80014a2:	4b26      	ldr	r3, [pc, #152]	; (800153c <MX_GPIO_Init+0x134>)
 80014a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014aa:	607b      	str	r3, [r7, #4]
 80014ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80014ae:	2200      	movs	r2, #0
 80014b0:	f244 0181 	movw	r1, #16513	; 0x4081
 80014b4:	4822      	ldr	r0, [pc, #136]	; (8001540 <MX_GPIO_Init+0x138>)
 80014b6:	f001 fbe1 	bl	8002c7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80014ba:	2200      	movs	r2, #0
 80014bc:	2140      	movs	r1, #64	; 0x40
 80014be:	4821      	ldr	r0, [pc, #132]	; (8001544 <MX_GPIO_Init+0x13c>)
 80014c0:	f001 fbdc 	bl	8002c7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80014c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80014ca:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80014ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d0:	2300      	movs	r3, #0
 80014d2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80014d4:	f107 031c 	add.w	r3, r7, #28
 80014d8:	4619      	mov	r1, r3
 80014da:	481b      	ldr	r0, [pc, #108]	; (8001548 <MX_GPIO_Init+0x140>)
 80014dc:	f001 fa22 	bl	8002924 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80014e0:	f244 0381 	movw	r3, #16513	; 0x4081
 80014e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014e6:	2301      	movs	r3, #1
 80014e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ea:	2300      	movs	r3, #0
 80014ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ee:	2300      	movs	r3, #0
 80014f0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014f2:	f107 031c 	add.w	r3, r7, #28
 80014f6:	4619      	mov	r1, r3
 80014f8:	4811      	ldr	r0, [pc, #68]	; (8001540 <MX_GPIO_Init+0x138>)
 80014fa:	f001 fa13 	bl	8002924 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80014fe:	2340      	movs	r3, #64	; 0x40
 8001500:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001502:	2301      	movs	r3, #1
 8001504:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001506:	2300      	movs	r3, #0
 8001508:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800150a:	2300      	movs	r3, #0
 800150c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800150e:	f107 031c 	add.w	r3, r7, #28
 8001512:	4619      	mov	r1, r3
 8001514:	480b      	ldr	r0, [pc, #44]	; (8001544 <MX_GPIO_Init+0x13c>)
 8001516:	f001 fa05 	bl	8002924 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800151a:	2380      	movs	r3, #128	; 0x80
 800151c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800151e:	2300      	movs	r3, #0
 8001520:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001522:	2300      	movs	r3, #0
 8001524:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001526:	f107 031c 	add.w	r3, r7, #28
 800152a:	4619      	mov	r1, r3
 800152c:	4805      	ldr	r0, [pc, #20]	; (8001544 <MX_GPIO_Init+0x13c>)
 800152e:	f001 f9f9 	bl	8002924 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001532:	bf00      	nop
 8001534:	3730      	adds	r7, #48	; 0x30
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	40023800 	.word	0x40023800
 8001540:	40020400 	.word	0x40020400
 8001544:	40021800 	.word	0x40021800
 8001548:	40020800 	.word	0x40020800

0800154c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b082      	sub	sp, #8
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
	if(htim == &TIM_USB_SIMULINK)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	4a6a      	ldr	r2, [pc, #424]	; (8001700 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8001558:	4293      	cmp	r3, r2
 800155a:	f040 80cc 	bne.w	80016f6 <HAL_TIM_PeriodElapsedCallback+0x1aa>
	{
		  USB_TX_BUF[0] = '#';
 800155e:	4b69      	ldr	r3, [pc, #420]	; (8001704 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8001560:	2223      	movs	r2, #35	; 0x23
 8001562:	701a      	strb	r2, [r3, #0]
		  USB_TX_BUF[1] = positionFloatNum0.bytes[0];
 8001564:	4b68      	ldr	r3, [pc, #416]	; (8001708 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 8001566:	781a      	ldrb	r2, [r3, #0]
 8001568:	4b66      	ldr	r3, [pc, #408]	; (8001704 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 800156a:	705a      	strb	r2, [r3, #1]
		  USB_TX_BUF[2] = positionFloatNum0.bytes[1];
 800156c:	4b66      	ldr	r3, [pc, #408]	; (8001708 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 800156e:	785a      	ldrb	r2, [r3, #1]
 8001570:	4b64      	ldr	r3, [pc, #400]	; (8001704 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8001572:	709a      	strb	r2, [r3, #2]
		  USB_TX_BUF[3] = positionFloatNum0.bytes[2];
 8001574:	4b64      	ldr	r3, [pc, #400]	; (8001708 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 8001576:	789a      	ldrb	r2, [r3, #2]
 8001578:	4b62      	ldr	r3, [pc, #392]	; (8001704 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 800157a:	70da      	strb	r2, [r3, #3]
		  USB_TX_BUF[4] = positionFloatNum0.bytes[3];
 800157c:	4b62      	ldr	r3, [pc, #392]	; (8001708 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 800157e:	78da      	ldrb	r2, [r3, #3]
 8001580:	4b60      	ldr	r3, [pc, #384]	; (8001704 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8001582:	711a      	strb	r2, [r3, #4]

		  USB_TX_BUF[5] = velocityFloatNum0.bytes[0];
 8001584:	4b61      	ldr	r3, [pc, #388]	; (800170c <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8001586:	781a      	ldrb	r2, [r3, #0]
 8001588:	4b5e      	ldr	r3, [pc, #376]	; (8001704 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 800158a:	715a      	strb	r2, [r3, #5]
		  USB_TX_BUF[6] = velocityFloatNum0.bytes[1];
 800158c:	4b5f      	ldr	r3, [pc, #380]	; (800170c <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 800158e:	785a      	ldrb	r2, [r3, #1]
 8001590:	4b5c      	ldr	r3, [pc, #368]	; (8001704 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8001592:	719a      	strb	r2, [r3, #6]
		  USB_TX_BUF[7] = velocityFloatNum0.bytes[2];
 8001594:	4b5d      	ldr	r3, [pc, #372]	; (800170c <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8001596:	789a      	ldrb	r2, [r3, #2]
 8001598:	4b5a      	ldr	r3, [pc, #360]	; (8001704 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 800159a:	71da      	strb	r2, [r3, #7]
		  USB_TX_BUF[8] = velocityFloatNum0.bytes[3];
 800159c:	4b5b      	ldr	r3, [pc, #364]	; (800170c <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 800159e:	78da      	ldrb	r2, [r3, #3]
 80015a0:	4b58      	ldr	r3, [pc, #352]	; (8001704 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 80015a2:	721a      	strb	r2, [r3, #8]

		  USB_TX_BUF[9] = positionFloatNum1.bytes[0];
 80015a4:	4b5a      	ldr	r3, [pc, #360]	; (8001710 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 80015a6:	781a      	ldrb	r2, [r3, #0]
 80015a8:	4b56      	ldr	r3, [pc, #344]	; (8001704 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 80015aa:	725a      	strb	r2, [r3, #9]
		  USB_TX_BUF[10] = positionFloatNum1.bytes[1];
 80015ac:	4b58      	ldr	r3, [pc, #352]	; (8001710 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 80015ae:	785a      	ldrb	r2, [r3, #1]
 80015b0:	4b54      	ldr	r3, [pc, #336]	; (8001704 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 80015b2:	729a      	strb	r2, [r3, #10]
		  USB_TX_BUF[11] = positionFloatNum1.bytes[2];
 80015b4:	4b56      	ldr	r3, [pc, #344]	; (8001710 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 80015b6:	789a      	ldrb	r2, [r3, #2]
 80015b8:	4b52      	ldr	r3, [pc, #328]	; (8001704 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 80015ba:	72da      	strb	r2, [r3, #11]
		  USB_TX_BUF[12] = positionFloatNum1.bytes[3];
 80015bc:	4b54      	ldr	r3, [pc, #336]	; (8001710 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 80015be:	78da      	ldrb	r2, [r3, #3]
 80015c0:	4b50      	ldr	r3, [pc, #320]	; (8001704 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 80015c2:	731a      	strb	r2, [r3, #12]

		  USB_TX_BUF[13] = velocityFloatNum1.bytes[0];
 80015c4:	4b53      	ldr	r3, [pc, #332]	; (8001714 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 80015c6:	781a      	ldrb	r2, [r3, #0]
 80015c8:	4b4e      	ldr	r3, [pc, #312]	; (8001704 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 80015ca:	735a      	strb	r2, [r3, #13]
		  USB_TX_BUF[14] = velocityFloatNum1.bytes[1];
 80015cc:	4b51      	ldr	r3, [pc, #324]	; (8001714 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 80015ce:	785a      	ldrb	r2, [r3, #1]
 80015d0:	4b4c      	ldr	r3, [pc, #304]	; (8001704 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 80015d2:	739a      	strb	r2, [r3, #14]
		  USB_TX_BUF[15] = velocityFloatNum1.bytes[2];
 80015d4:	4b4f      	ldr	r3, [pc, #316]	; (8001714 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 80015d6:	789a      	ldrb	r2, [r3, #2]
 80015d8:	4b4a      	ldr	r3, [pc, #296]	; (8001704 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 80015da:	73da      	strb	r2, [r3, #15]
		  USB_TX_BUF[16] = velocityFloatNum1.bytes[3];
 80015dc:	4b4d      	ldr	r3, [pc, #308]	; (8001714 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 80015de:	78da      	ldrb	r2, [r3, #3]
 80015e0:	4b48      	ldr	r3, [pc, #288]	; (8001704 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 80015e2:	741a      	strb	r2, [r3, #16]

		  USB_TX_BUF[17] = positionFloatNum2.bytes[0];
 80015e4:	4b4c      	ldr	r3, [pc, #304]	; (8001718 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 80015e6:	781a      	ldrb	r2, [r3, #0]
 80015e8:	4b46      	ldr	r3, [pc, #280]	; (8001704 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 80015ea:	745a      	strb	r2, [r3, #17]
		  USB_TX_BUF[18] = positionFloatNum2.bytes[1];
 80015ec:	4b4a      	ldr	r3, [pc, #296]	; (8001718 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 80015ee:	785a      	ldrb	r2, [r3, #1]
 80015f0:	4b44      	ldr	r3, [pc, #272]	; (8001704 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 80015f2:	749a      	strb	r2, [r3, #18]
		  USB_TX_BUF[19] = positionFloatNum2.bytes[2];
 80015f4:	4b48      	ldr	r3, [pc, #288]	; (8001718 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 80015f6:	789a      	ldrb	r2, [r3, #2]
 80015f8:	4b42      	ldr	r3, [pc, #264]	; (8001704 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 80015fa:	74da      	strb	r2, [r3, #19]
		  USB_TX_BUF[20] = positionFloatNum2.bytes[3];
 80015fc:	4b46      	ldr	r3, [pc, #280]	; (8001718 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 80015fe:	78da      	ldrb	r2, [r3, #3]
 8001600:	4b40      	ldr	r3, [pc, #256]	; (8001704 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8001602:	751a      	strb	r2, [r3, #20]

		  USB_TX_BUF[21] = velocityFloatNum2.bytes[0];
 8001604:	4b45      	ldr	r3, [pc, #276]	; (800171c <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8001606:	781a      	ldrb	r2, [r3, #0]
 8001608:	4b3e      	ldr	r3, [pc, #248]	; (8001704 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 800160a:	755a      	strb	r2, [r3, #21]
		  USB_TX_BUF[22] = velocityFloatNum2.bytes[1];
 800160c:	4b43      	ldr	r3, [pc, #268]	; (800171c <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 800160e:	785a      	ldrb	r2, [r3, #1]
 8001610:	4b3c      	ldr	r3, [pc, #240]	; (8001704 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8001612:	759a      	strb	r2, [r3, #22]
		  USB_TX_BUF[23] = velocityFloatNum2.bytes[2];
 8001614:	4b41      	ldr	r3, [pc, #260]	; (800171c <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8001616:	789a      	ldrb	r2, [r3, #2]
 8001618:	4b3a      	ldr	r3, [pc, #232]	; (8001704 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 800161a:	75da      	strb	r2, [r3, #23]
		  USB_TX_BUF[24] = velocityFloatNum2.bytes[3];
 800161c:	4b3f      	ldr	r3, [pc, #252]	; (800171c <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 800161e:	78da      	ldrb	r2, [r3, #3]
 8001620:	4b38      	ldr	r3, [pc, #224]	; (8001704 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8001622:	761a      	strb	r2, [r3, #24]

		  USB_TX_BUF[25] = positionFloatNum3.bytes[0];
 8001624:	4b3e      	ldr	r3, [pc, #248]	; (8001720 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8001626:	781a      	ldrb	r2, [r3, #0]
 8001628:	4b36      	ldr	r3, [pc, #216]	; (8001704 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 800162a:	765a      	strb	r2, [r3, #25]
		  USB_TX_BUF[26] = positionFloatNum3.bytes[1];
 800162c:	4b3c      	ldr	r3, [pc, #240]	; (8001720 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 800162e:	785a      	ldrb	r2, [r3, #1]
 8001630:	4b34      	ldr	r3, [pc, #208]	; (8001704 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8001632:	769a      	strb	r2, [r3, #26]
		  USB_TX_BUF[27] = positionFloatNum3.bytes[2];
 8001634:	4b3a      	ldr	r3, [pc, #232]	; (8001720 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8001636:	789a      	ldrb	r2, [r3, #2]
 8001638:	4b32      	ldr	r3, [pc, #200]	; (8001704 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 800163a:	76da      	strb	r2, [r3, #27]
		  USB_TX_BUF[28] = positionFloatNum3.bytes[3];
 800163c:	4b38      	ldr	r3, [pc, #224]	; (8001720 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 800163e:	78da      	ldrb	r2, [r3, #3]
 8001640:	4b30      	ldr	r3, [pc, #192]	; (8001704 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8001642:	771a      	strb	r2, [r3, #28]

		  USB_TX_BUF[29] = velocityFloatNum3.bytes[0];
 8001644:	4b37      	ldr	r3, [pc, #220]	; (8001724 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8001646:	781a      	ldrb	r2, [r3, #0]
 8001648:	4b2e      	ldr	r3, [pc, #184]	; (8001704 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 800164a:	775a      	strb	r2, [r3, #29]
		  USB_TX_BUF[30] = velocityFloatNum3.bytes[1];
 800164c:	4b35      	ldr	r3, [pc, #212]	; (8001724 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 800164e:	785a      	ldrb	r2, [r3, #1]
 8001650:	4b2c      	ldr	r3, [pc, #176]	; (8001704 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8001652:	779a      	strb	r2, [r3, #30]
		  USB_TX_BUF[31] = velocityFloatNum3.bytes[2];
 8001654:	4b33      	ldr	r3, [pc, #204]	; (8001724 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8001656:	789a      	ldrb	r2, [r3, #2]
 8001658:	4b2a      	ldr	r3, [pc, #168]	; (8001704 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 800165a:	77da      	strb	r2, [r3, #31]
		  USB_TX_BUF[32] = velocityFloatNum3.bytes[3];
 800165c:	4b31      	ldr	r3, [pc, #196]	; (8001724 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 800165e:	78da      	ldrb	r2, [r3, #3]
 8001660:	4b28      	ldr	r3, [pc, #160]	; (8001704 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8001662:	f883 2020 	strb.w	r2, [r3, #32]

		  USB_TX_BUF[33] = '\n';
 8001666:	4b27      	ldr	r3, [pc, #156]	; (8001704 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8001668:	220a      	movs	r2, #10
 800166a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

		  CDC_Transmit_FS(USB_TX_BUF, 34);//Simulink is getting feedback values at this point
 800166e:	2122      	movs	r1, #34	; 0x22
 8001670:	4824      	ldr	r0, [pc, #144]	; (8001704 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8001672:	f009 f9fb 	bl	800aa6c <CDC_Transmit_FS>
		  // Maybe i can split every feedback and send them in order. It could be the problem

		 desiredPositionFloatNum0.bytes[0] = USB_RX_Buf[1];
 8001676:	4b2c      	ldr	r3, [pc, #176]	; (8001728 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8001678:	785a      	ldrb	r2, [r3, #1]
 800167a:	4b2c      	ldr	r3, [pc, #176]	; (800172c <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 800167c:	701a      	strb	r2, [r3, #0]
		 desiredPositionFloatNum0.bytes[1] = USB_RX_Buf[2];
 800167e:	4b2a      	ldr	r3, [pc, #168]	; (8001728 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8001680:	789a      	ldrb	r2, [r3, #2]
 8001682:	4b2a      	ldr	r3, [pc, #168]	; (800172c <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8001684:	705a      	strb	r2, [r3, #1]
		 desiredPositionFloatNum0.bytes[2] = USB_RX_Buf[3];
 8001686:	4b28      	ldr	r3, [pc, #160]	; (8001728 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8001688:	78da      	ldrb	r2, [r3, #3]
 800168a:	4b28      	ldr	r3, [pc, #160]	; (800172c <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 800168c:	709a      	strb	r2, [r3, #2]
		 desiredPositionFloatNum0.bytes[3] = USB_RX_Buf[4];
 800168e:	4b26      	ldr	r3, [pc, #152]	; (8001728 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8001690:	791a      	ldrb	r2, [r3, #4]
 8001692:	4b26      	ldr	r3, [pc, #152]	; (800172c <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8001694:	70da      	strb	r2, [r3, #3]
		 desiredPositionFloatNum1.bytes[0] = USB_RX_Buf[5];
 8001696:	4b24      	ldr	r3, [pc, #144]	; (8001728 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8001698:	795a      	ldrb	r2, [r3, #5]
 800169a:	4b25      	ldr	r3, [pc, #148]	; (8001730 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 800169c:	701a      	strb	r2, [r3, #0]
		 desiredPositionFloatNum1.bytes[1] = USB_RX_Buf[6];
 800169e:	4b22      	ldr	r3, [pc, #136]	; (8001728 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 80016a0:	799a      	ldrb	r2, [r3, #6]
 80016a2:	4b23      	ldr	r3, [pc, #140]	; (8001730 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 80016a4:	705a      	strb	r2, [r3, #1]
		 desiredPositionFloatNum1.bytes[2] = USB_RX_Buf[7];
 80016a6:	4b20      	ldr	r3, [pc, #128]	; (8001728 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 80016a8:	79da      	ldrb	r2, [r3, #7]
 80016aa:	4b21      	ldr	r3, [pc, #132]	; (8001730 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 80016ac:	709a      	strb	r2, [r3, #2]
		 desiredPositionFloatNum1.bytes[3] = USB_RX_Buf[8];
 80016ae:	4b1e      	ldr	r3, [pc, #120]	; (8001728 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 80016b0:	7a1a      	ldrb	r2, [r3, #8]
 80016b2:	4b1f      	ldr	r3, [pc, #124]	; (8001730 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 80016b4:	70da      	strb	r2, [r3, #3]
		 desiredPositionFloatNum2.bytes[0] = USB_RX_Buf[9];
 80016b6:	4b1c      	ldr	r3, [pc, #112]	; (8001728 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 80016b8:	7a5a      	ldrb	r2, [r3, #9]
 80016ba:	4b1e      	ldr	r3, [pc, #120]	; (8001734 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 80016bc:	701a      	strb	r2, [r3, #0]
		 desiredPositionFloatNum2.bytes[1] = USB_RX_Buf[10];
 80016be:	4b1a      	ldr	r3, [pc, #104]	; (8001728 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 80016c0:	7a9a      	ldrb	r2, [r3, #10]
 80016c2:	4b1c      	ldr	r3, [pc, #112]	; (8001734 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 80016c4:	705a      	strb	r2, [r3, #1]
		 desiredPositionFloatNum2.bytes[2] = USB_RX_Buf[11];
 80016c6:	4b18      	ldr	r3, [pc, #96]	; (8001728 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 80016c8:	7ada      	ldrb	r2, [r3, #11]
 80016ca:	4b1a      	ldr	r3, [pc, #104]	; (8001734 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 80016cc:	709a      	strb	r2, [r3, #2]
		 desiredPositionFloatNum2.bytes[3] = USB_RX_Buf[12];
 80016ce:	4b16      	ldr	r3, [pc, #88]	; (8001728 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 80016d0:	7b1a      	ldrb	r2, [r3, #12]
 80016d2:	4b18      	ldr	r3, [pc, #96]	; (8001734 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 80016d4:	70da      	strb	r2, [r3, #3]
		 desiredPositionFloatNum3.bytes[0] = USB_RX_Buf[13];
 80016d6:	4b14      	ldr	r3, [pc, #80]	; (8001728 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 80016d8:	7b5a      	ldrb	r2, [r3, #13]
 80016da:	4b17      	ldr	r3, [pc, #92]	; (8001738 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 80016dc:	701a      	strb	r2, [r3, #0]
		 desiredPositionFloatNum3.bytes[1] = USB_RX_Buf[14];
 80016de:	4b12      	ldr	r3, [pc, #72]	; (8001728 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 80016e0:	7b9a      	ldrb	r2, [r3, #14]
 80016e2:	4b15      	ldr	r3, [pc, #84]	; (8001738 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 80016e4:	705a      	strb	r2, [r3, #1]
		 desiredPositionFloatNum3.bytes[2] = USB_RX_Buf[15];
 80016e6:	4b10      	ldr	r3, [pc, #64]	; (8001728 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 80016e8:	7bda      	ldrb	r2, [r3, #15]
 80016ea:	4b13      	ldr	r3, [pc, #76]	; (8001738 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 80016ec:	709a      	strb	r2, [r3, #2]
		 desiredPositionFloatNum3.bytes[3] = USB_RX_Buf[16];
 80016ee:	4b0e      	ldr	r3, [pc, #56]	; (8001728 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 80016f0:	7c1a      	ldrb	r2, [r3, #16]
 80016f2:	4b11      	ldr	r3, [pc, #68]	; (8001738 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 80016f4:	70da      	strb	r2, [r3, #3]
	}
}
 80016f6:	bf00      	nop
 80016f8:	3708      	adds	r7, #8
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	20000518 	.word	0x20000518
 8001704:	200006fc 	.word	0x200006fc
 8001708:	20000720 	.word	0x20000720
 800170c:	20000730 	.word	0x20000730
 8001710:	20000724 	.word	0x20000724
 8001714:	20000734 	.word	0x20000734
 8001718:	20000728 	.word	0x20000728
 800171c:	20000738 	.word	0x20000738
 8001720:	2000072c 	.word	0x2000072c
 8001724:	2000073c 	.word	0x2000073c
 8001728:	20000ac0 	.word	0x20000ac0
 800172c:	20000ae8 	.word	0x20000ae8
 8001730:	20000aec 	.word	0x20000aec
 8001734:	20000af0 	.word	0x20000af0
 8001738:	20000af4 	.word	0x20000af4

0800173c <HAL_UART_TxCpltCallback>:
		HAL_UART_Receive_IT(&huart6, (uint8_t*)RX_BUF2, 24);
		//Actually making an endless loop will be better. Store values at Buff and then interpret them
	}
}
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b082      	sub	sp, #8
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART2) // GPS Transmit
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4a0e      	ldr	r2, [pc, #56]	; (8001784 <HAL_UART_TxCpltCallback+0x48>)
 800174a:	4293      	cmp	r3, r2
 800174c:	d108      	bne.n	8001760 <HAL_UART_TxCpltCallback+0x24>
//		if(motor_count1 == 0)
//			num = desiredPositionFloatNum0.number;
//		else
//			num = desiredPositionFloatNum1.number;
//		sprintf((char*)TX_BUF1, "p %u %.3f\r\nf %u\r\n", motor_count1, num, motor_count1);//preparing buff for transmit
		HAL_UART_Transmit_IT(&huart2, (uint8_t*)TX_BUF1, buflen);// at the same time, feedback request has been made
 800174e:	4b0e      	ldr	r3, [pc, #56]	; (8001788 <HAL_UART_TxCpltCallback+0x4c>)
 8001750:	781b      	ldrb	r3, [r3, #0]
 8001752:	b29b      	uxth	r3, r3
 8001754:	461a      	mov	r2, r3
 8001756:	490d      	ldr	r1, [pc, #52]	; (800178c <HAL_UART_TxCpltCallback+0x50>)
 8001758:	480d      	ldr	r0, [pc, #52]	; (8001790 <HAL_UART_TxCpltCallback+0x54>)
 800175a:	f004 fb41 	bl	8005de0 <HAL_UART_Transmit_IT>

//		motor_count2++;
//		if(motor_count2 == 2)
//			motor_count2 = 0;
	}
}
 800175e:	e00c      	b.n	800177a <HAL_UART_TxCpltCallback+0x3e>
	else if(huart->Instance == USART6)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4a0b      	ldr	r2, [pc, #44]	; (8001794 <HAL_UART_TxCpltCallback+0x58>)
 8001766:	4293      	cmp	r3, r2
 8001768:	d107      	bne.n	800177a <HAL_UART_TxCpltCallback+0x3e>
		HAL_UART_Transmit_IT(&huart6, (uint8_t*)TX_BUF, buflen);
 800176a:	4b07      	ldr	r3, [pc, #28]	; (8001788 <HAL_UART_TxCpltCallback+0x4c>)
 800176c:	781b      	ldrb	r3, [r3, #0]
 800176e:	b29b      	uxth	r3, r3
 8001770:	461a      	mov	r2, r3
 8001772:	4909      	ldr	r1, [pc, #36]	; (8001798 <HAL_UART_TxCpltCallback+0x5c>)
 8001774:	4809      	ldr	r0, [pc, #36]	; (800179c <HAL_UART_TxCpltCallback+0x60>)
 8001776:	f004 fb33 	bl	8005de0 <HAL_UART_Transmit_IT>
}
 800177a:	bf00      	nop
 800177c:	3708      	adds	r7, #8
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	40004400 	.word	0x40004400
 8001788:	200007c6 	.word	0x200007c6
 800178c:	20000740 	.word	0x20000740
 8001790:	20000564 	.word	0x20000564
 8001794:	40011400 	.word	0x40011400
 8001798:	200007a8 	.word	0x200007a8
 800179c:	20000674 	.word	0x20000674

080017a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017a0:	b480      	push	{r7}
 80017a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017a4:	b672      	cpsid	i
}
 80017a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017a8:	e7fe      	b.n	80017a8 <Error_Handler+0x8>
	...

080017ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	b083      	sub	sp, #12
 80017b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80017b2:	4b0f      	ldr	r3, [pc, #60]	; (80017f0 <HAL_MspInit+0x44>)
 80017b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b6:	4a0e      	ldr	r2, [pc, #56]	; (80017f0 <HAL_MspInit+0x44>)
 80017b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017bc:	6413      	str	r3, [r2, #64]	; 0x40
 80017be:	4b0c      	ldr	r3, [pc, #48]	; (80017f0 <HAL_MspInit+0x44>)
 80017c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017c6:	607b      	str	r3, [r7, #4]
 80017c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017ca:	4b09      	ldr	r3, [pc, #36]	; (80017f0 <HAL_MspInit+0x44>)
 80017cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ce:	4a08      	ldr	r2, [pc, #32]	; (80017f0 <HAL_MspInit+0x44>)
 80017d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017d4:	6453      	str	r3, [r2, #68]	; 0x44
 80017d6:	4b06      	ldr	r3, [pc, #24]	; (80017f0 <HAL_MspInit+0x44>)
 80017d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017de:	603b      	str	r3, [r7, #0]
 80017e0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017e2:	bf00      	nop
 80017e4:	370c      	adds	r7, #12
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr
 80017ee:	bf00      	nop
 80017f0:	40023800 	.word	0x40023800

080017f4 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b08e      	sub	sp, #56	; 0x38
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001800:	2200      	movs	r2, #0
 8001802:	601a      	str	r2, [r3, #0]
 8001804:	605a      	str	r2, [r3, #4]
 8001806:	609a      	str	r2, [r3, #8]
 8001808:	60da      	str	r2, [r3, #12]
 800180a:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a4e      	ldr	r2, [pc, #312]	; (800194c <HAL_ETH_MspInit+0x158>)
 8001812:	4293      	cmp	r3, r2
 8001814:	f040 8096 	bne.w	8001944 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8001818:	4b4d      	ldr	r3, [pc, #308]	; (8001950 <HAL_ETH_MspInit+0x15c>)
 800181a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181c:	4a4c      	ldr	r2, [pc, #304]	; (8001950 <HAL_ETH_MspInit+0x15c>)
 800181e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001822:	6313      	str	r3, [r2, #48]	; 0x30
 8001824:	4b4a      	ldr	r3, [pc, #296]	; (8001950 <HAL_ETH_MspInit+0x15c>)
 8001826:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001828:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800182c:	623b      	str	r3, [r7, #32]
 800182e:	6a3b      	ldr	r3, [r7, #32]
 8001830:	4b47      	ldr	r3, [pc, #284]	; (8001950 <HAL_ETH_MspInit+0x15c>)
 8001832:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001834:	4a46      	ldr	r2, [pc, #280]	; (8001950 <HAL_ETH_MspInit+0x15c>)
 8001836:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800183a:	6313      	str	r3, [r2, #48]	; 0x30
 800183c:	4b44      	ldr	r3, [pc, #272]	; (8001950 <HAL_ETH_MspInit+0x15c>)
 800183e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001840:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001844:	61fb      	str	r3, [r7, #28]
 8001846:	69fb      	ldr	r3, [r7, #28]
 8001848:	4b41      	ldr	r3, [pc, #260]	; (8001950 <HAL_ETH_MspInit+0x15c>)
 800184a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800184c:	4a40      	ldr	r2, [pc, #256]	; (8001950 <HAL_ETH_MspInit+0x15c>)
 800184e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001852:	6313      	str	r3, [r2, #48]	; 0x30
 8001854:	4b3e      	ldr	r3, [pc, #248]	; (8001950 <HAL_ETH_MspInit+0x15c>)
 8001856:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001858:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800185c:	61bb      	str	r3, [r7, #24]
 800185e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001860:	4b3b      	ldr	r3, [pc, #236]	; (8001950 <HAL_ETH_MspInit+0x15c>)
 8001862:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001864:	4a3a      	ldr	r2, [pc, #232]	; (8001950 <HAL_ETH_MspInit+0x15c>)
 8001866:	f043 0304 	orr.w	r3, r3, #4
 800186a:	6313      	str	r3, [r2, #48]	; 0x30
 800186c:	4b38      	ldr	r3, [pc, #224]	; (8001950 <HAL_ETH_MspInit+0x15c>)
 800186e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001870:	f003 0304 	and.w	r3, r3, #4
 8001874:	617b      	str	r3, [r7, #20]
 8001876:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001878:	4b35      	ldr	r3, [pc, #212]	; (8001950 <HAL_ETH_MspInit+0x15c>)
 800187a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187c:	4a34      	ldr	r2, [pc, #208]	; (8001950 <HAL_ETH_MspInit+0x15c>)
 800187e:	f043 0301 	orr.w	r3, r3, #1
 8001882:	6313      	str	r3, [r2, #48]	; 0x30
 8001884:	4b32      	ldr	r3, [pc, #200]	; (8001950 <HAL_ETH_MspInit+0x15c>)
 8001886:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001888:	f003 0301 	and.w	r3, r3, #1
 800188c:	613b      	str	r3, [r7, #16]
 800188e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001890:	4b2f      	ldr	r3, [pc, #188]	; (8001950 <HAL_ETH_MspInit+0x15c>)
 8001892:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001894:	4a2e      	ldr	r2, [pc, #184]	; (8001950 <HAL_ETH_MspInit+0x15c>)
 8001896:	f043 0302 	orr.w	r3, r3, #2
 800189a:	6313      	str	r3, [r2, #48]	; 0x30
 800189c:	4b2c      	ldr	r3, [pc, #176]	; (8001950 <HAL_ETH_MspInit+0x15c>)
 800189e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a0:	f003 0302 	and.w	r3, r3, #2
 80018a4:	60fb      	str	r3, [r7, #12]
 80018a6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80018a8:	4b29      	ldr	r3, [pc, #164]	; (8001950 <HAL_ETH_MspInit+0x15c>)
 80018aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ac:	4a28      	ldr	r2, [pc, #160]	; (8001950 <HAL_ETH_MspInit+0x15c>)
 80018ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80018b2:	6313      	str	r3, [r2, #48]	; 0x30
 80018b4:	4b26      	ldr	r3, [pc, #152]	; (8001950 <HAL_ETH_MspInit+0x15c>)
 80018b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018bc:	60bb      	str	r3, [r7, #8]
 80018be:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80018c0:	2332      	movs	r3, #50	; 0x32
 80018c2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018c4:	2302      	movs	r3, #2
 80018c6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c8:	2300      	movs	r3, #0
 80018ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018cc:	2303      	movs	r3, #3
 80018ce:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80018d0:	230b      	movs	r3, #11
 80018d2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018d8:	4619      	mov	r1, r3
 80018da:	481e      	ldr	r0, [pc, #120]	; (8001954 <HAL_ETH_MspInit+0x160>)
 80018dc:	f001 f822 	bl	8002924 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80018e0:	2386      	movs	r3, #134	; 0x86
 80018e2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018e4:	2302      	movs	r3, #2
 80018e6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e8:	2300      	movs	r3, #0
 80018ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018ec:	2303      	movs	r3, #3
 80018ee:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80018f0:	230b      	movs	r3, #11
 80018f2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018f8:	4619      	mov	r1, r3
 80018fa:	4817      	ldr	r0, [pc, #92]	; (8001958 <HAL_ETH_MspInit+0x164>)
 80018fc:	f001 f812 	bl	8002924 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001900:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001904:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001906:	2302      	movs	r3, #2
 8001908:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800190a:	2300      	movs	r3, #0
 800190c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800190e:	2303      	movs	r3, #3
 8001910:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001912:	230b      	movs	r3, #11
 8001914:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001916:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800191a:	4619      	mov	r1, r3
 800191c:	480f      	ldr	r0, [pc, #60]	; (800195c <HAL_ETH_MspInit+0x168>)
 800191e:	f001 f801 	bl	8002924 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001922:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001926:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001928:	2302      	movs	r3, #2
 800192a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800192c:	2300      	movs	r3, #0
 800192e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001930:	2303      	movs	r3, #3
 8001932:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001934:	230b      	movs	r3, #11
 8001936:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001938:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800193c:	4619      	mov	r1, r3
 800193e:	4808      	ldr	r0, [pc, #32]	; (8001960 <HAL_ETH_MspInit+0x16c>)
 8001940:	f000 fff0 	bl	8002924 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8001944:	bf00      	nop
 8001946:	3738      	adds	r7, #56	; 0x38
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}
 800194c:	40028000 	.word	0x40028000
 8001950:	40023800 	.word	0x40023800
 8001954:	40020800 	.word	0x40020800
 8001958:	40020000 	.word	0x40020000
 800195c:	40020400 	.word	0x40020400
 8001960:	40021800 	.word	0x40021800

08001964 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b084      	sub	sp, #16
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a0d      	ldr	r2, [pc, #52]	; (80019a8 <HAL_TIM_Base_MspInit+0x44>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d113      	bne.n	800199e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001976:	4b0d      	ldr	r3, [pc, #52]	; (80019ac <HAL_TIM_Base_MspInit+0x48>)
 8001978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800197a:	4a0c      	ldr	r2, [pc, #48]	; (80019ac <HAL_TIM_Base_MspInit+0x48>)
 800197c:	f043 0302 	orr.w	r3, r3, #2
 8001980:	6413      	str	r3, [r2, #64]	; 0x40
 8001982:	4b0a      	ldr	r3, [pc, #40]	; (80019ac <HAL_TIM_Base_MspInit+0x48>)
 8001984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001986:	f003 0302 	and.w	r3, r3, #2
 800198a:	60fb      	str	r3, [r7, #12]
 800198c:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 3, 0);
 800198e:	2200      	movs	r2, #0
 8001990:	2103      	movs	r1, #3
 8001992:	201d      	movs	r0, #29
 8001994:	f000 fbd7 	bl	8002146 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001998:	201d      	movs	r0, #29
 800199a:	f000 fbf0 	bl	800217e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800199e:	bf00      	nop
 80019a0:	3710      	adds	r7, #16
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	40000400 	.word	0x40000400
 80019ac:	40023800 	.word	0x40023800

080019b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b0b0      	sub	sp, #192	; 0xc0
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019b8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80019bc:	2200      	movs	r2, #0
 80019be:	601a      	str	r2, [r3, #0]
 80019c0:	605a      	str	r2, [r3, #4]
 80019c2:	609a      	str	r2, [r3, #8]
 80019c4:	60da      	str	r2, [r3, #12]
 80019c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80019c8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80019cc:	2284      	movs	r2, #132	; 0x84
 80019ce:	2100      	movs	r1, #0
 80019d0:	4618      	mov	r0, r3
 80019d2:	f00a fd7a 	bl	800c4ca <memset>
  if(huart->Instance==USART2)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4a7c      	ldr	r2, [pc, #496]	; (8001bcc <HAL_UART_MspInit+0x21c>)
 80019dc:	4293      	cmp	r3, r2
 80019de:	d164      	bne.n	8001aaa <HAL_UART_MspInit+0xfa>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80019e0:	2380      	movs	r3, #128	; 0x80
 80019e2:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80019e4:	2300      	movs	r3, #0
 80019e6:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80019e8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80019ec:	4618      	mov	r0, r3
 80019ee:	f003 f8f1 	bl	8004bd4 <HAL_RCCEx_PeriphCLKConfig>
 80019f2:	4603      	mov	r3, r0
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d001      	beq.n	80019fc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80019f8:	f7ff fed2 	bl	80017a0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80019fc:	4b74      	ldr	r3, [pc, #464]	; (8001bd0 <HAL_UART_MspInit+0x220>)
 80019fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a00:	4a73      	ldr	r2, [pc, #460]	; (8001bd0 <HAL_UART_MspInit+0x220>)
 8001a02:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a06:	6413      	str	r3, [r2, #64]	; 0x40
 8001a08:	4b71      	ldr	r3, [pc, #452]	; (8001bd0 <HAL_UART_MspInit+0x220>)
 8001a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a10:	627b      	str	r3, [r7, #36]	; 0x24
 8001a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a14:	4b6e      	ldr	r3, [pc, #440]	; (8001bd0 <HAL_UART_MspInit+0x220>)
 8001a16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a18:	4a6d      	ldr	r2, [pc, #436]	; (8001bd0 <HAL_UART_MspInit+0x220>)
 8001a1a:	f043 0301 	orr.w	r3, r3, #1
 8001a1e:	6313      	str	r3, [r2, #48]	; 0x30
 8001a20:	4b6b      	ldr	r3, [pc, #428]	; (8001bd0 <HAL_UART_MspInit+0x220>)
 8001a22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a24:	f003 0301 	and.w	r3, r3, #1
 8001a28:	623b      	str	r3, [r7, #32]
 8001a2a:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a2c:	4b68      	ldr	r3, [pc, #416]	; (8001bd0 <HAL_UART_MspInit+0x220>)
 8001a2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a30:	4a67      	ldr	r2, [pc, #412]	; (8001bd0 <HAL_UART_MspInit+0x220>)
 8001a32:	f043 0308 	orr.w	r3, r3, #8
 8001a36:	6313      	str	r3, [r2, #48]	; 0x30
 8001a38:	4b65      	ldr	r3, [pc, #404]	; (8001bd0 <HAL_UART_MspInit+0x220>)
 8001a3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a3c:	f003 0308 	and.w	r3, r3, #8
 8001a40:	61fb      	str	r3, [r7, #28]
 8001a42:	69fb      	ldr	r3, [r7, #28]
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001a44:	2308      	movs	r3, #8
 8001a46:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a4a:	2302      	movs	r3, #2
 8001a4c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a50:	2300      	movs	r3, #0
 8001a52:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a56:	2303      	movs	r3, #3
 8001a58:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001a5c:	2307      	movs	r3, #7
 8001a5e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a62:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001a66:	4619      	mov	r1, r3
 8001a68:	485a      	ldr	r0, [pc, #360]	; (8001bd4 <HAL_UART_MspInit+0x224>)
 8001a6a:	f000 ff5b 	bl	8002924 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001a6e:	2320      	movs	r3, #32
 8001a70:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a74:	2302      	movs	r3, #2
 8001a76:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a80:	2303      	movs	r3, #3
 8001a82:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001a86:	2307      	movs	r3, #7
 8001a88:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a8c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001a90:	4619      	mov	r1, r3
 8001a92:	4851      	ldr	r0, [pc, #324]	; (8001bd8 <HAL_UART_MspInit+0x228>)
 8001a94:	f000 ff46 	bl	8002924 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001a98:	2200      	movs	r2, #0
 8001a9a:	2100      	movs	r1, #0
 8001a9c:	2026      	movs	r0, #38	; 0x26
 8001a9e:	f000 fb52 	bl	8002146 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001aa2:	2026      	movs	r0, #38	; 0x26
 8001aa4:	f000 fb6b 	bl	800217e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001aa8:	e08c      	b.n	8001bc4 <HAL_UART_MspInit+0x214>
  else if(huart->Instance==USART3)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4a4b      	ldr	r2, [pc, #300]	; (8001bdc <HAL_UART_MspInit+0x22c>)
 8001ab0:	4293      	cmp	r3, r2
 8001ab2:	d13d      	bne.n	8001b30 <HAL_UART_MspInit+0x180>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001ab4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ab8:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001aba:	2300      	movs	r3, #0
 8001abc:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001abe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f003 f886 	bl	8004bd4 <HAL_RCCEx_PeriphCLKConfig>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d001      	beq.n	8001ad2 <HAL_UART_MspInit+0x122>
      Error_Handler();
 8001ace:	f7ff fe67 	bl	80017a0 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001ad2:	4b3f      	ldr	r3, [pc, #252]	; (8001bd0 <HAL_UART_MspInit+0x220>)
 8001ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad6:	4a3e      	ldr	r2, [pc, #248]	; (8001bd0 <HAL_UART_MspInit+0x220>)
 8001ad8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001adc:	6413      	str	r3, [r2, #64]	; 0x40
 8001ade:	4b3c      	ldr	r3, [pc, #240]	; (8001bd0 <HAL_UART_MspInit+0x220>)
 8001ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ae6:	61bb      	str	r3, [r7, #24]
 8001ae8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001aea:	4b39      	ldr	r3, [pc, #228]	; (8001bd0 <HAL_UART_MspInit+0x220>)
 8001aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aee:	4a38      	ldr	r2, [pc, #224]	; (8001bd0 <HAL_UART_MspInit+0x220>)
 8001af0:	f043 0308 	orr.w	r3, r3, #8
 8001af4:	6313      	str	r3, [r2, #48]	; 0x30
 8001af6:	4b36      	ldr	r3, [pc, #216]	; (8001bd0 <HAL_UART_MspInit+0x220>)
 8001af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001afa:	f003 0308 	and.w	r3, r3, #8
 8001afe:	617b      	str	r3, [r7, #20]
 8001b00:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001b02:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001b06:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b0a:	2302      	movs	r3, #2
 8001b0c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b10:	2301      	movs	r3, #1
 8001b12:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b16:	2303      	movs	r3, #3
 8001b18:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001b1c:	2307      	movs	r3, #7
 8001b1e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b22:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001b26:	4619      	mov	r1, r3
 8001b28:	482b      	ldr	r0, [pc, #172]	; (8001bd8 <HAL_UART_MspInit+0x228>)
 8001b2a:	f000 fefb 	bl	8002924 <HAL_GPIO_Init>
}
 8001b2e:	e049      	b.n	8001bc4 <HAL_UART_MspInit+0x214>
  else if(huart->Instance==USART6)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a2a      	ldr	r2, [pc, #168]	; (8001be0 <HAL_UART_MspInit+0x230>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d144      	bne.n	8001bc4 <HAL_UART_MspInit+0x214>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8001b3a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001b3e:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8001b40:	2300      	movs	r3, #0
 8001b42:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b46:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f003 f842 	bl	8004bd4 <HAL_RCCEx_PeriphCLKConfig>
 8001b50:	4603      	mov	r3, r0
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d001      	beq.n	8001b5a <HAL_UART_MspInit+0x1aa>
      Error_Handler();
 8001b56:	f7ff fe23 	bl	80017a0 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001b5a:	4b1d      	ldr	r3, [pc, #116]	; (8001bd0 <HAL_UART_MspInit+0x220>)
 8001b5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b5e:	4a1c      	ldr	r2, [pc, #112]	; (8001bd0 <HAL_UART_MspInit+0x220>)
 8001b60:	f043 0320 	orr.w	r3, r3, #32
 8001b64:	6453      	str	r3, [r2, #68]	; 0x44
 8001b66:	4b1a      	ldr	r3, [pc, #104]	; (8001bd0 <HAL_UART_MspInit+0x220>)
 8001b68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b6a:	f003 0320 	and.w	r3, r3, #32
 8001b6e:	613b      	str	r3, [r7, #16]
 8001b70:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b72:	4b17      	ldr	r3, [pc, #92]	; (8001bd0 <HAL_UART_MspInit+0x220>)
 8001b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b76:	4a16      	ldr	r2, [pc, #88]	; (8001bd0 <HAL_UART_MspInit+0x220>)
 8001b78:	f043 0304 	orr.w	r3, r3, #4
 8001b7c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b7e:	4b14      	ldr	r3, [pc, #80]	; (8001bd0 <HAL_UART_MspInit+0x220>)
 8001b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b82:	f003 0304 	and.w	r3, r3, #4
 8001b86:	60fb      	str	r3, [r7, #12]
 8001b88:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001b8a:	23c0      	movs	r3, #192	; 0xc0
 8001b8c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b90:	2302      	movs	r3, #2
 8001b92:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b96:	2300      	movs	r3, #0
 8001b98:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b9c:	2303      	movs	r3, #3
 8001b9e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001ba2:	2308      	movs	r3, #8
 8001ba4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ba8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001bac:	4619      	mov	r1, r3
 8001bae:	480d      	ldr	r0, [pc, #52]	; (8001be4 <HAL_UART_MspInit+0x234>)
 8001bb0:	f000 feb8 	bl	8002924 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	2100      	movs	r1, #0
 8001bb8:	2047      	movs	r0, #71	; 0x47
 8001bba:	f000 fac4 	bl	8002146 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001bbe:	2047      	movs	r0, #71	; 0x47
 8001bc0:	f000 fadd 	bl	800217e <HAL_NVIC_EnableIRQ>
}
 8001bc4:	bf00      	nop
 8001bc6:	37c0      	adds	r7, #192	; 0xc0
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}
 8001bcc:	40004400 	.word	0x40004400
 8001bd0:	40023800 	.word	0x40023800
 8001bd4:	40020000 	.word	0x40020000
 8001bd8:	40020c00 	.word	0x40020c00
 8001bdc:	40004800 	.word	0x40004800
 8001be0:	40011400 	.word	0x40011400
 8001be4:	40020800 	.word	0x40020800

08001be8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001be8:	b480      	push	{r7}
 8001bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001bec:	e7fe      	b.n	8001bec <NMI_Handler+0x4>

08001bee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bee:	b480      	push	{r7}
 8001bf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bf2:	e7fe      	b.n	8001bf2 <HardFault_Handler+0x4>

08001bf4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bf8:	e7fe      	b.n	8001bf8 <MemManage_Handler+0x4>

08001bfa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bfa:	b480      	push	{r7}
 8001bfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bfe:	e7fe      	b.n	8001bfe <BusFault_Handler+0x4>

08001c00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c00:	b480      	push	{r7}
 8001c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c04:	e7fe      	b.n	8001c04 <UsageFault_Handler+0x4>

08001c06 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c06:	b480      	push	{r7}
 8001c08:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c0a:	bf00      	nop
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c12:	4770      	bx	lr

08001c14 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c14:	b480      	push	{r7}
 8001c16:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c18:	bf00      	nop
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c20:	4770      	bx	lr

08001c22 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c22:	b480      	push	{r7}
 8001c24:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c26:	bf00      	nop
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2e:	4770      	bx	lr

08001c30 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c34:	f000 f968 	bl	8001f08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c38:	bf00      	nop
 8001c3a:	bd80      	pop	{r7, pc}

08001c3c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001c40:	4802      	ldr	r0, [pc, #8]	; (8001c4c <TIM3_IRQHandler+0x10>)
 8001c42:	f003 fc87 	bl	8005554 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001c46:	bf00      	nop
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	20000518 	.word	0x20000518

08001c50 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001c54:	4802      	ldr	r0, [pc, #8]	; (8001c60 <USART2_IRQHandler+0x10>)
 8001c56:	f004 f921 	bl	8005e9c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001c5a:	bf00      	nop
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	20000564 	.word	0x20000564

08001c64 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001c68:	4802      	ldr	r0, [pc, #8]	; (8001c74 <OTG_FS_IRQHandler+0x10>)
 8001c6a:	f001 f966 	bl	8002f3a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001c6e:	bf00      	nop
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	20001cf8 	.word	0x20001cf8

08001c78 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001c7c:	4802      	ldr	r0, [pc, #8]	; (8001c88 <USART6_IRQHandler+0x10>)
 8001c7e:	f004 f90d 	bl	8005e9c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8001c82:	bf00      	nop
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	bf00      	nop
 8001c88:	20000674 	.word	0x20000674

08001c8c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	af00      	add	r7, sp, #0
  return 1;
 8001c90:	2301      	movs	r3, #1
}
 8001c92:	4618      	mov	r0, r3
 8001c94:	46bd      	mov	sp, r7
 8001c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9a:	4770      	bx	lr

08001c9c <_kill>:

int _kill(int pid, int sig)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b082      	sub	sp, #8
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
 8001ca4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001ca6:	f00a fc73 	bl	800c590 <__errno>
 8001caa:	4603      	mov	r3, r0
 8001cac:	2216      	movs	r2, #22
 8001cae:	601a      	str	r2, [r3, #0]
  return -1;
 8001cb0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	3708      	adds	r7, #8
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}

08001cbc <_exit>:

void _exit (int status)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b082      	sub	sp, #8
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001cc4:	f04f 31ff 	mov.w	r1, #4294967295
 8001cc8:	6878      	ldr	r0, [r7, #4]
 8001cca:	f7ff ffe7 	bl	8001c9c <_kill>
  while (1) {}    /* Make sure we hang here */
 8001cce:	e7fe      	b.n	8001cce <_exit+0x12>

08001cd0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b086      	sub	sp, #24
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	60f8      	str	r0, [r7, #12]
 8001cd8:	60b9      	str	r1, [r7, #8]
 8001cda:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cdc:	2300      	movs	r3, #0
 8001cde:	617b      	str	r3, [r7, #20]
 8001ce0:	e00a      	b.n	8001cf8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001ce2:	f3af 8000 	nop.w
 8001ce6:	4601      	mov	r1, r0
 8001ce8:	68bb      	ldr	r3, [r7, #8]
 8001cea:	1c5a      	adds	r2, r3, #1
 8001cec:	60ba      	str	r2, [r7, #8]
 8001cee:	b2ca      	uxtb	r2, r1
 8001cf0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cf2:	697b      	ldr	r3, [r7, #20]
 8001cf4:	3301      	adds	r3, #1
 8001cf6:	617b      	str	r3, [r7, #20]
 8001cf8:	697a      	ldr	r2, [r7, #20]
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	429a      	cmp	r2, r3
 8001cfe:	dbf0      	blt.n	8001ce2 <_read+0x12>
  }

  return len;
 8001d00:	687b      	ldr	r3, [r7, #4]
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	3718      	adds	r7, #24
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}

08001d0a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001d0a:	b580      	push	{r7, lr}
 8001d0c:	b086      	sub	sp, #24
 8001d0e:	af00      	add	r7, sp, #0
 8001d10:	60f8      	str	r0, [r7, #12]
 8001d12:	60b9      	str	r1, [r7, #8]
 8001d14:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d16:	2300      	movs	r3, #0
 8001d18:	617b      	str	r3, [r7, #20]
 8001d1a:	e009      	b.n	8001d30 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001d1c:	68bb      	ldr	r3, [r7, #8]
 8001d1e:	1c5a      	adds	r2, r3, #1
 8001d20:	60ba      	str	r2, [r7, #8]
 8001d22:	781b      	ldrb	r3, [r3, #0]
 8001d24:	4618      	mov	r0, r3
 8001d26:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d2a:	697b      	ldr	r3, [r7, #20]
 8001d2c:	3301      	adds	r3, #1
 8001d2e:	617b      	str	r3, [r7, #20]
 8001d30:	697a      	ldr	r2, [r7, #20]
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	429a      	cmp	r2, r3
 8001d36:	dbf1      	blt.n	8001d1c <_write+0x12>
  }
  return len;
 8001d38:	687b      	ldr	r3, [r7, #4]
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	3718      	adds	r7, #24
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}

08001d42 <_close>:

int _close(int file)
{
 8001d42:	b480      	push	{r7}
 8001d44:	b083      	sub	sp, #12
 8001d46:	af00      	add	r7, sp, #0
 8001d48:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001d4a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	370c      	adds	r7, #12
 8001d52:	46bd      	mov	sp, r7
 8001d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d58:	4770      	bx	lr

08001d5a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d5a:	b480      	push	{r7}
 8001d5c:	b083      	sub	sp, #12
 8001d5e:	af00      	add	r7, sp, #0
 8001d60:	6078      	str	r0, [r7, #4]
 8001d62:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d6a:	605a      	str	r2, [r3, #4]
  return 0;
 8001d6c:	2300      	movs	r3, #0
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	370c      	adds	r7, #12
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr

08001d7a <_isatty>:

int _isatty(int file)
{
 8001d7a:	b480      	push	{r7}
 8001d7c:	b083      	sub	sp, #12
 8001d7e:	af00      	add	r7, sp, #0
 8001d80:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001d82:	2301      	movs	r3, #1
}
 8001d84:	4618      	mov	r0, r3
 8001d86:	370c      	adds	r7, #12
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8e:	4770      	bx	lr

08001d90 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b085      	sub	sp, #20
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	60f8      	str	r0, [r7, #12]
 8001d98:	60b9      	str	r1, [r7, #8]
 8001d9a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001d9c:	2300      	movs	r3, #0
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	3714      	adds	r7, #20
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr
	...

08001dac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b086      	sub	sp, #24
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001db4:	4a14      	ldr	r2, [pc, #80]	; (8001e08 <_sbrk+0x5c>)
 8001db6:	4b15      	ldr	r3, [pc, #84]	; (8001e0c <_sbrk+0x60>)
 8001db8:	1ad3      	subs	r3, r2, r3
 8001dba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001dbc:	697b      	ldr	r3, [r7, #20]
 8001dbe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001dc0:	4b13      	ldr	r3, [pc, #76]	; (8001e10 <_sbrk+0x64>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d102      	bne.n	8001dce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001dc8:	4b11      	ldr	r3, [pc, #68]	; (8001e10 <_sbrk+0x64>)
 8001dca:	4a12      	ldr	r2, [pc, #72]	; (8001e14 <_sbrk+0x68>)
 8001dcc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001dce:	4b10      	ldr	r3, [pc, #64]	; (8001e10 <_sbrk+0x64>)
 8001dd0:	681a      	ldr	r2, [r3, #0]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	4413      	add	r3, r2
 8001dd6:	693a      	ldr	r2, [r7, #16]
 8001dd8:	429a      	cmp	r2, r3
 8001dda:	d207      	bcs.n	8001dec <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ddc:	f00a fbd8 	bl	800c590 <__errno>
 8001de0:	4603      	mov	r3, r0
 8001de2:	220c      	movs	r2, #12
 8001de4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001de6:	f04f 33ff 	mov.w	r3, #4294967295
 8001dea:	e009      	b.n	8001e00 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001dec:	4b08      	ldr	r3, [pc, #32]	; (8001e10 <_sbrk+0x64>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001df2:	4b07      	ldr	r3, [pc, #28]	; (8001e10 <_sbrk+0x64>)
 8001df4:	681a      	ldr	r2, [r3, #0]
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	4413      	add	r3, r2
 8001dfa:	4a05      	ldr	r2, [pc, #20]	; (8001e10 <_sbrk+0x64>)
 8001dfc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001dfe:	68fb      	ldr	r3, [r7, #12]
}
 8001e00:	4618      	mov	r0, r3
 8001e02:	3718      	adds	r7, #24
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}
 8001e08:	20050000 	.word	0x20050000
 8001e0c:	00000400 	.word	0x00000400
 8001e10:	200007d0 	.word	0x200007d0
 8001e14:	20002350 	.word	0x20002350

08001e18 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e1c:	4b06      	ldr	r3, [pc, #24]	; (8001e38 <SystemInit+0x20>)
 8001e1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e22:	4a05      	ldr	r2, [pc, #20]	; (8001e38 <SystemInit+0x20>)
 8001e24:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e28:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e2c:	bf00      	nop
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr
 8001e36:	bf00      	nop
 8001e38:	e000ed00 	.word	0xe000ed00

08001e3c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001e3c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e74 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001e40:	480d      	ldr	r0, [pc, #52]	; (8001e78 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001e42:	490e      	ldr	r1, [pc, #56]	; (8001e7c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001e44:	4a0e      	ldr	r2, [pc, #56]	; (8001e80 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001e46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e48:	e002      	b.n	8001e50 <LoopCopyDataInit>

08001e4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e4e:	3304      	adds	r3, #4

08001e50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e54:	d3f9      	bcc.n	8001e4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e56:	4a0b      	ldr	r2, [pc, #44]	; (8001e84 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001e58:	4c0b      	ldr	r4, [pc, #44]	; (8001e88 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001e5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e5c:	e001      	b.n	8001e62 <LoopFillZerobss>

08001e5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e60:	3204      	adds	r2, #4

08001e62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e64:	d3fb      	bcc.n	8001e5e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001e66:	f7ff ffd7 	bl	8001e18 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e6a:	f00a fb97 	bl	800c59c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e6e:	f7ff f8df 	bl	8001030 <main>
  bx  lr    
 8001e72:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001e74:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001e78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e7c:	200002d4 	.word	0x200002d4
  ldr r2, =_sidata
 8001e80:	08010138 	.word	0x08010138
  ldr r2, =_sbss
 8001e84:	20000414 	.word	0x20000414
  ldr r4, =_ebss
 8001e88:	2000234c 	.word	0x2000234c

08001e8c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e8c:	e7fe      	b.n	8001e8c <ADC_IRQHandler>

08001e8e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e8e:	b580      	push	{r7, lr}
 8001e90:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e92:	2003      	movs	r0, #3
 8001e94:	f000 f94c 	bl	8002130 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e98:	2000      	movs	r0, #0
 8001e9a:	f000 f805 	bl	8001ea8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e9e:	f7ff fc85 	bl	80017ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ea2:	2300      	movs	r3, #0
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	bd80      	pop	{r7, pc}

08001ea8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b082      	sub	sp, #8
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001eb0:	4b12      	ldr	r3, [pc, #72]	; (8001efc <HAL_InitTick+0x54>)
 8001eb2:	681a      	ldr	r2, [r3, #0]
 8001eb4:	4b12      	ldr	r3, [pc, #72]	; (8001f00 <HAL_InitTick+0x58>)
 8001eb6:	781b      	ldrb	r3, [r3, #0]
 8001eb8:	4619      	mov	r1, r3
 8001eba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ebe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ec2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	f000 f967 	bl	800219a <HAL_SYSTICK_Config>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d001      	beq.n	8001ed6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	e00e      	b.n	8001ef4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	2b0f      	cmp	r3, #15
 8001eda:	d80a      	bhi.n	8001ef2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001edc:	2200      	movs	r2, #0
 8001ede:	6879      	ldr	r1, [r7, #4]
 8001ee0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ee4:	f000 f92f 	bl	8002146 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ee8:	4a06      	ldr	r2, [pc, #24]	; (8001f04 <HAL_InitTick+0x5c>)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	e000      	b.n	8001ef4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ef2:	2301      	movs	r3, #1
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	3708      	adds	r7, #8
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}
 8001efc:	20000000 	.word	0x20000000
 8001f00:	20000008 	.word	0x20000008
 8001f04:	20000004 	.word	0x20000004

08001f08 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f0c:	4b06      	ldr	r3, [pc, #24]	; (8001f28 <HAL_IncTick+0x20>)
 8001f0e:	781b      	ldrb	r3, [r3, #0]
 8001f10:	461a      	mov	r2, r3
 8001f12:	4b06      	ldr	r3, [pc, #24]	; (8001f2c <HAL_IncTick+0x24>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4413      	add	r3, r2
 8001f18:	4a04      	ldr	r2, [pc, #16]	; (8001f2c <HAL_IncTick+0x24>)
 8001f1a:	6013      	str	r3, [r2, #0]
}
 8001f1c:	bf00      	nop
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f24:	4770      	bx	lr
 8001f26:	bf00      	nop
 8001f28:	20000008 	.word	0x20000008
 8001f2c:	200007d4 	.word	0x200007d4

08001f30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f30:	b480      	push	{r7}
 8001f32:	af00      	add	r7, sp, #0
  return uwTick;
 8001f34:	4b03      	ldr	r3, [pc, #12]	; (8001f44 <HAL_GetTick+0x14>)
 8001f36:	681b      	ldr	r3, [r3, #0]
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f40:	4770      	bx	lr
 8001f42:	bf00      	nop
 8001f44:	200007d4 	.word	0x200007d4

08001f48 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b084      	sub	sp, #16
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f50:	f7ff ffee 	bl	8001f30 <HAL_GetTick>
 8001f54:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f60:	d005      	beq.n	8001f6e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f62:	4b0a      	ldr	r3, [pc, #40]	; (8001f8c <HAL_Delay+0x44>)
 8001f64:	781b      	ldrb	r3, [r3, #0]
 8001f66:	461a      	mov	r2, r3
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	4413      	add	r3, r2
 8001f6c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001f6e:	bf00      	nop
 8001f70:	f7ff ffde 	bl	8001f30 <HAL_GetTick>
 8001f74:	4602      	mov	r2, r0
 8001f76:	68bb      	ldr	r3, [r7, #8]
 8001f78:	1ad3      	subs	r3, r2, r3
 8001f7a:	68fa      	ldr	r2, [r7, #12]
 8001f7c:	429a      	cmp	r2, r3
 8001f7e:	d8f7      	bhi.n	8001f70 <HAL_Delay+0x28>
  {
  }
}
 8001f80:	bf00      	nop
 8001f82:	bf00      	nop
 8001f84:	3710      	adds	r7, #16
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	bf00      	nop
 8001f8c:	20000008 	.word	0x20000008

08001f90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b085      	sub	sp, #20
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	f003 0307 	and.w	r3, r3, #7
 8001f9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fa0:	4b0b      	ldr	r3, [pc, #44]	; (8001fd0 <__NVIC_SetPriorityGrouping+0x40>)
 8001fa2:	68db      	ldr	r3, [r3, #12]
 8001fa4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fa6:	68ba      	ldr	r2, [r7, #8]
 8001fa8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001fac:	4013      	ands	r3, r2
 8001fae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fb4:	68bb      	ldr	r3, [r7, #8]
 8001fb6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001fb8:	4b06      	ldr	r3, [pc, #24]	; (8001fd4 <__NVIC_SetPriorityGrouping+0x44>)
 8001fba:	4313      	orrs	r3, r2
 8001fbc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fbe:	4a04      	ldr	r2, [pc, #16]	; (8001fd0 <__NVIC_SetPriorityGrouping+0x40>)
 8001fc0:	68bb      	ldr	r3, [r7, #8]
 8001fc2:	60d3      	str	r3, [r2, #12]
}
 8001fc4:	bf00      	nop
 8001fc6:	3714      	adds	r7, #20
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fce:	4770      	bx	lr
 8001fd0:	e000ed00 	.word	0xe000ed00
 8001fd4:	05fa0000 	.word	0x05fa0000

08001fd8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fdc:	4b04      	ldr	r3, [pc, #16]	; (8001ff0 <__NVIC_GetPriorityGrouping+0x18>)
 8001fde:	68db      	ldr	r3, [r3, #12]
 8001fe0:	0a1b      	lsrs	r3, r3, #8
 8001fe2:	f003 0307 	and.w	r3, r3, #7
}
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fee:	4770      	bx	lr
 8001ff0:	e000ed00 	.word	0xe000ed00

08001ff4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b083      	sub	sp, #12
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ffe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002002:	2b00      	cmp	r3, #0
 8002004:	db0b      	blt.n	800201e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002006:	79fb      	ldrb	r3, [r7, #7]
 8002008:	f003 021f 	and.w	r2, r3, #31
 800200c:	4907      	ldr	r1, [pc, #28]	; (800202c <__NVIC_EnableIRQ+0x38>)
 800200e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002012:	095b      	lsrs	r3, r3, #5
 8002014:	2001      	movs	r0, #1
 8002016:	fa00 f202 	lsl.w	r2, r0, r2
 800201a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800201e:	bf00      	nop
 8002020:	370c      	adds	r7, #12
 8002022:	46bd      	mov	sp, r7
 8002024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002028:	4770      	bx	lr
 800202a:	bf00      	nop
 800202c:	e000e100 	.word	0xe000e100

08002030 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002030:	b480      	push	{r7}
 8002032:	b083      	sub	sp, #12
 8002034:	af00      	add	r7, sp, #0
 8002036:	4603      	mov	r3, r0
 8002038:	6039      	str	r1, [r7, #0]
 800203a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800203c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002040:	2b00      	cmp	r3, #0
 8002042:	db0a      	blt.n	800205a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	b2da      	uxtb	r2, r3
 8002048:	490c      	ldr	r1, [pc, #48]	; (800207c <__NVIC_SetPriority+0x4c>)
 800204a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800204e:	0112      	lsls	r2, r2, #4
 8002050:	b2d2      	uxtb	r2, r2
 8002052:	440b      	add	r3, r1
 8002054:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002058:	e00a      	b.n	8002070 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	b2da      	uxtb	r2, r3
 800205e:	4908      	ldr	r1, [pc, #32]	; (8002080 <__NVIC_SetPriority+0x50>)
 8002060:	79fb      	ldrb	r3, [r7, #7]
 8002062:	f003 030f 	and.w	r3, r3, #15
 8002066:	3b04      	subs	r3, #4
 8002068:	0112      	lsls	r2, r2, #4
 800206a:	b2d2      	uxtb	r2, r2
 800206c:	440b      	add	r3, r1
 800206e:	761a      	strb	r2, [r3, #24]
}
 8002070:	bf00      	nop
 8002072:	370c      	adds	r7, #12
 8002074:	46bd      	mov	sp, r7
 8002076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207a:	4770      	bx	lr
 800207c:	e000e100 	.word	0xe000e100
 8002080:	e000ed00 	.word	0xe000ed00

08002084 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002084:	b480      	push	{r7}
 8002086:	b089      	sub	sp, #36	; 0x24
 8002088:	af00      	add	r7, sp, #0
 800208a:	60f8      	str	r0, [r7, #12]
 800208c:	60b9      	str	r1, [r7, #8]
 800208e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	f003 0307 	and.w	r3, r3, #7
 8002096:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002098:	69fb      	ldr	r3, [r7, #28]
 800209a:	f1c3 0307 	rsb	r3, r3, #7
 800209e:	2b04      	cmp	r3, #4
 80020a0:	bf28      	it	cs
 80020a2:	2304      	movcs	r3, #4
 80020a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020a6:	69fb      	ldr	r3, [r7, #28]
 80020a8:	3304      	adds	r3, #4
 80020aa:	2b06      	cmp	r3, #6
 80020ac:	d902      	bls.n	80020b4 <NVIC_EncodePriority+0x30>
 80020ae:	69fb      	ldr	r3, [r7, #28]
 80020b0:	3b03      	subs	r3, #3
 80020b2:	e000      	b.n	80020b6 <NVIC_EncodePriority+0x32>
 80020b4:	2300      	movs	r3, #0
 80020b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020b8:	f04f 32ff 	mov.w	r2, #4294967295
 80020bc:	69bb      	ldr	r3, [r7, #24]
 80020be:	fa02 f303 	lsl.w	r3, r2, r3
 80020c2:	43da      	mvns	r2, r3
 80020c4:	68bb      	ldr	r3, [r7, #8]
 80020c6:	401a      	ands	r2, r3
 80020c8:	697b      	ldr	r3, [r7, #20]
 80020ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020cc:	f04f 31ff 	mov.w	r1, #4294967295
 80020d0:	697b      	ldr	r3, [r7, #20]
 80020d2:	fa01 f303 	lsl.w	r3, r1, r3
 80020d6:	43d9      	mvns	r1, r3
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020dc:	4313      	orrs	r3, r2
         );
}
 80020de:	4618      	mov	r0, r3
 80020e0:	3724      	adds	r7, #36	; 0x24
 80020e2:	46bd      	mov	sp, r7
 80020e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e8:	4770      	bx	lr
	...

080020ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b082      	sub	sp, #8
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	3b01      	subs	r3, #1
 80020f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80020fc:	d301      	bcc.n	8002102 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020fe:	2301      	movs	r3, #1
 8002100:	e00f      	b.n	8002122 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002102:	4a0a      	ldr	r2, [pc, #40]	; (800212c <SysTick_Config+0x40>)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	3b01      	subs	r3, #1
 8002108:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800210a:	210f      	movs	r1, #15
 800210c:	f04f 30ff 	mov.w	r0, #4294967295
 8002110:	f7ff ff8e 	bl	8002030 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002114:	4b05      	ldr	r3, [pc, #20]	; (800212c <SysTick_Config+0x40>)
 8002116:	2200      	movs	r2, #0
 8002118:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800211a:	4b04      	ldr	r3, [pc, #16]	; (800212c <SysTick_Config+0x40>)
 800211c:	2207      	movs	r2, #7
 800211e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002120:	2300      	movs	r3, #0
}
 8002122:	4618      	mov	r0, r3
 8002124:	3708      	adds	r7, #8
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}
 800212a:	bf00      	nop
 800212c:	e000e010 	.word	0xe000e010

08002130 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b082      	sub	sp, #8
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002138:	6878      	ldr	r0, [r7, #4]
 800213a:	f7ff ff29 	bl	8001f90 <__NVIC_SetPriorityGrouping>
}
 800213e:	bf00      	nop
 8002140:	3708      	adds	r7, #8
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}

08002146 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002146:	b580      	push	{r7, lr}
 8002148:	b086      	sub	sp, #24
 800214a:	af00      	add	r7, sp, #0
 800214c:	4603      	mov	r3, r0
 800214e:	60b9      	str	r1, [r7, #8]
 8002150:	607a      	str	r2, [r7, #4]
 8002152:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002154:	2300      	movs	r3, #0
 8002156:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002158:	f7ff ff3e 	bl	8001fd8 <__NVIC_GetPriorityGrouping>
 800215c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800215e:	687a      	ldr	r2, [r7, #4]
 8002160:	68b9      	ldr	r1, [r7, #8]
 8002162:	6978      	ldr	r0, [r7, #20]
 8002164:	f7ff ff8e 	bl	8002084 <NVIC_EncodePriority>
 8002168:	4602      	mov	r2, r0
 800216a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800216e:	4611      	mov	r1, r2
 8002170:	4618      	mov	r0, r3
 8002172:	f7ff ff5d 	bl	8002030 <__NVIC_SetPriority>
}
 8002176:	bf00      	nop
 8002178:	3718      	adds	r7, #24
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}

0800217e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800217e:	b580      	push	{r7, lr}
 8002180:	b082      	sub	sp, #8
 8002182:	af00      	add	r7, sp, #0
 8002184:	4603      	mov	r3, r0
 8002186:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002188:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800218c:	4618      	mov	r0, r3
 800218e:	f7ff ff31 	bl	8001ff4 <__NVIC_EnableIRQ>
}
 8002192:	bf00      	nop
 8002194:	3708      	adds	r7, #8
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}

0800219a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800219a:	b580      	push	{r7, lr}
 800219c:	b082      	sub	sp, #8
 800219e:	af00      	add	r7, sp, #0
 80021a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021a2:	6878      	ldr	r0, [r7, #4]
 80021a4:	f7ff ffa2 	bl	80020ec <SysTick_Config>
 80021a8:	4603      	mov	r3, r0
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	3708      	adds	r7, #8
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}

080021b2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80021b2:	b580      	push	{r7, lr}
 80021b4:	b084      	sub	sp, #16
 80021b6:	af00      	add	r7, sp, #0
 80021b8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021be:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80021c0:	f7ff feb6 	bl	8001f30 <HAL_GetTick>
 80021c4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80021cc:	b2db      	uxtb	r3, r3
 80021ce:	2b02      	cmp	r3, #2
 80021d0:	d008      	beq.n	80021e4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2280      	movs	r2, #128	; 0x80
 80021d6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2200      	movs	r2, #0
 80021dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80021e0:	2301      	movs	r3, #1
 80021e2:	e052      	b.n	800228a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	681a      	ldr	r2, [r3, #0]
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f022 0216 	bic.w	r2, r2, #22
 80021f2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	695a      	ldr	r2, [r3, #20]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002202:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002208:	2b00      	cmp	r3, #0
 800220a:	d103      	bne.n	8002214 <HAL_DMA_Abort+0x62>
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002210:	2b00      	cmp	r3, #0
 8002212:	d007      	beq.n	8002224 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	681a      	ldr	r2, [r3, #0]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f022 0208 	bic.w	r2, r2, #8
 8002222:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	681a      	ldr	r2, [r3, #0]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f022 0201 	bic.w	r2, r2, #1
 8002232:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002234:	e013      	b.n	800225e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002236:	f7ff fe7b 	bl	8001f30 <HAL_GetTick>
 800223a:	4602      	mov	r2, r0
 800223c:	68bb      	ldr	r3, [r7, #8]
 800223e:	1ad3      	subs	r3, r2, r3
 8002240:	2b05      	cmp	r3, #5
 8002242:	d90c      	bls.n	800225e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2220      	movs	r2, #32
 8002248:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2203      	movs	r2, #3
 800224e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2200      	movs	r2, #0
 8002256:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 800225a:	2303      	movs	r3, #3
 800225c:	e015      	b.n	800228a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f003 0301 	and.w	r3, r3, #1
 8002268:	2b00      	cmp	r3, #0
 800226a:	d1e4      	bne.n	8002236 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002270:	223f      	movs	r2, #63	; 0x3f
 8002272:	409a      	lsls	r2, r3
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2201      	movs	r2, #1
 800227c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2200      	movs	r2, #0
 8002284:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8002288:	2300      	movs	r3, #0
}
 800228a:	4618      	mov	r0, r3
 800228c:	3710      	adds	r7, #16
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}

08002292 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002292:	b480      	push	{r7}
 8002294:	b083      	sub	sp, #12
 8002296:	af00      	add	r7, sp, #0
 8002298:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80022a0:	b2db      	uxtb	r3, r3
 80022a2:	2b02      	cmp	r3, #2
 80022a4:	d004      	beq.n	80022b0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2280      	movs	r2, #128	; 0x80
 80022aa:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80022ac:	2301      	movs	r3, #1
 80022ae:	e00c      	b.n	80022ca <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2205      	movs	r2, #5
 80022b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	681a      	ldr	r2, [r3, #0]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f022 0201 	bic.w	r2, r2, #1
 80022c6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80022c8:	2300      	movs	r3, #0
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	370c      	adds	r7, #12
 80022ce:	46bd      	mov	sp, r7
 80022d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d4:	4770      	bx	lr
	...

080022d8 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b084      	sub	sp, #16
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d101      	bne.n	80022ea <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80022e6:	2301      	movs	r3, #1
 80022e8:	e06a      	b.n	80023c0 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d106      	bne.n	8002302 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2223      	movs	r2, #35	; 0x23
 80022f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80022fc:	6878      	ldr	r0, [r7, #4]
 80022fe:	f7ff fa79 	bl	80017f4 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002302:	4b31      	ldr	r3, [pc, #196]	; (80023c8 <HAL_ETH_Init+0xf0>)
 8002304:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002306:	4a30      	ldr	r2, [pc, #192]	; (80023c8 <HAL_ETH_Init+0xf0>)
 8002308:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800230c:	6453      	str	r3, [r2, #68]	; 0x44
 800230e:	4b2e      	ldr	r3, [pc, #184]	; (80023c8 <HAL_ETH_Init+0xf0>)
 8002310:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002312:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002316:	60bb      	str	r3, [r7, #8]
 8002318:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800231a:	4b2c      	ldr	r3, [pc, #176]	; (80023cc <HAL_ETH_Init+0xf4>)
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	4a2b      	ldr	r2, [pc, #172]	; (80023cc <HAL_ETH_Init+0xf4>)
 8002320:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002324:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8002326:	4b29      	ldr	r3, [pc, #164]	; (80023cc <HAL_ETH_Init+0xf4>)
 8002328:	685a      	ldr	r2, [r3, #4]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	689b      	ldr	r3, [r3, #8]
 800232e:	4927      	ldr	r1, [pc, #156]	; (80023cc <HAL_ETH_Init+0xf4>)
 8002330:	4313      	orrs	r3, r2
 8002332:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8002334:	4b25      	ldr	r3, [pc, #148]	; (80023cc <HAL_ETH_Init+0xf4>)
 8002336:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	687a      	ldr	r2, [r7, #4]
 8002344:	6812      	ldr	r2, [r2, #0]
 8002346:	f043 0301 	orr.w	r3, r3, #1
 800234a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800234e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002350:	f7ff fdee 	bl	8001f30 <HAL_GetTick>
 8002354:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002356:	e011      	b.n	800237c <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002358:	f7ff fdea 	bl	8001f30 <HAL_GetTick>
 800235c:	4602      	mov	r2, r0
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	1ad3      	subs	r3, r2, r3
 8002362:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002366:	d909      	bls.n	800237c <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2204      	movs	r2, #4
 800236c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	22e0      	movs	r2, #224	; 0xe0
 8002374:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8002378:	2301      	movs	r3, #1
 800237a:	e021      	b.n	80023c0 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f003 0301 	and.w	r3, r3, #1
 800238a:	2b00      	cmp	r3, #0
 800238c:	d1e4      	bne.n	8002358 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800238e:	6878      	ldr	r0, [r7, #4]
 8002390:	f000 f958 	bl	8002644 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002394:	6878      	ldr	r0, [r7, #4]
 8002396:	f000 f9ff 	bl	8002798 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800239a:	6878      	ldr	r0, [r7, #4]
 800239c:	f000 fa55 	bl	800284a <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	461a      	mov	r2, r3
 80023a6:	2100      	movs	r1, #0
 80023a8:	6878      	ldr	r0, [r7, #4]
 80023aa:	f000 f9bd 	bl	8002728 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2200      	movs	r2, #0
 80023b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2210      	movs	r2, #16
 80023ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80023be:	2300      	movs	r3, #0
}
 80023c0:	4618      	mov	r0, r3
 80023c2:	3710      	adds	r7, #16
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}
 80023c8:	40023800 	.word	0x40023800
 80023cc:	40013800 	.word	0x40013800

080023d0 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b084      	sub	sp, #16
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
 80023d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80023e2:	68fa      	ldr	r2, [r7, #12]
 80023e4:	4b51      	ldr	r3, [pc, #324]	; (800252c <ETH_SetMACConfig+0x15c>)
 80023e6:	4013      	ands	r3, r2
 80023e8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	7c1b      	ldrb	r3, [r3, #16]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d102      	bne.n	80023f8 <ETH_SetMACConfig+0x28>
 80023f2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80023f6:	e000      	b.n	80023fa <ETH_SetMACConfig+0x2a>
 80023f8:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	7c5b      	ldrb	r3, [r3, #17]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d102      	bne.n	8002408 <ETH_SetMACConfig+0x38>
 8002402:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002406:	e000      	b.n	800240a <ETH_SetMACConfig+0x3a>
 8002408:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800240a:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002410:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	7fdb      	ldrb	r3, [r3, #31]
 8002416:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002418:	431a      	orrs	r2, r3
                        macconf->Speed |
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800241e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002420:	683a      	ldr	r2, [r7, #0]
 8002422:	7f92      	ldrb	r2, [r2, #30]
 8002424:	2a00      	cmp	r2, #0
 8002426:	d102      	bne.n	800242e <ETH_SetMACConfig+0x5e>
 8002428:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800242c:	e000      	b.n	8002430 <ETH_SetMACConfig+0x60>
 800242e:	2200      	movs	r2, #0
                        macconf->Speed |
 8002430:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	7f1b      	ldrb	r3, [r3, #28]
 8002436:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002438:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800243e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	791b      	ldrb	r3, [r3, #4]
 8002444:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8002446:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002448:	683a      	ldr	r2, [r7, #0]
 800244a:	f892 2020 	ldrb.w	r2, [r2, #32]
 800244e:	2a00      	cmp	r2, #0
 8002450:	d102      	bne.n	8002458 <ETH_SetMACConfig+0x88>
 8002452:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002456:	e000      	b.n	800245a <ETH_SetMACConfig+0x8a>
 8002458:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800245a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	7bdb      	ldrb	r3, [r3, #15]
 8002460:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002462:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002468:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002470:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002472:	4313      	orrs	r3, r2
 8002474:	68fa      	ldr	r2, [r7, #12]
 8002476:	4313      	orrs	r3, r2
 8002478:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	68fa      	ldr	r2, [r7, #12]
 8002480:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800248a:	2001      	movs	r0, #1
 800248c:	f7ff fd5c 	bl	8001f48 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	68fa      	ldr	r2, [r7, #12]
 8002496:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	699b      	ldr	r3, [r3, #24]
 800249e:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80024a0:	68fa      	ldr	r2, [r7, #12]
 80024a2:	f64f 7341 	movw	r3, #65345	; 0xff41
 80024a6:	4013      	ands	r3, r2
 80024a8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024ae:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80024b0:	683a      	ldr	r2, [r7, #0]
 80024b2:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80024b6:	2a00      	cmp	r2, #0
 80024b8:	d101      	bne.n	80024be <ETH_SetMACConfig+0xee>
 80024ba:	2280      	movs	r2, #128	; 0x80
 80024bc:	e000      	b.n	80024c0 <ETH_SetMACConfig+0xf0>
 80024be:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80024c0:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80024c6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80024c8:	683a      	ldr	r2, [r7, #0]
 80024ca:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 80024ce:	2a01      	cmp	r2, #1
 80024d0:	d101      	bne.n	80024d6 <ETH_SetMACConfig+0x106>
 80024d2:	2208      	movs	r2, #8
 80024d4:	e000      	b.n	80024d8 <ETH_SetMACConfig+0x108>
 80024d6:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80024d8:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80024da:	683a      	ldr	r2, [r7, #0]
 80024dc:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 80024e0:	2a01      	cmp	r2, #1
 80024e2:	d101      	bne.n	80024e8 <ETH_SetMACConfig+0x118>
 80024e4:	2204      	movs	r2, #4
 80024e6:	e000      	b.n	80024ea <ETH_SetMACConfig+0x11a>
 80024e8:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80024ea:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80024ec:	683a      	ldr	r2, [r7, #0]
 80024ee:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 80024f2:	2a01      	cmp	r2, #1
 80024f4:	d101      	bne.n	80024fa <ETH_SetMACConfig+0x12a>
 80024f6:	2202      	movs	r2, #2
 80024f8:	e000      	b.n	80024fc <ETH_SetMACConfig+0x12c>
 80024fa:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80024fc:	4313      	orrs	r3, r2
 80024fe:	68fa      	ldr	r2, [r7, #12]
 8002500:	4313      	orrs	r3, r2
 8002502:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	68fa      	ldr	r2, [r7, #12]
 800250a:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	699b      	ldr	r3, [r3, #24]
 8002512:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002514:	2001      	movs	r0, #1
 8002516:	f7ff fd17 	bl	8001f48 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	68fa      	ldr	r2, [r7, #12]
 8002520:	619a      	str	r2, [r3, #24]
}
 8002522:	bf00      	nop
 8002524:	3710      	adds	r7, #16
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}
 800252a:	bf00      	nop
 800252c:	ff20810f 	.word	0xff20810f

08002530 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b084      	sub	sp, #16
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
 8002538:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002542:	699b      	ldr	r3, [r3, #24]
 8002544:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002546:	68fa      	ldr	r2, [r7, #12]
 8002548:	4b3d      	ldr	r3, [pc, #244]	; (8002640 <ETH_SetDMAConfig+0x110>)
 800254a:	4013      	ands	r3, r2
 800254c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	7b1b      	ldrb	r3, [r3, #12]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d102      	bne.n	800255c <ETH_SetDMAConfig+0x2c>
 8002556:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800255a:	e000      	b.n	800255e <ETH_SetDMAConfig+0x2e>
 800255c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	7b5b      	ldrb	r3, [r3, #13]
 8002562:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002564:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002566:	683a      	ldr	r2, [r7, #0]
 8002568:	7f52      	ldrb	r2, [r2, #29]
 800256a:	2a00      	cmp	r2, #0
 800256c:	d102      	bne.n	8002574 <ETH_SetDMAConfig+0x44>
 800256e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002572:	e000      	b.n	8002576 <ETH_SetDMAConfig+0x46>
 8002574:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002576:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	7b9b      	ldrb	r3, [r3, #14]
 800257c:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800257e:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002584:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	7f1b      	ldrb	r3, [r3, #28]
 800258a:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 800258c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	7f9b      	ldrb	r3, [r3, #30]
 8002592:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002594:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800259a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80025a2:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80025a4:	4313      	orrs	r3, r2
 80025a6:	68fa      	ldr	r2, [r7, #12]
 80025a8:	4313      	orrs	r3, r2
 80025aa:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025b4:	461a      	mov	r2, r3
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025c2:	699b      	ldr	r3, [r3, #24]
 80025c4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80025c6:	2001      	movs	r0, #1
 80025c8:	f7ff fcbe 	bl	8001f48 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025d4:	461a      	mov	r2, r3
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	791b      	ldrb	r3, [r3, #4]
 80025de:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80025e4:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80025ea:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80025f0:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80025f8:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80025fa:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002600:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002602:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002608:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800260a:	687a      	ldr	r2, [r7, #4]
 800260c:	6812      	ldr	r2, [r2, #0]
 800260e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002612:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002616:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002624:	2001      	movs	r0, #1
 8002626:	f7ff fc8f 	bl	8001f48 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002632:	461a      	mov	r2, r3
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	6013      	str	r3, [r2, #0]
}
 8002638:	bf00      	nop
 800263a:	3710      	adds	r7, #16
 800263c:	46bd      	mov	sp, r7
 800263e:	bd80      	pop	{r7, pc}
 8002640:	f8de3f23 	.word	0xf8de3f23

08002644 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b0a6      	sub	sp, #152	; 0x98
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 800264c:	2301      	movs	r3, #1
 800264e:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8002652:	2301      	movs	r3, #1
 8002654:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002658:	2300      	movs	r3, #0
 800265a:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 800265c:	2300      	movs	r3, #0
 800265e:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8002662:	2301      	movs	r3, #1
 8002664:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002668:	2300      	movs	r3, #0
 800266a:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 800266e:	2301      	movs	r3, #1
 8002670:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8002674:	2300      	movs	r3, #0
 8002676:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 800267a:	2300      	movs	r3, #0
 800267c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002680:	2300      	movs	r3, #0
 8002682:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002684:	2300      	movs	r3, #0
 8002686:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 800268a:	2300      	movs	r3, #0
 800268c:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 800268e:	2300      	movs	r3, #0
 8002690:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002694:	2300      	movs	r3, #0
 8002696:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800269a:	2300      	movs	r3, #0
 800269c:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80026a0:	2300      	movs	r3, #0
 80026a2:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80026a6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80026aa:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80026ac:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80026b0:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80026b2:	2300      	movs	r3, #0
 80026b4:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80026b8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80026bc:	4619      	mov	r1, r3
 80026be:	6878      	ldr	r0, [r7, #4]
 80026c0:	f7ff fe86 	bl	80023d0 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80026c4:	2301      	movs	r3, #1
 80026c6:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80026c8:	2301      	movs	r3, #1
 80026ca:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80026cc:	2301      	movs	r3, #1
 80026ce:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80026d2:	2301      	movs	r3, #1
 80026d4:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80026d6:	2300      	movs	r3, #0
 80026d8:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80026da:	2300      	movs	r3, #0
 80026dc:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80026e0:	2300      	movs	r3, #0
 80026e2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80026e6:	2300      	movs	r3, #0
 80026e8:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80026ea:	2301      	movs	r3, #1
 80026ec:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80026f0:	2301      	movs	r3, #1
 80026f2:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80026f4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80026f8:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80026fa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80026fe:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002700:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002704:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8002706:	2301      	movs	r3, #1
 8002708:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 800270c:	2300      	movs	r3, #0
 800270e:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002710:	2300      	movs	r3, #0
 8002712:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002714:	f107 0308 	add.w	r3, r7, #8
 8002718:	4619      	mov	r1, r3
 800271a:	6878      	ldr	r0, [r7, #4]
 800271c:	f7ff ff08 	bl	8002530 <ETH_SetDMAConfig>
}
 8002720:	bf00      	nop
 8002722:	3798      	adds	r7, #152	; 0x98
 8002724:	46bd      	mov	sp, r7
 8002726:	bd80      	pop	{r7, pc}

08002728 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002728:	b480      	push	{r7}
 800272a:	b087      	sub	sp, #28
 800272c:	af00      	add	r7, sp, #0
 800272e:	60f8      	str	r0, [r7, #12]
 8002730:	60b9      	str	r1, [r7, #8]
 8002732:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	3305      	adds	r3, #5
 8002738:	781b      	ldrb	r3, [r3, #0]
 800273a:	021b      	lsls	r3, r3, #8
 800273c:	687a      	ldr	r2, [r7, #4]
 800273e:	3204      	adds	r2, #4
 8002740:	7812      	ldrb	r2, [r2, #0]
 8002742:	4313      	orrs	r3, r2
 8002744:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002746:	68ba      	ldr	r2, [r7, #8]
 8002748:	4b11      	ldr	r3, [pc, #68]	; (8002790 <ETH_MACAddressConfig+0x68>)
 800274a:	4413      	add	r3, r2
 800274c:	461a      	mov	r2, r3
 800274e:	697b      	ldr	r3, [r7, #20]
 8002750:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	3303      	adds	r3, #3
 8002756:	781b      	ldrb	r3, [r3, #0]
 8002758:	061a      	lsls	r2, r3, #24
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	3302      	adds	r3, #2
 800275e:	781b      	ldrb	r3, [r3, #0]
 8002760:	041b      	lsls	r3, r3, #16
 8002762:	431a      	orrs	r2, r3
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	3301      	adds	r3, #1
 8002768:	781b      	ldrb	r3, [r3, #0]
 800276a:	021b      	lsls	r3, r3, #8
 800276c:	4313      	orrs	r3, r2
 800276e:	687a      	ldr	r2, [r7, #4]
 8002770:	7812      	ldrb	r2, [r2, #0]
 8002772:	4313      	orrs	r3, r2
 8002774:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002776:	68ba      	ldr	r2, [r7, #8]
 8002778:	4b06      	ldr	r3, [pc, #24]	; (8002794 <ETH_MACAddressConfig+0x6c>)
 800277a:	4413      	add	r3, r2
 800277c:	461a      	mov	r2, r3
 800277e:	697b      	ldr	r3, [r7, #20]
 8002780:	6013      	str	r3, [r2, #0]
}
 8002782:	bf00      	nop
 8002784:	371c      	adds	r7, #28
 8002786:	46bd      	mov	sp, r7
 8002788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278c:	4770      	bx	lr
 800278e:	bf00      	nop
 8002790:	40028040 	.word	0x40028040
 8002794:	40028044 	.word	0x40028044

08002798 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002798:	b480      	push	{r7}
 800279a:	b085      	sub	sp, #20
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80027a0:	2300      	movs	r3, #0
 80027a2:	60fb      	str	r3, [r7, #12]
 80027a4:	e03e      	b.n	8002824 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	68d9      	ldr	r1, [r3, #12]
 80027aa:	68fa      	ldr	r2, [r7, #12]
 80027ac:	4613      	mov	r3, r2
 80027ae:	009b      	lsls	r3, r3, #2
 80027b0:	4413      	add	r3, r2
 80027b2:	00db      	lsls	r3, r3, #3
 80027b4:	440b      	add	r3, r1
 80027b6:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80027b8:	68bb      	ldr	r3, [r7, #8]
 80027ba:	2200      	movs	r2, #0
 80027bc:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80027be:	68bb      	ldr	r3, [r7, #8]
 80027c0:	2200      	movs	r2, #0
 80027c2:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	2200      	movs	r2, #0
 80027c8:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80027ca:	68bb      	ldr	r3, [r7, #8]
 80027cc:	2200      	movs	r2, #0
 80027ce:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80027d0:	68b9      	ldr	r1, [r7, #8]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	68fa      	ldr	r2, [r7, #12]
 80027d6:	3206      	adds	r2, #6
 80027d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80027dc:	68bb      	ldr	r3, [r7, #8]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80027e4:	68bb      	ldr	r3, [r7, #8]
 80027e6:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	2b02      	cmp	r3, #2
 80027ec:	d80c      	bhi.n	8002808 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	68d9      	ldr	r1, [r3, #12]
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	1c5a      	adds	r2, r3, #1
 80027f6:	4613      	mov	r3, r2
 80027f8:	009b      	lsls	r3, r3, #2
 80027fa:	4413      	add	r3, r2
 80027fc:	00db      	lsls	r3, r3, #3
 80027fe:	440b      	add	r3, r1
 8002800:	461a      	mov	r2, r3
 8002802:	68bb      	ldr	r3, [r7, #8]
 8002804:	60da      	str	r2, [r3, #12]
 8002806:	e004      	b.n	8002812 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	68db      	ldr	r3, [r3, #12]
 800280c:	461a      	mov	r2, r3
 800280e:	68bb      	ldr	r3, [r7, #8]
 8002810:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8002812:	68bb      	ldr	r3, [r7, #8]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 800281a:	68bb      	ldr	r3, [r7, #8]
 800281c:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	3301      	adds	r3, #1
 8002822:	60fb      	str	r3, [r7, #12]
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	2b03      	cmp	r3, #3
 8002828:	d9bd      	bls.n	80027a6 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2200      	movs	r2, #0
 800282e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	68da      	ldr	r2, [r3, #12]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800283c:	611a      	str	r2, [r3, #16]
}
 800283e:	bf00      	nop
 8002840:	3714      	adds	r7, #20
 8002842:	46bd      	mov	sp, r7
 8002844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002848:	4770      	bx	lr

0800284a <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800284a:	b480      	push	{r7}
 800284c:	b085      	sub	sp, #20
 800284e:	af00      	add	r7, sp, #0
 8002850:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002852:	2300      	movs	r3, #0
 8002854:	60fb      	str	r3, [r7, #12]
 8002856:	e046      	b.n	80028e6 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6919      	ldr	r1, [r3, #16]
 800285c:	68fa      	ldr	r2, [r7, #12]
 800285e:	4613      	mov	r3, r2
 8002860:	009b      	lsls	r3, r3, #2
 8002862:	4413      	add	r3, r2
 8002864:	00db      	lsls	r3, r3, #3
 8002866:	440b      	add	r3, r1
 8002868:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800286a:	68bb      	ldr	r3, [r7, #8]
 800286c:	2200      	movs	r2, #0
 800286e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002870:	68bb      	ldr	r3, [r7, #8]
 8002872:	2200      	movs	r2, #0
 8002874:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8002876:	68bb      	ldr	r3, [r7, #8]
 8002878:	2200      	movs	r2, #0
 800287a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 800287c:	68bb      	ldr	r3, [r7, #8]
 800287e:	2200      	movs	r2, #0
 8002880:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002882:	68bb      	ldr	r3, [r7, #8]
 8002884:	2200      	movs	r2, #0
 8002886:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002888:	68bb      	ldr	r3, [r7, #8]
 800288a:	2200      	movs	r2, #0
 800288c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800288e:	68bb      	ldr	r3, [r7, #8]
 8002890:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002894:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8002896:	68bb      	ldr	r3, [r7, #8]
 8002898:	f244 52f4 	movw	r2, #17908	; 0x45f4
 800289c:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 800289e:	68bb      	ldr	r3, [r7, #8]
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80028a6:	68bb      	ldr	r3, [r7, #8]
 80028a8:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80028aa:	68b9      	ldr	r1, [r7, #8]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	68fa      	ldr	r2, [r7, #12]
 80028b0:	3212      	adds	r2, #18
 80028b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	2b02      	cmp	r3, #2
 80028ba:	d80c      	bhi.n	80028d6 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6919      	ldr	r1, [r3, #16]
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	1c5a      	adds	r2, r3, #1
 80028c4:	4613      	mov	r3, r2
 80028c6:	009b      	lsls	r3, r3, #2
 80028c8:	4413      	add	r3, r2
 80028ca:	00db      	lsls	r3, r3, #3
 80028cc:	440b      	add	r3, r1
 80028ce:	461a      	mov	r2, r3
 80028d0:	68bb      	ldr	r3, [r7, #8]
 80028d2:	60da      	str	r2, [r3, #12]
 80028d4:	e004      	b.n	80028e0 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	691b      	ldr	r3, [r3, #16]
 80028da:	461a      	mov	r2, r3
 80028dc:	68bb      	ldr	r3, [r7, #8]
 80028de:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	3301      	adds	r3, #1
 80028e4:	60fb      	str	r3, [r7, #12]
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	2b03      	cmp	r3, #3
 80028ea:	d9b5      	bls.n	8002858 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2200      	movs	r2, #0
 80028f0:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2200      	movs	r2, #0
 80028f6:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2200      	movs	r2, #0
 80028fc:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2200      	movs	r2, #0
 8002902:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2200      	movs	r2, #0
 8002908:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	691a      	ldr	r2, [r3, #16]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002916:	60da      	str	r2, [r3, #12]
}
 8002918:	bf00      	nop
 800291a:	3714      	adds	r7, #20
 800291c:	46bd      	mov	sp, r7
 800291e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002922:	4770      	bx	lr

08002924 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002924:	b480      	push	{r7}
 8002926:	b089      	sub	sp, #36	; 0x24
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
 800292c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800292e:	2300      	movs	r3, #0
 8002930:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002932:	2300      	movs	r3, #0
 8002934:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002936:	2300      	movs	r3, #0
 8002938:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800293a:	2300      	movs	r3, #0
 800293c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800293e:	2300      	movs	r3, #0
 8002940:	61fb      	str	r3, [r7, #28]
 8002942:	e175      	b.n	8002c30 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002944:	2201      	movs	r2, #1
 8002946:	69fb      	ldr	r3, [r7, #28]
 8002948:	fa02 f303 	lsl.w	r3, r2, r3
 800294c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	697a      	ldr	r2, [r7, #20]
 8002954:	4013      	ands	r3, r2
 8002956:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002958:	693a      	ldr	r2, [r7, #16]
 800295a:	697b      	ldr	r3, [r7, #20]
 800295c:	429a      	cmp	r2, r3
 800295e:	f040 8164 	bne.w	8002c2a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	f003 0303 	and.w	r3, r3, #3
 800296a:	2b01      	cmp	r3, #1
 800296c:	d005      	beq.n	800297a <HAL_GPIO_Init+0x56>
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	f003 0303 	and.w	r3, r3, #3
 8002976:	2b02      	cmp	r3, #2
 8002978:	d130      	bne.n	80029dc <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	689b      	ldr	r3, [r3, #8]
 800297e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002980:	69fb      	ldr	r3, [r7, #28]
 8002982:	005b      	lsls	r3, r3, #1
 8002984:	2203      	movs	r2, #3
 8002986:	fa02 f303 	lsl.w	r3, r2, r3
 800298a:	43db      	mvns	r3, r3
 800298c:	69ba      	ldr	r2, [r7, #24]
 800298e:	4013      	ands	r3, r2
 8002990:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	68da      	ldr	r2, [r3, #12]
 8002996:	69fb      	ldr	r3, [r7, #28]
 8002998:	005b      	lsls	r3, r3, #1
 800299a:	fa02 f303 	lsl.w	r3, r2, r3
 800299e:	69ba      	ldr	r2, [r7, #24]
 80029a0:	4313      	orrs	r3, r2
 80029a2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	69ba      	ldr	r2, [r7, #24]
 80029a8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80029b0:	2201      	movs	r2, #1
 80029b2:	69fb      	ldr	r3, [r7, #28]
 80029b4:	fa02 f303 	lsl.w	r3, r2, r3
 80029b8:	43db      	mvns	r3, r3
 80029ba:	69ba      	ldr	r2, [r7, #24]
 80029bc:	4013      	ands	r3, r2
 80029be:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	091b      	lsrs	r3, r3, #4
 80029c6:	f003 0201 	and.w	r2, r3, #1
 80029ca:	69fb      	ldr	r3, [r7, #28]
 80029cc:	fa02 f303 	lsl.w	r3, r2, r3
 80029d0:	69ba      	ldr	r2, [r7, #24]
 80029d2:	4313      	orrs	r3, r2
 80029d4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	69ba      	ldr	r2, [r7, #24]
 80029da:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	f003 0303 	and.w	r3, r3, #3
 80029e4:	2b03      	cmp	r3, #3
 80029e6:	d017      	beq.n	8002a18 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	68db      	ldr	r3, [r3, #12]
 80029ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80029ee:	69fb      	ldr	r3, [r7, #28]
 80029f0:	005b      	lsls	r3, r3, #1
 80029f2:	2203      	movs	r2, #3
 80029f4:	fa02 f303 	lsl.w	r3, r2, r3
 80029f8:	43db      	mvns	r3, r3
 80029fa:	69ba      	ldr	r2, [r7, #24]
 80029fc:	4013      	ands	r3, r2
 80029fe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	689a      	ldr	r2, [r3, #8]
 8002a04:	69fb      	ldr	r3, [r7, #28]
 8002a06:	005b      	lsls	r3, r3, #1
 8002a08:	fa02 f303 	lsl.w	r3, r2, r3
 8002a0c:	69ba      	ldr	r2, [r7, #24]
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	69ba      	ldr	r2, [r7, #24]
 8002a16:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	f003 0303 	and.w	r3, r3, #3
 8002a20:	2b02      	cmp	r3, #2
 8002a22:	d123      	bne.n	8002a6c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002a24:	69fb      	ldr	r3, [r7, #28]
 8002a26:	08da      	lsrs	r2, r3, #3
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	3208      	adds	r2, #8
 8002a2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002a32:	69fb      	ldr	r3, [r7, #28]
 8002a34:	f003 0307 	and.w	r3, r3, #7
 8002a38:	009b      	lsls	r3, r3, #2
 8002a3a:	220f      	movs	r2, #15
 8002a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a40:	43db      	mvns	r3, r3
 8002a42:	69ba      	ldr	r2, [r7, #24]
 8002a44:	4013      	ands	r3, r2
 8002a46:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	691a      	ldr	r2, [r3, #16]
 8002a4c:	69fb      	ldr	r3, [r7, #28]
 8002a4e:	f003 0307 	and.w	r3, r3, #7
 8002a52:	009b      	lsls	r3, r3, #2
 8002a54:	fa02 f303 	lsl.w	r3, r2, r3
 8002a58:	69ba      	ldr	r2, [r7, #24]
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002a5e:	69fb      	ldr	r3, [r7, #28]
 8002a60:	08da      	lsrs	r2, r3, #3
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	3208      	adds	r2, #8
 8002a66:	69b9      	ldr	r1, [r7, #24]
 8002a68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002a72:	69fb      	ldr	r3, [r7, #28]
 8002a74:	005b      	lsls	r3, r3, #1
 8002a76:	2203      	movs	r2, #3
 8002a78:	fa02 f303 	lsl.w	r3, r2, r3
 8002a7c:	43db      	mvns	r3, r3
 8002a7e:	69ba      	ldr	r2, [r7, #24]
 8002a80:	4013      	ands	r3, r2
 8002a82:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	f003 0203 	and.w	r2, r3, #3
 8002a8c:	69fb      	ldr	r3, [r7, #28]
 8002a8e:	005b      	lsls	r3, r3, #1
 8002a90:	fa02 f303 	lsl.w	r3, r2, r3
 8002a94:	69ba      	ldr	r2, [r7, #24]
 8002a96:	4313      	orrs	r3, r2
 8002a98:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	69ba      	ldr	r2, [r7, #24]
 8002a9e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	f000 80be 	beq.w	8002c2a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002aae:	4b66      	ldr	r3, [pc, #408]	; (8002c48 <HAL_GPIO_Init+0x324>)
 8002ab0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ab2:	4a65      	ldr	r2, [pc, #404]	; (8002c48 <HAL_GPIO_Init+0x324>)
 8002ab4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ab8:	6453      	str	r3, [r2, #68]	; 0x44
 8002aba:	4b63      	ldr	r3, [pc, #396]	; (8002c48 <HAL_GPIO_Init+0x324>)
 8002abc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002abe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ac2:	60fb      	str	r3, [r7, #12]
 8002ac4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002ac6:	4a61      	ldr	r2, [pc, #388]	; (8002c4c <HAL_GPIO_Init+0x328>)
 8002ac8:	69fb      	ldr	r3, [r7, #28]
 8002aca:	089b      	lsrs	r3, r3, #2
 8002acc:	3302      	adds	r3, #2
 8002ace:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ad2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002ad4:	69fb      	ldr	r3, [r7, #28]
 8002ad6:	f003 0303 	and.w	r3, r3, #3
 8002ada:	009b      	lsls	r3, r3, #2
 8002adc:	220f      	movs	r2, #15
 8002ade:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae2:	43db      	mvns	r3, r3
 8002ae4:	69ba      	ldr	r2, [r7, #24]
 8002ae6:	4013      	ands	r3, r2
 8002ae8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	4a58      	ldr	r2, [pc, #352]	; (8002c50 <HAL_GPIO_Init+0x32c>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d037      	beq.n	8002b62 <HAL_GPIO_Init+0x23e>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	4a57      	ldr	r2, [pc, #348]	; (8002c54 <HAL_GPIO_Init+0x330>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d031      	beq.n	8002b5e <HAL_GPIO_Init+0x23a>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	4a56      	ldr	r2, [pc, #344]	; (8002c58 <HAL_GPIO_Init+0x334>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d02b      	beq.n	8002b5a <HAL_GPIO_Init+0x236>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	4a55      	ldr	r2, [pc, #340]	; (8002c5c <HAL_GPIO_Init+0x338>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d025      	beq.n	8002b56 <HAL_GPIO_Init+0x232>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	4a54      	ldr	r2, [pc, #336]	; (8002c60 <HAL_GPIO_Init+0x33c>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d01f      	beq.n	8002b52 <HAL_GPIO_Init+0x22e>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	4a53      	ldr	r2, [pc, #332]	; (8002c64 <HAL_GPIO_Init+0x340>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d019      	beq.n	8002b4e <HAL_GPIO_Init+0x22a>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	4a52      	ldr	r2, [pc, #328]	; (8002c68 <HAL_GPIO_Init+0x344>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d013      	beq.n	8002b4a <HAL_GPIO_Init+0x226>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	4a51      	ldr	r2, [pc, #324]	; (8002c6c <HAL_GPIO_Init+0x348>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d00d      	beq.n	8002b46 <HAL_GPIO_Init+0x222>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	4a50      	ldr	r2, [pc, #320]	; (8002c70 <HAL_GPIO_Init+0x34c>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d007      	beq.n	8002b42 <HAL_GPIO_Init+0x21e>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	4a4f      	ldr	r2, [pc, #316]	; (8002c74 <HAL_GPIO_Init+0x350>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d101      	bne.n	8002b3e <HAL_GPIO_Init+0x21a>
 8002b3a:	2309      	movs	r3, #9
 8002b3c:	e012      	b.n	8002b64 <HAL_GPIO_Init+0x240>
 8002b3e:	230a      	movs	r3, #10
 8002b40:	e010      	b.n	8002b64 <HAL_GPIO_Init+0x240>
 8002b42:	2308      	movs	r3, #8
 8002b44:	e00e      	b.n	8002b64 <HAL_GPIO_Init+0x240>
 8002b46:	2307      	movs	r3, #7
 8002b48:	e00c      	b.n	8002b64 <HAL_GPIO_Init+0x240>
 8002b4a:	2306      	movs	r3, #6
 8002b4c:	e00a      	b.n	8002b64 <HAL_GPIO_Init+0x240>
 8002b4e:	2305      	movs	r3, #5
 8002b50:	e008      	b.n	8002b64 <HAL_GPIO_Init+0x240>
 8002b52:	2304      	movs	r3, #4
 8002b54:	e006      	b.n	8002b64 <HAL_GPIO_Init+0x240>
 8002b56:	2303      	movs	r3, #3
 8002b58:	e004      	b.n	8002b64 <HAL_GPIO_Init+0x240>
 8002b5a:	2302      	movs	r3, #2
 8002b5c:	e002      	b.n	8002b64 <HAL_GPIO_Init+0x240>
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e000      	b.n	8002b64 <HAL_GPIO_Init+0x240>
 8002b62:	2300      	movs	r3, #0
 8002b64:	69fa      	ldr	r2, [r7, #28]
 8002b66:	f002 0203 	and.w	r2, r2, #3
 8002b6a:	0092      	lsls	r2, r2, #2
 8002b6c:	4093      	lsls	r3, r2
 8002b6e:	69ba      	ldr	r2, [r7, #24]
 8002b70:	4313      	orrs	r3, r2
 8002b72:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002b74:	4935      	ldr	r1, [pc, #212]	; (8002c4c <HAL_GPIO_Init+0x328>)
 8002b76:	69fb      	ldr	r3, [r7, #28]
 8002b78:	089b      	lsrs	r3, r3, #2
 8002b7a:	3302      	adds	r3, #2
 8002b7c:	69ba      	ldr	r2, [r7, #24]
 8002b7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b82:	4b3d      	ldr	r3, [pc, #244]	; (8002c78 <HAL_GPIO_Init+0x354>)
 8002b84:	689b      	ldr	r3, [r3, #8]
 8002b86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b88:	693b      	ldr	r3, [r7, #16]
 8002b8a:	43db      	mvns	r3, r3
 8002b8c:	69ba      	ldr	r2, [r7, #24]
 8002b8e:	4013      	ands	r3, r2
 8002b90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d003      	beq.n	8002ba6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002b9e:	69ba      	ldr	r2, [r7, #24]
 8002ba0:	693b      	ldr	r3, [r7, #16]
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002ba6:	4a34      	ldr	r2, [pc, #208]	; (8002c78 <HAL_GPIO_Init+0x354>)
 8002ba8:	69bb      	ldr	r3, [r7, #24]
 8002baa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002bac:	4b32      	ldr	r3, [pc, #200]	; (8002c78 <HAL_GPIO_Init+0x354>)
 8002bae:	68db      	ldr	r3, [r3, #12]
 8002bb0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bb2:	693b      	ldr	r3, [r7, #16]
 8002bb4:	43db      	mvns	r3, r3
 8002bb6:	69ba      	ldr	r2, [r7, #24]
 8002bb8:	4013      	ands	r3, r2
 8002bba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d003      	beq.n	8002bd0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002bc8:	69ba      	ldr	r2, [r7, #24]
 8002bca:	693b      	ldr	r3, [r7, #16]
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002bd0:	4a29      	ldr	r2, [pc, #164]	; (8002c78 <HAL_GPIO_Init+0x354>)
 8002bd2:	69bb      	ldr	r3, [r7, #24]
 8002bd4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002bd6:	4b28      	ldr	r3, [pc, #160]	; (8002c78 <HAL_GPIO_Init+0x354>)
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bdc:	693b      	ldr	r3, [r7, #16]
 8002bde:	43db      	mvns	r3, r3
 8002be0:	69ba      	ldr	r2, [r7, #24]
 8002be2:	4013      	ands	r3, r2
 8002be4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d003      	beq.n	8002bfa <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002bf2:	69ba      	ldr	r2, [r7, #24]
 8002bf4:	693b      	ldr	r3, [r7, #16]
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002bfa:	4a1f      	ldr	r2, [pc, #124]	; (8002c78 <HAL_GPIO_Init+0x354>)
 8002bfc:	69bb      	ldr	r3, [r7, #24]
 8002bfe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c00:	4b1d      	ldr	r3, [pc, #116]	; (8002c78 <HAL_GPIO_Init+0x354>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c06:	693b      	ldr	r3, [r7, #16]
 8002c08:	43db      	mvns	r3, r3
 8002c0a:	69ba      	ldr	r2, [r7, #24]
 8002c0c:	4013      	ands	r3, r2
 8002c0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d003      	beq.n	8002c24 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002c1c:	69ba      	ldr	r2, [r7, #24]
 8002c1e:	693b      	ldr	r3, [r7, #16]
 8002c20:	4313      	orrs	r3, r2
 8002c22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002c24:	4a14      	ldr	r2, [pc, #80]	; (8002c78 <HAL_GPIO_Init+0x354>)
 8002c26:	69bb      	ldr	r3, [r7, #24]
 8002c28:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002c2a:	69fb      	ldr	r3, [r7, #28]
 8002c2c:	3301      	adds	r3, #1
 8002c2e:	61fb      	str	r3, [r7, #28]
 8002c30:	69fb      	ldr	r3, [r7, #28]
 8002c32:	2b0f      	cmp	r3, #15
 8002c34:	f67f ae86 	bls.w	8002944 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002c38:	bf00      	nop
 8002c3a:	bf00      	nop
 8002c3c:	3724      	adds	r7, #36	; 0x24
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c44:	4770      	bx	lr
 8002c46:	bf00      	nop
 8002c48:	40023800 	.word	0x40023800
 8002c4c:	40013800 	.word	0x40013800
 8002c50:	40020000 	.word	0x40020000
 8002c54:	40020400 	.word	0x40020400
 8002c58:	40020800 	.word	0x40020800
 8002c5c:	40020c00 	.word	0x40020c00
 8002c60:	40021000 	.word	0x40021000
 8002c64:	40021400 	.word	0x40021400
 8002c68:	40021800 	.word	0x40021800
 8002c6c:	40021c00 	.word	0x40021c00
 8002c70:	40022000 	.word	0x40022000
 8002c74:	40022400 	.word	0x40022400
 8002c78:	40013c00 	.word	0x40013c00

08002c7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	b083      	sub	sp, #12
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
 8002c84:	460b      	mov	r3, r1
 8002c86:	807b      	strh	r3, [r7, #2]
 8002c88:	4613      	mov	r3, r2
 8002c8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c8c:	787b      	ldrb	r3, [r7, #1]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d003      	beq.n	8002c9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c92:	887a      	ldrh	r2, [r7, #2]
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002c98:	e003      	b.n	8002ca2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002c9a:	887b      	ldrh	r3, [r7, #2]
 8002c9c:	041a      	lsls	r2, r3, #16
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	619a      	str	r2, [r3, #24]
}
 8002ca2:	bf00      	nop
 8002ca4:	370c      	adds	r7, #12
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cac:	4770      	bx	lr

08002cae <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002cae:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002cb0:	b08f      	sub	sp, #60	; 0x3c
 8002cb2:	af0a      	add	r7, sp, #40	; 0x28
 8002cb4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d101      	bne.n	8002cc0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	e116      	b.n	8002eee <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002ccc:	b2db      	uxtb	r3, r3
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d106      	bne.n	8002ce0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002cda:	6878      	ldr	r0, [r7, #4]
 8002cdc:	f008 f820 	bl	800ad20 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2203      	movs	r2, #3
 8002ce4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d102      	bne.n	8002cfa <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4618      	mov	r0, r3
 8002d00:	f004 fa21 	bl	8007146 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	603b      	str	r3, [r7, #0]
 8002d0a:	687e      	ldr	r6, [r7, #4]
 8002d0c:	466d      	mov	r5, sp
 8002d0e:	f106 0410 	add.w	r4, r6, #16
 8002d12:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d14:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d16:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d18:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d1a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002d1e:	e885 0003 	stmia.w	r5, {r0, r1}
 8002d22:	1d33      	adds	r3, r6, #4
 8002d24:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002d26:	6838      	ldr	r0, [r7, #0]
 8002d28:	f004 f902 	bl	8006f30 <USB_CoreInit>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d005      	beq.n	8002d3e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2202      	movs	r2, #2
 8002d36:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	e0d7      	b.n	8002eee <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	2100      	movs	r1, #0
 8002d44:	4618      	mov	r0, r3
 8002d46:	f004 fa0f 	bl	8007168 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	73fb      	strb	r3, [r7, #15]
 8002d4e:	e04a      	b.n	8002de6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002d50:	7bfa      	ldrb	r2, [r7, #15]
 8002d52:	6879      	ldr	r1, [r7, #4]
 8002d54:	4613      	mov	r3, r2
 8002d56:	00db      	lsls	r3, r3, #3
 8002d58:	4413      	add	r3, r2
 8002d5a:	009b      	lsls	r3, r3, #2
 8002d5c:	440b      	add	r3, r1
 8002d5e:	333d      	adds	r3, #61	; 0x3d
 8002d60:	2201      	movs	r2, #1
 8002d62:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002d64:	7bfa      	ldrb	r2, [r7, #15]
 8002d66:	6879      	ldr	r1, [r7, #4]
 8002d68:	4613      	mov	r3, r2
 8002d6a:	00db      	lsls	r3, r3, #3
 8002d6c:	4413      	add	r3, r2
 8002d6e:	009b      	lsls	r3, r3, #2
 8002d70:	440b      	add	r3, r1
 8002d72:	333c      	adds	r3, #60	; 0x3c
 8002d74:	7bfa      	ldrb	r2, [r7, #15]
 8002d76:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002d78:	7bfa      	ldrb	r2, [r7, #15]
 8002d7a:	7bfb      	ldrb	r3, [r7, #15]
 8002d7c:	b298      	uxth	r0, r3
 8002d7e:	6879      	ldr	r1, [r7, #4]
 8002d80:	4613      	mov	r3, r2
 8002d82:	00db      	lsls	r3, r3, #3
 8002d84:	4413      	add	r3, r2
 8002d86:	009b      	lsls	r3, r3, #2
 8002d88:	440b      	add	r3, r1
 8002d8a:	3344      	adds	r3, #68	; 0x44
 8002d8c:	4602      	mov	r2, r0
 8002d8e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002d90:	7bfa      	ldrb	r2, [r7, #15]
 8002d92:	6879      	ldr	r1, [r7, #4]
 8002d94:	4613      	mov	r3, r2
 8002d96:	00db      	lsls	r3, r3, #3
 8002d98:	4413      	add	r3, r2
 8002d9a:	009b      	lsls	r3, r3, #2
 8002d9c:	440b      	add	r3, r1
 8002d9e:	3340      	adds	r3, #64	; 0x40
 8002da0:	2200      	movs	r2, #0
 8002da2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002da4:	7bfa      	ldrb	r2, [r7, #15]
 8002da6:	6879      	ldr	r1, [r7, #4]
 8002da8:	4613      	mov	r3, r2
 8002daa:	00db      	lsls	r3, r3, #3
 8002dac:	4413      	add	r3, r2
 8002dae:	009b      	lsls	r3, r3, #2
 8002db0:	440b      	add	r3, r1
 8002db2:	3348      	adds	r3, #72	; 0x48
 8002db4:	2200      	movs	r2, #0
 8002db6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002db8:	7bfa      	ldrb	r2, [r7, #15]
 8002dba:	6879      	ldr	r1, [r7, #4]
 8002dbc:	4613      	mov	r3, r2
 8002dbe:	00db      	lsls	r3, r3, #3
 8002dc0:	4413      	add	r3, r2
 8002dc2:	009b      	lsls	r3, r3, #2
 8002dc4:	440b      	add	r3, r1
 8002dc6:	334c      	adds	r3, #76	; 0x4c
 8002dc8:	2200      	movs	r2, #0
 8002dca:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002dcc:	7bfa      	ldrb	r2, [r7, #15]
 8002dce:	6879      	ldr	r1, [r7, #4]
 8002dd0:	4613      	mov	r3, r2
 8002dd2:	00db      	lsls	r3, r3, #3
 8002dd4:	4413      	add	r3, r2
 8002dd6:	009b      	lsls	r3, r3, #2
 8002dd8:	440b      	add	r3, r1
 8002dda:	3354      	adds	r3, #84	; 0x54
 8002ddc:	2200      	movs	r2, #0
 8002dde:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002de0:	7bfb      	ldrb	r3, [r7, #15]
 8002de2:	3301      	adds	r3, #1
 8002de4:	73fb      	strb	r3, [r7, #15]
 8002de6:	7bfa      	ldrb	r2, [r7, #15]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	429a      	cmp	r2, r3
 8002dee:	d3af      	bcc.n	8002d50 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002df0:	2300      	movs	r3, #0
 8002df2:	73fb      	strb	r3, [r7, #15]
 8002df4:	e044      	b.n	8002e80 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002df6:	7bfa      	ldrb	r2, [r7, #15]
 8002df8:	6879      	ldr	r1, [r7, #4]
 8002dfa:	4613      	mov	r3, r2
 8002dfc:	00db      	lsls	r3, r3, #3
 8002dfe:	4413      	add	r3, r2
 8002e00:	009b      	lsls	r3, r3, #2
 8002e02:	440b      	add	r3, r1
 8002e04:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002e08:	2200      	movs	r2, #0
 8002e0a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002e0c:	7bfa      	ldrb	r2, [r7, #15]
 8002e0e:	6879      	ldr	r1, [r7, #4]
 8002e10:	4613      	mov	r3, r2
 8002e12:	00db      	lsls	r3, r3, #3
 8002e14:	4413      	add	r3, r2
 8002e16:	009b      	lsls	r3, r3, #2
 8002e18:	440b      	add	r3, r1
 8002e1a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002e1e:	7bfa      	ldrb	r2, [r7, #15]
 8002e20:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002e22:	7bfa      	ldrb	r2, [r7, #15]
 8002e24:	6879      	ldr	r1, [r7, #4]
 8002e26:	4613      	mov	r3, r2
 8002e28:	00db      	lsls	r3, r3, #3
 8002e2a:	4413      	add	r3, r2
 8002e2c:	009b      	lsls	r3, r3, #2
 8002e2e:	440b      	add	r3, r1
 8002e30:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002e34:	2200      	movs	r2, #0
 8002e36:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002e38:	7bfa      	ldrb	r2, [r7, #15]
 8002e3a:	6879      	ldr	r1, [r7, #4]
 8002e3c:	4613      	mov	r3, r2
 8002e3e:	00db      	lsls	r3, r3, #3
 8002e40:	4413      	add	r3, r2
 8002e42:	009b      	lsls	r3, r3, #2
 8002e44:	440b      	add	r3, r1
 8002e46:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002e4e:	7bfa      	ldrb	r2, [r7, #15]
 8002e50:	6879      	ldr	r1, [r7, #4]
 8002e52:	4613      	mov	r3, r2
 8002e54:	00db      	lsls	r3, r3, #3
 8002e56:	4413      	add	r3, r2
 8002e58:	009b      	lsls	r3, r3, #2
 8002e5a:	440b      	add	r3, r1
 8002e5c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002e60:	2200      	movs	r2, #0
 8002e62:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002e64:	7bfa      	ldrb	r2, [r7, #15]
 8002e66:	6879      	ldr	r1, [r7, #4]
 8002e68:	4613      	mov	r3, r2
 8002e6a:	00db      	lsls	r3, r3, #3
 8002e6c:	4413      	add	r3, r2
 8002e6e:	009b      	lsls	r3, r3, #2
 8002e70:	440b      	add	r3, r1
 8002e72:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002e76:	2200      	movs	r2, #0
 8002e78:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e7a:	7bfb      	ldrb	r3, [r7, #15]
 8002e7c:	3301      	adds	r3, #1
 8002e7e:	73fb      	strb	r3, [r7, #15]
 8002e80:	7bfa      	ldrb	r2, [r7, #15]
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	429a      	cmp	r2, r3
 8002e88:	d3b5      	bcc.n	8002df6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	603b      	str	r3, [r7, #0]
 8002e90:	687e      	ldr	r6, [r7, #4]
 8002e92:	466d      	mov	r5, sp
 8002e94:	f106 0410 	add.w	r4, r6, #16
 8002e98:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e9a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e9c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e9e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ea0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002ea4:	e885 0003 	stmia.w	r5, {r0, r1}
 8002ea8:	1d33      	adds	r3, r6, #4
 8002eaa:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002eac:	6838      	ldr	r0, [r7, #0]
 8002eae:	f004 f9a7 	bl	8007200 <USB_DevInit>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d005      	beq.n	8002ec4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2202      	movs	r2, #2
 8002ebc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	e014      	b.n	8002eee <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2201      	movs	r2, #1
 8002ed0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ed8:	2b01      	cmp	r3, #1
 8002eda:	d102      	bne.n	8002ee2 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002edc:	6878      	ldr	r0, [r7, #4]
 8002ede:	f001 f97b 	bl	80041d8 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f005 faf5 	bl	80084d6 <USB_DevDisconnect>

  return HAL_OK;
 8002eec:	2300      	movs	r3, #0
}
 8002eee:	4618      	mov	r0, r3
 8002ef0:	3714      	adds	r7, #20
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002ef6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002ef6:	b580      	push	{r7, lr}
 8002ef8:	b082      	sub	sp, #8
 8002efa:	af00      	add	r7, sp, #0
 8002efc:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002f04:	2b01      	cmp	r3, #1
 8002f06:	d101      	bne.n	8002f0c <HAL_PCD_Start+0x16>
 8002f08:	2302      	movs	r3, #2
 8002f0a:	e012      	b.n	8002f32 <HAL_PCD_Start+0x3c>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2201      	movs	r2, #1
 8002f10:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  __HAL_PCD_ENABLE(hpcd);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4618      	mov	r0, r3
 8002f1a:	f004 f903 	bl	8007124 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4618      	mov	r0, r3
 8002f24:	f005 fab6 	bl	8008494 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002f30:	2300      	movs	r3, #0
}
 8002f32:	4618      	mov	r0, r3
 8002f34:	3708      	adds	r7, #8
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}

08002f3a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002f3a:	b590      	push	{r4, r7, lr}
 8002f3c:	b08d      	sub	sp, #52	; 0x34
 8002f3e:	af00      	add	r7, sp, #0
 8002f40:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f48:	6a3b      	ldr	r3, [r7, #32]
 8002f4a:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4618      	mov	r0, r3
 8002f52:	f005 fb74 	bl	800863e <USB_GetMode>
 8002f56:	4603      	mov	r3, r0
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	f040 84b7 	bne.w	80038cc <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4618      	mov	r0, r3
 8002f64:	f005 fad8 	bl	8008518 <USB_ReadInterrupts>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	f000 84ad 	beq.w	80038ca <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002f70:	69fb      	ldr	r3, [r7, #28]
 8002f72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f76:	689b      	ldr	r3, [r3, #8]
 8002f78:	0a1b      	lsrs	r3, r3, #8
 8002f7a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4618      	mov	r0, r3
 8002f8a:	f005 fac5 	bl	8008518 <USB_ReadInterrupts>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	f003 0302 	and.w	r3, r3, #2
 8002f94:	2b02      	cmp	r3, #2
 8002f96:	d107      	bne.n	8002fa8 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	695a      	ldr	r2, [r3, #20]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f002 0202 	and.w	r2, r2, #2
 8002fa6:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4618      	mov	r0, r3
 8002fae:	f005 fab3 	bl	8008518 <USB_ReadInterrupts>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	f003 0310 	and.w	r3, r3, #16
 8002fb8:	2b10      	cmp	r3, #16
 8002fba:	d161      	bne.n	8003080 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	699a      	ldr	r2, [r3, #24]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f022 0210 	bic.w	r2, r2, #16
 8002fca:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002fcc:	6a3b      	ldr	r3, [r7, #32]
 8002fce:	6a1b      	ldr	r3, [r3, #32]
 8002fd0:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002fd2:	69bb      	ldr	r3, [r7, #24]
 8002fd4:	f003 020f 	and.w	r2, r3, #15
 8002fd8:	4613      	mov	r3, r2
 8002fda:	00db      	lsls	r3, r3, #3
 8002fdc:	4413      	add	r3, r2
 8002fde:	009b      	lsls	r3, r3, #2
 8002fe0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002fe4:	687a      	ldr	r2, [r7, #4]
 8002fe6:	4413      	add	r3, r2
 8002fe8:	3304      	adds	r3, #4
 8002fea:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002fec:	69bb      	ldr	r3, [r7, #24]
 8002fee:	0c5b      	lsrs	r3, r3, #17
 8002ff0:	f003 030f 	and.w	r3, r3, #15
 8002ff4:	2b02      	cmp	r3, #2
 8002ff6:	d124      	bne.n	8003042 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002ff8:	69ba      	ldr	r2, [r7, #24]
 8002ffa:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002ffe:	4013      	ands	r3, r2
 8003000:	2b00      	cmp	r3, #0
 8003002:	d035      	beq.n	8003070 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003004:	697b      	ldr	r3, [r7, #20]
 8003006:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003008:	69bb      	ldr	r3, [r7, #24]
 800300a:	091b      	lsrs	r3, r3, #4
 800300c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800300e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003012:	b29b      	uxth	r3, r3
 8003014:	461a      	mov	r2, r3
 8003016:	6a38      	ldr	r0, [r7, #32]
 8003018:	f005 f8ea 	bl	80081f0 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800301c:	697b      	ldr	r3, [r7, #20]
 800301e:	691a      	ldr	r2, [r3, #16]
 8003020:	69bb      	ldr	r3, [r7, #24]
 8003022:	091b      	lsrs	r3, r3, #4
 8003024:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003028:	441a      	add	r2, r3
 800302a:	697b      	ldr	r3, [r7, #20]
 800302c:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800302e:	697b      	ldr	r3, [r7, #20]
 8003030:	6a1a      	ldr	r2, [r3, #32]
 8003032:	69bb      	ldr	r3, [r7, #24]
 8003034:	091b      	lsrs	r3, r3, #4
 8003036:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800303a:	441a      	add	r2, r3
 800303c:	697b      	ldr	r3, [r7, #20]
 800303e:	621a      	str	r2, [r3, #32]
 8003040:	e016      	b.n	8003070 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003042:	69bb      	ldr	r3, [r7, #24]
 8003044:	0c5b      	lsrs	r3, r3, #17
 8003046:	f003 030f 	and.w	r3, r3, #15
 800304a:	2b06      	cmp	r3, #6
 800304c:	d110      	bne.n	8003070 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003054:	2208      	movs	r2, #8
 8003056:	4619      	mov	r1, r3
 8003058:	6a38      	ldr	r0, [r7, #32]
 800305a:	f005 f8c9 	bl	80081f0 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800305e:	697b      	ldr	r3, [r7, #20]
 8003060:	6a1a      	ldr	r2, [r3, #32]
 8003062:	69bb      	ldr	r3, [r7, #24]
 8003064:	091b      	lsrs	r3, r3, #4
 8003066:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800306a:	441a      	add	r2, r3
 800306c:	697b      	ldr	r3, [r7, #20]
 800306e:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	699a      	ldr	r2, [r3, #24]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f042 0210 	orr.w	r2, r2, #16
 800307e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4618      	mov	r0, r3
 8003086:	f005 fa47 	bl	8008518 <USB_ReadInterrupts>
 800308a:	4603      	mov	r3, r0
 800308c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003090:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003094:	f040 80a7 	bne.w	80031e6 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003098:	2300      	movs	r3, #0
 800309a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4618      	mov	r0, r3
 80030a2:	f005 fa4c 	bl	800853e <USB_ReadDevAllOutEpInterrupt>
 80030a6:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80030a8:	e099      	b.n	80031de <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80030aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030ac:	f003 0301 	and.w	r3, r3, #1
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	f000 808e 	beq.w	80031d2 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030bc:	b2d2      	uxtb	r2, r2
 80030be:	4611      	mov	r1, r2
 80030c0:	4618      	mov	r0, r3
 80030c2:	f005 fa70 	bl	80085a6 <USB_ReadDevOutEPInterrupt>
 80030c6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80030c8:	693b      	ldr	r3, [r7, #16]
 80030ca:	f003 0301 	and.w	r3, r3, #1
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d00c      	beq.n	80030ec <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80030d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030d4:	015a      	lsls	r2, r3, #5
 80030d6:	69fb      	ldr	r3, [r7, #28]
 80030d8:	4413      	add	r3, r2
 80030da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030de:	461a      	mov	r2, r3
 80030e0:	2301      	movs	r3, #1
 80030e2:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80030e4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80030e6:	6878      	ldr	r0, [r7, #4]
 80030e8:	f000 fef0 	bl	8003ecc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80030ec:	693b      	ldr	r3, [r7, #16]
 80030ee:	f003 0308 	and.w	r3, r3, #8
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d00c      	beq.n	8003110 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80030f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030f8:	015a      	lsls	r2, r3, #5
 80030fa:	69fb      	ldr	r3, [r7, #28]
 80030fc:	4413      	add	r3, r2
 80030fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003102:	461a      	mov	r2, r3
 8003104:	2308      	movs	r3, #8
 8003106:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003108:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800310a:	6878      	ldr	r0, [r7, #4]
 800310c:	f000 ffc6 	bl	800409c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003110:	693b      	ldr	r3, [r7, #16]
 8003112:	f003 0310 	and.w	r3, r3, #16
 8003116:	2b00      	cmp	r3, #0
 8003118:	d008      	beq.n	800312c <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800311a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800311c:	015a      	lsls	r2, r3, #5
 800311e:	69fb      	ldr	r3, [r7, #28]
 8003120:	4413      	add	r3, r2
 8003122:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003126:	461a      	mov	r2, r3
 8003128:	2310      	movs	r3, #16
 800312a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800312c:	693b      	ldr	r3, [r7, #16]
 800312e:	f003 0302 	and.w	r3, r3, #2
 8003132:	2b00      	cmp	r3, #0
 8003134:	d030      	beq.n	8003198 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003136:	6a3b      	ldr	r3, [r7, #32]
 8003138:	695b      	ldr	r3, [r3, #20]
 800313a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800313e:	2b80      	cmp	r3, #128	; 0x80
 8003140:	d109      	bne.n	8003156 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003142:	69fb      	ldr	r3, [r7, #28]
 8003144:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	69fa      	ldr	r2, [r7, #28]
 800314c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003150:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003154:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003156:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003158:	4613      	mov	r3, r2
 800315a:	00db      	lsls	r3, r3, #3
 800315c:	4413      	add	r3, r2
 800315e:	009b      	lsls	r3, r3, #2
 8003160:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003164:	687a      	ldr	r2, [r7, #4]
 8003166:	4413      	add	r3, r2
 8003168:	3304      	adds	r3, #4
 800316a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800316c:	697b      	ldr	r3, [r7, #20]
 800316e:	78db      	ldrb	r3, [r3, #3]
 8003170:	2b01      	cmp	r3, #1
 8003172:	d108      	bne.n	8003186 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003174:	697b      	ldr	r3, [r7, #20]
 8003176:	2200      	movs	r2, #0
 8003178:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800317a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800317c:	b2db      	uxtb	r3, r3
 800317e:	4619      	mov	r1, r3
 8003180:	6878      	ldr	r0, [r7, #4]
 8003182:	f007 ff01 	bl	800af88 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003188:	015a      	lsls	r2, r3, #5
 800318a:	69fb      	ldr	r3, [r7, #28]
 800318c:	4413      	add	r3, r2
 800318e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003192:	461a      	mov	r2, r3
 8003194:	2302      	movs	r3, #2
 8003196:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003198:	693b      	ldr	r3, [r7, #16]
 800319a:	f003 0320 	and.w	r3, r3, #32
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d008      	beq.n	80031b4 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80031a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031a4:	015a      	lsls	r2, r3, #5
 80031a6:	69fb      	ldr	r3, [r7, #28]
 80031a8:	4413      	add	r3, r2
 80031aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031ae:	461a      	mov	r2, r3
 80031b0:	2320      	movs	r3, #32
 80031b2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80031b4:	693b      	ldr	r3, [r7, #16]
 80031b6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d009      	beq.n	80031d2 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80031be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c0:	015a      	lsls	r2, r3, #5
 80031c2:	69fb      	ldr	r3, [r7, #28]
 80031c4:	4413      	add	r3, r2
 80031c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031ca:	461a      	mov	r2, r3
 80031cc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80031d0:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80031d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031d4:	3301      	adds	r3, #1
 80031d6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80031d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031da:	085b      	lsrs	r3, r3, #1
 80031dc:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80031de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	f47f af62 	bne.w	80030aa <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4618      	mov	r0, r3
 80031ec:	f005 f994 	bl	8008518 <USB_ReadInterrupts>
 80031f0:	4603      	mov	r3, r0
 80031f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80031f6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80031fa:	f040 80db 	bne.w	80033b4 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4618      	mov	r0, r3
 8003204:	f005 f9b5 	bl	8008572 <USB_ReadDevAllInEpInterrupt>
 8003208:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800320a:	2300      	movs	r3, #0
 800320c:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800320e:	e0cd      	b.n	80033ac <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003210:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003212:	f003 0301 	and.w	r3, r3, #1
 8003216:	2b00      	cmp	r3, #0
 8003218:	f000 80c2 	beq.w	80033a0 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003222:	b2d2      	uxtb	r2, r2
 8003224:	4611      	mov	r1, r2
 8003226:	4618      	mov	r0, r3
 8003228:	f005 f9db 	bl	80085e2 <USB_ReadDevInEPInterrupt>
 800322c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800322e:	693b      	ldr	r3, [r7, #16]
 8003230:	f003 0301 	and.w	r3, r3, #1
 8003234:	2b00      	cmp	r3, #0
 8003236:	d057      	beq.n	80032e8 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800323a:	f003 030f 	and.w	r3, r3, #15
 800323e:	2201      	movs	r2, #1
 8003240:	fa02 f303 	lsl.w	r3, r2, r3
 8003244:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003246:	69fb      	ldr	r3, [r7, #28]
 8003248:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800324c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	43db      	mvns	r3, r3
 8003252:	69f9      	ldr	r1, [r7, #28]
 8003254:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003258:	4013      	ands	r3, r2
 800325a:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800325c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800325e:	015a      	lsls	r2, r3, #5
 8003260:	69fb      	ldr	r3, [r7, #28]
 8003262:	4413      	add	r3, r2
 8003264:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003268:	461a      	mov	r2, r3
 800326a:	2301      	movs	r3, #1
 800326c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	691b      	ldr	r3, [r3, #16]
 8003272:	2b01      	cmp	r3, #1
 8003274:	d132      	bne.n	80032dc <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003276:	6879      	ldr	r1, [r7, #4]
 8003278:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800327a:	4613      	mov	r3, r2
 800327c:	00db      	lsls	r3, r3, #3
 800327e:	4413      	add	r3, r2
 8003280:	009b      	lsls	r3, r3, #2
 8003282:	440b      	add	r3, r1
 8003284:	334c      	adds	r3, #76	; 0x4c
 8003286:	6819      	ldr	r1, [r3, #0]
 8003288:	6878      	ldr	r0, [r7, #4]
 800328a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800328c:	4613      	mov	r3, r2
 800328e:	00db      	lsls	r3, r3, #3
 8003290:	4413      	add	r3, r2
 8003292:	009b      	lsls	r3, r3, #2
 8003294:	4403      	add	r3, r0
 8003296:	3348      	adds	r3, #72	; 0x48
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4419      	add	r1, r3
 800329c:	6878      	ldr	r0, [r7, #4]
 800329e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032a0:	4613      	mov	r3, r2
 80032a2:	00db      	lsls	r3, r3, #3
 80032a4:	4413      	add	r3, r2
 80032a6:	009b      	lsls	r3, r3, #2
 80032a8:	4403      	add	r3, r0
 80032aa:	334c      	adds	r3, #76	; 0x4c
 80032ac:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80032ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d113      	bne.n	80032dc <HAL_PCD_IRQHandler+0x3a2>
 80032b4:	6879      	ldr	r1, [r7, #4]
 80032b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032b8:	4613      	mov	r3, r2
 80032ba:	00db      	lsls	r3, r3, #3
 80032bc:	4413      	add	r3, r2
 80032be:	009b      	lsls	r3, r3, #2
 80032c0:	440b      	add	r3, r1
 80032c2:	3354      	adds	r3, #84	; 0x54
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d108      	bne.n	80032dc <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6818      	ldr	r0, [r3, #0]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80032d4:	461a      	mov	r2, r3
 80032d6:	2101      	movs	r1, #1
 80032d8:	f005 f9e4 	bl	80086a4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80032dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032de:	b2db      	uxtb	r3, r3
 80032e0:	4619      	mov	r1, r3
 80032e2:	6878      	ldr	r0, [r7, #4]
 80032e4:	f007 fdcb 	bl	800ae7e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80032e8:	693b      	ldr	r3, [r7, #16]
 80032ea:	f003 0308 	and.w	r3, r3, #8
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d008      	beq.n	8003304 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80032f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f4:	015a      	lsls	r2, r3, #5
 80032f6:	69fb      	ldr	r3, [r7, #28]
 80032f8:	4413      	add	r3, r2
 80032fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80032fe:	461a      	mov	r2, r3
 8003300:	2308      	movs	r3, #8
 8003302:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003304:	693b      	ldr	r3, [r7, #16]
 8003306:	f003 0310 	and.w	r3, r3, #16
 800330a:	2b00      	cmp	r3, #0
 800330c:	d008      	beq.n	8003320 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800330e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003310:	015a      	lsls	r2, r3, #5
 8003312:	69fb      	ldr	r3, [r7, #28]
 8003314:	4413      	add	r3, r2
 8003316:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800331a:	461a      	mov	r2, r3
 800331c:	2310      	movs	r3, #16
 800331e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003320:	693b      	ldr	r3, [r7, #16]
 8003322:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003326:	2b00      	cmp	r3, #0
 8003328:	d008      	beq.n	800333c <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800332a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800332c:	015a      	lsls	r2, r3, #5
 800332e:	69fb      	ldr	r3, [r7, #28]
 8003330:	4413      	add	r3, r2
 8003332:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003336:	461a      	mov	r2, r3
 8003338:	2340      	movs	r3, #64	; 0x40
 800333a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800333c:	693b      	ldr	r3, [r7, #16]
 800333e:	f003 0302 	and.w	r3, r3, #2
 8003342:	2b00      	cmp	r3, #0
 8003344:	d023      	beq.n	800338e <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003346:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003348:	6a38      	ldr	r0, [r7, #32]
 800334a:	f004 f8b7 	bl	80074bc <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800334e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003350:	4613      	mov	r3, r2
 8003352:	00db      	lsls	r3, r3, #3
 8003354:	4413      	add	r3, r2
 8003356:	009b      	lsls	r3, r3, #2
 8003358:	3338      	adds	r3, #56	; 0x38
 800335a:	687a      	ldr	r2, [r7, #4]
 800335c:	4413      	add	r3, r2
 800335e:	3304      	adds	r3, #4
 8003360:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003362:	697b      	ldr	r3, [r7, #20]
 8003364:	78db      	ldrb	r3, [r3, #3]
 8003366:	2b01      	cmp	r3, #1
 8003368:	d108      	bne.n	800337c <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800336a:	697b      	ldr	r3, [r7, #20]
 800336c:	2200      	movs	r2, #0
 800336e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003372:	b2db      	uxtb	r3, r3
 8003374:	4619      	mov	r1, r3
 8003376:	6878      	ldr	r0, [r7, #4]
 8003378:	f007 fe18 	bl	800afac <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800337c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800337e:	015a      	lsls	r2, r3, #5
 8003380:	69fb      	ldr	r3, [r7, #28]
 8003382:	4413      	add	r3, r2
 8003384:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003388:	461a      	mov	r2, r3
 800338a:	2302      	movs	r3, #2
 800338c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800338e:	693b      	ldr	r3, [r7, #16]
 8003390:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003394:	2b00      	cmp	r3, #0
 8003396:	d003      	beq.n	80033a0 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003398:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800339a:	6878      	ldr	r0, [r7, #4]
 800339c:	f000 fd08 	bl	8003db0 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80033a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033a2:	3301      	adds	r3, #1
 80033a4:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80033a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033a8:	085b      	lsrs	r3, r3, #1
 80033aa:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80033ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	f47f af2e 	bne.w	8003210 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4618      	mov	r0, r3
 80033ba:	f005 f8ad 	bl	8008518 <USB_ReadInterrupts>
 80033be:	4603      	mov	r3, r0
 80033c0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80033c4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80033c8:	d122      	bne.n	8003410 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80033ca:	69fb      	ldr	r3, [r7, #28]
 80033cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	69fa      	ldr	r2, [r7, #28]
 80033d4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80033d8:	f023 0301 	bic.w	r3, r3, #1
 80033dc:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80033e4:	2b01      	cmp	r3, #1
 80033e6:	d108      	bne.n	80033fa <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2200      	movs	r2, #0
 80033ec:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80033f0:	2100      	movs	r1, #0
 80033f2:	6878      	ldr	r0, [r7, #4]
 80033f4:	f007 ff92 	bl	800b31c <HAL_PCDEx_LPM_Callback>
 80033f8:	e002      	b.n	8003400 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80033fa:	6878      	ldr	r0, [r7, #4]
 80033fc:	f007 fdb6 	bl	800af6c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	695a      	ldr	r2, [r3, #20]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800340e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4618      	mov	r0, r3
 8003416:	f005 f87f 	bl	8008518 <USB_ReadInterrupts>
 800341a:	4603      	mov	r3, r0
 800341c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003420:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003424:	d112      	bne.n	800344c <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003426:	69fb      	ldr	r3, [r7, #28]
 8003428:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800342c:	689b      	ldr	r3, [r3, #8]
 800342e:	f003 0301 	and.w	r3, r3, #1
 8003432:	2b01      	cmp	r3, #1
 8003434:	d102      	bne.n	800343c <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003436:	6878      	ldr	r0, [r7, #4]
 8003438:	f007 fd72 	bl	800af20 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	695a      	ldr	r2, [r3, #20]
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800344a:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4618      	mov	r0, r3
 8003452:	f005 f861 	bl	8008518 <USB_ReadInterrupts>
 8003456:	4603      	mov	r3, r0
 8003458:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800345c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003460:	d121      	bne.n	80034a6 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	695a      	ldr	r2, [r3, #20]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8003470:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8003478:	2b00      	cmp	r3, #0
 800347a:	d111      	bne.n	80034a0 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2201      	movs	r2, #1
 8003480:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800348a:	089b      	lsrs	r3, r3, #2
 800348c:	f003 020f 	and.w	r2, r3, #15
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003496:	2101      	movs	r1, #1
 8003498:	6878      	ldr	r0, [r7, #4]
 800349a:	f007 ff3f 	bl	800b31c <HAL_PCDEx_LPM_Callback>
 800349e:	e002      	b.n	80034a6 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80034a0:	6878      	ldr	r0, [r7, #4]
 80034a2:	f007 fd3d 	bl	800af20 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4618      	mov	r0, r3
 80034ac:	f005 f834 	bl	8008518 <USB_ReadInterrupts>
 80034b0:	4603      	mov	r3, r0
 80034b2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80034b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034ba:	f040 80b7 	bne.w	800362c <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80034be:	69fb      	ldr	r3, [r7, #28]
 80034c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	69fa      	ldr	r2, [r7, #28]
 80034c8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80034cc:	f023 0301 	bic.w	r3, r3, #1
 80034d0:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	2110      	movs	r1, #16
 80034d8:	4618      	mov	r0, r3
 80034da:	f003 ffef 	bl	80074bc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80034de:	2300      	movs	r3, #0
 80034e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80034e2:	e046      	b.n	8003572 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80034e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034e6:	015a      	lsls	r2, r3, #5
 80034e8:	69fb      	ldr	r3, [r7, #28]
 80034ea:	4413      	add	r3, r2
 80034ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034f0:	461a      	mov	r2, r3
 80034f2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80034f6:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80034f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034fa:	015a      	lsls	r2, r3, #5
 80034fc:	69fb      	ldr	r3, [r7, #28]
 80034fe:	4413      	add	r3, r2
 8003500:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003508:	0151      	lsls	r1, r2, #5
 800350a:	69fa      	ldr	r2, [r7, #28]
 800350c:	440a      	add	r2, r1
 800350e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003512:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003516:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003518:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800351a:	015a      	lsls	r2, r3, #5
 800351c:	69fb      	ldr	r3, [r7, #28]
 800351e:	4413      	add	r3, r2
 8003520:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003524:	461a      	mov	r2, r3
 8003526:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800352a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800352c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800352e:	015a      	lsls	r2, r3, #5
 8003530:	69fb      	ldr	r3, [r7, #28]
 8003532:	4413      	add	r3, r2
 8003534:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800353c:	0151      	lsls	r1, r2, #5
 800353e:	69fa      	ldr	r2, [r7, #28]
 8003540:	440a      	add	r2, r1
 8003542:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003546:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800354a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800354c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800354e:	015a      	lsls	r2, r3, #5
 8003550:	69fb      	ldr	r3, [r7, #28]
 8003552:	4413      	add	r3, r2
 8003554:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800355c:	0151      	lsls	r1, r2, #5
 800355e:	69fa      	ldr	r2, [r7, #28]
 8003560:	440a      	add	r2, r1
 8003562:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003566:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800356a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800356c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800356e:	3301      	adds	r3, #1
 8003570:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003578:	429a      	cmp	r2, r3
 800357a:	d3b3      	bcc.n	80034e4 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800357c:	69fb      	ldr	r3, [r7, #28]
 800357e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003582:	69db      	ldr	r3, [r3, #28]
 8003584:	69fa      	ldr	r2, [r7, #28]
 8003586:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800358a:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800358e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003594:	2b00      	cmp	r3, #0
 8003596:	d016      	beq.n	80035c6 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003598:	69fb      	ldr	r3, [r7, #28]
 800359a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800359e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80035a2:	69fa      	ldr	r2, [r7, #28]
 80035a4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80035a8:	f043 030b 	orr.w	r3, r3, #11
 80035ac:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80035b0:	69fb      	ldr	r3, [r7, #28]
 80035b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035b8:	69fa      	ldr	r2, [r7, #28]
 80035ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80035be:	f043 030b 	orr.w	r3, r3, #11
 80035c2:	6453      	str	r3, [r2, #68]	; 0x44
 80035c4:	e015      	b.n	80035f2 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80035c6:	69fb      	ldr	r3, [r7, #28]
 80035c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035cc:	695a      	ldr	r2, [r3, #20]
 80035ce:	69fb      	ldr	r3, [r7, #28]
 80035d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035d4:	4619      	mov	r1, r3
 80035d6:	f242 032b 	movw	r3, #8235	; 0x202b
 80035da:	4313      	orrs	r3, r2
 80035dc:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80035de:	69fb      	ldr	r3, [r7, #28]
 80035e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035e4:	691b      	ldr	r3, [r3, #16]
 80035e6:	69fa      	ldr	r2, [r7, #28]
 80035e8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80035ec:	f043 030b 	orr.w	r3, r3, #11
 80035f0:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80035f2:	69fb      	ldr	r3, [r7, #28]
 80035f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	69fa      	ldr	r2, [r7, #28]
 80035fc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003600:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003604:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6818      	ldr	r0, [r3, #0]
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	691b      	ldr	r3, [r3, #16]
 800360e:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003616:	461a      	mov	r2, r3
 8003618:	f005 f844 	bl	80086a4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	695a      	ldr	r2, [r3, #20]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800362a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4618      	mov	r0, r3
 8003632:	f004 ff71 	bl	8008518 <USB_ReadInterrupts>
 8003636:	4603      	mov	r3, r0
 8003638:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800363c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003640:	d124      	bne.n	800368c <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4618      	mov	r0, r3
 8003648:	f005 f808 	bl	800865c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4618      	mov	r0, r3
 8003652:	f003 ffb0 	bl	80075b6 <USB_GetDevSpeed>
 8003656:	4603      	mov	r3, r0
 8003658:	461a      	mov	r2, r3
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681c      	ldr	r4, [r3, #0]
 8003662:	f001 fa83 	bl	8004b6c <HAL_RCC_GetHCLKFreq>
 8003666:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800366c:	b2db      	uxtb	r3, r3
 800366e:	461a      	mov	r2, r3
 8003670:	4620      	mov	r0, r4
 8003672:	f003 fcb5 	bl	8006fe0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003676:	6878      	ldr	r0, [r7, #4]
 8003678:	f007 fc29 	bl	800aece <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	695a      	ldr	r2, [r3, #20]
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800368a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4618      	mov	r0, r3
 8003692:	f004 ff41 	bl	8008518 <USB_ReadInterrupts>
 8003696:	4603      	mov	r3, r0
 8003698:	f003 0308 	and.w	r3, r3, #8
 800369c:	2b08      	cmp	r3, #8
 800369e:	d10a      	bne.n	80036b6 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80036a0:	6878      	ldr	r0, [r7, #4]
 80036a2:	f007 fc06 	bl	800aeb2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	695a      	ldr	r2, [r3, #20]
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f002 0208 	and.w	r2, r2, #8
 80036b4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4618      	mov	r0, r3
 80036bc:	f004 ff2c 	bl	8008518 <USB_ReadInterrupts>
 80036c0:	4603      	mov	r3, r0
 80036c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036c6:	2b80      	cmp	r3, #128	; 0x80
 80036c8:	d122      	bne.n	8003710 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80036ca:	6a3b      	ldr	r3, [r7, #32]
 80036cc:	699b      	ldr	r3, [r3, #24]
 80036ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80036d2:	6a3b      	ldr	r3, [r7, #32]
 80036d4:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80036d6:	2301      	movs	r3, #1
 80036d8:	627b      	str	r3, [r7, #36]	; 0x24
 80036da:	e014      	b.n	8003706 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80036dc:	6879      	ldr	r1, [r7, #4]
 80036de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036e0:	4613      	mov	r3, r2
 80036e2:	00db      	lsls	r3, r3, #3
 80036e4:	4413      	add	r3, r2
 80036e6:	009b      	lsls	r3, r3, #2
 80036e8:	440b      	add	r3, r1
 80036ea:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80036ee:	781b      	ldrb	r3, [r3, #0]
 80036f0:	2b01      	cmp	r3, #1
 80036f2:	d105      	bne.n	8003700 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80036f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036f6:	b2db      	uxtb	r3, r3
 80036f8:	4619      	mov	r1, r3
 80036fa:	6878      	ldr	r0, [r7, #4]
 80036fc:	f000 fb27 	bl	8003d4e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003702:	3301      	adds	r3, #1
 8003704:	627b      	str	r3, [r7, #36]	; 0x24
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800370c:	429a      	cmp	r2, r3
 800370e:	d3e5      	bcc.n	80036dc <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4618      	mov	r0, r3
 8003716:	f004 feff 	bl	8008518 <USB_ReadInterrupts>
 800371a:	4603      	mov	r3, r0
 800371c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003720:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003724:	d13b      	bne.n	800379e <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003726:	2301      	movs	r3, #1
 8003728:	627b      	str	r3, [r7, #36]	; 0x24
 800372a:	e02b      	b.n	8003784 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800372c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800372e:	015a      	lsls	r2, r3, #5
 8003730:	69fb      	ldr	r3, [r7, #28]
 8003732:	4413      	add	r3, r2
 8003734:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800373c:	6879      	ldr	r1, [r7, #4]
 800373e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003740:	4613      	mov	r3, r2
 8003742:	00db      	lsls	r3, r3, #3
 8003744:	4413      	add	r3, r2
 8003746:	009b      	lsls	r3, r3, #2
 8003748:	440b      	add	r3, r1
 800374a:	3340      	adds	r3, #64	; 0x40
 800374c:	781b      	ldrb	r3, [r3, #0]
 800374e:	2b01      	cmp	r3, #1
 8003750:	d115      	bne.n	800377e <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003752:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003754:	2b00      	cmp	r3, #0
 8003756:	da12      	bge.n	800377e <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003758:	6879      	ldr	r1, [r7, #4]
 800375a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800375c:	4613      	mov	r3, r2
 800375e:	00db      	lsls	r3, r3, #3
 8003760:	4413      	add	r3, r2
 8003762:	009b      	lsls	r3, r3, #2
 8003764:	440b      	add	r3, r1
 8003766:	333f      	adds	r3, #63	; 0x3f
 8003768:	2201      	movs	r2, #1
 800376a:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800376c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800376e:	b2db      	uxtb	r3, r3
 8003770:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003774:	b2db      	uxtb	r3, r3
 8003776:	4619      	mov	r1, r3
 8003778:	6878      	ldr	r0, [r7, #4]
 800377a:	f000 fae8 	bl	8003d4e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800377e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003780:	3301      	adds	r3, #1
 8003782:	627b      	str	r3, [r7, #36]	; 0x24
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800378a:	429a      	cmp	r2, r3
 800378c:	d3ce      	bcc.n	800372c <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	695a      	ldr	r2, [r3, #20]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800379c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4618      	mov	r0, r3
 80037a4:	f004 feb8 	bl	8008518 <USB_ReadInterrupts>
 80037a8:	4603      	mov	r3, r0
 80037aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80037ae:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80037b2:	d155      	bne.n	8003860 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80037b4:	2301      	movs	r3, #1
 80037b6:	627b      	str	r3, [r7, #36]	; 0x24
 80037b8:	e045      	b.n	8003846 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80037ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037bc:	015a      	lsls	r2, r3, #5
 80037be:	69fb      	ldr	r3, [r7, #28]
 80037c0:	4413      	add	r3, r2
 80037c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80037ca:	6879      	ldr	r1, [r7, #4]
 80037cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037ce:	4613      	mov	r3, r2
 80037d0:	00db      	lsls	r3, r3, #3
 80037d2:	4413      	add	r3, r2
 80037d4:	009b      	lsls	r3, r3, #2
 80037d6:	440b      	add	r3, r1
 80037d8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80037dc:	781b      	ldrb	r3, [r3, #0]
 80037de:	2b01      	cmp	r3, #1
 80037e0:	d12e      	bne.n	8003840 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80037e2:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	da2b      	bge.n	8003840 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80037e8:	69bb      	ldr	r3, [r7, #24]
 80037ea:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80037f4:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80037f8:	429a      	cmp	r2, r3
 80037fa:	d121      	bne.n	8003840 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80037fc:	6879      	ldr	r1, [r7, #4]
 80037fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003800:	4613      	mov	r3, r2
 8003802:	00db      	lsls	r3, r3, #3
 8003804:	4413      	add	r3, r2
 8003806:	009b      	lsls	r3, r3, #2
 8003808:	440b      	add	r3, r1
 800380a:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800380e:	2201      	movs	r2, #1
 8003810:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003812:	6a3b      	ldr	r3, [r7, #32]
 8003814:	699b      	ldr	r3, [r3, #24]
 8003816:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800381a:	6a3b      	ldr	r3, [r7, #32]
 800381c:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800381e:	6a3b      	ldr	r3, [r7, #32]
 8003820:	695b      	ldr	r3, [r3, #20]
 8003822:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003826:	2b00      	cmp	r3, #0
 8003828:	d10a      	bne.n	8003840 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800382a:	69fb      	ldr	r3, [r7, #28]
 800382c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	69fa      	ldr	r2, [r7, #28]
 8003834:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003838:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800383c:	6053      	str	r3, [r2, #4]
            break;
 800383e:	e007      	b.n	8003850 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003842:	3301      	adds	r3, #1
 8003844:	627b      	str	r3, [r7, #36]	; 0x24
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800384c:	429a      	cmp	r2, r3
 800384e:	d3b4      	bcc.n	80037ba <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	695a      	ldr	r2, [r3, #20]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800385e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4618      	mov	r0, r3
 8003866:	f004 fe57 	bl	8008518 <USB_ReadInterrupts>
 800386a:	4603      	mov	r3, r0
 800386c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003870:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003874:	d10a      	bne.n	800388c <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003876:	6878      	ldr	r0, [r7, #4]
 8003878:	f007 fbaa 	bl	800afd0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	695a      	ldr	r2, [r3, #20]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800388a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4618      	mov	r0, r3
 8003892:	f004 fe41 	bl	8008518 <USB_ReadInterrupts>
 8003896:	4603      	mov	r3, r0
 8003898:	f003 0304 	and.w	r3, r3, #4
 800389c:	2b04      	cmp	r3, #4
 800389e:	d115      	bne.n	80038cc <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80038a8:	69bb      	ldr	r3, [r7, #24]
 80038aa:	f003 0304 	and.w	r3, r3, #4
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d002      	beq.n	80038b8 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80038b2:	6878      	ldr	r0, [r7, #4]
 80038b4:	f007 fb9a 	bl	800afec <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	6859      	ldr	r1, [r3, #4]
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	69ba      	ldr	r2, [r7, #24]
 80038c4:	430a      	orrs	r2, r1
 80038c6:	605a      	str	r2, [r3, #4]
 80038c8:	e000      	b.n	80038cc <HAL_PCD_IRQHandler+0x992>
      return;
 80038ca:	bf00      	nop
    }
  }
}
 80038cc:	3734      	adds	r7, #52	; 0x34
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bd90      	pop	{r4, r7, pc}

080038d2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80038d2:	b580      	push	{r7, lr}
 80038d4:	b082      	sub	sp, #8
 80038d6:	af00      	add	r7, sp, #0
 80038d8:	6078      	str	r0, [r7, #4]
 80038da:	460b      	mov	r3, r1
 80038dc:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80038e4:	2b01      	cmp	r3, #1
 80038e6:	d101      	bne.n	80038ec <HAL_PCD_SetAddress+0x1a>
 80038e8:	2302      	movs	r3, #2
 80038ea:	e013      	b.n	8003914 <HAL_PCD_SetAddress+0x42>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2201      	movs	r2, #1
 80038f0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	78fa      	ldrb	r2, [r7, #3]
 80038f8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	78fa      	ldrb	r2, [r7, #3]
 8003902:	4611      	mov	r1, r2
 8003904:	4618      	mov	r0, r3
 8003906:	f004 fd9f 	bl	8008448 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2200      	movs	r2, #0
 800390e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003912:	2300      	movs	r3, #0
}
 8003914:	4618      	mov	r0, r3
 8003916:	3708      	adds	r7, #8
 8003918:	46bd      	mov	sp, r7
 800391a:	bd80      	pop	{r7, pc}

0800391c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b084      	sub	sp, #16
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
 8003924:	4608      	mov	r0, r1
 8003926:	4611      	mov	r1, r2
 8003928:	461a      	mov	r2, r3
 800392a:	4603      	mov	r3, r0
 800392c:	70fb      	strb	r3, [r7, #3]
 800392e:	460b      	mov	r3, r1
 8003930:	803b      	strh	r3, [r7, #0]
 8003932:	4613      	mov	r3, r2
 8003934:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003936:	2300      	movs	r3, #0
 8003938:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800393a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800393e:	2b00      	cmp	r3, #0
 8003940:	da0f      	bge.n	8003962 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003942:	78fb      	ldrb	r3, [r7, #3]
 8003944:	f003 020f 	and.w	r2, r3, #15
 8003948:	4613      	mov	r3, r2
 800394a:	00db      	lsls	r3, r3, #3
 800394c:	4413      	add	r3, r2
 800394e:	009b      	lsls	r3, r3, #2
 8003950:	3338      	adds	r3, #56	; 0x38
 8003952:	687a      	ldr	r2, [r7, #4]
 8003954:	4413      	add	r3, r2
 8003956:	3304      	adds	r3, #4
 8003958:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	2201      	movs	r2, #1
 800395e:	705a      	strb	r2, [r3, #1]
 8003960:	e00f      	b.n	8003982 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003962:	78fb      	ldrb	r3, [r7, #3]
 8003964:	f003 020f 	and.w	r2, r3, #15
 8003968:	4613      	mov	r3, r2
 800396a:	00db      	lsls	r3, r3, #3
 800396c:	4413      	add	r3, r2
 800396e:	009b      	lsls	r3, r3, #2
 8003970:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003974:	687a      	ldr	r2, [r7, #4]
 8003976:	4413      	add	r3, r2
 8003978:	3304      	adds	r3, #4
 800397a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	2200      	movs	r2, #0
 8003980:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003982:	78fb      	ldrb	r3, [r7, #3]
 8003984:	f003 030f 	and.w	r3, r3, #15
 8003988:	b2da      	uxtb	r2, r3
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800398e:	883a      	ldrh	r2, [r7, #0]
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	78ba      	ldrb	r2, [r7, #2]
 8003998:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	785b      	ldrb	r3, [r3, #1]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d004      	beq.n	80039ac <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	781b      	ldrb	r3, [r3, #0]
 80039a6:	b29a      	uxth	r2, r3
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80039ac:	78bb      	ldrb	r3, [r7, #2]
 80039ae:	2b02      	cmp	r3, #2
 80039b0:	d102      	bne.n	80039b8 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	2200      	movs	r2, #0
 80039b6:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80039be:	2b01      	cmp	r3, #1
 80039c0:	d101      	bne.n	80039c6 <HAL_PCD_EP_Open+0xaa>
 80039c2:	2302      	movs	r3, #2
 80039c4:	e00e      	b.n	80039e4 <HAL_PCD_EP_Open+0xc8>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2201      	movs	r2, #1
 80039ca:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	68f9      	ldr	r1, [r7, #12]
 80039d4:	4618      	mov	r0, r3
 80039d6:	f003 fe13 	bl	8007600 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2200      	movs	r2, #0
 80039de:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 80039e2:	7afb      	ldrb	r3, [r7, #11]
}
 80039e4:	4618      	mov	r0, r3
 80039e6:	3710      	adds	r7, #16
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bd80      	pop	{r7, pc}

080039ec <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b084      	sub	sp, #16
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
 80039f4:	460b      	mov	r3, r1
 80039f6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80039f8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	da0f      	bge.n	8003a20 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a00:	78fb      	ldrb	r3, [r7, #3]
 8003a02:	f003 020f 	and.w	r2, r3, #15
 8003a06:	4613      	mov	r3, r2
 8003a08:	00db      	lsls	r3, r3, #3
 8003a0a:	4413      	add	r3, r2
 8003a0c:	009b      	lsls	r3, r3, #2
 8003a0e:	3338      	adds	r3, #56	; 0x38
 8003a10:	687a      	ldr	r2, [r7, #4]
 8003a12:	4413      	add	r3, r2
 8003a14:	3304      	adds	r3, #4
 8003a16:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	2201      	movs	r2, #1
 8003a1c:	705a      	strb	r2, [r3, #1]
 8003a1e:	e00f      	b.n	8003a40 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003a20:	78fb      	ldrb	r3, [r7, #3]
 8003a22:	f003 020f 	and.w	r2, r3, #15
 8003a26:	4613      	mov	r3, r2
 8003a28:	00db      	lsls	r3, r3, #3
 8003a2a:	4413      	add	r3, r2
 8003a2c:	009b      	lsls	r3, r3, #2
 8003a2e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003a32:	687a      	ldr	r2, [r7, #4]
 8003a34:	4413      	add	r3, r2
 8003a36:	3304      	adds	r3, #4
 8003a38:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003a40:	78fb      	ldrb	r3, [r7, #3]
 8003a42:	f003 030f 	and.w	r3, r3, #15
 8003a46:	b2da      	uxtb	r2, r3
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003a52:	2b01      	cmp	r3, #1
 8003a54:	d101      	bne.n	8003a5a <HAL_PCD_EP_Close+0x6e>
 8003a56:	2302      	movs	r3, #2
 8003a58:	e00e      	b.n	8003a78 <HAL_PCD_EP_Close+0x8c>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2201      	movs	r2, #1
 8003a5e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	68f9      	ldr	r1, [r7, #12]
 8003a68:	4618      	mov	r0, r3
 8003a6a:	f003 fe51 	bl	8007710 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2200      	movs	r2, #0
 8003a72:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8003a76:	2300      	movs	r3, #0
}
 8003a78:	4618      	mov	r0, r3
 8003a7a:	3710      	adds	r7, #16
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	bd80      	pop	{r7, pc}

08003a80 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b086      	sub	sp, #24
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	60f8      	str	r0, [r7, #12]
 8003a88:	607a      	str	r2, [r7, #4]
 8003a8a:	603b      	str	r3, [r7, #0]
 8003a8c:	460b      	mov	r3, r1
 8003a8e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003a90:	7afb      	ldrb	r3, [r7, #11]
 8003a92:	f003 020f 	and.w	r2, r3, #15
 8003a96:	4613      	mov	r3, r2
 8003a98:	00db      	lsls	r3, r3, #3
 8003a9a:	4413      	add	r3, r2
 8003a9c:	009b      	lsls	r3, r3, #2
 8003a9e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003aa2:	68fa      	ldr	r2, [r7, #12]
 8003aa4:	4413      	add	r3, r2
 8003aa6:	3304      	adds	r3, #4
 8003aa8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003aaa:	697b      	ldr	r3, [r7, #20]
 8003aac:	687a      	ldr	r2, [r7, #4]
 8003aae:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003ab0:	697b      	ldr	r3, [r7, #20]
 8003ab2:	683a      	ldr	r2, [r7, #0]
 8003ab4:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003ab6:	697b      	ldr	r3, [r7, #20]
 8003ab8:	2200      	movs	r2, #0
 8003aba:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8003abc:	697b      	ldr	r3, [r7, #20]
 8003abe:	2200      	movs	r2, #0
 8003ac0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003ac2:	7afb      	ldrb	r3, [r7, #11]
 8003ac4:	f003 030f 	and.w	r3, r3, #15
 8003ac8:	b2da      	uxtb	r2, r3
 8003aca:	697b      	ldr	r3, [r7, #20]
 8003acc:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	691b      	ldr	r3, [r3, #16]
 8003ad2:	2b01      	cmp	r3, #1
 8003ad4:	d102      	bne.n	8003adc <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003ad6:	687a      	ldr	r2, [r7, #4]
 8003ad8:	697b      	ldr	r3, [r7, #20]
 8003ada:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003adc:	7afb      	ldrb	r3, [r7, #11]
 8003ade:	f003 030f 	and.w	r3, r3, #15
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d109      	bne.n	8003afa <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	6818      	ldr	r0, [r3, #0]
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	691b      	ldr	r3, [r3, #16]
 8003aee:	b2db      	uxtb	r3, r3
 8003af0:	461a      	mov	r2, r3
 8003af2:	6979      	ldr	r1, [r7, #20]
 8003af4:	f004 f938 	bl	8007d68 <USB_EP0StartXfer>
 8003af8:	e008      	b.n	8003b0c <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	6818      	ldr	r0, [r3, #0]
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	691b      	ldr	r3, [r3, #16]
 8003b02:	b2db      	uxtb	r3, r3
 8003b04:	461a      	mov	r2, r3
 8003b06:	6979      	ldr	r1, [r7, #20]
 8003b08:	f003 fede 	bl	80078c8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003b0c:	2300      	movs	r3, #0
}
 8003b0e:	4618      	mov	r0, r3
 8003b10:	3718      	adds	r7, #24
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bd80      	pop	{r7, pc}

08003b16 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003b16:	b480      	push	{r7}
 8003b18:	b083      	sub	sp, #12
 8003b1a:	af00      	add	r7, sp, #0
 8003b1c:	6078      	str	r0, [r7, #4]
 8003b1e:	460b      	mov	r3, r1
 8003b20:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003b22:	78fb      	ldrb	r3, [r7, #3]
 8003b24:	f003 020f 	and.w	r2, r3, #15
 8003b28:	6879      	ldr	r1, [r7, #4]
 8003b2a:	4613      	mov	r3, r2
 8003b2c:	00db      	lsls	r3, r3, #3
 8003b2e:	4413      	add	r3, r2
 8003b30:	009b      	lsls	r3, r3, #2
 8003b32:	440b      	add	r3, r1
 8003b34:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8003b38:	681b      	ldr	r3, [r3, #0]
}
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	370c      	adds	r7, #12
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b44:	4770      	bx	lr

08003b46 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003b46:	b580      	push	{r7, lr}
 8003b48:	b086      	sub	sp, #24
 8003b4a:	af00      	add	r7, sp, #0
 8003b4c:	60f8      	str	r0, [r7, #12]
 8003b4e:	607a      	str	r2, [r7, #4]
 8003b50:	603b      	str	r3, [r7, #0]
 8003b52:	460b      	mov	r3, r1
 8003b54:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b56:	7afb      	ldrb	r3, [r7, #11]
 8003b58:	f003 020f 	and.w	r2, r3, #15
 8003b5c:	4613      	mov	r3, r2
 8003b5e:	00db      	lsls	r3, r3, #3
 8003b60:	4413      	add	r3, r2
 8003b62:	009b      	lsls	r3, r3, #2
 8003b64:	3338      	adds	r3, #56	; 0x38
 8003b66:	68fa      	ldr	r2, [r7, #12]
 8003b68:	4413      	add	r3, r2
 8003b6a:	3304      	adds	r3, #4
 8003b6c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003b6e:	697b      	ldr	r3, [r7, #20]
 8003b70:	687a      	ldr	r2, [r7, #4]
 8003b72:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003b74:	697b      	ldr	r3, [r7, #20]
 8003b76:	683a      	ldr	r2, [r7, #0]
 8003b78:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003b7a:	697b      	ldr	r3, [r7, #20]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8003b80:	697b      	ldr	r3, [r7, #20]
 8003b82:	2201      	movs	r2, #1
 8003b84:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003b86:	7afb      	ldrb	r3, [r7, #11]
 8003b88:	f003 030f 	and.w	r3, r3, #15
 8003b8c:	b2da      	uxtb	r2, r3
 8003b8e:	697b      	ldr	r3, [r7, #20]
 8003b90:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	691b      	ldr	r3, [r3, #16]
 8003b96:	2b01      	cmp	r3, #1
 8003b98:	d102      	bne.n	8003ba0 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003b9a:	687a      	ldr	r2, [r7, #4]
 8003b9c:	697b      	ldr	r3, [r7, #20]
 8003b9e:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003ba0:	7afb      	ldrb	r3, [r7, #11]
 8003ba2:	f003 030f 	and.w	r3, r3, #15
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d109      	bne.n	8003bbe <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	6818      	ldr	r0, [r3, #0]
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	691b      	ldr	r3, [r3, #16]
 8003bb2:	b2db      	uxtb	r3, r3
 8003bb4:	461a      	mov	r2, r3
 8003bb6:	6979      	ldr	r1, [r7, #20]
 8003bb8:	f004 f8d6 	bl	8007d68 <USB_EP0StartXfer>
 8003bbc:	e008      	b.n	8003bd0 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	6818      	ldr	r0, [r3, #0]
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	691b      	ldr	r3, [r3, #16]
 8003bc6:	b2db      	uxtb	r3, r3
 8003bc8:	461a      	mov	r2, r3
 8003bca:	6979      	ldr	r1, [r7, #20]
 8003bcc:	f003 fe7c 	bl	80078c8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003bd0:	2300      	movs	r3, #0
}
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	3718      	adds	r7, #24
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bd80      	pop	{r7, pc}

08003bda <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003bda:	b580      	push	{r7, lr}
 8003bdc:	b084      	sub	sp, #16
 8003bde:	af00      	add	r7, sp, #0
 8003be0:	6078      	str	r0, [r7, #4]
 8003be2:	460b      	mov	r3, r1
 8003be4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003be6:	78fb      	ldrb	r3, [r7, #3]
 8003be8:	f003 020f 	and.w	r2, r3, #15
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	429a      	cmp	r2, r3
 8003bf2:	d901      	bls.n	8003bf8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	e050      	b.n	8003c9a <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003bf8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	da0f      	bge.n	8003c20 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c00:	78fb      	ldrb	r3, [r7, #3]
 8003c02:	f003 020f 	and.w	r2, r3, #15
 8003c06:	4613      	mov	r3, r2
 8003c08:	00db      	lsls	r3, r3, #3
 8003c0a:	4413      	add	r3, r2
 8003c0c:	009b      	lsls	r3, r3, #2
 8003c0e:	3338      	adds	r3, #56	; 0x38
 8003c10:	687a      	ldr	r2, [r7, #4]
 8003c12:	4413      	add	r3, r2
 8003c14:	3304      	adds	r3, #4
 8003c16:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	2201      	movs	r2, #1
 8003c1c:	705a      	strb	r2, [r3, #1]
 8003c1e:	e00d      	b.n	8003c3c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003c20:	78fa      	ldrb	r2, [r7, #3]
 8003c22:	4613      	mov	r3, r2
 8003c24:	00db      	lsls	r3, r3, #3
 8003c26:	4413      	add	r3, r2
 8003c28:	009b      	lsls	r3, r3, #2
 8003c2a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003c2e:	687a      	ldr	r2, [r7, #4]
 8003c30:	4413      	add	r3, r2
 8003c32:	3304      	adds	r3, #4
 8003c34:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	2200      	movs	r2, #0
 8003c3a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	2201      	movs	r2, #1
 8003c40:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003c42:	78fb      	ldrb	r3, [r7, #3]
 8003c44:	f003 030f 	and.w	r3, r3, #15
 8003c48:	b2da      	uxtb	r2, r3
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003c54:	2b01      	cmp	r3, #1
 8003c56:	d101      	bne.n	8003c5c <HAL_PCD_EP_SetStall+0x82>
 8003c58:	2302      	movs	r3, #2
 8003c5a:	e01e      	b.n	8003c9a <HAL_PCD_EP_SetStall+0xc0>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2201      	movs	r2, #1
 8003c60:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	68f9      	ldr	r1, [r7, #12]
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	f004 fb18 	bl	80082a0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003c70:	78fb      	ldrb	r3, [r7, #3]
 8003c72:	f003 030f 	and.w	r3, r3, #15
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d10a      	bne.n	8003c90 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6818      	ldr	r0, [r3, #0]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	691b      	ldr	r3, [r3, #16]
 8003c82:	b2d9      	uxtb	r1, r3
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003c8a:	461a      	mov	r2, r3
 8003c8c:	f004 fd0a 	bl	80086a4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2200      	movs	r2, #0
 8003c94:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003c98:	2300      	movs	r3, #0
}
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	3710      	adds	r7, #16
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bd80      	pop	{r7, pc}

08003ca2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003ca2:	b580      	push	{r7, lr}
 8003ca4:	b084      	sub	sp, #16
 8003ca6:	af00      	add	r7, sp, #0
 8003ca8:	6078      	str	r0, [r7, #4]
 8003caa:	460b      	mov	r3, r1
 8003cac:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003cae:	78fb      	ldrb	r3, [r7, #3]
 8003cb0:	f003 020f 	and.w	r2, r3, #15
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	429a      	cmp	r2, r3
 8003cba:	d901      	bls.n	8003cc0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	e042      	b.n	8003d46 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003cc0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	da0f      	bge.n	8003ce8 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003cc8:	78fb      	ldrb	r3, [r7, #3]
 8003cca:	f003 020f 	and.w	r2, r3, #15
 8003cce:	4613      	mov	r3, r2
 8003cd0:	00db      	lsls	r3, r3, #3
 8003cd2:	4413      	add	r3, r2
 8003cd4:	009b      	lsls	r3, r3, #2
 8003cd6:	3338      	adds	r3, #56	; 0x38
 8003cd8:	687a      	ldr	r2, [r7, #4]
 8003cda:	4413      	add	r3, r2
 8003cdc:	3304      	adds	r3, #4
 8003cde:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	2201      	movs	r2, #1
 8003ce4:	705a      	strb	r2, [r3, #1]
 8003ce6:	e00f      	b.n	8003d08 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003ce8:	78fb      	ldrb	r3, [r7, #3]
 8003cea:	f003 020f 	and.w	r2, r3, #15
 8003cee:	4613      	mov	r3, r2
 8003cf0:	00db      	lsls	r3, r3, #3
 8003cf2:	4413      	add	r3, r2
 8003cf4:	009b      	lsls	r3, r3, #2
 8003cf6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003cfa:	687a      	ldr	r2, [r7, #4]
 8003cfc:	4413      	add	r3, r2
 8003cfe:	3304      	adds	r3, #4
 8003d00:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	2200      	movs	r2, #0
 8003d06:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003d0e:	78fb      	ldrb	r3, [r7, #3]
 8003d10:	f003 030f 	and.w	r3, r3, #15
 8003d14:	b2da      	uxtb	r2, r3
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003d20:	2b01      	cmp	r3, #1
 8003d22:	d101      	bne.n	8003d28 <HAL_PCD_EP_ClrStall+0x86>
 8003d24:	2302      	movs	r3, #2
 8003d26:	e00e      	b.n	8003d46 <HAL_PCD_EP_ClrStall+0xa4>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2201      	movs	r2, #1
 8003d2c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	68f9      	ldr	r1, [r7, #12]
 8003d36:	4618      	mov	r0, r3
 8003d38:	f004 fb20 	bl	800837c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2200      	movs	r2, #0
 8003d40:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003d44:	2300      	movs	r3, #0
}
 8003d46:	4618      	mov	r0, r3
 8003d48:	3710      	adds	r7, #16
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	bd80      	pop	{r7, pc}

08003d4e <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003d4e:	b580      	push	{r7, lr}
 8003d50:	b084      	sub	sp, #16
 8003d52:	af00      	add	r7, sp, #0
 8003d54:	6078      	str	r0, [r7, #4]
 8003d56:	460b      	mov	r3, r1
 8003d58:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003d5a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	da0c      	bge.n	8003d7c <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d62:	78fb      	ldrb	r3, [r7, #3]
 8003d64:	f003 020f 	and.w	r2, r3, #15
 8003d68:	4613      	mov	r3, r2
 8003d6a:	00db      	lsls	r3, r3, #3
 8003d6c:	4413      	add	r3, r2
 8003d6e:	009b      	lsls	r3, r3, #2
 8003d70:	3338      	adds	r3, #56	; 0x38
 8003d72:	687a      	ldr	r2, [r7, #4]
 8003d74:	4413      	add	r3, r2
 8003d76:	3304      	adds	r3, #4
 8003d78:	60fb      	str	r3, [r7, #12]
 8003d7a:	e00c      	b.n	8003d96 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003d7c:	78fb      	ldrb	r3, [r7, #3]
 8003d7e:	f003 020f 	and.w	r2, r3, #15
 8003d82:	4613      	mov	r3, r2
 8003d84:	00db      	lsls	r3, r3, #3
 8003d86:	4413      	add	r3, r2
 8003d88:	009b      	lsls	r3, r3, #2
 8003d8a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003d8e:	687a      	ldr	r2, [r7, #4]
 8003d90:	4413      	add	r3, r2
 8003d92:	3304      	adds	r3, #4
 8003d94:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	68f9      	ldr	r1, [r7, #12]
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	f004 f93f 	bl	8008020 <USB_EPStopXfer>
 8003da2:	4603      	mov	r3, r0
 8003da4:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003da6:	7afb      	ldrb	r3, [r7, #11]
}
 8003da8:	4618      	mov	r0, r3
 8003daa:	3710      	adds	r7, #16
 8003dac:	46bd      	mov	sp, r7
 8003dae:	bd80      	pop	{r7, pc}

08003db0 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b08a      	sub	sp, #40	; 0x28
 8003db4:	af02      	add	r7, sp, #8
 8003db6:	6078      	str	r0, [r7, #4]
 8003db8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003dc0:	697b      	ldr	r3, [r7, #20]
 8003dc2:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003dc4:	683a      	ldr	r2, [r7, #0]
 8003dc6:	4613      	mov	r3, r2
 8003dc8:	00db      	lsls	r3, r3, #3
 8003dca:	4413      	add	r3, r2
 8003dcc:	009b      	lsls	r3, r3, #2
 8003dce:	3338      	adds	r3, #56	; 0x38
 8003dd0:	687a      	ldr	r2, [r7, #4]
 8003dd2:	4413      	add	r3, r2
 8003dd4:	3304      	adds	r3, #4
 8003dd6:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	6a1a      	ldr	r2, [r3, #32]
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	699b      	ldr	r3, [r3, #24]
 8003de0:	429a      	cmp	r2, r3
 8003de2:	d901      	bls.n	8003de8 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003de4:	2301      	movs	r3, #1
 8003de6:	e06c      	b.n	8003ec2 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	699a      	ldr	r2, [r3, #24]
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	6a1b      	ldr	r3, [r3, #32]
 8003df0:	1ad3      	subs	r3, r2, r3
 8003df2:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	68db      	ldr	r3, [r3, #12]
 8003df8:	69fa      	ldr	r2, [r7, #28]
 8003dfa:	429a      	cmp	r2, r3
 8003dfc:	d902      	bls.n	8003e04 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	68db      	ldr	r3, [r3, #12]
 8003e02:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003e04:	69fb      	ldr	r3, [r7, #28]
 8003e06:	3303      	adds	r3, #3
 8003e08:	089b      	lsrs	r3, r3, #2
 8003e0a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003e0c:	e02b      	b.n	8003e66 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	699a      	ldr	r2, [r3, #24]
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	6a1b      	ldr	r3, [r3, #32]
 8003e16:	1ad3      	subs	r3, r2, r3
 8003e18:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	68db      	ldr	r3, [r3, #12]
 8003e1e:	69fa      	ldr	r2, [r7, #28]
 8003e20:	429a      	cmp	r2, r3
 8003e22:	d902      	bls.n	8003e2a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	68db      	ldr	r3, [r3, #12]
 8003e28:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003e2a:	69fb      	ldr	r3, [r7, #28]
 8003e2c:	3303      	adds	r3, #3
 8003e2e:	089b      	lsrs	r3, r3, #2
 8003e30:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	6919      	ldr	r1, [r3, #16]
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	b2da      	uxtb	r2, r3
 8003e3a:	69fb      	ldr	r3, [r7, #28]
 8003e3c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003e42:	b2db      	uxtb	r3, r3
 8003e44:	9300      	str	r3, [sp, #0]
 8003e46:	4603      	mov	r3, r0
 8003e48:	6978      	ldr	r0, [r7, #20]
 8003e4a:	f004 f993 	bl	8008174 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	691a      	ldr	r2, [r3, #16]
 8003e52:	69fb      	ldr	r3, [r7, #28]
 8003e54:	441a      	add	r2, r3
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	6a1a      	ldr	r2, [r3, #32]
 8003e5e:	69fb      	ldr	r3, [r7, #28]
 8003e60:	441a      	add	r2, r3
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	015a      	lsls	r2, r3, #5
 8003e6a:	693b      	ldr	r3, [r7, #16]
 8003e6c:	4413      	add	r3, r2
 8003e6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e72:	699b      	ldr	r3, [r3, #24]
 8003e74:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003e76:	69ba      	ldr	r2, [r7, #24]
 8003e78:	429a      	cmp	r2, r3
 8003e7a:	d809      	bhi.n	8003e90 <PCD_WriteEmptyTxFifo+0xe0>
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	6a1a      	ldr	r2, [r3, #32]
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003e84:	429a      	cmp	r2, r3
 8003e86:	d203      	bcs.n	8003e90 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	699b      	ldr	r3, [r3, #24]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d1be      	bne.n	8003e0e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	699a      	ldr	r2, [r3, #24]
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	6a1b      	ldr	r3, [r3, #32]
 8003e98:	429a      	cmp	r2, r3
 8003e9a:	d811      	bhi.n	8003ec0 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	f003 030f 	and.w	r3, r3, #15
 8003ea2:	2201      	movs	r2, #1
 8003ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ea8:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003eaa:	693b      	ldr	r3, [r7, #16]
 8003eac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003eb0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003eb2:	68bb      	ldr	r3, [r7, #8]
 8003eb4:	43db      	mvns	r3, r3
 8003eb6:	6939      	ldr	r1, [r7, #16]
 8003eb8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003ebc:	4013      	ands	r3, r2
 8003ebe:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003ec0:	2300      	movs	r3, #0
}
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	3720      	adds	r7, #32
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bd80      	pop	{r7, pc}
	...

08003ecc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b088      	sub	sp, #32
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
 8003ed4:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003edc:	69fb      	ldr	r3, [r7, #28]
 8003ede:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003ee0:	69fb      	ldr	r3, [r7, #28]
 8003ee2:	333c      	adds	r3, #60	; 0x3c
 8003ee4:	3304      	adds	r3, #4
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	015a      	lsls	r2, r3, #5
 8003eee:	69bb      	ldr	r3, [r7, #24]
 8003ef0:	4413      	add	r3, r2
 8003ef2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ef6:	689b      	ldr	r3, [r3, #8]
 8003ef8:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	691b      	ldr	r3, [r3, #16]
 8003efe:	2b01      	cmp	r3, #1
 8003f00:	d17b      	bne.n	8003ffa <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003f02:	693b      	ldr	r3, [r7, #16]
 8003f04:	f003 0308 	and.w	r3, r3, #8
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d015      	beq.n	8003f38 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003f0c:	697b      	ldr	r3, [r7, #20]
 8003f0e:	4a61      	ldr	r2, [pc, #388]	; (8004094 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	f240 80b9 	bls.w	8004088 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003f16:	693b      	ldr	r3, [r7, #16]
 8003f18:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	f000 80b3 	beq.w	8004088 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	015a      	lsls	r2, r3, #5
 8003f26:	69bb      	ldr	r3, [r7, #24]
 8003f28:	4413      	add	r3, r2
 8003f2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f2e:	461a      	mov	r2, r3
 8003f30:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f34:	6093      	str	r3, [r2, #8]
 8003f36:	e0a7      	b.n	8004088 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003f38:	693b      	ldr	r3, [r7, #16]
 8003f3a:	f003 0320 	and.w	r3, r3, #32
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d009      	beq.n	8003f56 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	015a      	lsls	r2, r3, #5
 8003f46:	69bb      	ldr	r3, [r7, #24]
 8003f48:	4413      	add	r3, r2
 8003f4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f4e:	461a      	mov	r2, r3
 8003f50:	2320      	movs	r3, #32
 8003f52:	6093      	str	r3, [r2, #8]
 8003f54:	e098      	b.n	8004088 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003f56:	693b      	ldr	r3, [r7, #16]
 8003f58:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	f040 8093 	bne.w	8004088 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003f62:	697b      	ldr	r3, [r7, #20]
 8003f64:	4a4b      	ldr	r2, [pc, #300]	; (8004094 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d90f      	bls.n	8003f8a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003f6a:	693b      	ldr	r3, [r7, #16]
 8003f6c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d00a      	beq.n	8003f8a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	015a      	lsls	r2, r3, #5
 8003f78:	69bb      	ldr	r3, [r7, #24]
 8003f7a:	4413      	add	r3, r2
 8003f7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f80:	461a      	mov	r2, r3
 8003f82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f86:	6093      	str	r3, [r2, #8]
 8003f88:	e07e      	b.n	8004088 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003f8a:	683a      	ldr	r2, [r7, #0]
 8003f8c:	4613      	mov	r3, r2
 8003f8e:	00db      	lsls	r3, r3, #3
 8003f90:	4413      	add	r3, r2
 8003f92:	009b      	lsls	r3, r3, #2
 8003f94:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003f98:	687a      	ldr	r2, [r7, #4]
 8003f9a:	4413      	add	r3, r2
 8003f9c:	3304      	adds	r3, #4
 8003f9e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	69da      	ldr	r2, [r3, #28]
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	0159      	lsls	r1, r3, #5
 8003fa8:	69bb      	ldr	r3, [r7, #24]
 8003faa:	440b      	add	r3, r1
 8003fac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fb0:	691b      	ldr	r3, [r3, #16]
 8003fb2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003fb6:	1ad2      	subs	r2, r2, r3
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d114      	bne.n	8003fec <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	699b      	ldr	r3, [r3, #24]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d109      	bne.n	8003fde <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6818      	ldr	r0, [r3, #0]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003fd4:	461a      	mov	r2, r3
 8003fd6:	2101      	movs	r1, #1
 8003fd8:	f004 fb64 	bl	80086a4 <USB_EP0_OutStart>
 8003fdc:	e006      	b.n	8003fec <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	691a      	ldr	r2, [r3, #16]
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	6a1b      	ldr	r3, [r3, #32]
 8003fe6:	441a      	add	r2, r3
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	b2db      	uxtb	r3, r3
 8003ff0:	4619      	mov	r1, r3
 8003ff2:	6878      	ldr	r0, [r7, #4]
 8003ff4:	f006 ff28 	bl	800ae48 <HAL_PCD_DataOutStageCallback>
 8003ff8:	e046      	b.n	8004088 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003ffa:	697b      	ldr	r3, [r7, #20]
 8003ffc:	4a26      	ldr	r2, [pc, #152]	; (8004098 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d124      	bne.n	800404c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004002:	693b      	ldr	r3, [r7, #16]
 8004004:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004008:	2b00      	cmp	r3, #0
 800400a:	d00a      	beq.n	8004022 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	015a      	lsls	r2, r3, #5
 8004010:	69bb      	ldr	r3, [r7, #24]
 8004012:	4413      	add	r3, r2
 8004014:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004018:	461a      	mov	r2, r3
 800401a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800401e:	6093      	str	r3, [r2, #8]
 8004020:	e032      	b.n	8004088 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004022:	693b      	ldr	r3, [r7, #16]
 8004024:	f003 0320 	and.w	r3, r3, #32
 8004028:	2b00      	cmp	r3, #0
 800402a:	d008      	beq.n	800403e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	015a      	lsls	r2, r3, #5
 8004030:	69bb      	ldr	r3, [r7, #24]
 8004032:	4413      	add	r3, r2
 8004034:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004038:	461a      	mov	r2, r3
 800403a:	2320      	movs	r3, #32
 800403c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	b2db      	uxtb	r3, r3
 8004042:	4619      	mov	r1, r3
 8004044:	6878      	ldr	r0, [r7, #4]
 8004046:	f006 feff 	bl	800ae48 <HAL_PCD_DataOutStageCallback>
 800404a:	e01d      	b.n	8004088 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d114      	bne.n	800407c <PCD_EP_OutXfrComplete_int+0x1b0>
 8004052:	6879      	ldr	r1, [r7, #4]
 8004054:	683a      	ldr	r2, [r7, #0]
 8004056:	4613      	mov	r3, r2
 8004058:	00db      	lsls	r3, r3, #3
 800405a:	4413      	add	r3, r2
 800405c:	009b      	lsls	r3, r3, #2
 800405e:	440b      	add	r3, r1
 8004060:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d108      	bne.n	800407c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6818      	ldr	r0, [r3, #0]
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004074:	461a      	mov	r2, r3
 8004076:	2100      	movs	r1, #0
 8004078:	f004 fb14 	bl	80086a4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	b2db      	uxtb	r3, r3
 8004080:	4619      	mov	r1, r3
 8004082:	6878      	ldr	r0, [r7, #4]
 8004084:	f006 fee0 	bl	800ae48 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004088:	2300      	movs	r3, #0
}
 800408a:	4618      	mov	r0, r3
 800408c:	3720      	adds	r7, #32
 800408e:	46bd      	mov	sp, r7
 8004090:	bd80      	pop	{r7, pc}
 8004092:	bf00      	nop
 8004094:	4f54300a 	.word	0x4f54300a
 8004098:	4f54310a 	.word	0x4f54310a

0800409c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b086      	sub	sp, #24
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
 80040a4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040ac:	697b      	ldr	r3, [r7, #20]
 80040ae:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80040b0:	697b      	ldr	r3, [r7, #20]
 80040b2:	333c      	adds	r3, #60	; 0x3c
 80040b4:	3304      	adds	r3, #4
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	015a      	lsls	r2, r3, #5
 80040be:	693b      	ldr	r3, [r7, #16]
 80040c0:	4413      	add	r3, r2
 80040c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040c6:	689b      	ldr	r3, [r3, #8]
 80040c8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	4a15      	ldr	r2, [pc, #84]	; (8004124 <PCD_EP_OutSetupPacket_int+0x88>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d90e      	bls.n	80040f0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80040d2:	68bb      	ldr	r3, [r7, #8]
 80040d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d009      	beq.n	80040f0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	015a      	lsls	r2, r3, #5
 80040e0:	693b      	ldr	r3, [r7, #16]
 80040e2:	4413      	add	r3, r2
 80040e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040e8:	461a      	mov	r2, r3
 80040ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80040ee:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80040f0:	6878      	ldr	r0, [r7, #4]
 80040f2:	f006 fe97 	bl	800ae24 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	4a0a      	ldr	r2, [pc, #40]	; (8004124 <PCD_EP_OutSetupPacket_int+0x88>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d90c      	bls.n	8004118 <PCD_EP_OutSetupPacket_int+0x7c>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	691b      	ldr	r3, [r3, #16]
 8004102:	2b01      	cmp	r3, #1
 8004104:	d108      	bne.n	8004118 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6818      	ldr	r0, [r3, #0]
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004110:	461a      	mov	r2, r3
 8004112:	2101      	movs	r1, #1
 8004114:	f004 fac6 	bl	80086a4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004118:	2300      	movs	r3, #0
}
 800411a:	4618      	mov	r0, r3
 800411c:	3718      	adds	r7, #24
 800411e:	46bd      	mov	sp, r7
 8004120:	bd80      	pop	{r7, pc}
 8004122:	bf00      	nop
 8004124:	4f54300a 	.word	0x4f54300a

08004128 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004128:	b480      	push	{r7}
 800412a:	b085      	sub	sp, #20
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
 8004130:	460b      	mov	r3, r1
 8004132:	70fb      	strb	r3, [r7, #3]
 8004134:	4613      	mov	r3, r2
 8004136:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800413e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004140:	78fb      	ldrb	r3, [r7, #3]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d107      	bne.n	8004156 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004146:	883b      	ldrh	r3, [r7, #0]
 8004148:	0419      	lsls	r1, r3, #16
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	68ba      	ldr	r2, [r7, #8]
 8004150:	430a      	orrs	r2, r1
 8004152:	629a      	str	r2, [r3, #40]	; 0x28
 8004154:	e028      	b.n	80041a8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800415c:	0c1b      	lsrs	r3, r3, #16
 800415e:	68ba      	ldr	r2, [r7, #8]
 8004160:	4413      	add	r3, r2
 8004162:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004164:	2300      	movs	r3, #0
 8004166:	73fb      	strb	r3, [r7, #15]
 8004168:	e00d      	b.n	8004186 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681a      	ldr	r2, [r3, #0]
 800416e:	7bfb      	ldrb	r3, [r7, #15]
 8004170:	3340      	adds	r3, #64	; 0x40
 8004172:	009b      	lsls	r3, r3, #2
 8004174:	4413      	add	r3, r2
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	0c1b      	lsrs	r3, r3, #16
 800417a:	68ba      	ldr	r2, [r7, #8]
 800417c:	4413      	add	r3, r2
 800417e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004180:	7bfb      	ldrb	r3, [r7, #15]
 8004182:	3301      	adds	r3, #1
 8004184:	73fb      	strb	r3, [r7, #15]
 8004186:	7bfa      	ldrb	r2, [r7, #15]
 8004188:	78fb      	ldrb	r3, [r7, #3]
 800418a:	3b01      	subs	r3, #1
 800418c:	429a      	cmp	r2, r3
 800418e:	d3ec      	bcc.n	800416a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004190:	883b      	ldrh	r3, [r7, #0]
 8004192:	0418      	lsls	r0, r3, #16
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6819      	ldr	r1, [r3, #0]
 8004198:	78fb      	ldrb	r3, [r7, #3]
 800419a:	3b01      	subs	r3, #1
 800419c:	68ba      	ldr	r2, [r7, #8]
 800419e:	4302      	orrs	r2, r0
 80041a0:	3340      	adds	r3, #64	; 0x40
 80041a2:	009b      	lsls	r3, r3, #2
 80041a4:	440b      	add	r3, r1
 80041a6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80041a8:	2300      	movs	r3, #0
}
 80041aa:	4618      	mov	r0, r3
 80041ac:	3714      	adds	r7, #20
 80041ae:	46bd      	mov	sp, r7
 80041b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b4:	4770      	bx	lr

080041b6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80041b6:	b480      	push	{r7}
 80041b8:	b083      	sub	sp, #12
 80041ba:	af00      	add	r7, sp, #0
 80041bc:	6078      	str	r0, [r7, #4]
 80041be:	460b      	mov	r3, r1
 80041c0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	887a      	ldrh	r2, [r7, #2]
 80041c8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80041ca:	2300      	movs	r3, #0
}
 80041cc:	4618      	mov	r0, r3
 80041ce:	370c      	adds	r7, #12
 80041d0:	46bd      	mov	sp, r7
 80041d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d6:	4770      	bx	lr

080041d8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80041d8:	b480      	push	{r7}
 80041da:	b085      	sub	sp, #20
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2201      	movs	r2, #1
 80041ea:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2200      	movs	r2, #0
 80041f2:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	699b      	ldr	r3, [r3, #24]
 80041fa:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004206:	4b05      	ldr	r3, [pc, #20]	; (800421c <HAL_PCDEx_ActivateLPM+0x44>)
 8004208:	4313      	orrs	r3, r2
 800420a:	68fa      	ldr	r2, [r7, #12]
 800420c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800420e:	2300      	movs	r3, #0
}
 8004210:	4618      	mov	r0, r3
 8004212:	3714      	adds	r7, #20
 8004214:	46bd      	mov	sp, r7
 8004216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421a:	4770      	bx	lr
 800421c:	10000003 	.word	0x10000003

08004220 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004220:	b480      	push	{r7}
 8004222:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004224:	4b05      	ldr	r3, [pc, #20]	; (800423c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4a04      	ldr	r2, [pc, #16]	; (800423c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800422a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800422e:	6013      	str	r3, [r2, #0]
}
 8004230:	bf00      	nop
 8004232:	46bd      	mov	sp, r7
 8004234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004238:	4770      	bx	lr
 800423a:	bf00      	nop
 800423c:	40007000 	.word	0x40007000

08004240 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b086      	sub	sp, #24
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004248:	2300      	movs	r3, #0
 800424a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d101      	bne.n	8004256 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004252:	2301      	movs	r3, #1
 8004254:	e291      	b.n	800477a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f003 0301 	and.w	r3, r3, #1
 800425e:	2b00      	cmp	r3, #0
 8004260:	f000 8087 	beq.w	8004372 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004264:	4b96      	ldr	r3, [pc, #600]	; (80044c0 <HAL_RCC_OscConfig+0x280>)
 8004266:	689b      	ldr	r3, [r3, #8]
 8004268:	f003 030c 	and.w	r3, r3, #12
 800426c:	2b04      	cmp	r3, #4
 800426e:	d00c      	beq.n	800428a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004270:	4b93      	ldr	r3, [pc, #588]	; (80044c0 <HAL_RCC_OscConfig+0x280>)
 8004272:	689b      	ldr	r3, [r3, #8]
 8004274:	f003 030c 	and.w	r3, r3, #12
 8004278:	2b08      	cmp	r3, #8
 800427a:	d112      	bne.n	80042a2 <HAL_RCC_OscConfig+0x62>
 800427c:	4b90      	ldr	r3, [pc, #576]	; (80044c0 <HAL_RCC_OscConfig+0x280>)
 800427e:	685b      	ldr	r3, [r3, #4]
 8004280:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004284:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004288:	d10b      	bne.n	80042a2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800428a:	4b8d      	ldr	r3, [pc, #564]	; (80044c0 <HAL_RCC_OscConfig+0x280>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004292:	2b00      	cmp	r3, #0
 8004294:	d06c      	beq.n	8004370 <HAL_RCC_OscConfig+0x130>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d168      	bne.n	8004370 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800429e:	2301      	movs	r3, #1
 80042a0:	e26b      	b.n	800477a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042aa:	d106      	bne.n	80042ba <HAL_RCC_OscConfig+0x7a>
 80042ac:	4b84      	ldr	r3, [pc, #528]	; (80044c0 <HAL_RCC_OscConfig+0x280>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4a83      	ldr	r2, [pc, #524]	; (80044c0 <HAL_RCC_OscConfig+0x280>)
 80042b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042b6:	6013      	str	r3, [r2, #0]
 80042b8:	e02e      	b.n	8004318 <HAL_RCC_OscConfig+0xd8>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	685b      	ldr	r3, [r3, #4]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d10c      	bne.n	80042dc <HAL_RCC_OscConfig+0x9c>
 80042c2:	4b7f      	ldr	r3, [pc, #508]	; (80044c0 <HAL_RCC_OscConfig+0x280>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4a7e      	ldr	r2, [pc, #504]	; (80044c0 <HAL_RCC_OscConfig+0x280>)
 80042c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042cc:	6013      	str	r3, [r2, #0]
 80042ce:	4b7c      	ldr	r3, [pc, #496]	; (80044c0 <HAL_RCC_OscConfig+0x280>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4a7b      	ldr	r2, [pc, #492]	; (80044c0 <HAL_RCC_OscConfig+0x280>)
 80042d4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80042d8:	6013      	str	r3, [r2, #0]
 80042da:	e01d      	b.n	8004318 <HAL_RCC_OscConfig+0xd8>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	685b      	ldr	r3, [r3, #4]
 80042e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80042e4:	d10c      	bne.n	8004300 <HAL_RCC_OscConfig+0xc0>
 80042e6:	4b76      	ldr	r3, [pc, #472]	; (80044c0 <HAL_RCC_OscConfig+0x280>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4a75      	ldr	r2, [pc, #468]	; (80044c0 <HAL_RCC_OscConfig+0x280>)
 80042ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80042f0:	6013      	str	r3, [r2, #0]
 80042f2:	4b73      	ldr	r3, [pc, #460]	; (80044c0 <HAL_RCC_OscConfig+0x280>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a72      	ldr	r2, [pc, #456]	; (80044c0 <HAL_RCC_OscConfig+0x280>)
 80042f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042fc:	6013      	str	r3, [r2, #0]
 80042fe:	e00b      	b.n	8004318 <HAL_RCC_OscConfig+0xd8>
 8004300:	4b6f      	ldr	r3, [pc, #444]	; (80044c0 <HAL_RCC_OscConfig+0x280>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4a6e      	ldr	r2, [pc, #440]	; (80044c0 <HAL_RCC_OscConfig+0x280>)
 8004306:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800430a:	6013      	str	r3, [r2, #0]
 800430c:	4b6c      	ldr	r3, [pc, #432]	; (80044c0 <HAL_RCC_OscConfig+0x280>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4a6b      	ldr	r2, [pc, #428]	; (80044c0 <HAL_RCC_OscConfig+0x280>)
 8004312:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004316:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	685b      	ldr	r3, [r3, #4]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d013      	beq.n	8004348 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004320:	f7fd fe06 	bl	8001f30 <HAL_GetTick>
 8004324:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004326:	e008      	b.n	800433a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004328:	f7fd fe02 	bl	8001f30 <HAL_GetTick>
 800432c:	4602      	mov	r2, r0
 800432e:	693b      	ldr	r3, [r7, #16]
 8004330:	1ad3      	subs	r3, r2, r3
 8004332:	2b64      	cmp	r3, #100	; 0x64
 8004334:	d901      	bls.n	800433a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004336:	2303      	movs	r3, #3
 8004338:	e21f      	b.n	800477a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800433a:	4b61      	ldr	r3, [pc, #388]	; (80044c0 <HAL_RCC_OscConfig+0x280>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004342:	2b00      	cmp	r3, #0
 8004344:	d0f0      	beq.n	8004328 <HAL_RCC_OscConfig+0xe8>
 8004346:	e014      	b.n	8004372 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004348:	f7fd fdf2 	bl	8001f30 <HAL_GetTick>
 800434c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800434e:	e008      	b.n	8004362 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004350:	f7fd fdee 	bl	8001f30 <HAL_GetTick>
 8004354:	4602      	mov	r2, r0
 8004356:	693b      	ldr	r3, [r7, #16]
 8004358:	1ad3      	subs	r3, r2, r3
 800435a:	2b64      	cmp	r3, #100	; 0x64
 800435c:	d901      	bls.n	8004362 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800435e:	2303      	movs	r3, #3
 8004360:	e20b      	b.n	800477a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004362:	4b57      	ldr	r3, [pc, #348]	; (80044c0 <HAL_RCC_OscConfig+0x280>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800436a:	2b00      	cmp	r3, #0
 800436c:	d1f0      	bne.n	8004350 <HAL_RCC_OscConfig+0x110>
 800436e:	e000      	b.n	8004372 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004370:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f003 0302 	and.w	r3, r3, #2
 800437a:	2b00      	cmp	r3, #0
 800437c:	d069      	beq.n	8004452 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800437e:	4b50      	ldr	r3, [pc, #320]	; (80044c0 <HAL_RCC_OscConfig+0x280>)
 8004380:	689b      	ldr	r3, [r3, #8]
 8004382:	f003 030c 	and.w	r3, r3, #12
 8004386:	2b00      	cmp	r3, #0
 8004388:	d00b      	beq.n	80043a2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800438a:	4b4d      	ldr	r3, [pc, #308]	; (80044c0 <HAL_RCC_OscConfig+0x280>)
 800438c:	689b      	ldr	r3, [r3, #8]
 800438e:	f003 030c 	and.w	r3, r3, #12
 8004392:	2b08      	cmp	r3, #8
 8004394:	d11c      	bne.n	80043d0 <HAL_RCC_OscConfig+0x190>
 8004396:	4b4a      	ldr	r3, [pc, #296]	; (80044c0 <HAL_RCC_OscConfig+0x280>)
 8004398:	685b      	ldr	r3, [r3, #4]
 800439a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d116      	bne.n	80043d0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043a2:	4b47      	ldr	r3, [pc, #284]	; (80044c0 <HAL_RCC_OscConfig+0x280>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f003 0302 	and.w	r3, r3, #2
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d005      	beq.n	80043ba <HAL_RCC_OscConfig+0x17a>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	68db      	ldr	r3, [r3, #12]
 80043b2:	2b01      	cmp	r3, #1
 80043b4:	d001      	beq.n	80043ba <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80043b6:	2301      	movs	r3, #1
 80043b8:	e1df      	b.n	800477a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043ba:	4b41      	ldr	r3, [pc, #260]	; (80044c0 <HAL_RCC_OscConfig+0x280>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	691b      	ldr	r3, [r3, #16]
 80043c6:	00db      	lsls	r3, r3, #3
 80043c8:	493d      	ldr	r1, [pc, #244]	; (80044c0 <HAL_RCC_OscConfig+0x280>)
 80043ca:	4313      	orrs	r3, r2
 80043cc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043ce:	e040      	b.n	8004452 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	68db      	ldr	r3, [r3, #12]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d023      	beq.n	8004420 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80043d8:	4b39      	ldr	r3, [pc, #228]	; (80044c0 <HAL_RCC_OscConfig+0x280>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4a38      	ldr	r2, [pc, #224]	; (80044c0 <HAL_RCC_OscConfig+0x280>)
 80043de:	f043 0301 	orr.w	r3, r3, #1
 80043e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043e4:	f7fd fda4 	bl	8001f30 <HAL_GetTick>
 80043e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043ea:	e008      	b.n	80043fe <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80043ec:	f7fd fda0 	bl	8001f30 <HAL_GetTick>
 80043f0:	4602      	mov	r2, r0
 80043f2:	693b      	ldr	r3, [r7, #16]
 80043f4:	1ad3      	subs	r3, r2, r3
 80043f6:	2b02      	cmp	r3, #2
 80043f8:	d901      	bls.n	80043fe <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80043fa:	2303      	movs	r3, #3
 80043fc:	e1bd      	b.n	800477a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043fe:	4b30      	ldr	r3, [pc, #192]	; (80044c0 <HAL_RCC_OscConfig+0x280>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f003 0302 	and.w	r3, r3, #2
 8004406:	2b00      	cmp	r3, #0
 8004408:	d0f0      	beq.n	80043ec <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800440a:	4b2d      	ldr	r3, [pc, #180]	; (80044c0 <HAL_RCC_OscConfig+0x280>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	691b      	ldr	r3, [r3, #16]
 8004416:	00db      	lsls	r3, r3, #3
 8004418:	4929      	ldr	r1, [pc, #164]	; (80044c0 <HAL_RCC_OscConfig+0x280>)
 800441a:	4313      	orrs	r3, r2
 800441c:	600b      	str	r3, [r1, #0]
 800441e:	e018      	b.n	8004452 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004420:	4b27      	ldr	r3, [pc, #156]	; (80044c0 <HAL_RCC_OscConfig+0x280>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4a26      	ldr	r2, [pc, #152]	; (80044c0 <HAL_RCC_OscConfig+0x280>)
 8004426:	f023 0301 	bic.w	r3, r3, #1
 800442a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800442c:	f7fd fd80 	bl	8001f30 <HAL_GetTick>
 8004430:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004432:	e008      	b.n	8004446 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004434:	f7fd fd7c 	bl	8001f30 <HAL_GetTick>
 8004438:	4602      	mov	r2, r0
 800443a:	693b      	ldr	r3, [r7, #16]
 800443c:	1ad3      	subs	r3, r2, r3
 800443e:	2b02      	cmp	r3, #2
 8004440:	d901      	bls.n	8004446 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004442:	2303      	movs	r3, #3
 8004444:	e199      	b.n	800477a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004446:	4b1e      	ldr	r3, [pc, #120]	; (80044c0 <HAL_RCC_OscConfig+0x280>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f003 0302 	and.w	r3, r3, #2
 800444e:	2b00      	cmp	r3, #0
 8004450:	d1f0      	bne.n	8004434 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f003 0308 	and.w	r3, r3, #8
 800445a:	2b00      	cmp	r3, #0
 800445c:	d038      	beq.n	80044d0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	695b      	ldr	r3, [r3, #20]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d019      	beq.n	800449a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004466:	4b16      	ldr	r3, [pc, #88]	; (80044c0 <HAL_RCC_OscConfig+0x280>)
 8004468:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800446a:	4a15      	ldr	r2, [pc, #84]	; (80044c0 <HAL_RCC_OscConfig+0x280>)
 800446c:	f043 0301 	orr.w	r3, r3, #1
 8004470:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004472:	f7fd fd5d 	bl	8001f30 <HAL_GetTick>
 8004476:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004478:	e008      	b.n	800448c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800447a:	f7fd fd59 	bl	8001f30 <HAL_GetTick>
 800447e:	4602      	mov	r2, r0
 8004480:	693b      	ldr	r3, [r7, #16]
 8004482:	1ad3      	subs	r3, r2, r3
 8004484:	2b02      	cmp	r3, #2
 8004486:	d901      	bls.n	800448c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004488:	2303      	movs	r3, #3
 800448a:	e176      	b.n	800477a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800448c:	4b0c      	ldr	r3, [pc, #48]	; (80044c0 <HAL_RCC_OscConfig+0x280>)
 800448e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004490:	f003 0302 	and.w	r3, r3, #2
 8004494:	2b00      	cmp	r3, #0
 8004496:	d0f0      	beq.n	800447a <HAL_RCC_OscConfig+0x23a>
 8004498:	e01a      	b.n	80044d0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800449a:	4b09      	ldr	r3, [pc, #36]	; (80044c0 <HAL_RCC_OscConfig+0x280>)
 800449c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800449e:	4a08      	ldr	r2, [pc, #32]	; (80044c0 <HAL_RCC_OscConfig+0x280>)
 80044a0:	f023 0301 	bic.w	r3, r3, #1
 80044a4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044a6:	f7fd fd43 	bl	8001f30 <HAL_GetTick>
 80044aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044ac:	e00a      	b.n	80044c4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044ae:	f7fd fd3f 	bl	8001f30 <HAL_GetTick>
 80044b2:	4602      	mov	r2, r0
 80044b4:	693b      	ldr	r3, [r7, #16]
 80044b6:	1ad3      	subs	r3, r2, r3
 80044b8:	2b02      	cmp	r3, #2
 80044ba:	d903      	bls.n	80044c4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80044bc:	2303      	movs	r3, #3
 80044be:	e15c      	b.n	800477a <HAL_RCC_OscConfig+0x53a>
 80044c0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044c4:	4b91      	ldr	r3, [pc, #580]	; (800470c <HAL_RCC_OscConfig+0x4cc>)
 80044c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044c8:	f003 0302 	and.w	r3, r3, #2
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d1ee      	bne.n	80044ae <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f003 0304 	and.w	r3, r3, #4
 80044d8:	2b00      	cmp	r3, #0
 80044da:	f000 80a4 	beq.w	8004626 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80044de:	4b8b      	ldr	r3, [pc, #556]	; (800470c <HAL_RCC_OscConfig+0x4cc>)
 80044e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d10d      	bne.n	8004506 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80044ea:	4b88      	ldr	r3, [pc, #544]	; (800470c <HAL_RCC_OscConfig+0x4cc>)
 80044ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ee:	4a87      	ldr	r2, [pc, #540]	; (800470c <HAL_RCC_OscConfig+0x4cc>)
 80044f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044f4:	6413      	str	r3, [r2, #64]	; 0x40
 80044f6:	4b85      	ldr	r3, [pc, #532]	; (800470c <HAL_RCC_OscConfig+0x4cc>)
 80044f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044fe:	60bb      	str	r3, [r7, #8]
 8004500:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004502:	2301      	movs	r3, #1
 8004504:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004506:	4b82      	ldr	r3, [pc, #520]	; (8004710 <HAL_RCC_OscConfig+0x4d0>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800450e:	2b00      	cmp	r3, #0
 8004510:	d118      	bne.n	8004544 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004512:	4b7f      	ldr	r3, [pc, #508]	; (8004710 <HAL_RCC_OscConfig+0x4d0>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	4a7e      	ldr	r2, [pc, #504]	; (8004710 <HAL_RCC_OscConfig+0x4d0>)
 8004518:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800451c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800451e:	f7fd fd07 	bl	8001f30 <HAL_GetTick>
 8004522:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004524:	e008      	b.n	8004538 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004526:	f7fd fd03 	bl	8001f30 <HAL_GetTick>
 800452a:	4602      	mov	r2, r0
 800452c:	693b      	ldr	r3, [r7, #16]
 800452e:	1ad3      	subs	r3, r2, r3
 8004530:	2b64      	cmp	r3, #100	; 0x64
 8004532:	d901      	bls.n	8004538 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004534:	2303      	movs	r3, #3
 8004536:	e120      	b.n	800477a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004538:	4b75      	ldr	r3, [pc, #468]	; (8004710 <HAL_RCC_OscConfig+0x4d0>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004540:	2b00      	cmp	r3, #0
 8004542:	d0f0      	beq.n	8004526 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	689b      	ldr	r3, [r3, #8]
 8004548:	2b01      	cmp	r3, #1
 800454a:	d106      	bne.n	800455a <HAL_RCC_OscConfig+0x31a>
 800454c:	4b6f      	ldr	r3, [pc, #444]	; (800470c <HAL_RCC_OscConfig+0x4cc>)
 800454e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004550:	4a6e      	ldr	r2, [pc, #440]	; (800470c <HAL_RCC_OscConfig+0x4cc>)
 8004552:	f043 0301 	orr.w	r3, r3, #1
 8004556:	6713      	str	r3, [r2, #112]	; 0x70
 8004558:	e02d      	b.n	80045b6 <HAL_RCC_OscConfig+0x376>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	689b      	ldr	r3, [r3, #8]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d10c      	bne.n	800457c <HAL_RCC_OscConfig+0x33c>
 8004562:	4b6a      	ldr	r3, [pc, #424]	; (800470c <HAL_RCC_OscConfig+0x4cc>)
 8004564:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004566:	4a69      	ldr	r2, [pc, #420]	; (800470c <HAL_RCC_OscConfig+0x4cc>)
 8004568:	f023 0301 	bic.w	r3, r3, #1
 800456c:	6713      	str	r3, [r2, #112]	; 0x70
 800456e:	4b67      	ldr	r3, [pc, #412]	; (800470c <HAL_RCC_OscConfig+0x4cc>)
 8004570:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004572:	4a66      	ldr	r2, [pc, #408]	; (800470c <HAL_RCC_OscConfig+0x4cc>)
 8004574:	f023 0304 	bic.w	r3, r3, #4
 8004578:	6713      	str	r3, [r2, #112]	; 0x70
 800457a:	e01c      	b.n	80045b6 <HAL_RCC_OscConfig+0x376>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	689b      	ldr	r3, [r3, #8]
 8004580:	2b05      	cmp	r3, #5
 8004582:	d10c      	bne.n	800459e <HAL_RCC_OscConfig+0x35e>
 8004584:	4b61      	ldr	r3, [pc, #388]	; (800470c <HAL_RCC_OscConfig+0x4cc>)
 8004586:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004588:	4a60      	ldr	r2, [pc, #384]	; (800470c <HAL_RCC_OscConfig+0x4cc>)
 800458a:	f043 0304 	orr.w	r3, r3, #4
 800458e:	6713      	str	r3, [r2, #112]	; 0x70
 8004590:	4b5e      	ldr	r3, [pc, #376]	; (800470c <HAL_RCC_OscConfig+0x4cc>)
 8004592:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004594:	4a5d      	ldr	r2, [pc, #372]	; (800470c <HAL_RCC_OscConfig+0x4cc>)
 8004596:	f043 0301 	orr.w	r3, r3, #1
 800459a:	6713      	str	r3, [r2, #112]	; 0x70
 800459c:	e00b      	b.n	80045b6 <HAL_RCC_OscConfig+0x376>
 800459e:	4b5b      	ldr	r3, [pc, #364]	; (800470c <HAL_RCC_OscConfig+0x4cc>)
 80045a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045a2:	4a5a      	ldr	r2, [pc, #360]	; (800470c <HAL_RCC_OscConfig+0x4cc>)
 80045a4:	f023 0301 	bic.w	r3, r3, #1
 80045a8:	6713      	str	r3, [r2, #112]	; 0x70
 80045aa:	4b58      	ldr	r3, [pc, #352]	; (800470c <HAL_RCC_OscConfig+0x4cc>)
 80045ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045ae:	4a57      	ldr	r2, [pc, #348]	; (800470c <HAL_RCC_OscConfig+0x4cc>)
 80045b0:	f023 0304 	bic.w	r3, r3, #4
 80045b4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	689b      	ldr	r3, [r3, #8]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d015      	beq.n	80045ea <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045be:	f7fd fcb7 	bl	8001f30 <HAL_GetTick>
 80045c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045c4:	e00a      	b.n	80045dc <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045c6:	f7fd fcb3 	bl	8001f30 <HAL_GetTick>
 80045ca:	4602      	mov	r2, r0
 80045cc:	693b      	ldr	r3, [r7, #16]
 80045ce:	1ad3      	subs	r3, r2, r3
 80045d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d901      	bls.n	80045dc <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80045d8:	2303      	movs	r3, #3
 80045da:	e0ce      	b.n	800477a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045dc:	4b4b      	ldr	r3, [pc, #300]	; (800470c <HAL_RCC_OscConfig+0x4cc>)
 80045de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045e0:	f003 0302 	and.w	r3, r3, #2
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d0ee      	beq.n	80045c6 <HAL_RCC_OscConfig+0x386>
 80045e8:	e014      	b.n	8004614 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045ea:	f7fd fca1 	bl	8001f30 <HAL_GetTick>
 80045ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045f0:	e00a      	b.n	8004608 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045f2:	f7fd fc9d 	bl	8001f30 <HAL_GetTick>
 80045f6:	4602      	mov	r2, r0
 80045f8:	693b      	ldr	r3, [r7, #16]
 80045fa:	1ad3      	subs	r3, r2, r3
 80045fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004600:	4293      	cmp	r3, r2
 8004602:	d901      	bls.n	8004608 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004604:	2303      	movs	r3, #3
 8004606:	e0b8      	b.n	800477a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004608:	4b40      	ldr	r3, [pc, #256]	; (800470c <HAL_RCC_OscConfig+0x4cc>)
 800460a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800460c:	f003 0302 	and.w	r3, r3, #2
 8004610:	2b00      	cmp	r3, #0
 8004612:	d1ee      	bne.n	80045f2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004614:	7dfb      	ldrb	r3, [r7, #23]
 8004616:	2b01      	cmp	r3, #1
 8004618:	d105      	bne.n	8004626 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800461a:	4b3c      	ldr	r3, [pc, #240]	; (800470c <HAL_RCC_OscConfig+0x4cc>)
 800461c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800461e:	4a3b      	ldr	r2, [pc, #236]	; (800470c <HAL_RCC_OscConfig+0x4cc>)
 8004620:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004624:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	699b      	ldr	r3, [r3, #24]
 800462a:	2b00      	cmp	r3, #0
 800462c:	f000 80a4 	beq.w	8004778 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004630:	4b36      	ldr	r3, [pc, #216]	; (800470c <HAL_RCC_OscConfig+0x4cc>)
 8004632:	689b      	ldr	r3, [r3, #8]
 8004634:	f003 030c 	and.w	r3, r3, #12
 8004638:	2b08      	cmp	r3, #8
 800463a:	d06b      	beq.n	8004714 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	699b      	ldr	r3, [r3, #24]
 8004640:	2b02      	cmp	r3, #2
 8004642:	d149      	bne.n	80046d8 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004644:	4b31      	ldr	r3, [pc, #196]	; (800470c <HAL_RCC_OscConfig+0x4cc>)
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	4a30      	ldr	r2, [pc, #192]	; (800470c <HAL_RCC_OscConfig+0x4cc>)
 800464a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800464e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004650:	f7fd fc6e 	bl	8001f30 <HAL_GetTick>
 8004654:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004656:	e008      	b.n	800466a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004658:	f7fd fc6a 	bl	8001f30 <HAL_GetTick>
 800465c:	4602      	mov	r2, r0
 800465e:	693b      	ldr	r3, [r7, #16]
 8004660:	1ad3      	subs	r3, r2, r3
 8004662:	2b02      	cmp	r3, #2
 8004664:	d901      	bls.n	800466a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004666:	2303      	movs	r3, #3
 8004668:	e087      	b.n	800477a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800466a:	4b28      	ldr	r3, [pc, #160]	; (800470c <HAL_RCC_OscConfig+0x4cc>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004672:	2b00      	cmp	r3, #0
 8004674:	d1f0      	bne.n	8004658 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	69da      	ldr	r2, [r3, #28]
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6a1b      	ldr	r3, [r3, #32]
 800467e:	431a      	orrs	r2, r3
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004684:	019b      	lsls	r3, r3, #6
 8004686:	431a      	orrs	r2, r3
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800468c:	085b      	lsrs	r3, r3, #1
 800468e:	3b01      	subs	r3, #1
 8004690:	041b      	lsls	r3, r3, #16
 8004692:	431a      	orrs	r2, r3
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004698:	061b      	lsls	r3, r3, #24
 800469a:	4313      	orrs	r3, r2
 800469c:	4a1b      	ldr	r2, [pc, #108]	; (800470c <HAL_RCC_OscConfig+0x4cc>)
 800469e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80046a2:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80046a4:	4b19      	ldr	r3, [pc, #100]	; (800470c <HAL_RCC_OscConfig+0x4cc>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4a18      	ldr	r2, [pc, #96]	; (800470c <HAL_RCC_OscConfig+0x4cc>)
 80046aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80046ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046b0:	f7fd fc3e 	bl	8001f30 <HAL_GetTick>
 80046b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046b6:	e008      	b.n	80046ca <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046b8:	f7fd fc3a 	bl	8001f30 <HAL_GetTick>
 80046bc:	4602      	mov	r2, r0
 80046be:	693b      	ldr	r3, [r7, #16]
 80046c0:	1ad3      	subs	r3, r2, r3
 80046c2:	2b02      	cmp	r3, #2
 80046c4:	d901      	bls.n	80046ca <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80046c6:	2303      	movs	r3, #3
 80046c8:	e057      	b.n	800477a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046ca:	4b10      	ldr	r3, [pc, #64]	; (800470c <HAL_RCC_OscConfig+0x4cc>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d0f0      	beq.n	80046b8 <HAL_RCC_OscConfig+0x478>
 80046d6:	e04f      	b.n	8004778 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046d8:	4b0c      	ldr	r3, [pc, #48]	; (800470c <HAL_RCC_OscConfig+0x4cc>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4a0b      	ldr	r2, [pc, #44]	; (800470c <HAL_RCC_OscConfig+0x4cc>)
 80046de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80046e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046e4:	f7fd fc24 	bl	8001f30 <HAL_GetTick>
 80046e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046ea:	e008      	b.n	80046fe <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046ec:	f7fd fc20 	bl	8001f30 <HAL_GetTick>
 80046f0:	4602      	mov	r2, r0
 80046f2:	693b      	ldr	r3, [r7, #16]
 80046f4:	1ad3      	subs	r3, r2, r3
 80046f6:	2b02      	cmp	r3, #2
 80046f8:	d901      	bls.n	80046fe <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80046fa:	2303      	movs	r3, #3
 80046fc:	e03d      	b.n	800477a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046fe:	4b03      	ldr	r3, [pc, #12]	; (800470c <HAL_RCC_OscConfig+0x4cc>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004706:	2b00      	cmp	r3, #0
 8004708:	d1f0      	bne.n	80046ec <HAL_RCC_OscConfig+0x4ac>
 800470a:	e035      	b.n	8004778 <HAL_RCC_OscConfig+0x538>
 800470c:	40023800 	.word	0x40023800
 8004710:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004714:	4b1b      	ldr	r3, [pc, #108]	; (8004784 <HAL_RCC_OscConfig+0x544>)
 8004716:	685b      	ldr	r3, [r3, #4]
 8004718:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	699b      	ldr	r3, [r3, #24]
 800471e:	2b01      	cmp	r3, #1
 8004720:	d028      	beq.n	8004774 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800472c:	429a      	cmp	r2, r3
 800472e:	d121      	bne.n	8004774 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800473a:	429a      	cmp	r2, r3
 800473c:	d11a      	bne.n	8004774 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800473e:	68fa      	ldr	r2, [r7, #12]
 8004740:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004744:	4013      	ands	r3, r2
 8004746:	687a      	ldr	r2, [r7, #4]
 8004748:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800474a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800474c:	4293      	cmp	r3, r2
 800474e:	d111      	bne.n	8004774 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800475a:	085b      	lsrs	r3, r3, #1
 800475c:	3b01      	subs	r3, #1
 800475e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004760:	429a      	cmp	r2, r3
 8004762:	d107      	bne.n	8004774 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800476e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004770:	429a      	cmp	r2, r3
 8004772:	d001      	beq.n	8004778 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8004774:	2301      	movs	r3, #1
 8004776:	e000      	b.n	800477a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8004778:	2300      	movs	r3, #0
}
 800477a:	4618      	mov	r0, r3
 800477c:	3718      	adds	r7, #24
 800477e:	46bd      	mov	sp, r7
 8004780:	bd80      	pop	{r7, pc}
 8004782:	bf00      	nop
 8004784:	40023800 	.word	0x40023800

08004788 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b084      	sub	sp, #16
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
 8004790:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004792:	2300      	movs	r3, #0
 8004794:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d101      	bne.n	80047a0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800479c:	2301      	movs	r3, #1
 800479e:	e0d0      	b.n	8004942 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80047a0:	4b6a      	ldr	r3, [pc, #424]	; (800494c <HAL_RCC_ClockConfig+0x1c4>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f003 030f 	and.w	r3, r3, #15
 80047a8:	683a      	ldr	r2, [r7, #0]
 80047aa:	429a      	cmp	r2, r3
 80047ac:	d910      	bls.n	80047d0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047ae:	4b67      	ldr	r3, [pc, #412]	; (800494c <HAL_RCC_ClockConfig+0x1c4>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f023 020f 	bic.w	r2, r3, #15
 80047b6:	4965      	ldr	r1, [pc, #404]	; (800494c <HAL_RCC_ClockConfig+0x1c4>)
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	4313      	orrs	r3, r2
 80047bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80047be:	4b63      	ldr	r3, [pc, #396]	; (800494c <HAL_RCC_ClockConfig+0x1c4>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f003 030f 	and.w	r3, r3, #15
 80047c6:	683a      	ldr	r2, [r7, #0]
 80047c8:	429a      	cmp	r2, r3
 80047ca:	d001      	beq.n	80047d0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80047cc:	2301      	movs	r3, #1
 80047ce:	e0b8      	b.n	8004942 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f003 0302 	and.w	r3, r3, #2
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d020      	beq.n	800481e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f003 0304 	and.w	r3, r3, #4
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d005      	beq.n	80047f4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80047e8:	4b59      	ldr	r3, [pc, #356]	; (8004950 <HAL_RCC_ClockConfig+0x1c8>)
 80047ea:	689b      	ldr	r3, [r3, #8]
 80047ec:	4a58      	ldr	r2, [pc, #352]	; (8004950 <HAL_RCC_ClockConfig+0x1c8>)
 80047ee:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80047f2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f003 0308 	and.w	r3, r3, #8
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d005      	beq.n	800480c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004800:	4b53      	ldr	r3, [pc, #332]	; (8004950 <HAL_RCC_ClockConfig+0x1c8>)
 8004802:	689b      	ldr	r3, [r3, #8]
 8004804:	4a52      	ldr	r2, [pc, #328]	; (8004950 <HAL_RCC_ClockConfig+0x1c8>)
 8004806:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800480a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800480c:	4b50      	ldr	r3, [pc, #320]	; (8004950 <HAL_RCC_ClockConfig+0x1c8>)
 800480e:	689b      	ldr	r3, [r3, #8]
 8004810:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	689b      	ldr	r3, [r3, #8]
 8004818:	494d      	ldr	r1, [pc, #308]	; (8004950 <HAL_RCC_ClockConfig+0x1c8>)
 800481a:	4313      	orrs	r3, r2
 800481c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f003 0301 	and.w	r3, r3, #1
 8004826:	2b00      	cmp	r3, #0
 8004828:	d040      	beq.n	80048ac <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	685b      	ldr	r3, [r3, #4]
 800482e:	2b01      	cmp	r3, #1
 8004830:	d107      	bne.n	8004842 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004832:	4b47      	ldr	r3, [pc, #284]	; (8004950 <HAL_RCC_ClockConfig+0x1c8>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800483a:	2b00      	cmp	r3, #0
 800483c:	d115      	bne.n	800486a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800483e:	2301      	movs	r3, #1
 8004840:	e07f      	b.n	8004942 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	685b      	ldr	r3, [r3, #4]
 8004846:	2b02      	cmp	r3, #2
 8004848:	d107      	bne.n	800485a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800484a:	4b41      	ldr	r3, [pc, #260]	; (8004950 <HAL_RCC_ClockConfig+0x1c8>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004852:	2b00      	cmp	r3, #0
 8004854:	d109      	bne.n	800486a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004856:	2301      	movs	r3, #1
 8004858:	e073      	b.n	8004942 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800485a:	4b3d      	ldr	r3, [pc, #244]	; (8004950 <HAL_RCC_ClockConfig+0x1c8>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f003 0302 	and.w	r3, r3, #2
 8004862:	2b00      	cmp	r3, #0
 8004864:	d101      	bne.n	800486a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004866:	2301      	movs	r3, #1
 8004868:	e06b      	b.n	8004942 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800486a:	4b39      	ldr	r3, [pc, #228]	; (8004950 <HAL_RCC_ClockConfig+0x1c8>)
 800486c:	689b      	ldr	r3, [r3, #8]
 800486e:	f023 0203 	bic.w	r2, r3, #3
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	685b      	ldr	r3, [r3, #4]
 8004876:	4936      	ldr	r1, [pc, #216]	; (8004950 <HAL_RCC_ClockConfig+0x1c8>)
 8004878:	4313      	orrs	r3, r2
 800487a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800487c:	f7fd fb58 	bl	8001f30 <HAL_GetTick>
 8004880:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004882:	e00a      	b.n	800489a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004884:	f7fd fb54 	bl	8001f30 <HAL_GetTick>
 8004888:	4602      	mov	r2, r0
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	1ad3      	subs	r3, r2, r3
 800488e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004892:	4293      	cmp	r3, r2
 8004894:	d901      	bls.n	800489a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004896:	2303      	movs	r3, #3
 8004898:	e053      	b.n	8004942 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800489a:	4b2d      	ldr	r3, [pc, #180]	; (8004950 <HAL_RCC_ClockConfig+0x1c8>)
 800489c:	689b      	ldr	r3, [r3, #8]
 800489e:	f003 020c 	and.w	r2, r3, #12
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	685b      	ldr	r3, [r3, #4]
 80048a6:	009b      	lsls	r3, r3, #2
 80048a8:	429a      	cmp	r2, r3
 80048aa:	d1eb      	bne.n	8004884 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80048ac:	4b27      	ldr	r3, [pc, #156]	; (800494c <HAL_RCC_ClockConfig+0x1c4>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f003 030f 	and.w	r3, r3, #15
 80048b4:	683a      	ldr	r2, [r7, #0]
 80048b6:	429a      	cmp	r2, r3
 80048b8:	d210      	bcs.n	80048dc <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048ba:	4b24      	ldr	r3, [pc, #144]	; (800494c <HAL_RCC_ClockConfig+0x1c4>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f023 020f 	bic.w	r2, r3, #15
 80048c2:	4922      	ldr	r1, [pc, #136]	; (800494c <HAL_RCC_ClockConfig+0x1c4>)
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	4313      	orrs	r3, r2
 80048c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80048ca:	4b20      	ldr	r3, [pc, #128]	; (800494c <HAL_RCC_ClockConfig+0x1c4>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f003 030f 	and.w	r3, r3, #15
 80048d2:	683a      	ldr	r2, [r7, #0]
 80048d4:	429a      	cmp	r2, r3
 80048d6:	d001      	beq.n	80048dc <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80048d8:	2301      	movs	r3, #1
 80048da:	e032      	b.n	8004942 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f003 0304 	and.w	r3, r3, #4
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d008      	beq.n	80048fa <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80048e8:	4b19      	ldr	r3, [pc, #100]	; (8004950 <HAL_RCC_ClockConfig+0x1c8>)
 80048ea:	689b      	ldr	r3, [r3, #8]
 80048ec:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	68db      	ldr	r3, [r3, #12]
 80048f4:	4916      	ldr	r1, [pc, #88]	; (8004950 <HAL_RCC_ClockConfig+0x1c8>)
 80048f6:	4313      	orrs	r3, r2
 80048f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f003 0308 	and.w	r3, r3, #8
 8004902:	2b00      	cmp	r3, #0
 8004904:	d009      	beq.n	800491a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004906:	4b12      	ldr	r3, [pc, #72]	; (8004950 <HAL_RCC_ClockConfig+0x1c8>)
 8004908:	689b      	ldr	r3, [r3, #8]
 800490a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	691b      	ldr	r3, [r3, #16]
 8004912:	00db      	lsls	r3, r3, #3
 8004914:	490e      	ldr	r1, [pc, #56]	; (8004950 <HAL_RCC_ClockConfig+0x1c8>)
 8004916:	4313      	orrs	r3, r2
 8004918:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800491a:	f000 f821 	bl	8004960 <HAL_RCC_GetSysClockFreq>
 800491e:	4602      	mov	r2, r0
 8004920:	4b0b      	ldr	r3, [pc, #44]	; (8004950 <HAL_RCC_ClockConfig+0x1c8>)
 8004922:	689b      	ldr	r3, [r3, #8]
 8004924:	091b      	lsrs	r3, r3, #4
 8004926:	f003 030f 	and.w	r3, r3, #15
 800492a:	490a      	ldr	r1, [pc, #40]	; (8004954 <HAL_RCC_ClockConfig+0x1cc>)
 800492c:	5ccb      	ldrb	r3, [r1, r3]
 800492e:	fa22 f303 	lsr.w	r3, r2, r3
 8004932:	4a09      	ldr	r2, [pc, #36]	; (8004958 <HAL_RCC_ClockConfig+0x1d0>)
 8004934:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004936:	4b09      	ldr	r3, [pc, #36]	; (800495c <HAL_RCC_ClockConfig+0x1d4>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4618      	mov	r0, r3
 800493c:	f7fd fab4 	bl	8001ea8 <HAL_InitTick>

  return HAL_OK;
 8004940:	2300      	movs	r3, #0
}
 8004942:	4618      	mov	r0, r3
 8004944:	3710      	adds	r7, #16
 8004946:	46bd      	mov	sp, r7
 8004948:	bd80      	pop	{r7, pc}
 800494a:	bf00      	nop
 800494c:	40023c00 	.word	0x40023c00
 8004950:	40023800 	.word	0x40023800
 8004954:	0800fce4 	.word	0x0800fce4
 8004958:	20000000 	.word	0x20000000
 800495c:	20000004 	.word	0x20000004

08004960 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004960:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004964:	b094      	sub	sp, #80	; 0x50
 8004966:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004968:	2300      	movs	r3, #0
 800496a:	647b      	str	r3, [r7, #68]	; 0x44
 800496c:	2300      	movs	r3, #0
 800496e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004970:	2300      	movs	r3, #0
 8004972:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8004974:	2300      	movs	r3, #0
 8004976:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004978:	4b79      	ldr	r3, [pc, #484]	; (8004b60 <HAL_RCC_GetSysClockFreq+0x200>)
 800497a:	689b      	ldr	r3, [r3, #8]
 800497c:	f003 030c 	and.w	r3, r3, #12
 8004980:	2b08      	cmp	r3, #8
 8004982:	d00d      	beq.n	80049a0 <HAL_RCC_GetSysClockFreq+0x40>
 8004984:	2b08      	cmp	r3, #8
 8004986:	f200 80e1 	bhi.w	8004b4c <HAL_RCC_GetSysClockFreq+0x1ec>
 800498a:	2b00      	cmp	r3, #0
 800498c:	d002      	beq.n	8004994 <HAL_RCC_GetSysClockFreq+0x34>
 800498e:	2b04      	cmp	r3, #4
 8004990:	d003      	beq.n	800499a <HAL_RCC_GetSysClockFreq+0x3a>
 8004992:	e0db      	b.n	8004b4c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004994:	4b73      	ldr	r3, [pc, #460]	; (8004b64 <HAL_RCC_GetSysClockFreq+0x204>)
 8004996:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004998:	e0db      	b.n	8004b52 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800499a:	4b73      	ldr	r3, [pc, #460]	; (8004b68 <HAL_RCC_GetSysClockFreq+0x208>)
 800499c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800499e:	e0d8      	b.n	8004b52 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80049a0:	4b6f      	ldr	r3, [pc, #444]	; (8004b60 <HAL_RCC_GetSysClockFreq+0x200>)
 80049a2:	685b      	ldr	r3, [r3, #4]
 80049a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80049a8:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80049aa:	4b6d      	ldr	r3, [pc, #436]	; (8004b60 <HAL_RCC_GetSysClockFreq+0x200>)
 80049ac:	685b      	ldr	r3, [r3, #4]
 80049ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d063      	beq.n	8004a7e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80049b6:	4b6a      	ldr	r3, [pc, #424]	; (8004b60 <HAL_RCC_GetSysClockFreq+0x200>)
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	099b      	lsrs	r3, r3, #6
 80049bc:	2200      	movs	r2, #0
 80049be:	63bb      	str	r3, [r7, #56]	; 0x38
 80049c0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80049c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049c8:	633b      	str	r3, [r7, #48]	; 0x30
 80049ca:	2300      	movs	r3, #0
 80049cc:	637b      	str	r3, [r7, #52]	; 0x34
 80049ce:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80049d2:	4622      	mov	r2, r4
 80049d4:	462b      	mov	r3, r5
 80049d6:	f04f 0000 	mov.w	r0, #0
 80049da:	f04f 0100 	mov.w	r1, #0
 80049de:	0159      	lsls	r1, r3, #5
 80049e0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80049e4:	0150      	lsls	r0, r2, #5
 80049e6:	4602      	mov	r2, r0
 80049e8:	460b      	mov	r3, r1
 80049ea:	4621      	mov	r1, r4
 80049ec:	1a51      	subs	r1, r2, r1
 80049ee:	6139      	str	r1, [r7, #16]
 80049f0:	4629      	mov	r1, r5
 80049f2:	eb63 0301 	sbc.w	r3, r3, r1
 80049f6:	617b      	str	r3, [r7, #20]
 80049f8:	f04f 0200 	mov.w	r2, #0
 80049fc:	f04f 0300 	mov.w	r3, #0
 8004a00:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004a04:	4659      	mov	r1, fp
 8004a06:	018b      	lsls	r3, r1, #6
 8004a08:	4651      	mov	r1, sl
 8004a0a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004a0e:	4651      	mov	r1, sl
 8004a10:	018a      	lsls	r2, r1, #6
 8004a12:	4651      	mov	r1, sl
 8004a14:	ebb2 0801 	subs.w	r8, r2, r1
 8004a18:	4659      	mov	r1, fp
 8004a1a:	eb63 0901 	sbc.w	r9, r3, r1
 8004a1e:	f04f 0200 	mov.w	r2, #0
 8004a22:	f04f 0300 	mov.w	r3, #0
 8004a26:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004a2a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004a2e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004a32:	4690      	mov	r8, r2
 8004a34:	4699      	mov	r9, r3
 8004a36:	4623      	mov	r3, r4
 8004a38:	eb18 0303 	adds.w	r3, r8, r3
 8004a3c:	60bb      	str	r3, [r7, #8]
 8004a3e:	462b      	mov	r3, r5
 8004a40:	eb49 0303 	adc.w	r3, r9, r3
 8004a44:	60fb      	str	r3, [r7, #12]
 8004a46:	f04f 0200 	mov.w	r2, #0
 8004a4a:	f04f 0300 	mov.w	r3, #0
 8004a4e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004a52:	4629      	mov	r1, r5
 8004a54:	024b      	lsls	r3, r1, #9
 8004a56:	4621      	mov	r1, r4
 8004a58:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004a5c:	4621      	mov	r1, r4
 8004a5e:	024a      	lsls	r2, r1, #9
 8004a60:	4610      	mov	r0, r2
 8004a62:	4619      	mov	r1, r3
 8004a64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a66:	2200      	movs	r2, #0
 8004a68:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a6a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004a6c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004a70:	f7fc f92a 	bl	8000cc8 <__aeabi_uldivmod>
 8004a74:	4602      	mov	r2, r0
 8004a76:	460b      	mov	r3, r1
 8004a78:	4613      	mov	r3, r2
 8004a7a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a7c:	e058      	b.n	8004b30 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a7e:	4b38      	ldr	r3, [pc, #224]	; (8004b60 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a80:	685b      	ldr	r3, [r3, #4]
 8004a82:	099b      	lsrs	r3, r3, #6
 8004a84:	2200      	movs	r2, #0
 8004a86:	4618      	mov	r0, r3
 8004a88:	4611      	mov	r1, r2
 8004a8a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004a8e:	623b      	str	r3, [r7, #32]
 8004a90:	2300      	movs	r3, #0
 8004a92:	627b      	str	r3, [r7, #36]	; 0x24
 8004a94:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004a98:	4642      	mov	r2, r8
 8004a9a:	464b      	mov	r3, r9
 8004a9c:	f04f 0000 	mov.w	r0, #0
 8004aa0:	f04f 0100 	mov.w	r1, #0
 8004aa4:	0159      	lsls	r1, r3, #5
 8004aa6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004aaa:	0150      	lsls	r0, r2, #5
 8004aac:	4602      	mov	r2, r0
 8004aae:	460b      	mov	r3, r1
 8004ab0:	4641      	mov	r1, r8
 8004ab2:	ebb2 0a01 	subs.w	sl, r2, r1
 8004ab6:	4649      	mov	r1, r9
 8004ab8:	eb63 0b01 	sbc.w	fp, r3, r1
 8004abc:	f04f 0200 	mov.w	r2, #0
 8004ac0:	f04f 0300 	mov.w	r3, #0
 8004ac4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004ac8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004acc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004ad0:	ebb2 040a 	subs.w	r4, r2, sl
 8004ad4:	eb63 050b 	sbc.w	r5, r3, fp
 8004ad8:	f04f 0200 	mov.w	r2, #0
 8004adc:	f04f 0300 	mov.w	r3, #0
 8004ae0:	00eb      	lsls	r3, r5, #3
 8004ae2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004ae6:	00e2      	lsls	r2, r4, #3
 8004ae8:	4614      	mov	r4, r2
 8004aea:	461d      	mov	r5, r3
 8004aec:	4643      	mov	r3, r8
 8004aee:	18e3      	adds	r3, r4, r3
 8004af0:	603b      	str	r3, [r7, #0]
 8004af2:	464b      	mov	r3, r9
 8004af4:	eb45 0303 	adc.w	r3, r5, r3
 8004af8:	607b      	str	r3, [r7, #4]
 8004afa:	f04f 0200 	mov.w	r2, #0
 8004afe:	f04f 0300 	mov.w	r3, #0
 8004b02:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004b06:	4629      	mov	r1, r5
 8004b08:	028b      	lsls	r3, r1, #10
 8004b0a:	4621      	mov	r1, r4
 8004b0c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004b10:	4621      	mov	r1, r4
 8004b12:	028a      	lsls	r2, r1, #10
 8004b14:	4610      	mov	r0, r2
 8004b16:	4619      	mov	r1, r3
 8004b18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	61bb      	str	r3, [r7, #24]
 8004b1e:	61fa      	str	r2, [r7, #28]
 8004b20:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004b24:	f7fc f8d0 	bl	8000cc8 <__aeabi_uldivmod>
 8004b28:	4602      	mov	r2, r0
 8004b2a:	460b      	mov	r3, r1
 8004b2c:	4613      	mov	r3, r2
 8004b2e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004b30:	4b0b      	ldr	r3, [pc, #44]	; (8004b60 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b32:	685b      	ldr	r3, [r3, #4]
 8004b34:	0c1b      	lsrs	r3, r3, #16
 8004b36:	f003 0303 	and.w	r3, r3, #3
 8004b3a:	3301      	adds	r3, #1
 8004b3c:	005b      	lsls	r3, r3, #1
 8004b3e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8004b40:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004b42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b44:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b48:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004b4a:	e002      	b.n	8004b52 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004b4c:	4b05      	ldr	r3, [pc, #20]	; (8004b64 <HAL_RCC_GetSysClockFreq+0x204>)
 8004b4e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004b50:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004b52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004b54:	4618      	mov	r0, r3
 8004b56:	3750      	adds	r7, #80	; 0x50
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b5e:	bf00      	nop
 8004b60:	40023800 	.word	0x40023800
 8004b64:	00f42400 	.word	0x00f42400
 8004b68:	007a1200 	.word	0x007a1200

08004b6c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b70:	4b03      	ldr	r3, [pc, #12]	; (8004b80 <HAL_RCC_GetHCLKFreq+0x14>)
 8004b72:	681b      	ldr	r3, [r3, #0]
}
 8004b74:	4618      	mov	r0, r3
 8004b76:	46bd      	mov	sp, r7
 8004b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7c:	4770      	bx	lr
 8004b7e:	bf00      	nop
 8004b80:	20000000 	.word	0x20000000

08004b84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004b88:	f7ff fff0 	bl	8004b6c <HAL_RCC_GetHCLKFreq>
 8004b8c:	4602      	mov	r2, r0
 8004b8e:	4b05      	ldr	r3, [pc, #20]	; (8004ba4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004b90:	689b      	ldr	r3, [r3, #8]
 8004b92:	0a9b      	lsrs	r3, r3, #10
 8004b94:	f003 0307 	and.w	r3, r3, #7
 8004b98:	4903      	ldr	r1, [pc, #12]	; (8004ba8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b9a:	5ccb      	ldrb	r3, [r1, r3]
 8004b9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	bd80      	pop	{r7, pc}
 8004ba4:	40023800 	.word	0x40023800
 8004ba8:	0800fcf4 	.word	0x0800fcf4

08004bac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004bb0:	f7ff ffdc 	bl	8004b6c <HAL_RCC_GetHCLKFreq>
 8004bb4:	4602      	mov	r2, r0
 8004bb6:	4b05      	ldr	r3, [pc, #20]	; (8004bcc <HAL_RCC_GetPCLK2Freq+0x20>)
 8004bb8:	689b      	ldr	r3, [r3, #8]
 8004bba:	0b5b      	lsrs	r3, r3, #13
 8004bbc:	f003 0307 	and.w	r3, r3, #7
 8004bc0:	4903      	ldr	r1, [pc, #12]	; (8004bd0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004bc2:	5ccb      	ldrb	r3, [r1, r3]
 8004bc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004bc8:	4618      	mov	r0, r3
 8004bca:	bd80      	pop	{r7, pc}
 8004bcc:	40023800 	.word	0x40023800
 8004bd0:	0800fcf4 	.word	0x0800fcf4

08004bd4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b088      	sub	sp, #32
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004bdc:	2300      	movs	r3, #0
 8004bde:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004be0:	2300      	movs	r3, #0
 8004be2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004be4:	2300      	movs	r3, #0
 8004be6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004be8:	2300      	movs	r3, #0
 8004bea:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004bec:	2300      	movs	r3, #0
 8004bee:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f003 0301 	and.w	r3, r3, #1
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d012      	beq.n	8004c22 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004bfc:	4b69      	ldr	r3, [pc, #420]	; (8004da4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004bfe:	689b      	ldr	r3, [r3, #8]
 8004c00:	4a68      	ldr	r2, [pc, #416]	; (8004da4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c02:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004c06:	6093      	str	r3, [r2, #8]
 8004c08:	4b66      	ldr	r3, [pc, #408]	; (8004da4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c0a:	689a      	ldr	r2, [r3, #8]
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c10:	4964      	ldr	r1, [pc, #400]	; (8004da4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c12:	4313      	orrs	r3, r2
 8004c14:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d101      	bne.n	8004c22 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004c1e:	2301      	movs	r3, #1
 8004c20:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d017      	beq.n	8004c5e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004c2e:	4b5d      	ldr	r3, [pc, #372]	; (8004da4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c30:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c34:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c3c:	4959      	ldr	r1, [pc, #356]	; (8004da4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c3e:	4313      	orrs	r3, r2
 8004c40:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c48:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c4c:	d101      	bne.n	8004c52 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004c4e:	2301      	movs	r3, #1
 8004c50:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d101      	bne.n	8004c5e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d017      	beq.n	8004c9a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004c6a:	4b4e      	ldr	r3, [pc, #312]	; (8004da4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c70:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c78:	494a      	ldr	r1, [pc, #296]	; (8004da4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c7a:	4313      	orrs	r3, r2
 8004c7c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c84:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c88:	d101      	bne.n	8004c8e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d101      	bne.n	8004c9a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004c96:	2301      	movs	r3, #1
 8004c98:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d001      	beq.n	8004caa <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f003 0320 	and.w	r3, r3, #32
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	f000 808b 	beq.w	8004dce <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004cb8:	4b3a      	ldr	r3, [pc, #232]	; (8004da4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cbc:	4a39      	ldr	r2, [pc, #228]	; (8004da4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cbe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004cc2:	6413      	str	r3, [r2, #64]	; 0x40
 8004cc4:	4b37      	ldr	r3, [pc, #220]	; (8004da4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ccc:	60bb      	str	r3, [r7, #8]
 8004cce:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004cd0:	4b35      	ldr	r3, [pc, #212]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	4a34      	ldr	r2, [pc, #208]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004cd6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004cda:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004cdc:	f7fd f928 	bl	8001f30 <HAL_GetTick>
 8004ce0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004ce2:	e008      	b.n	8004cf6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ce4:	f7fd f924 	bl	8001f30 <HAL_GetTick>
 8004ce8:	4602      	mov	r2, r0
 8004cea:	697b      	ldr	r3, [r7, #20]
 8004cec:	1ad3      	subs	r3, r2, r3
 8004cee:	2b64      	cmp	r3, #100	; 0x64
 8004cf0:	d901      	bls.n	8004cf6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004cf2:	2303      	movs	r3, #3
 8004cf4:	e357      	b.n	80053a6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004cf6:	4b2c      	ldr	r3, [pc, #176]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d0f0      	beq.n	8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004d02:	4b28      	ldr	r3, [pc, #160]	; (8004da4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d0a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004d0c:	693b      	ldr	r3, [r7, #16]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d035      	beq.n	8004d7e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d1a:	693a      	ldr	r2, [r7, #16]
 8004d1c:	429a      	cmp	r2, r3
 8004d1e:	d02e      	beq.n	8004d7e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004d20:	4b20      	ldr	r3, [pc, #128]	; (8004da4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d28:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004d2a:	4b1e      	ldr	r3, [pc, #120]	; (8004da4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d2e:	4a1d      	ldr	r2, [pc, #116]	; (8004da4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d34:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004d36:	4b1b      	ldr	r3, [pc, #108]	; (8004da4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d3a:	4a1a      	ldr	r2, [pc, #104]	; (8004da4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d3c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d40:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004d42:	4a18      	ldr	r2, [pc, #96]	; (8004da4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d44:	693b      	ldr	r3, [r7, #16]
 8004d46:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004d48:	4b16      	ldr	r3, [pc, #88]	; (8004da4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d4c:	f003 0301 	and.w	r3, r3, #1
 8004d50:	2b01      	cmp	r3, #1
 8004d52:	d114      	bne.n	8004d7e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d54:	f7fd f8ec 	bl	8001f30 <HAL_GetTick>
 8004d58:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d5a:	e00a      	b.n	8004d72 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d5c:	f7fd f8e8 	bl	8001f30 <HAL_GetTick>
 8004d60:	4602      	mov	r2, r0
 8004d62:	697b      	ldr	r3, [r7, #20]
 8004d64:	1ad3      	subs	r3, r2, r3
 8004d66:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d901      	bls.n	8004d72 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004d6e:	2303      	movs	r3, #3
 8004d70:	e319      	b.n	80053a6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d72:	4b0c      	ldr	r3, [pc, #48]	; (8004da4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d76:	f003 0302 	and.w	r3, r3, #2
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d0ee      	beq.n	8004d5c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d86:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d8a:	d111      	bne.n	8004db0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004d8c:	4b05      	ldr	r3, [pc, #20]	; (8004da4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d8e:	689b      	ldr	r3, [r3, #8]
 8004d90:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004d98:	4b04      	ldr	r3, [pc, #16]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004d9a:	400b      	ands	r3, r1
 8004d9c:	4901      	ldr	r1, [pc, #4]	; (8004da4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d9e:	4313      	orrs	r3, r2
 8004da0:	608b      	str	r3, [r1, #8]
 8004da2:	e00b      	b.n	8004dbc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004da4:	40023800 	.word	0x40023800
 8004da8:	40007000 	.word	0x40007000
 8004dac:	0ffffcff 	.word	0x0ffffcff
 8004db0:	4baa      	ldr	r3, [pc, #680]	; (800505c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004db2:	689b      	ldr	r3, [r3, #8]
 8004db4:	4aa9      	ldr	r2, [pc, #676]	; (800505c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004db6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004dba:	6093      	str	r3, [r2, #8]
 8004dbc:	4ba7      	ldr	r3, [pc, #668]	; (800505c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004dbe:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dc4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004dc8:	49a4      	ldr	r1, [pc, #656]	; (800505c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004dca:	4313      	orrs	r3, r2
 8004dcc:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f003 0310 	and.w	r3, r3, #16
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d010      	beq.n	8004dfc <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004dda:	4ba0      	ldr	r3, [pc, #640]	; (800505c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004ddc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004de0:	4a9e      	ldr	r2, [pc, #632]	; (800505c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004de2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004de6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004dea:	4b9c      	ldr	r3, [pc, #624]	; (800505c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004dec:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004df4:	4999      	ldr	r1, [pc, #612]	; (800505c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004df6:	4313      	orrs	r3, r2
 8004df8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d00a      	beq.n	8004e1e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004e08:	4b94      	ldr	r3, [pc, #592]	; (800505c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004e0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e0e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004e16:	4991      	ldr	r1, [pc, #580]	; (800505c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004e18:	4313      	orrs	r3, r2
 8004e1a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d00a      	beq.n	8004e40 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004e2a:	4b8c      	ldr	r3, [pc, #560]	; (800505c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004e2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e30:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004e38:	4988      	ldr	r1, [pc, #544]	; (800505c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004e3a:	4313      	orrs	r3, r2
 8004e3c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d00a      	beq.n	8004e62 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004e4c:	4b83      	ldr	r3, [pc, #524]	; (800505c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004e4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e52:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e5a:	4980      	ldr	r1, [pc, #512]	; (800505c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004e5c:	4313      	orrs	r3, r2
 8004e5e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d00a      	beq.n	8004e84 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004e6e:	4b7b      	ldr	r3, [pc, #492]	; (800505c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004e70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e74:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e7c:	4977      	ldr	r1, [pc, #476]	; (800505c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004e7e:	4313      	orrs	r3, r2
 8004e80:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d00a      	beq.n	8004ea6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004e90:	4b72      	ldr	r3, [pc, #456]	; (800505c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004e92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e96:	f023 0203 	bic.w	r2, r3, #3
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e9e:	496f      	ldr	r1, [pc, #444]	; (800505c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004ea0:	4313      	orrs	r3, r2
 8004ea2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d00a      	beq.n	8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004eb2:	4b6a      	ldr	r3, [pc, #424]	; (800505c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004eb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004eb8:	f023 020c 	bic.w	r2, r3, #12
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ec0:	4966      	ldr	r1, [pc, #408]	; (800505c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004ec2:	4313      	orrs	r3, r2
 8004ec4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d00a      	beq.n	8004eea <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004ed4:	4b61      	ldr	r3, [pc, #388]	; (800505c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004ed6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004eda:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ee2:	495e      	ldr	r1, [pc, #376]	; (800505c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004ee4:	4313      	orrs	r3, r2
 8004ee6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d00a      	beq.n	8004f0c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004ef6:	4b59      	ldr	r3, [pc, #356]	; (800505c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004ef8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004efc:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f04:	4955      	ldr	r1, [pc, #340]	; (800505c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004f06:	4313      	orrs	r3, r2
 8004f08:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d00a      	beq.n	8004f2e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004f18:	4b50      	ldr	r3, [pc, #320]	; (800505c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004f1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f1e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f26:	494d      	ldr	r1, [pc, #308]	; (800505c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004f28:	4313      	orrs	r3, r2
 8004f2a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d00a      	beq.n	8004f50 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004f3a:	4b48      	ldr	r3, [pc, #288]	; (800505c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004f3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f40:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f48:	4944      	ldr	r1, [pc, #272]	; (800505c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004f4a:	4313      	orrs	r3, r2
 8004f4c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d00a      	beq.n	8004f72 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004f5c:	4b3f      	ldr	r3, [pc, #252]	; (800505c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004f5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f62:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f6a:	493c      	ldr	r1, [pc, #240]	; (800505c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004f6c:	4313      	orrs	r3, r2
 8004f6e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d00a      	beq.n	8004f94 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004f7e:	4b37      	ldr	r3, [pc, #220]	; (800505c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004f80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f84:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f8c:	4933      	ldr	r1, [pc, #204]	; (800505c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004f8e:	4313      	orrs	r3, r2
 8004f90:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d00a      	beq.n	8004fb6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004fa0:	4b2e      	ldr	r3, [pc, #184]	; (800505c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004fa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fa6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004fae:	492b      	ldr	r1, [pc, #172]	; (800505c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004fb0:	4313      	orrs	r3, r2
 8004fb2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d011      	beq.n	8004fe6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004fc2:	4b26      	ldr	r3, [pc, #152]	; (800505c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004fc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fc8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004fd0:	4922      	ldr	r1, [pc, #136]	; (800505c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004fd2:	4313      	orrs	r3, r2
 8004fd4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004fdc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004fe0:	d101      	bne.n	8004fe6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f003 0308 	and.w	r3, r3, #8
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d001      	beq.n	8004ff6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004ff2:	2301      	movs	r3, #1
 8004ff4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d00a      	beq.n	8005018 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005002:	4b16      	ldr	r3, [pc, #88]	; (800505c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005004:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005008:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005010:	4912      	ldr	r1, [pc, #72]	; (800505c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005012:	4313      	orrs	r3, r2
 8005014:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005020:	2b00      	cmp	r3, #0
 8005022:	d00b      	beq.n	800503c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005024:	4b0d      	ldr	r3, [pc, #52]	; (800505c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005026:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800502a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005034:	4909      	ldr	r1, [pc, #36]	; (800505c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005036:	4313      	orrs	r3, r2
 8005038:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800503c:	69fb      	ldr	r3, [r7, #28]
 800503e:	2b01      	cmp	r3, #1
 8005040:	d006      	beq.n	8005050 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800504a:	2b00      	cmp	r3, #0
 800504c:	f000 80d9 	beq.w	8005202 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005050:	4b02      	ldr	r3, [pc, #8]	; (800505c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	4a01      	ldr	r2, [pc, #4]	; (800505c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005056:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800505a:	e001      	b.n	8005060 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 800505c:	40023800 	.word	0x40023800
 8005060:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005062:	f7fc ff65 	bl	8001f30 <HAL_GetTick>
 8005066:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005068:	e008      	b.n	800507c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800506a:	f7fc ff61 	bl	8001f30 <HAL_GetTick>
 800506e:	4602      	mov	r2, r0
 8005070:	697b      	ldr	r3, [r7, #20]
 8005072:	1ad3      	subs	r3, r2, r3
 8005074:	2b64      	cmp	r3, #100	; 0x64
 8005076:	d901      	bls.n	800507c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005078:	2303      	movs	r3, #3
 800507a:	e194      	b.n	80053a6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800507c:	4b6c      	ldr	r3, [pc, #432]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005084:	2b00      	cmp	r3, #0
 8005086:	d1f0      	bne.n	800506a <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f003 0301 	and.w	r3, r3, #1
 8005090:	2b00      	cmp	r3, #0
 8005092:	d021      	beq.n	80050d8 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005098:	2b00      	cmp	r3, #0
 800509a:	d11d      	bne.n	80050d8 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800509c:	4b64      	ldr	r3, [pc, #400]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800509e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80050a2:	0c1b      	lsrs	r3, r3, #16
 80050a4:	f003 0303 	and.w	r3, r3, #3
 80050a8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80050aa:	4b61      	ldr	r3, [pc, #388]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80050ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80050b0:	0e1b      	lsrs	r3, r3, #24
 80050b2:	f003 030f 	and.w	r3, r3, #15
 80050b6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	685b      	ldr	r3, [r3, #4]
 80050bc:	019a      	lsls	r2, r3, #6
 80050be:	693b      	ldr	r3, [r7, #16]
 80050c0:	041b      	lsls	r3, r3, #16
 80050c2:	431a      	orrs	r2, r3
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	061b      	lsls	r3, r3, #24
 80050c8:	431a      	orrs	r2, r3
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	689b      	ldr	r3, [r3, #8]
 80050ce:	071b      	lsls	r3, r3, #28
 80050d0:	4957      	ldr	r1, [pc, #348]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80050d2:	4313      	orrs	r3, r2
 80050d4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d004      	beq.n	80050ee <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050e8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80050ec:	d00a      	beq.n	8005104 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d02e      	beq.n	8005158 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005102:	d129      	bne.n	8005158 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005104:	4b4a      	ldr	r3, [pc, #296]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005106:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800510a:	0c1b      	lsrs	r3, r3, #16
 800510c:	f003 0303 	and.w	r3, r3, #3
 8005110:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005112:	4b47      	ldr	r3, [pc, #284]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005114:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005118:	0f1b      	lsrs	r3, r3, #28
 800511a:	f003 0307 	and.w	r3, r3, #7
 800511e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	685b      	ldr	r3, [r3, #4]
 8005124:	019a      	lsls	r2, r3, #6
 8005126:	693b      	ldr	r3, [r7, #16]
 8005128:	041b      	lsls	r3, r3, #16
 800512a:	431a      	orrs	r2, r3
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	68db      	ldr	r3, [r3, #12]
 8005130:	061b      	lsls	r3, r3, #24
 8005132:	431a      	orrs	r2, r3
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	071b      	lsls	r3, r3, #28
 8005138:	493d      	ldr	r1, [pc, #244]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800513a:	4313      	orrs	r3, r2
 800513c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005140:	4b3b      	ldr	r3, [pc, #236]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005142:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005146:	f023 021f 	bic.w	r2, r3, #31
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800514e:	3b01      	subs	r3, #1
 8005150:	4937      	ldr	r1, [pc, #220]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005152:	4313      	orrs	r3, r2
 8005154:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005160:	2b00      	cmp	r3, #0
 8005162:	d01d      	beq.n	80051a0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005164:	4b32      	ldr	r3, [pc, #200]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005166:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800516a:	0e1b      	lsrs	r3, r3, #24
 800516c:	f003 030f 	and.w	r3, r3, #15
 8005170:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005172:	4b2f      	ldr	r3, [pc, #188]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005174:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005178:	0f1b      	lsrs	r3, r3, #28
 800517a:	f003 0307 	and.w	r3, r3, #7
 800517e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	685b      	ldr	r3, [r3, #4]
 8005184:	019a      	lsls	r2, r3, #6
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	691b      	ldr	r3, [r3, #16]
 800518a:	041b      	lsls	r3, r3, #16
 800518c:	431a      	orrs	r2, r3
 800518e:	693b      	ldr	r3, [r7, #16]
 8005190:	061b      	lsls	r3, r3, #24
 8005192:	431a      	orrs	r2, r3
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	071b      	lsls	r3, r3, #28
 8005198:	4925      	ldr	r1, [pc, #148]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800519a:	4313      	orrs	r3, r2
 800519c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d011      	beq.n	80051d0 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	685b      	ldr	r3, [r3, #4]
 80051b0:	019a      	lsls	r2, r3, #6
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	691b      	ldr	r3, [r3, #16]
 80051b6:	041b      	lsls	r3, r3, #16
 80051b8:	431a      	orrs	r2, r3
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	68db      	ldr	r3, [r3, #12]
 80051be:	061b      	lsls	r3, r3, #24
 80051c0:	431a      	orrs	r2, r3
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	689b      	ldr	r3, [r3, #8]
 80051c6:	071b      	lsls	r3, r3, #28
 80051c8:	4919      	ldr	r1, [pc, #100]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80051ca:	4313      	orrs	r3, r2
 80051cc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80051d0:	4b17      	ldr	r3, [pc, #92]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	4a16      	ldr	r2, [pc, #88]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80051d6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80051da:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80051dc:	f7fc fea8 	bl	8001f30 <HAL_GetTick>
 80051e0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80051e2:	e008      	b.n	80051f6 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80051e4:	f7fc fea4 	bl	8001f30 <HAL_GetTick>
 80051e8:	4602      	mov	r2, r0
 80051ea:	697b      	ldr	r3, [r7, #20]
 80051ec:	1ad3      	subs	r3, r2, r3
 80051ee:	2b64      	cmp	r3, #100	; 0x64
 80051f0:	d901      	bls.n	80051f6 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80051f2:	2303      	movs	r3, #3
 80051f4:	e0d7      	b.n	80053a6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80051f6:	4b0e      	ldr	r3, [pc, #56]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d0f0      	beq.n	80051e4 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005202:	69bb      	ldr	r3, [r7, #24]
 8005204:	2b01      	cmp	r3, #1
 8005206:	f040 80cd 	bne.w	80053a4 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800520a:	4b09      	ldr	r3, [pc, #36]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	4a08      	ldr	r2, [pc, #32]	; (8005230 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005210:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005214:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005216:	f7fc fe8b 	bl	8001f30 <HAL_GetTick>
 800521a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800521c:	e00a      	b.n	8005234 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800521e:	f7fc fe87 	bl	8001f30 <HAL_GetTick>
 8005222:	4602      	mov	r2, r0
 8005224:	697b      	ldr	r3, [r7, #20]
 8005226:	1ad3      	subs	r3, r2, r3
 8005228:	2b64      	cmp	r3, #100	; 0x64
 800522a:	d903      	bls.n	8005234 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800522c:	2303      	movs	r3, #3
 800522e:	e0ba      	b.n	80053a6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8005230:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005234:	4b5e      	ldr	r3, [pc, #376]	; (80053b0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800523c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005240:	d0ed      	beq.n	800521e <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800524a:	2b00      	cmp	r3, #0
 800524c:	d003      	beq.n	8005256 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005252:	2b00      	cmp	r3, #0
 8005254:	d009      	beq.n	800526a <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800525e:	2b00      	cmp	r3, #0
 8005260:	d02e      	beq.n	80052c0 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005266:	2b00      	cmp	r3, #0
 8005268:	d12a      	bne.n	80052c0 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800526a:	4b51      	ldr	r3, [pc, #324]	; (80053b0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800526c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005270:	0c1b      	lsrs	r3, r3, #16
 8005272:	f003 0303 	and.w	r3, r3, #3
 8005276:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005278:	4b4d      	ldr	r3, [pc, #308]	; (80053b0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800527a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800527e:	0f1b      	lsrs	r3, r3, #28
 8005280:	f003 0307 	and.w	r3, r3, #7
 8005284:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	695b      	ldr	r3, [r3, #20]
 800528a:	019a      	lsls	r2, r3, #6
 800528c:	693b      	ldr	r3, [r7, #16]
 800528e:	041b      	lsls	r3, r3, #16
 8005290:	431a      	orrs	r2, r3
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	699b      	ldr	r3, [r3, #24]
 8005296:	061b      	lsls	r3, r3, #24
 8005298:	431a      	orrs	r2, r3
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	071b      	lsls	r3, r3, #28
 800529e:	4944      	ldr	r1, [pc, #272]	; (80053b0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80052a0:	4313      	orrs	r3, r2
 80052a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80052a6:	4b42      	ldr	r3, [pc, #264]	; (80053b0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80052a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80052ac:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052b4:	3b01      	subs	r3, #1
 80052b6:	021b      	lsls	r3, r3, #8
 80052b8:	493d      	ldr	r1, [pc, #244]	; (80053b0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80052ba:	4313      	orrs	r3, r2
 80052bc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d022      	beq.n	8005312 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80052d0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80052d4:	d11d      	bne.n	8005312 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80052d6:	4b36      	ldr	r3, [pc, #216]	; (80053b0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80052d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052dc:	0e1b      	lsrs	r3, r3, #24
 80052de:	f003 030f 	and.w	r3, r3, #15
 80052e2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80052e4:	4b32      	ldr	r3, [pc, #200]	; (80053b0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80052e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052ea:	0f1b      	lsrs	r3, r3, #28
 80052ec:	f003 0307 	and.w	r3, r3, #7
 80052f0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	695b      	ldr	r3, [r3, #20]
 80052f6:	019a      	lsls	r2, r3, #6
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6a1b      	ldr	r3, [r3, #32]
 80052fc:	041b      	lsls	r3, r3, #16
 80052fe:	431a      	orrs	r2, r3
 8005300:	693b      	ldr	r3, [r7, #16]
 8005302:	061b      	lsls	r3, r3, #24
 8005304:	431a      	orrs	r2, r3
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	071b      	lsls	r3, r3, #28
 800530a:	4929      	ldr	r1, [pc, #164]	; (80053b0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800530c:	4313      	orrs	r3, r2
 800530e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f003 0308 	and.w	r3, r3, #8
 800531a:	2b00      	cmp	r3, #0
 800531c:	d028      	beq.n	8005370 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800531e:	4b24      	ldr	r3, [pc, #144]	; (80053b0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005320:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005324:	0e1b      	lsrs	r3, r3, #24
 8005326:	f003 030f 	and.w	r3, r3, #15
 800532a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800532c:	4b20      	ldr	r3, [pc, #128]	; (80053b0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800532e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005332:	0c1b      	lsrs	r3, r3, #16
 8005334:	f003 0303 	and.w	r3, r3, #3
 8005338:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	695b      	ldr	r3, [r3, #20]
 800533e:	019a      	lsls	r2, r3, #6
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	041b      	lsls	r3, r3, #16
 8005344:	431a      	orrs	r2, r3
 8005346:	693b      	ldr	r3, [r7, #16]
 8005348:	061b      	lsls	r3, r3, #24
 800534a:	431a      	orrs	r2, r3
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	69db      	ldr	r3, [r3, #28]
 8005350:	071b      	lsls	r3, r3, #28
 8005352:	4917      	ldr	r1, [pc, #92]	; (80053b0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005354:	4313      	orrs	r3, r2
 8005356:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800535a:	4b15      	ldr	r3, [pc, #84]	; (80053b0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800535c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005360:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005368:	4911      	ldr	r1, [pc, #68]	; (80053b0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800536a:	4313      	orrs	r3, r2
 800536c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005370:	4b0f      	ldr	r3, [pc, #60]	; (80053b0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	4a0e      	ldr	r2, [pc, #56]	; (80053b0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005376:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800537a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800537c:	f7fc fdd8 	bl	8001f30 <HAL_GetTick>
 8005380:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005382:	e008      	b.n	8005396 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005384:	f7fc fdd4 	bl	8001f30 <HAL_GetTick>
 8005388:	4602      	mov	r2, r0
 800538a:	697b      	ldr	r3, [r7, #20]
 800538c:	1ad3      	subs	r3, r2, r3
 800538e:	2b64      	cmp	r3, #100	; 0x64
 8005390:	d901      	bls.n	8005396 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005392:	2303      	movs	r3, #3
 8005394:	e007      	b.n	80053a6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005396:	4b06      	ldr	r3, [pc, #24]	; (80053b0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800539e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80053a2:	d1ef      	bne.n	8005384 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80053a4:	2300      	movs	r3, #0
}
 80053a6:	4618      	mov	r0, r3
 80053a8:	3720      	adds	r7, #32
 80053aa:	46bd      	mov	sp, r7
 80053ac:	bd80      	pop	{r7, pc}
 80053ae:	bf00      	nop
 80053b0:	40023800 	.word	0x40023800

080053b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b082      	sub	sp, #8
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d101      	bne.n	80053c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80053c2:	2301      	movs	r3, #1
 80053c4:	e049      	b.n	800545a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053cc:	b2db      	uxtb	r3, r3
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d106      	bne.n	80053e0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2200      	movs	r2, #0
 80053d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80053da:	6878      	ldr	r0, [r7, #4]
 80053dc:	f7fc fac2 	bl	8001964 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2202      	movs	r2, #2
 80053e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681a      	ldr	r2, [r3, #0]
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	3304      	adds	r3, #4
 80053f0:	4619      	mov	r1, r3
 80053f2:	4610      	mov	r0, r2
 80053f4:	f000 fac0 	bl	8005978 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2201      	movs	r2, #1
 80053fc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2201      	movs	r2, #1
 8005404:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2201      	movs	r2, #1
 800540c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2201      	movs	r2, #1
 8005414:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2201      	movs	r2, #1
 800541c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2201      	movs	r2, #1
 8005424:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2201      	movs	r2, #1
 800542c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2201      	movs	r2, #1
 8005434:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2201      	movs	r2, #1
 800543c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2201      	movs	r2, #1
 8005444:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2201      	movs	r2, #1
 800544c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2201      	movs	r2, #1
 8005454:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005458:	2300      	movs	r3, #0
}
 800545a:	4618      	mov	r0, r3
 800545c:	3708      	adds	r7, #8
 800545e:	46bd      	mov	sp, r7
 8005460:	bd80      	pop	{r7, pc}
	...

08005464 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005464:	b480      	push	{r7}
 8005466:	b085      	sub	sp, #20
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005472:	b2db      	uxtb	r3, r3
 8005474:	2b01      	cmp	r3, #1
 8005476:	d001      	beq.n	800547c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005478:	2301      	movs	r3, #1
 800547a:	e054      	b.n	8005526 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2202      	movs	r2, #2
 8005480:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	68da      	ldr	r2, [r3, #12]
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f042 0201 	orr.w	r2, r2, #1
 8005492:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	4a26      	ldr	r2, [pc, #152]	; (8005534 <HAL_TIM_Base_Start_IT+0xd0>)
 800549a:	4293      	cmp	r3, r2
 800549c:	d022      	beq.n	80054e4 <HAL_TIM_Base_Start_IT+0x80>
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054a6:	d01d      	beq.n	80054e4 <HAL_TIM_Base_Start_IT+0x80>
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	4a22      	ldr	r2, [pc, #136]	; (8005538 <HAL_TIM_Base_Start_IT+0xd4>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d018      	beq.n	80054e4 <HAL_TIM_Base_Start_IT+0x80>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	4a21      	ldr	r2, [pc, #132]	; (800553c <HAL_TIM_Base_Start_IT+0xd8>)
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d013      	beq.n	80054e4 <HAL_TIM_Base_Start_IT+0x80>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4a1f      	ldr	r2, [pc, #124]	; (8005540 <HAL_TIM_Base_Start_IT+0xdc>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d00e      	beq.n	80054e4 <HAL_TIM_Base_Start_IT+0x80>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	4a1e      	ldr	r2, [pc, #120]	; (8005544 <HAL_TIM_Base_Start_IT+0xe0>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d009      	beq.n	80054e4 <HAL_TIM_Base_Start_IT+0x80>
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	4a1c      	ldr	r2, [pc, #112]	; (8005548 <HAL_TIM_Base_Start_IT+0xe4>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d004      	beq.n	80054e4 <HAL_TIM_Base_Start_IT+0x80>
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	4a1b      	ldr	r2, [pc, #108]	; (800554c <HAL_TIM_Base_Start_IT+0xe8>)
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d115      	bne.n	8005510 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	689a      	ldr	r2, [r3, #8]
 80054ea:	4b19      	ldr	r3, [pc, #100]	; (8005550 <HAL_TIM_Base_Start_IT+0xec>)
 80054ec:	4013      	ands	r3, r2
 80054ee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	2b06      	cmp	r3, #6
 80054f4:	d015      	beq.n	8005522 <HAL_TIM_Base_Start_IT+0xbe>
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054fc:	d011      	beq.n	8005522 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	681a      	ldr	r2, [r3, #0]
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f042 0201 	orr.w	r2, r2, #1
 800550c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800550e:	e008      	b.n	8005522 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	681a      	ldr	r2, [r3, #0]
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f042 0201 	orr.w	r2, r2, #1
 800551e:	601a      	str	r2, [r3, #0]
 8005520:	e000      	b.n	8005524 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005522:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005524:	2300      	movs	r3, #0
}
 8005526:	4618      	mov	r0, r3
 8005528:	3714      	adds	r7, #20
 800552a:	46bd      	mov	sp, r7
 800552c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005530:	4770      	bx	lr
 8005532:	bf00      	nop
 8005534:	40010000 	.word	0x40010000
 8005538:	40000400 	.word	0x40000400
 800553c:	40000800 	.word	0x40000800
 8005540:	40000c00 	.word	0x40000c00
 8005544:	40010400 	.word	0x40010400
 8005548:	40014000 	.word	0x40014000
 800554c:	40001800 	.word	0x40001800
 8005550:	00010007 	.word	0x00010007

08005554 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005554:	b580      	push	{r7, lr}
 8005556:	b082      	sub	sp, #8
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	691b      	ldr	r3, [r3, #16]
 8005562:	f003 0302 	and.w	r3, r3, #2
 8005566:	2b02      	cmp	r3, #2
 8005568:	d122      	bne.n	80055b0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	68db      	ldr	r3, [r3, #12]
 8005570:	f003 0302 	and.w	r3, r3, #2
 8005574:	2b02      	cmp	r3, #2
 8005576:	d11b      	bne.n	80055b0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f06f 0202 	mvn.w	r2, #2
 8005580:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	2201      	movs	r2, #1
 8005586:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	699b      	ldr	r3, [r3, #24]
 800558e:	f003 0303 	and.w	r3, r3, #3
 8005592:	2b00      	cmp	r3, #0
 8005594:	d003      	beq.n	800559e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005596:	6878      	ldr	r0, [r7, #4]
 8005598:	f000 f9d0 	bl	800593c <HAL_TIM_IC_CaptureCallback>
 800559c:	e005      	b.n	80055aa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800559e:	6878      	ldr	r0, [r7, #4]
 80055a0:	f000 f9c2 	bl	8005928 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055a4:	6878      	ldr	r0, [r7, #4]
 80055a6:	f000 f9d3 	bl	8005950 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2200      	movs	r2, #0
 80055ae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	691b      	ldr	r3, [r3, #16]
 80055b6:	f003 0304 	and.w	r3, r3, #4
 80055ba:	2b04      	cmp	r3, #4
 80055bc:	d122      	bne.n	8005604 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	68db      	ldr	r3, [r3, #12]
 80055c4:	f003 0304 	and.w	r3, r3, #4
 80055c8:	2b04      	cmp	r3, #4
 80055ca:	d11b      	bne.n	8005604 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f06f 0204 	mvn.w	r2, #4
 80055d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2202      	movs	r2, #2
 80055da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	699b      	ldr	r3, [r3, #24]
 80055e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d003      	beq.n	80055f2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055ea:	6878      	ldr	r0, [r7, #4]
 80055ec:	f000 f9a6 	bl	800593c <HAL_TIM_IC_CaptureCallback>
 80055f0:	e005      	b.n	80055fe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055f2:	6878      	ldr	r0, [r7, #4]
 80055f4:	f000 f998 	bl	8005928 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055f8:	6878      	ldr	r0, [r7, #4]
 80055fa:	f000 f9a9 	bl	8005950 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2200      	movs	r2, #0
 8005602:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	691b      	ldr	r3, [r3, #16]
 800560a:	f003 0308 	and.w	r3, r3, #8
 800560e:	2b08      	cmp	r3, #8
 8005610:	d122      	bne.n	8005658 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	68db      	ldr	r3, [r3, #12]
 8005618:	f003 0308 	and.w	r3, r3, #8
 800561c:	2b08      	cmp	r3, #8
 800561e:	d11b      	bne.n	8005658 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f06f 0208 	mvn.w	r2, #8
 8005628:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	2204      	movs	r2, #4
 800562e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	69db      	ldr	r3, [r3, #28]
 8005636:	f003 0303 	and.w	r3, r3, #3
 800563a:	2b00      	cmp	r3, #0
 800563c:	d003      	beq.n	8005646 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800563e:	6878      	ldr	r0, [r7, #4]
 8005640:	f000 f97c 	bl	800593c <HAL_TIM_IC_CaptureCallback>
 8005644:	e005      	b.n	8005652 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005646:	6878      	ldr	r0, [r7, #4]
 8005648:	f000 f96e 	bl	8005928 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800564c:	6878      	ldr	r0, [r7, #4]
 800564e:	f000 f97f 	bl	8005950 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2200      	movs	r2, #0
 8005656:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	691b      	ldr	r3, [r3, #16]
 800565e:	f003 0310 	and.w	r3, r3, #16
 8005662:	2b10      	cmp	r3, #16
 8005664:	d122      	bne.n	80056ac <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	68db      	ldr	r3, [r3, #12]
 800566c:	f003 0310 	and.w	r3, r3, #16
 8005670:	2b10      	cmp	r3, #16
 8005672:	d11b      	bne.n	80056ac <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f06f 0210 	mvn.w	r2, #16
 800567c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2208      	movs	r2, #8
 8005682:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	69db      	ldr	r3, [r3, #28]
 800568a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800568e:	2b00      	cmp	r3, #0
 8005690:	d003      	beq.n	800569a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005692:	6878      	ldr	r0, [r7, #4]
 8005694:	f000 f952 	bl	800593c <HAL_TIM_IC_CaptureCallback>
 8005698:	e005      	b.n	80056a6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800569a:	6878      	ldr	r0, [r7, #4]
 800569c:	f000 f944 	bl	8005928 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056a0:	6878      	ldr	r0, [r7, #4]
 80056a2:	f000 f955 	bl	8005950 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2200      	movs	r2, #0
 80056aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	691b      	ldr	r3, [r3, #16]
 80056b2:	f003 0301 	and.w	r3, r3, #1
 80056b6:	2b01      	cmp	r3, #1
 80056b8:	d10e      	bne.n	80056d8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	68db      	ldr	r3, [r3, #12]
 80056c0:	f003 0301 	and.w	r3, r3, #1
 80056c4:	2b01      	cmp	r3, #1
 80056c6:	d107      	bne.n	80056d8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f06f 0201 	mvn.w	r2, #1
 80056d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80056d2:	6878      	ldr	r0, [r7, #4]
 80056d4:	f7fb ff3a 	bl	800154c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	691b      	ldr	r3, [r3, #16]
 80056de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056e2:	2b80      	cmp	r3, #128	; 0x80
 80056e4:	d10e      	bne.n	8005704 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	68db      	ldr	r3, [r3, #12]
 80056ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056f0:	2b80      	cmp	r3, #128	; 0x80
 80056f2:	d107      	bne.n	8005704 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80056fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80056fe:	6878      	ldr	r0, [r7, #4]
 8005700:	f000 fb0c 	bl	8005d1c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	691b      	ldr	r3, [r3, #16]
 800570a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800570e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005712:	d10e      	bne.n	8005732 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	68db      	ldr	r3, [r3, #12]
 800571a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800571e:	2b80      	cmp	r3, #128	; 0x80
 8005720:	d107      	bne.n	8005732 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800572a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800572c:	6878      	ldr	r0, [r7, #4]
 800572e:	f000 faff 	bl	8005d30 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	691b      	ldr	r3, [r3, #16]
 8005738:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800573c:	2b40      	cmp	r3, #64	; 0x40
 800573e:	d10e      	bne.n	800575e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	68db      	ldr	r3, [r3, #12]
 8005746:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800574a:	2b40      	cmp	r3, #64	; 0x40
 800574c:	d107      	bne.n	800575e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005756:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005758:	6878      	ldr	r0, [r7, #4]
 800575a:	f000 f903 	bl	8005964 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	691b      	ldr	r3, [r3, #16]
 8005764:	f003 0320 	and.w	r3, r3, #32
 8005768:	2b20      	cmp	r3, #32
 800576a:	d10e      	bne.n	800578a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	68db      	ldr	r3, [r3, #12]
 8005772:	f003 0320 	and.w	r3, r3, #32
 8005776:	2b20      	cmp	r3, #32
 8005778:	d107      	bne.n	800578a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f06f 0220 	mvn.w	r2, #32
 8005782:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005784:	6878      	ldr	r0, [r7, #4]
 8005786:	f000 fabf 	bl	8005d08 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800578a:	bf00      	nop
 800578c:	3708      	adds	r7, #8
 800578e:	46bd      	mov	sp, r7
 8005790:	bd80      	pop	{r7, pc}
	...

08005794 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005794:	b580      	push	{r7, lr}
 8005796:	b084      	sub	sp, #16
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
 800579c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800579e:	2300      	movs	r3, #0
 80057a0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057a8:	2b01      	cmp	r3, #1
 80057aa:	d101      	bne.n	80057b0 <HAL_TIM_ConfigClockSource+0x1c>
 80057ac:	2302      	movs	r3, #2
 80057ae:	e0b4      	b.n	800591a <HAL_TIM_ConfigClockSource+0x186>
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2201      	movs	r2, #1
 80057b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2202      	movs	r2, #2
 80057bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	689b      	ldr	r3, [r3, #8]
 80057c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80057c8:	68ba      	ldr	r2, [r7, #8]
 80057ca:	4b56      	ldr	r3, [pc, #344]	; (8005924 <HAL_TIM_ConfigClockSource+0x190>)
 80057cc:	4013      	ands	r3, r2
 80057ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80057d0:	68bb      	ldr	r3, [r7, #8]
 80057d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80057d6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	68ba      	ldr	r2, [r7, #8]
 80057de:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80057e8:	d03e      	beq.n	8005868 <HAL_TIM_ConfigClockSource+0xd4>
 80057ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80057ee:	f200 8087 	bhi.w	8005900 <HAL_TIM_ConfigClockSource+0x16c>
 80057f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057f6:	f000 8086 	beq.w	8005906 <HAL_TIM_ConfigClockSource+0x172>
 80057fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057fe:	d87f      	bhi.n	8005900 <HAL_TIM_ConfigClockSource+0x16c>
 8005800:	2b70      	cmp	r3, #112	; 0x70
 8005802:	d01a      	beq.n	800583a <HAL_TIM_ConfigClockSource+0xa6>
 8005804:	2b70      	cmp	r3, #112	; 0x70
 8005806:	d87b      	bhi.n	8005900 <HAL_TIM_ConfigClockSource+0x16c>
 8005808:	2b60      	cmp	r3, #96	; 0x60
 800580a:	d050      	beq.n	80058ae <HAL_TIM_ConfigClockSource+0x11a>
 800580c:	2b60      	cmp	r3, #96	; 0x60
 800580e:	d877      	bhi.n	8005900 <HAL_TIM_ConfigClockSource+0x16c>
 8005810:	2b50      	cmp	r3, #80	; 0x50
 8005812:	d03c      	beq.n	800588e <HAL_TIM_ConfigClockSource+0xfa>
 8005814:	2b50      	cmp	r3, #80	; 0x50
 8005816:	d873      	bhi.n	8005900 <HAL_TIM_ConfigClockSource+0x16c>
 8005818:	2b40      	cmp	r3, #64	; 0x40
 800581a:	d058      	beq.n	80058ce <HAL_TIM_ConfigClockSource+0x13a>
 800581c:	2b40      	cmp	r3, #64	; 0x40
 800581e:	d86f      	bhi.n	8005900 <HAL_TIM_ConfigClockSource+0x16c>
 8005820:	2b30      	cmp	r3, #48	; 0x30
 8005822:	d064      	beq.n	80058ee <HAL_TIM_ConfigClockSource+0x15a>
 8005824:	2b30      	cmp	r3, #48	; 0x30
 8005826:	d86b      	bhi.n	8005900 <HAL_TIM_ConfigClockSource+0x16c>
 8005828:	2b20      	cmp	r3, #32
 800582a:	d060      	beq.n	80058ee <HAL_TIM_ConfigClockSource+0x15a>
 800582c:	2b20      	cmp	r3, #32
 800582e:	d867      	bhi.n	8005900 <HAL_TIM_ConfigClockSource+0x16c>
 8005830:	2b00      	cmp	r3, #0
 8005832:	d05c      	beq.n	80058ee <HAL_TIM_ConfigClockSource+0x15a>
 8005834:	2b10      	cmp	r3, #16
 8005836:	d05a      	beq.n	80058ee <HAL_TIM_ConfigClockSource+0x15a>
 8005838:	e062      	b.n	8005900 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800583e:	683b      	ldr	r3, [r7, #0]
 8005840:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800584a:	f000 f9af 	bl	8005bac <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	689b      	ldr	r3, [r3, #8]
 8005854:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005856:	68bb      	ldr	r3, [r7, #8]
 8005858:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800585c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	68ba      	ldr	r2, [r7, #8]
 8005864:	609a      	str	r2, [r3, #8]
      break;
 8005866:	e04f      	b.n	8005908 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005878:	f000 f998 	bl	8005bac <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	689a      	ldr	r2, [r3, #8]
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800588a:	609a      	str	r2, [r3, #8]
      break;
 800588c:	e03c      	b.n	8005908 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800589a:	461a      	mov	r2, r3
 800589c:	f000 f90c 	bl	8005ab8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	2150      	movs	r1, #80	; 0x50
 80058a6:	4618      	mov	r0, r3
 80058a8:	f000 f965 	bl	8005b76 <TIM_ITRx_SetConfig>
      break;
 80058ac:	e02c      	b.n	8005908 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80058b6:	683b      	ldr	r3, [r7, #0]
 80058b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80058ba:	461a      	mov	r2, r3
 80058bc:	f000 f92b 	bl	8005b16 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	2160      	movs	r1, #96	; 0x60
 80058c6:	4618      	mov	r0, r3
 80058c8:	f000 f955 	bl	8005b76 <TIM_ITRx_SetConfig>
      break;
 80058cc:	e01c      	b.n	8005908 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80058da:	461a      	mov	r2, r3
 80058dc:	f000 f8ec 	bl	8005ab8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	2140      	movs	r1, #64	; 0x40
 80058e6:	4618      	mov	r0, r3
 80058e8:	f000 f945 	bl	8005b76 <TIM_ITRx_SetConfig>
      break;
 80058ec:	e00c      	b.n	8005908 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681a      	ldr	r2, [r3, #0]
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	4619      	mov	r1, r3
 80058f8:	4610      	mov	r0, r2
 80058fa:	f000 f93c 	bl	8005b76 <TIM_ITRx_SetConfig>
      break;
 80058fe:	e003      	b.n	8005908 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005900:	2301      	movs	r3, #1
 8005902:	73fb      	strb	r3, [r7, #15]
      break;
 8005904:	e000      	b.n	8005908 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005906:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2201      	movs	r2, #1
 800590c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2200      	movs	r2, #0
 8005914:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005918:	7bfb      	ldrb	r3, [r7, #15]
}
 800591a:	4618      	mov	r0, r3
 800591c:	3710      	adds	r7, #16
 800591e:	46bd      	mov	sp, r7
 8005920:	bd80      	pop	{r7, pc}
 8005922:	bf00      	nop
 8005924:	fffeff88 	.word	0xfffeff88

08005928 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005928:	b480      	push	{r7}
 800592a:	b083      	sub	sp, #12
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005930:	bf00      	nop
 8005932:	370c      	adds	r7, #12
 8005934:	46bd      	mov	sp, r7
 8005936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593a:	4770      	bx	lr

0800593c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800593c:	b480      	push	{r7}
 800593e:	b083      	sub	sp, #12
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005944:	bf00      	nop
 8005946:	370c      	adds	r7, #12
 8005948:	46bd      	mov	sp, r7
 800594a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594e:	4770      	bx	lr

08005950 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005950:	b480      	push	{r7}
 8005952:	b083      	sub	sp, #12
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005958:	bf00      	nop
 800595a:	370c      	adds	r7, #12
 800595c:	46bd      	mov	sp, r7
 800595e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005962:	4770      	bx	lr

08005964 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005964:	b480      	push	{r7}
 8005966:	b083      	sub	sp, #12
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800596c:	bf00      	nop
 800596e:	370c      	adds	r7, #12
 8005970:	46bd      	mov	sp, r7
 8005972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005976:	4770      	bx	lr

08005978 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005978:	b480      	push	{r7}
 800597a:	b085      	sub	sp, #20
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
 8005980:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	4a40      	ldr	r2, [pc, #256]	; (8005a8c <TIM_Base_SetConfig+0x114>)
 800598c:	4293      	cmp	r3, r2
 800598e:	d013      	beq.n	80059b8 <TIM_Base_SetConfig+0x40>
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005996:	d00f      	beq.n	80059b8 <TIM_Base_SetConfig+0x40>
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	4a3d      	ldr	r2, [pc, #244]	; (8005a90 <TIM_Base_SetConfig+0x118>)
 800599c:	4293      	cmp	r3, r2
 800599e:	d00b      	beq.n	80059b8 <TIM_Base_SetConfig+0x40>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	4a3c      	ldr	r2, [pc, #240]	; (8005a94 <TIM_Base_SetConfig+0x11c>)
 80059a4:	4293      	cmp	r3, r2
 80059a6:	d007      	beq.n	80059b8 <TIM_Base_SetConfig+0x40>
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	4a3b      	ldr	r2, [pc, #236]	; (8005a98 <TIM_Base_SetConfig+0x120>)
 80059ac:	4293      	cmp	r3, r2
 80059ae:	d003      	beq.n	80059b8 <TIM_Base_SetConfig+0x40>
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	4a3a      	ldr	r2, [pc, #232]	; (8005a9c <TIM_Base_SetConfig+0x124>)
 80059b4:	4293      	cmp	r3, r2
 80059b6:	d108      	bne.n	80059ca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	685b      	ldr	r3, [r3, #4]
 80059c4:	68fa      	ldr	r2, [r7, #12]
 80059c6:	4313      	orrs	r3, r2
 80059c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	4a2f      	ldr	r2, [pc, #188]	; (8005a8c <TIM_Base_SetConfig+0x114>)
 80059ce:	4293      	cmp	r3, r2
 80059d0:	d02b      	beq.n	8005a2a <TIM_Base_SetConfig+0xb2>
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059d8:	d027      	beq.n	8005a2a <TIM_Base_SetConfig+0xb2>
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	4a2c      	ldr	r2, [pc, #176]	; (8005a90 <TIM_Base_SetConfig+0x118>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d023      	beq.n	8005a2a <TIM_Base_SetConfig+0xb2>
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	4a2b      	ldr	r2, [pc, #172]	; (8005a94 <TIM_Base_SetConfig+0x11c>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d01f      	beq.n	8005a2a <TIM_Base_SetConfig+0xb2>
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	4a2a      	ldr	r2, [pc, #168]	; (8005a98 <TIM_Base_SetConfig+0x120>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d01b      	beq.n	8005a2a <TIM_Base_SetConfig+0xb2>
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	4a29      	ldr	r2, [pc, #164]	; (8005a9c <TIM_Base_SetConfig+0x124>)
 80059f6:	4293      	cmp	r3, r2
 80059f8:	d017      	beq.n	8005a2a <TIM_Base_SetConfig+0xb2>
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	4a28      	ldr	r2, [pc, #160]	; (8005aa0 <TIM_Base_SetConfig+0x128>)
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d013      	beq.n	8005a2a <TIM_Base_SetConfig+0xb2>
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	4a27      	ldr	r2, [pc, #156]	; (8005aa4 <TIM_Base_SetConfig+0x12c>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d00f      	beq.n	8005a2a <TIM_Base_SetConfig+0xb2>
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	4a26      	ldr	r2, [pc, #152]	; (8005aa8 <TIM_Base_SetConfig+0x130>)
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d00b      	beq.n	8005a2a <TIM_Base_SetConfig+0xb2>
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	4a25      	ldr	r2, [pc, #148]	; (8005aac <TIM_Base_SetConfig+0x134>)
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d007      	beq.n	8005a2a <TIM_Base_SetConfig+0xb2>
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	4a24      	ldr	r2, [pc, #144]	; (8005ab0 <TIM_Base_SetConfig+0x138>)
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	d003      	beq.n	8005a2a <TIM_Base_SetConfig+0xb2>
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	4a23      	ldr	r2, [pc, #140]	; (8005ab4 <TIM_Base_SetConfig+0x13c>)
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d108      	bne.n	8005a3c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	68db      	ldr	r3, [r3, #12]
 8005a36:	68fa      	ldr	r2, [r7, #12]
 8005a38:	4313      	orrs	r3, r2
 8005a3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	695b      	ldr	r3, [r3, #20]
 8005a46:	4313      	orrs	r3, r2
 8005a48:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	68fa      	ldr	r2, [r7, #12]
 8005a4e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	689a      	ldr	r2, [r3, #8]
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	681a      	ldr	r2, [r3, #0]
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	4a0a      	ldr	r2, [pc, #40]	; (8005a8c <TIM_Base_SetConfig+0x114>)
 8005a64:	4293      	cmp	r3, r2
 8005a66:	d003      	beq.n	8005a70 <TIM_Base_SetConfig+0xf8>
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	4a0c      	ldr	r2, [pc, #48]	; (8005a9c <TIM_Base_SetConfig+0x124>)
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	d103      	bne.n	8005a78 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	691a      	ldr	r2, [r3, #16]
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2201      	movs	r2, #1
 8005a7c:	615a      	str	r2, [r3, #20]
}
 8005a7e:	bf00      	nop
 8005a80:	3714      	adds	r7, #20
 8005a82:	46bd      	mov	sp, r7
 8005a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a88:	4770      	bx	lr
 8005a8a:	bf00      	nop
 8005a8c:	40010000 	.word	0x40010000
 8005a90:	40000400 	.word	0x40000400
 8005a94:	40000800 	.word	0x40000800
 8005a98:	40000c00 	.word	0x40000c00
 8005a9c:	40010400 	.word	0x40010400
 8005aa0:	40014000 	.word	0x40014000
 8005aa4:	40014400 	.word	0x40014400
 8005aa8:	40014800 	.word	0x40014800
 8005aac:	40001800 	.word	0x40001800
 8005ab0:	40001c00 	.word	0x40001c00
 8005ab4:	40002000 	.word	0x40002000

08005ab8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005ab8:	b480      	push	{r7}
 8005aba:	b087      	sub	sp, #28
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	60f8      	str	r0, [r7, #12]
 8005ac0:	60b9      	str	r1, [r7, #8]
 8005ac2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	6a1b      	ldr	r3, [r3, #32]
 8005ac8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	6a1b      	ldr	r3, [r3, #32]
 8005ace:	f023 0201 	bic.w	r2, r3, #1
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	699b      	ldr	r3, [r3, #24]
 8005ada:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005adc:	693b      	ldr	r3, [r7, #16]
 8005ade:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005ae2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	011b      	lsls	r3, r3, #4
 8005ae8:	693a      	ldr	r2, [r7, #16]
 8005aea:	4313      	orrs	r3, r2
 8005aec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005aee:	697b      	ldr	r3, [r7, #20]
 8005af0:	f023 030a 	bic.w	r3, r3, #10
 8005af4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005af6:	697a      	ldr	r2, [r7, #20]
 8005af8:	68bb      	ldr	r3, [r7, #8]
 8005afa:	4313      	orrs	r3, r2
 8005afc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	693a      	ldr	r2, [r7, #16]
 8005b02:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	697a      	ldr	r2, [r7, #20]
 8005b08:	621a      	str	r2, [r3, #32]
}
 8005b0a:	bf00      	nop
 8005b0c:	371c      	adds	r7, #28
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b14:	4770      	bx	lr

08005b16 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b16:	b480      	push	{r7}
 8005b18:	b087      	sub	sp, #28
 8005b1a:	af00      	add	r7, sp, #0
 8005b1c:	60f8      	str	r0, [r7, #12]
 8005b1e:	60b9      	str	r1, [r7, #8]
 8005b20:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	6a1b      	ldr	r3, [r3, #32]
 8005b26:	f023 0210 	bic.w	r2, r3, #16
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	699b      	ldr	r3, [r3, #24]
 8005b32:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	6a1b      	ldr	r3, [r3, #32]
 8005b38:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005b3a:	697b      	ldr	r3, [r7, #20]
 8005b3c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005b40:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	031b      	lsls	r3, r3, #12
 8005b46:	697a      	ldr	r2, [r7, #20]
 8005b48:	4313      	orrs	r3, r2
 8005b4a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005b4c:	693b      	ldr	r3, [r7, #16]
 8005b4e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005b52:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005b54:	68bb      	ldr	r3, [r7, #8]
 8005b56:	011b      	lsls	r3, r3, #4
 8005b58:	693a      	ldr	r2, [r7, #16]
 8005b5a:	4313      	orrs	r3, r2
 8005b5c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	697a      	ldr	r2, [r7, #20]
 8005b62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	693a      	ldr	r2, [r7, #16]
 8005b68:	621a      	str	r2, [r3, #32]
}
 8005b6a:	bf00      	nop
 8005b6c:	371c      	adds	r7, #28
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b74:	4770      	bx	lr

08005b76 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005b76:	b480      	push	{r7}
 8005b78:	b085      	sub	sp, #20
 8005b7a:	af00      	add	r7, sp, #0
 8005b7c:	6078      	str	r0, [r7, #4]
 8005b7e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	689b      	ldr	r3, [r3, #8]
 8005b84:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b8c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005b8e:	683a      	ldr	r2, [r7, #0]
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	4313      	orrs	r3, r2
 8005b94:	f043 0307 	orr.w	r3, r3, #7
 8005b98:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	68fa      	ldr	r2, [r7, #12]
 8005b9e:	609a      	str	r2, [r3, #8]
}
 8005ba0:	bf00      	nop
 8005ba2:	3714      	adds	r7, #20
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005baa:	4770      	bx	lr

08005bac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005bac:	b480      	push	{r7}
 8005bae:	b087      	sub	sp, #28
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	60f8      	str	r0, [r7, #12]
 8005bb4:	60b9      	str	r1, [r7, #8]
 8005bb6:	607a      	str	r2, [r7, #4]
 8005bb8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	689b      	ldr	r3, [r3, #8]
 8005bbe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005bc0:	697b      	ldr	r3, [r7, #20]
 8005bc2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005bc6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	021a      	lsls	r2, r3, #8
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	431a      	orrs	r2, r3
 8005bd0:	68bb      	ldr	r3, [r7, #8]
 8005bd2:	4313      	orrs	r3, r2
 8005bd4:	697a      	ldr	r2, [r7, #20]
 8005bd6:	4313      	orrs	r3, r2
 8005bd8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	697a      	ldr	r2, [r7, #20]
 8005bde:	609a      	str	r2, [r3, #8]
}
 8005be0:	bf00      	nop
 8005be2:	371c      	adds	r7, #28
 8005be4:	46bd      	mov	sp, r7
 8005be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bea:	4770      	bx	lr

08005bec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005bec:	b480      	push	{r7}
 8005bee:	b085      	sub	sp, #20
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
 8005bf4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005bfc:	2b01      	cmp	r3, #1
 8005bfe:	d101      	bne.n	8005c04 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005c00:	2302      	movs	r3, #2
 8005c02:	e06d      	b.n	8005ce0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2201      	movs	r2, #1
 8005c08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2202      	movs	r2, #2
 8005c10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	685b      	ldr	r3, [r3, #4]
 8005c1a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	689b      	ldr	r3, [r3, #8]
 8005c22:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	4a30      	ldr	r2, [pc, #192]	; (8005cec <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005c2a:	4293      	cmp	r3, r2
 8005c2c:	d004      	beq.n	8005c38 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	4a2f      	ldr	r2, [pc, #188]	; (8005cf0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005c34:	4293      	cmp	r3, r2
 8005c36:	d108      	bne.n	8005c4a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005c3e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	685b      	ldr	r3, [r3, #4]
 8005c44:	68fa      	ldr	r2, [r7, #12]
 8005c46:	4313      	orrs	r3, r2
 8005c48:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c50:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	68fa      	ldr	r2, [r7, #12]
 8005c58:	4313      	orrs	r3, r2
 8005c5a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	68fa      	ldr	r2, [r7, #12]
 8005c62:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	4a20      	ldr	r2, [pc, #128]	; (8005cec <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d022      	beq.n	8005cb4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c76:	d01d      	beq.n	8005cb4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	4a1d      	ldr	r2, [pc, #116]	; (8005cf4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	d018      	beq.n	8005cb4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	4a1c      	ldr	r2, [pc, #112]	; (8005cf8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005c88:	4293      	cmp	r3, r2
 8005c8a:	d013      	beq.n	8005cb4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	4a1a      	ldr	r2, [pc, #104]	; (8005cfc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005c92:	4293      	cmp	r3, r2
 8005c94:	d00e      	beq.n	8005cb4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	4a15      	ldr	r2, [pc, #84]	; (8005cf0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005c9c:	4293      	cmp	r3, r2
 8005c9e:	d009      	beq.n	8005cb4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	4a16      	ldr	r2, [pc, #88]	; (8005d00 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d004      	beq.n	8005cb4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	4a15      	ldr	r2, [pc, #84]	; (8005d04 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005cb0:	4293      	cmp	r3, r2
 8005cb2:	d10c      	bne.n	8005cce <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005cb4:	68bb      	ldr	r3, [r7, #8]
 8005cb6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005cba:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	689b      	ldr	r3, [r3, #8]
 8005cc0:	68ba      	ldr	r2, [r7, #8]
 8005cc2:	4313      	orrs	r3, r2
 8005cc4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	68ba      	ldr	r2, [r7, #8]
 8005ccc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	2201      	movs	r2, #1
 8005cd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	2200      	movs	r2, #0
 8005cda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005cde:	2300      	movs	r3, #0
}
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	3714      	adds	r7, #20
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cea:	4770      	bx	lr
 8005cec:	40010000 	.word	0x40010000
 8005cf0:	40010400 	.word	0x40010400
 8005cf4:	40000400 	.word	0x40000400
 8005cf8:	40000800 	.word	0x40000800
 8005cfc:	40000c00 	.word	0x40000c00
 8005d00:	40014000 	.word	0x40014000
 8005d04:	40001800 	.word	0x40001800

08005d08 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005d08:	b480      	push	{r7}
 8005d0a:	b083      	sub	sp, #12
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005d10:	bf00      	nop
 8005d12:	370c      	adds	r7, #12
 8005d14:	46bd      	mov	sp, r7
 8005d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1a:	4770      	bx	lr

08005d1c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005d1c:	b480      	push	{r7}
 8005d1e:	b083      	sub	sp, #12
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005d24:	bf00      	nop
 8005d26:	370c      	adds	r7, #12
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2e:	4770      	bx	lr

08005d30 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005d30:	b480      	push	{r7}
 8005d32:	b083      	sub	sp, #12
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005d38:	bf00      	nop
 8005d3a:	370c      	adds	r7, #12
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d42:	4770      	bx	lr

08005d44 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b082      	sub	sp, #8
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d101      	bne.n	8005d56 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005d52:	2301      	movs	r3, #1
 8005d54:	e040      	b.n	8005dd8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d106      	bne.n	8005d6c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	2200      	movs	r2, #0
 8005d62:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005d66:	6878      	ldr	r0, [r7, #4]
 8005d68:	f7fb fe22 	bl	80019b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2224      	movs	r2, #36	; 0x24
 8005d70:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	681a      	ldr	r2, [r3, #0]
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f022 0201 	bic.w	r2, r2, #1
 8005d80:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005d82:	6878      	ldr	r0, [r7, #4]
 8005d84:	f000 fb72 	bl	800646c <UART_SetConfig>
 8005d88:	4603      	mov	r3, r0
 8005d8a:	2b01      	cmp	r3, #1
 8005d8c:	d101      	bne.n	8005d92 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005d8e:	2301      	movs	r3, #1
 8005d90:	e022      	b.n	8005dd8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d002      	beq.n	8005da0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005d9a:	6878      	ldr	r0, [r7, #4]
 8005d9c:	f000 fdca 	bl	8006934 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	685a      	ldr	r2, [r3, #4]
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005dae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	689a      	ldr	r2, [r3, #8]
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005dbe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	681a      	ldr	r2, [r3, #0]
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f042 0201 	orr.w	r2, r2, #1
 8005dce:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005dd0:	6878      	ldr	r0, [r7, #4]
 8005dd2:	f000 fe51 	bl	8006a78 <UART_CheckIdleState>
 8005dd6:	4603      	mov	r3, r0
}
 8005dd8:	4618      	mov	r0, r3
 8005dda:	3708      	adds	r7, #8
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	bd80      	pop	{r7, pc}

08005de0 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005de0:	b480      	push	{r7}
 8005de2:	b08b      	sub	sp, #44	; 0x2c
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	60f8      	str	r0, [r7, #12]
 8005de8:	60b9      	str	r1, [r7, #8]
 8005dea:	4613      	mov	r3, r2
 8005dec:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005df2:	2b20      	cmp	r3, #32
 8005df4:	d147      	bne.n	8005e86 <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 8005df6:	68bb      	ldr	r3, [r7, #8]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d002      	beq.n	8005e02 <HAL_UART_Transmit_IT+0x22>
 8005dfc:	88fb      	ldrh	r3, [r7, #6]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d101      	bne.n	8005e06 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8005e02:	2301      	movs	r3, #1
 8005e04:	e040      	b.n	8005e88 <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	68ba      	ldr	r2, [r7, #8]
 8005e0a:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	88fa      	ldrh	r2, [r7, #6]
 8005e10:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	88fa      	ldrh	r2, [r7, #6]
 8005e18:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	2200      	movs	r2, #0
 8005e20:	66da      	str	r2, [r3, #108]	; 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	2200      	movs	r2, #0
 8005e26:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	2221      	movs	r2, #33	; 0x21
 8005e2e:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	689b      	ldr	r3, [r3, #8]
 8005e34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e38:	d107      	bne.n	8005e4a <HAL_UART_Transmit_IT+0x6a>
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	691b      	ldr	r3, [r3, #16]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d103      	bne.n	8005e4a <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	4a13      	ldr	r2, [pc, #76]	; (8005e94 <HAL_UART_Transmit_IT+0xb4>)
 8005e46:	66da      	str	r2, [r3, #108]	; 0x6c
 8005e48:	e002      	b.n	8005e50 <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	4a12      	ldr	r2, [pc, #72]	; (8005e98 <HAL_UART_Transmit_IT+0xb8>)
 8005e4e:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e56:	697b      	ldr	r3, [r7, #20]
 8005e58:	e853 3f00 	ldrex	r3, [r3]
 8005e5c:	613b      	str	r3, [r7, #16]
   return(result);
 8005e5e:	693b      	ldr	r3, [r7, #16]
 8005e60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e64:	627b      	str	r3, [r7, #36]	; 0x24
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	461a      	mov	r2, r3
 8005e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e6e:	623b      	str	r3, [r7, #32]
 8005e70:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e72:	69f9      	ldr	r1, [r7, #28]
 8005e74:	6a3a      	ldr	r2, [r7, #32]
 8005e76:	e841 2300 	strex	r3, r2, [r1]
 8005e7a:	61bb      	str	r3, [r7, #24]
   return(result);
 8005e7c:	69bb      	ldr	r3, [r7, #24]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d1e6      	bne.n	8005e50 <HAL_UART_Transmit_IT+0x70>

    return HAL_OK;
 8005e82:	2300      	movs	r3, #0
 8005e84:	e000      	b.n	8005e88 <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8005e86:	2302      	movs	r3, #2
  }
}
 8005e88:	4618      	mov	r0, r3
 8005e8a:	372c      	adds	r7, #44	; 0x2c
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e92:	4770      	bx	lr
 8005e94:	08006e1d 	.word	0x08006e1d
 8005e98:	08006d67 	.word	0x08006d67

08005e9c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b0ba      	sub	sp, #232	; 0xe8
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	69db      	ldr	r3, [r3, #28]
 8005eaa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	689b      	ldr	r3, [r3, #8]
 8005ebe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005ec2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005ec6:	f640 030f 	movw	r3, #2063	; 0x80f
 8005eca:	4013      	ands	r3, r2
 8005ecc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005ed0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d115      	bne.n	8005f04 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005ed8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005edc:	f003 0320 	and.w	r3, r3, #32
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d00f      	beq.n	8005f04 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005ee4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ee8:	f003 0320 	and.w	r3, r3, #32
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d009      	beq.n	8005f04 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	f000 8297 	beq.w	8006428 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005efe:	6878      	ldr	r0, [r7, #4]
 8005f00:	4798      	blx	r3
      }
      return;
 8005f02:	e291      	b.n	8006428 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005f04:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	f000 8117 	beq.w	800613c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005f0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005f12:	f003 0301 	and.w	r3, r3, #1
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d106      	bne.n	8005f28 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005f1a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005f1e:	4b85      	ldr	r3, [pc, #532]	; (8006134 <HAL_UART_IRQHandler+0x298>)
 8005f20:	4013      	ands	r3, r2
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	f000 810a 	beq.w	800613c <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005f28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f2c:	f003 0301 	and.w	r3, r3, #1
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d011      	beq.n	8005f58 <HAL_UART_IRQHandler+0xbc>
 8005f34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d00b      	beq.n	8005f58 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	2201      	movs	r2, #1
 8005f46:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f4e:	f043 0201 	orr.w	r2, r3, #1
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005f58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f5c:	f003 0302 	and.w	r3, r3, #2
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d011      	beq.n	8005f88 <HAL_UART_IRQHandler+0xec>
 8005f64:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005f68:	f003 0301 	and.w	r3, r3, #1
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d00b      	beq.n	8005f88 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	2202      	movs	r2, #2
 8005f76:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f7e:	f043 0204 	orr.w	r2, r3, #4
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005f88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f8c:	f003 0304 	and.w	r3, r3, #4
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d011      	beq.n	8005fb8 <HAL_UART_IRQHandler+0x11c>
 8005f94:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005f98:	f003 0301 	and.w	r3, r3, #1
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d00b      	beq.n	8005fb8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	2204      	movs	r2, #4
 8005fa6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005fae:	f043 0202 	orr.w	r2, r3, #2
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005fb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005fbc:	f003 0308 	and.w	r3, r3, #8
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d017      	beq.n	8005ff4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005fc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005fc8:	f003 0320 	and.w	r3, r3, #32
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d105      	bne.n	8005fdc <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005fd0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005fd4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d00b      	beq.n	8005ff4 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	2208      	movs	r2, #8
 8005fe2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005fea:	f043 0208 	orr.w	r2, r3, #8
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005ff4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ff8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d012      	beq.n	8006026 <HAL_UART_IRQHandler+0x18a>
 8006000:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006004:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006008:	2b00      	cmp	r3, #0
 800600a:	d00c      	beq.n	8006026 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006014:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800601c:	f043 0220 	orr.w	r2, r3, #32
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800602c:	2b00      	cmp	r3, #0
 800602e:	f000 81fd 	beq.w	800642c <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006032:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006036:	f003 0320 	and.w	r3, r3, #32
 800603a:	2b00      	cmp	r3, #0
 800603c:	d00d      	beq.n	800605a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800603e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006042:	f003 0320 	and.w	r3, r3, #32
 8006046:	2b00      	cmp	r3, #0
 8006048:	d007      	beq.n	800605a <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800604e:	2b00      	cmp	r3, #0
 8006050:	d003      	beq.n	800605a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006056:	6878      	ldr	r0, [r7, #4]
 8006058:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006060:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	689b      	ldr	r3, [r3, #8]
 800606a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800606e:	2b40      	cmp	r3, #64	; 0x40
 8006070:	d005      	beq.n	800607e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006072:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006076:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800607a:	2b00      	cmp	r3, #0
 800607c:	d04f      	beq.n	800611e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800607e:	6878      	ldr	r0, [r7, #4]
 8006080:	f000 fdf7 	bl	8006c72 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	689b      	ldr	r3, [r3, #8]
 800608a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800608e:	2b40      	cmp	r3, #64	; 0x40
 8006090:	d141      	bne.n	8006116 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	3308      	adds	r3, #8
 8006098:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800609c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80060a0:	e853 3f00 	ldrex	r3, [r3]
 80060a4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80060a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80060ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80060b0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	3308      	adds	r3, #8
 80060ba:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80060be:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80060c2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060c6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80060ca:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80060ce:	e841 2300 	strex	r3, r2, [r1]
 80060d2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80060d6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d1d9      	bne.n	8006092 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d013      	beq.n	800610e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80060ea:	4a13      	ldr	r2, [pc, #76]	; (8006138 <HAL_UART_IRQHandler+0x29c>)
 80060ec:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80060f2:	4618      	mov	r0, r3
 80060f4:	f7fc f8cd 	bl	8002292 <HAL_DMA_Abort_IT>
 80060f8:	4603      	mov	r3, r0
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d017      	beq.n	800612e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006102:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006104:	687a      	ldr	r2, [r7, #4]
 8006106:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006108:	4610      	mov	r0, r2
 800610a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800610c:	e00f      	b.n	800612e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800610e:	6878      	ldr	r0, [r7, #4]
 8006110:	f000 f996 	bl	8006440 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006114:	e00b      	b.n	800612e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006116:	6878      	ldr	r0, [r7, #4]
 8006118:	f000 f992 	bl	8006440 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800611c:	e007      	b.n	800612e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800611e:	6878      	ldr	r0, [r7, #4]
 8006120:	f000 f98e 	bl	8006440 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2200      	movs	r2, #0
 8006128:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 800612c:	e17e      	b.n	800642c <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800612e:	bf00      	nop
    return;
 8006130:	e17c      	b.n	800642c <HAL_UART_IRQHandler+0x590>
 8006132:	bf00      	nop
 8006134:	04000120 	.word	0x04000120
 8006138:	08006d3b 	.word	0x08006d3b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006140:	2b01      	cmp	r3, #1
 8006142:	f040 814c 	bne.w	80063de <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006146:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800614a:	f003 0310 	and.w	r3, r3, #16
 800614e:	2b00      	cmp	r3, #0
 8006150:	f000 8145 	beq.w	80063de <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006154:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006158:	f003 0310 	and.w	r3, r3, #16
 800615c:	2b00      	cmp	r3, #0
 800615e:	f000 813e 	beq.w	80063de <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	2210      	movs	r2, #16
 8006168:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	689b      	ldr	r3, [r3, #8]
 8006170:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006174:	2b40      	cmp	r3, #64	; 0x40
 8006176:	f040 80b6 	bne.w	80062e6 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	685b      	ldr	r3, [r3, #4]
 8006182:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006186:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800618a:	2b00      	cmp	r3, #0
 800618c:	f000 8150 	beq.w	8006430 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006196:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800619a:	429a      	cmp	r2, r3
 800619c:	f080 8148 	bcs.w	8006430 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80061a6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80061ae:	69db      	ldr	r3, [r3, #28]
 80061b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80061b4:	f000 8086 	beq.w	80062c4 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061c0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80061c4:	e853 3f00 	ldrex	r3, [r3]
 80061c8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80061cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80061d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80061d4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	461a      	mov	r2, r3
 80061de:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80061e2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80061e6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061ea:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80061ee:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80061f2:	e841 2300 	strex	r3, r2, [r1]
 80061f6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80061fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d1da      	bne.n	80061b8 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	3308      	adds	r3, #8
 8006208:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800620a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800620c:	e853 3f00 	ldrex	r3, [r3]
 8006210:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006212:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006214:	f023 0301 	bic.w	r3, r3, #1
 8006218:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	3308      	adds	r3, #8
 8006222:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006226:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800622a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800622c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800622e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006232:	e841 2300 	strex	r3, r2, [r1]
 8006236:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006238:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800623a:	2b00      	cmp	r3, #0
 800623c:	d1e1      	bne.n	8006202 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	3308      	adds	r3, #8
 8006244:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006246:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006248:	e853 3f00 	ldrex	r3, [r3]
 800624c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800624e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006250:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006254:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	3308      	adds	r3, #8
 800625e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006262:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006264:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006266:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006268:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800626a:	e841 2300 	strex	r3, r2, [r1]
 800626e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006270:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006272:	2b00      	cmp	r3, #0
 8006274:	d1e3      	bne.n	800623e <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	2220      	movs	r2, #32
 800627a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	2200      	movs	r2, #0
 8006282:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800628a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800628c:	e853 3f00 	ldrex	r3, [r3]
 8006290:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006292:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006294:	f023 0310 	bic.w	r3, r3, #16
 8006298:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	461a      	mov	r2, r3
 80062a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80062a6:	65bb      	str	r3, [r7, #88]	; 0x58
 80062a8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062aa:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80062ac:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80062ae:	e841 2300 	strex	r3, r2, [r1]
 80062b2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80062b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d1e4      	bne.n	8006284 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80062be:	4618      	mov	r0, r3
 80062c0:	f7fb ff77 	bl	80021b2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2202      	movs	r2, #2
 80062c8:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80062d6:	b29b      	uxth	r3, r3
 80062d8:	1ad3      	subs	r3, r2, r3
 80062da:	b29b      	uxth	r3, r3
 80062dc:	4619      	mov	r1, r3
 80062de:	6878      	ldr	r0, [r7, #4]
 80062e0:	f000 f8b8 	bl	8006454 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80062e4:	e0a4      	b.n	8006430 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80062f2:	b29b      	uxth	r3, r3
 80062f4:	1ad3      	subs	r3, r2, r3
 80062f6:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006300:	b29b      	uxth	r3, r3
 8006302:	2b00      	cmp	r3, #0
 8006304:	f000 8096 	beq.w	8006434 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 8006308:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800630c:	2b00      	cmp	r3, #0
 800630e:	f000 8091 	beq.w	8006434 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006318:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800631a:	e853 3f00 	ldrex	r3, [r3]
 800631e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006320:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006322:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006326:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	461a      	mov	r2, r3
 8006330:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006334:	647b      	str	r3, [r7, #68]	; 0x44
 8006336:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006338:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800633a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800633c:	e841 2300 	strex	r3, r2, [r1]
 8006340:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006342:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006344:	2b00      	cmp	r3, #0
 8006346:	d1e4      	bne.n	8006312 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	3308      	adds	r3, #8
 800634e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006352:	e853 3f00 	ldrex	r3, [r3]
 8006356:	623b      	str	r3, [r7, #32]
   return(result);
 8006358:	6a3b      	ldr	r3, [r7, #32]
 800635a:	f023 0301 	bic.w	r3, r3, #1
 800635e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	3308      	adds	r3, #8
 8006368:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800636c:	633a      	str	r2, [r7, #48]	; 0x30
 800636e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006370:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006372:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006374:	e841 2300 	strex	r3, r2, [r1]
 8006378:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800637a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800637c:	2b00      	cmp	r3, #0
 800637e:	d1e3      	bne.n	8006348 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2220      	movs	r2, #32
 8006384:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2200      	movs	r2, #0
 800638c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	2200      	movs	r2, #0
 8006392:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800639a:	693b      	ldr	r3, [r7, #16]
 800639c:	e853 3f00 	ldrex	r3, [r3]
 80063a0:	60fb      	str	r3, [r7, #12]
   return(result);
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	f023 0310 	bic.w	r3, r3, #16
 80063a8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	461a      	mov	r2, r3
 80063b2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80063b6:	61fb      	str	r3, [r7, #28]
 80063b8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063ba:	69b9      	ldr	r1, [r7, #24]
 80063bc:	69fa      	ldr	r2, [r7, #28]
 80063be:	e841 2300 	strex	r3, r2, [r1]
 80063c2:	617b      	str	r3, [r7, #20]
   return(result);
 80063c4:	697b      	ldr	r3, [r7, #20]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d1e4      	bne.n	8006394 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	2202      	movs	r2, #2
 80063ce:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80063d0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80063d4:	4619      	mov	r1, r3
 80063d6:	6878      	ldr	r0, [r7, #4]
 80063d8:	f000 f83c 	bl	8006454 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80063dc:	e02a      	b.n	8006434 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80063de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d00e      	beq.n	8006408 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80063ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80063ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d008      	beq.n	8006408 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d01c      	beq.n	8006438 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006402:	6878      	ldr	r0, [r7, #4]
 8006404:	4798      	blx	r3
    }
    return;
 8006406:	e017      	b.n	8006438 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006408:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800640c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006410:	2b00      	cmp	r3, #0
 8006412:	d012      	beq.n	800643a <HAL_UART_IRQHandler+0x59e>
 8006414:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006418:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800641c:	2b00      	cmp	r3, #0
 800641e:	d00c      	beq.n	800643a <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 8006420:	6878      	ldr	r0, [r7, #4]
 8006422:	f000 fd5b 	bl	8006edc <UART_EndTransmit_IT>
    return;
 8006426:	e008      	b.n	800643a <HAL_UART_IRQHandler+0x59e>
      return;
 8006428:	bf00      	nop
 800642a:	e006      	b.n	800643a <HAL_UART_IRQHandler+0x59e>
    return;
 800642c:	bf00      	nop
 800642e:	e004      	b.n	800643a <HAL_UART_IRQHandler+0x59e>
      return;
 8006430:	bf00      	nop
 8006432:	e002      	b.n	800643a <HAL_UART_IRQHandler+0x59e>
      return;
 8006434:	bf00      	nop
 8006436:	e000      	b.n	800643a <HAL_UART_IRQHandler+0x59e>
    return;
 8006438:	bf00      	nop
  }

}
 800643a:	37e8      	adds	r7, #232	; 0xe8
 800643c:	46bd      	mov	sp, r7
 800643e:	bd80      	pop	{r7, pc}

08006440 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006440:	b480      	push	{r7}
 8006442:	b083      	sub	sp, #12
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006448:	bf00      	nop
 800644a:	370c      	adds	r7, #12
 800644c:	46bd      	mov	sp, r7
 800644e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006452:	4770      	bx	lr

08006454 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006454:	b480      	push	{r7}
 8006456:	b083      	sub	sp, #12
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
 800645c:	460b      	mov	r3, r1
 800645e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006460:	bf00      	nop
 8006462:	370c      	adds	r7, #12
 8006464:	46bd      	mov	sp, r7
 8006466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646a:	4770      	bx	lr

0800646c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800646c:	b580      	push	{r7, lr}
 800646e:	b088      	sub	sp, #32
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006474:	2300      	movs	r3, #0
 8006476:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	689a      	ldr	r2, [r3, #8]
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	691b      	ldr	r3, [r3, #16]
 8006480:	431a      	orrs	r2, r3
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	695b      	ldr	r3, [r3, #20]
 8006486:	431a      	orrs	r2, r3
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	69db      	ldr	r3, [r3, #28]
 800648c:	4313      	orrs	r3, r2
 800648e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	681a      	ldr	r2, [r3, #0]
 8006496:	4ba6      	ldr	r3, [pc, #664]	; (8006730 <UART_SetConfig+0x2c4>)
 8006498:	4013      	ands	r3, r2
 800649a:	687a      	ldr	r2, [r7, #4]
 800649c:	6812      	ldr	r2, [r2, #0]
 800649e:	6979      	ldr	r1, [r7, #20]
 80064a0:	430b      	orrs	r3, r1
 80064a2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	685b      	ldr	r3, [r3, #4]
 80064aa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	68da      	ldr	r2, [r3, #12]
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	430a      	orrs	r2, r1
 80064b8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	699b      	ldr	r3, [r3, #24]
 80064be:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	6a1b      	ldr	r3, [r3, #32]
 80064c4:	697a      	ldr	r2, [r7, #20]
 80064c6:	4313      	orrs	r3, r2
 80064c8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	689b      	ldr	r3, [r3, #8]
 80064d0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	697a      	ldr	r2, [r7, #20]
 80064da:	430a      	orrs	r2, r1
 80064dc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	4a94      	ldr	r2, [pc, #592]	; (8006734 <UART_SetConfig+0x2c8>)
 80064e4:	4293      	cmp	r3, r2
 80064e6:	d120      	bne.n	800652a <UART_SetConfig+0xbe>
 80064e8:	4b93      	ldr	r3, [pc, #588]	; (8006738 <UART_SetConfig+0x2cc>)
 80064ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064ee:	f003 0303 	and.w	r3, r3, #3
 80064f2:	2b03      	cmp	r3, #3
 80064f4:	d816      	bhi.n	8006524 <UART_SetConfig+0xb8>
 80064f6:	a201      	add	r2, pc, #4	; (adr r2, 80064fc <UART_SetConfig+0x90>)
 80064f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064fc:	0800650d 	.word	0x0800650d
 8006500:	08006519 	.word	0x08006519
 8006504:	08006513 	.word	0x08006513
 8006508:	0800651f 	.word	0x0800651f
 800650c:	2301      	movs	r3, #1
 800650e:	77fb      	strb	r3, [r7, #31]
 8006510:	e150      	b.n	80067b4 <UART_SetConfig+0x348>
 8006512:	2302      	movs	r3, #2
 8006514:	77fb      	strb	r3, [r7, #31]
 8006516:	e14d      	b.n	80067b4 <UART_SetConfig+0x348>
 8006518:	2304      	movs	r3, #4
 800651a:	77fb      	strb	r3, [r7, #31]
 800651c:	e14a      	b.n	80067b4 <UART_SetConfig+0x348>
 800651e:	2308      	movs	r3, #8
 8006520:	77fb      	strb	r3, [r7, #31]
 8006522:	e147      	b.n	80067b4 <UART_SetConfig+0x348>
 8006524:	2310      	movs	r3, #16
 8006526:	77fb      	strb	r3, [r7, #31]
 8006528:	e144      	b.n	80067b4 <UART_SetConfig+0x348>
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	4a83      	ldr	r2, [pc, #524]	; (800673c <UART_SetConfig+0x2d0>)
 8006530:	4293      	cmp	r3, r2
 8006532:	d132      	bne.n	800659a <UART_SetConfig+0x12e>
 8006534:	4b80      	ldr	r3, [pc, #512]	; (8006738 <UART_SetConfig+0x2cc>)
 8006536:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800653a:	f003 030c 	and.w	r3, r3, #12
 800653e:	2b0c      	cmp	r3, #12
 8006540:	d828      	bhi.n	8006594 <UART_SetConfig+0x128>
 8006542:	a201      	add	r2, pc, #4	; (adr r2, 8006548 <UART_SetConfig+0xdc>)
 8006544:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006548:	0800657d 	.word	0x0800657d
 800654c:	08006595 	.word	0x08006595
 8006550:	08006595 	.word	0x08006595
 8006554:	08006595 	.word	0x08006595
 8006558:	08006589 	.word	0x08006589
 800655c:	08006595 	.word	0x08006595
 8006560:	08006595 	.word	0x08006595
 8006564:	08006595 	.word	0x08006595
 8006568:	08006583 	.word	0x08006583
 800656c:	08006595 	.word	0x08006595
 8006570:	08006595 	.word	0x08006595
 8006574:	08006595 	.word	0x08006595
 8006578:	0800658f 	.word	0x0800658f
 800657c:	2300      	movs	r3, #0
 800657e:	77fb      	strb	r3, [r7, #31]
 8006580:	e118      	b.n	80067b4 <UART_SetConfig+0x348>
 8006582:	2302      	movs	r3, #2
 8006584:	77fb      	strb	r3, [r7, #31]
 8006586:	e115      	b.n	80067b4 <UART_SetConfig+0x348>
 8006588:	2304      	movs	r3, #4
 800658a:	77fb      	strb	r3, [r7, #31]
 800658c:	e112      	b.n	80067b4 <UART_SetConfig+0x348>
 800658e:	2308      	movs	r3, #8
 8006590:	77fb      	strb	r3, [r7, #31]
 8006592:	e10f      	b.n	80067b4 <UART_SetConfig+0x348>
 8006594:	2310      	movs	r3, #16
 8006596:	77fb      	strb	r3, [r7, #31]
 8006598:	e10c      	b.n	80067b4 <UART_SetConfig+0x348>
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	4a68      	ldr	r2, [pc, #416]	; (8006740 <UART_SetConfig+0x2d4>)
 80065a0:	4293      	cmp	r3, r2
 80065a2:	d120      	bne.n	80065e6 <UART_SetConfig+0x17a>
 80065a4:	4b64      	ldr	r3, [pc, #400]	; (8006738 <UART_SetConfig+0x2cc>)
 80065a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065aa:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80065ae:	2b30      	cmp	r3, #48	; 0x30
 80065b0:	d013      	beq.n	80065da <UART_SetConfig+0x16e>
 80065b2:	2b30      	cmp	r3, #48	; 0x30
 80065b4:	d814      	bhi.n	80065e0 <UART_SetConfig+0x174>
 80065b6:	2b20      	cmp	r3, #32
 80065b8:	d009      	beq.n	80065ce <UART_SetConfig+0x162>
 80065ba:	2b20      	cmp	r3, #32
 80065bc:	d810      	bhi.n	80065e0 <UART_SetConfig+0x174>
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d002      	beq.n	80065c8 <UART_SetConfig+0x15c>
 80065c2:	2b10      	cmp	r3, #16
 80065c4:	d006      	beq.n	80065d4 <UART_SetConfig+0x168>
 80065c6:	e00b      	b.n	80065e0 <UART_SetConfig+0x174>
 80065c8:	2300      	movs	r3, #0
 80065ca:	77fb      	strb	r3, [r7, #31]
 80065cc:	e0f2      	b.n	80067b4 <UART_SetConfig+0x348>
 80065ce:	2302      	movs	r3, #2
 80065d0:	77fb      	strb	r3, [r7, #31]
 80065d2:	e0ef      	b.n	80067b4 <UART_SetConfig+0x348>
 80065d4:	2304      	movs	r3, #4
 80065d6:	77fb      	strb	r3, [r7, #31]
 80065d8:	e0ec      	b.n	80067b4 <UART_SetConfig+0x348>
 80065da:	2308      	movs	r3, #8
 80065dc:	77fb      	strb	r3, [r7, #31]
 80065de:	e0e9      	b.n	80067b4 <UART_SetConfig+0x348>
 80065e0:	2310      	movs	r3, #16
 80065e2:	77fb      	strb	r3, [r7, #31]
 80065e4:	e0e6      	b.n	80067b4 <UART_SetConfig+0x348>
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	4a56      	ldr	r2, [pc, #344]	; (8006744 <UART_SetConfig+0x2d8>)
 80065ec:	4293      	cmp	r3, r2
 80065ee:	d120      	bne.n	8006632 <UART_SetConfig+0x1c6>
 80065f0:	4b51      	ldr	r3, [pc, #324]	; (8006738 <UART_SetConfig+0x2cc>)
 80065f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065f6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80065fa:	2bc0      	cmp	r3, #192	; 0xc0
 80065fc:	d013      	beq.n	8006626 <UART_SetConfig+0x1ba>
 80065fe:	2bc0      	cmp	r3, #192	; 0xc0
 8006600:	d814      	bhi.n	800662c <UART_SetConfig+0x1c0>
 8006602:	2b80      	cmp	r3, #128	; 0x80
 8006604:	d009      	beq.n	800661a <UART_SetConfig+0x1ae>
 8006606:	2b80      	cmp	r3, #128	; 0x80
 8006608:	d810      	bhi.n	800662c <UART_SetConfig+0x1c0>
 800660a:	2b00      	cmp	r3, #0
 800660c:	d002      	beq.n	8006614 <UART_SetConfig+0x1a8>
 800660e:	2b40      	cmp	r3, #64	; 0x40
 8006610:	d006      	beq.n	8006620 <UART_SetConfig+0x1b4>
 8006612:	e00b      	b.n	800662c <UART_SetConfig+0x1c0>
 8006614:	2300      	movs	r3, #0
 8006616:	77fb      	strb	r3, [r7, #31]
 8006618:	e0cc      	b.n	80067b4 <UART_SetConfig+0x348>
 800661a:	2302      	movs	r3, #2
 800661c:	77fb      	strb	r3, [r7, #31]
 800661e:	e0c9      	b.n	80067b4 <UART_SetConfig+0x348>
 8006620:	2304      	movs	r3, #4
 8006622:	77fb      	strb	r3, [r7, #31]
 8006624:	e0c6      	b.n	80067b4 <UART_SetConfig+0x348>
 8006626:	2308      	movs	r3, #8
 8006628:	77fb      	strb	r3, [r7, #31]
 800662a:	e0c3      	b.n	80067b4 <UART_SetConfig+0x348>
 800662c:	2310      	movs	r3, #16
 800662e:	77fb      	strb	r3, [r7, #31]
 8006630:	e0c0      	b.n	80067b4 <UART_SetConfig+0x348>
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	4a44      	ldr	r2, [pc, #272]	; (8006748 <UART_SetConfig+0x2dc>)
 8006638:	4293      	cmp	r3, r2
 800663a:	d125      	bne.n	8006688 <UART_SetConfig+0x21c>
 800663c:	4b3e      	ldr	r3, [pc, #248]	; (8006738 <UART_SetConfig+0x2cc>)
 800663e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006642:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006646:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800664a:	d017      	beq.n	800667c <UART_SetConfig+0x210>
 800664c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006650:	d817      	bhi.n	8006682 <UART_SetConfig+0x216>
 8006652:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006656:	d00b      	beq.n	8006670 <UART_SetConfig+0x204>
 8006658:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800665c:	d811      	bhi.n	8006682 <UART_SetConfig+0x216>
 800665e:	2b00      	cmp	r3, #0
 8006660:	d003      	beq.n	800666a <UART_SetConfig+0x1fe>
 8006662:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006666:	d006      	beq.n	8006676 <UART_SetConfig+0x20a>
 8006668:	e00b      	b.n	8006682 <UART_SetConfig+0x216>
 800666a:	2300      	movs	r3, #0
 800666c:	77fb      	strb	r3, [r7, #31]
 800666e:	e0a1      	b.n	80067b4 <UART_SetConfig+0x348>
 8006670:	2302      	movs	r3, #2
 8006672:	77fb      	strb	r3, [r7, #31]
 8006674:	e09e      	b.n	80067b4 <UART_SetConfig+0x348>
 8006676:	2304      	movs	r3, #4
 8006678:	77fb      	strb	r3, [r7, #31]
 800667a:	e09b      	b.n	80067b4 <UART_SetConfig+0x348>
 800667c:	2308      	movs	r3, #8
 800667e:	77fb      	strb	r3, [r7, #31]
 8006680:	e098      	b.n	80067b4 <UART_SetConfig+0x348>
 8006682:	2310      	movs	r3, #16
 8006684:	77fb      	strb	r3, [r7, #31]
 8006686:	e095      	b.n	80067b4 <UART_SetConfig+0x348>
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	4a2f      	ldr	r2, [pc, #188]	; (800674c <UART_SetConfig+0x2e0>)
 800668e:	4293      	cmp	r3, r2
 8006690:	d125      	bne.n	80066de <UART_SetConfig+0x272>
 8006692:	4b29      	ldr	r3, [pc, #164]	; (8006738 <UART_SetConfig+0x2cc>)
 8006694:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006698:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800669c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80066a0:	d017      	beq.n	80066d2 <UART_SetConfig+0x266>
 80066a2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80066a6:	d817      	bhi.n	80066d8 <UART_SetConfig+0x26c>
 80066a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80066ac:	d00b      	beq.n	80066c6 <UART_SetConfig+0x25a>
 80066ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80066b2:	d811      	bhi.n	80066d8 <UART_SetConfig+0x26c>
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d003      	beq.n	80066c0 <UART_SetConfig+0x254>
 80066b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066bc:	d006      	beq.n	80066cc <UART_SetConfig+0x260>
 80066be:	e00b      	b.n	80066d8 <UART_SetConfig+0x26c>
 80066c0:	2301      	movs	r3, #1
 80066c2:	77fb      	strb	r3, [r7, #31]
 80066c4:	e076      	b.n	80067b4 <UART_SetConfig+0x348>
 80066c6:	2302      	movs	r3, #2
 80066c8:	77fb      	strb	r3, [r7, #31]
 80066ca:	e073      	b.n	80067b4 <UART_SetConfig+0x348>
 80066cc:	2304      	movs	r3, #4
 80066ce:	77fb      	strb	r3, [r7, #31]
 80066d0:	e070      	b.n	80067b4 <UART_SetConfig+0x348>
 80066d2:	2308      	movs	r3, #8
 80066d4:	77fb      	strb	r3, [r7, #31]
 80066d6:	e06d      	b.n	80067b4 <UART_SetConfig+0x348>
 80066d8:	2310      	movs	r3, #16
 80066da:	77fb      	strb	r3, [r7, #31]
 80066dc:	e06a      	b.n	80067b4 <UART_SetConfig+0x348>
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	4a1b      	ldr	r2, [pc, #108]	; (8006750 <UART_SetConfig+0x2e4>)
 80066e4:	4293      	cmp	r3, r2
 80066e6:	d138      	bne.n	800675a <UART_SetConfig+0x2ee>
 80066e8:	4b13      	ldr	r3, [pc, #76]	; (8006738 <UART_SetConfig+0x2cc>)
 80066ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066ee:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80066f2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80066f6:	d017      	beq.n	8006728 <UART_SetConfig+0x2bc>
 80066f8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80066fc:	d82a      	bhi.n	8006754 <UART_SetConfig+0x2e8>
 80066fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006702:	d00b      	beq.n	800671c <UART_SetConfig+0x2b0>
 8006704:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006708:	d824      	bhi.n	8006754 <UART_SetConfig+0x2e8>
 800670a:	2b00      	cmp	r3, #0
 800670c:	d003      	beq.n	8006716 <UART_SetConfig+0x2aa>
 800670e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006712:	d006      	beq.n	8006722 <UART_SetConfig+0x2b6>
 8006714:	e01e      	b.n	8006754 <UART_SetConfig+0x2e8>
 8006716:	2300      	movs	r3, #0
 8006718:	77fb      	strb	r3, [r7, #31]
 800671a:	e04b      	b.n	80067b4 <UART_SetConfig+0x348>
 800671c:	2302      	movs	r3, #2
 800671e:	77fb      	strb	r3, [r7, #31]
 8006720:	e048      	b.n	80067b4 <UART_SetConfig+0x348>
 8006722:	2304      	movs	r3, #4
 8006724:	77fb      	strb	r3, [r7, #31]
 8006726:	e045      	b.n	80067b4 <UART_SetConfig+0x348>
 8006728:	2308      	movs	r3, #8
 800672a:	77fb      	strb	r3, [r7, #31]
 800672c:	e042      	b.n	80067b4 <UART_SetConfig+0x348>
 800672e:	bf00      	nop
 8006730:	efff69f3 	.word	0xefff69f3
 8006734:	40011000 	.word	0x40011000
 8006738:	40023800 	.word	0x40023800
 800673c:	40004400 	.word	0x40004400
 8006740:	40004800 	.word	0x40004800
 8006744:	40004c00 	.word	0x40004c00
 8006748:	40005000 	.word	0x40005000
 800674c:	40011400 	.word	0x40011400
 8006750:	40007800 	.word	0x40007800
 8006754:	2310      	movs	r3, #16
 8006756:	77fb      	strb	r3, [r7, #31]
 8006758:	e02c      	b.n	80067b4 <UART_SetConfig+0x348>
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	4a72      	ldr	r2, [pc, #456]	; (8006928 <UART_SetConfig+0x4bc>)
 8006760:	4293      	cmp	r3, r2
 8006762:	d125      	bne.n	80067b0 <UART_SetConfig+0x344>
 8006764:	4b71      	ldr	r3, [pc, #452]	; (800692c <UART_SetConfig+0x4c0>)
 8006766:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800676a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800676e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006772:	d017      	beq.n	80067a4 <UART_SetConfig+0x338>
 8006774:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006778:	d817      	bhi.n	80067aa <UART_SetConfig+0x33e>
 800677a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800677e:	d00b      	beq.n	8006798 <UART_SetConfig+0x32c>
 8006780:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006784:	d811      	bhi.n	80067aa <UART_SetConfig+0x33e>
 8006786:	2b00      	cmp	r3, #0
 8006788:	d003      	beq.n	8006792 <UART_SetConfig+0x326>
 800678a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800678e:	d006      	beq.n	800679e <UART_SetConfig+0x332>
 8006790:	e00b      	b.n	80067aa <UART_SetConfig+0x33e>
 8006792:	2300      	movs	r3, #0
 8006794:	77fb      	strb	r3, [r7, #31]
 8006796:	e00d      	b.n	80067b4 <UART_SetConfig+0x348>
 8006798:	2302      	movs	r3, #2
 800679a:	77fb      	strb	r3, [r7, #31]
 800679c:	e00a      	b.n	80067b4 <UART_SetConfig+0x348>
 800679e:	2304      	movs	r3, #4
 80067a0:	77fb      	strb	r3, [r7, #31]
 80067a2:	e007      	b.n	80067b4 <UART_SetConfig+0x348>
 80067a4:	2308      	movs	r3, #8
 80067a6:	77fb      	strb	r3, [r7, #31]
 80067a8:	e004      	b.n	80067b4 <UART_SetConfig+0x348>
 80067aa:	2310      	movs	r3, #16
 80067ac:	77fb      	strb	r3, [r7, #31]
 80067ae:	e001      	b.n	80067b4 <UART_SetConfig+0x348>
 80067b0:	2310      	movs	r3, #16
 80067b2:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	69db      	ldr	r3, [r3, #28]
 80067b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80067bc:	d15b      	bne.n	8006876 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80067be:	7ffb      	ldrb	r3, [r7, #31]
 80067c0:	2b08      	cmp	r3, #8
 80067c2:	d828      	bhi.n	8006816 <UART_SetConfig+0x3aa>
 80067c4:	a201      	add	r2, pc, #4	; (adr r2, 80067cc <UART_SetConfig+0x360>)
 80067c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067ca:	bf00      	nop
 80067cc:	080067f1 	.word	0x080067f1
 80067d0:	080067f9 	.word	0x080067f9
 80067d4:	08006801 	.word	0x08006801
 80067d8:	08006817 	.word	0x08006817
 80067dc:	08006807 	.word	0x08006807
 80067e0:	08006817 	.word	0x08006817
 80067e4:	08006817 	.word	0x08006817
 80067e8:	08006817 	.word	0x08006817
 80067ec:	0800680f 	.word	0x0800680f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80067f0:	f7fe f9c8 	bl	8004b84 <HAL_RCC_GetPCLK1Freq>
 80067f4:	61b8      	str	r0, [r7, #24]
        break;
 80067f6:	e013      	b.n	8006820 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80067f8:	f7fe f9d8 	bl	8004bac <HAL_RCC_GetPCLK2Freq>
 80067fc:	61b8      	str	r0, [r7, #24]
        break;
 80067fe:	e00f      	b.n	8006820 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006800:	4b4b      	ldr	r3, [pc, #300]	; (8006930 <UART_SetConfig+0x4c4>)
 8006802:	61bb      	str	r3, [r7, #24]
        break;
 8006804:	e00c      	b.n	8006820 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006806:	f7fe f8ab 	bl	8004960 <HAL_RCC_GetSysClockFreq>
 800680a:	61b8      	str	r0, [r7, #24]
        break;
 800680c:	e008      	b.n	8006820 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800680e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006812:	61bb      	str	r3, [r7, #24]
        break;
 8006814:	e004      	b.n	8006820 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8006816:	2300      	movs	r3, #0
 8006818:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800681a:	2301      	movs	r3, #1
 800681c:	77bb      	strb	r3, [r7, #30]
        break;
 800681e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006820:	69bb      	ldr	r3, [r7, #24]
 8006822:	2b00      	cmp	r3, #0
 8006824:	d074      	beq.n	8006910 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006826:	69bb      	ldr	r3, [r7, #24]
 8006828:	005a      	lsls	r2, r3, #1
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	685b      	ldr	r3, [r3, #4]
 800682e:	085b      	lsrs	r3, r3, #1
 8006830:	441a      	add	r2, r3
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	685b      	ldr	r3, [r3, #4]
 8006836:	fbb2 f3f3 	udiv	r3, r2, r3
 800683a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800683c:	693b      	ldr	r3, [r7, #16]
 800683e:	2b0f      	cmp	r3, #15
 8006840:	d916      	bls.n	8006870 <UART_SetConfig+0x404>
 8006842:	693b      	ldr	r3, [r7, #16]
 8006844:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006848:	d212      	bcs.n	8006870 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800684a:	693b      	ldr	r3, [r7, #16]
 800684c:	b29b      	uxth	r3, r3
 800684e:	f023 030f 	bic.w	r3, r3, #15
 8006852:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006854:	693b      	ldr	r3, [r7, #16]
 8006856:	085b      	lsrs	r3, r3, #1
 8006858:	b29b      	uxth	r3, r3
 800685a:	f003 0307 	and.w	r3, r3, #7
 800685e:	b29a      	uxth	r2, r3
 8006860:	89fb      	ldrh	r3, [r7, #14]
 8006862:	4313      	orrs	r3, r2
 8006864:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	89fa      	ldrh	r2, [r7, #14]
 800686c:	60da      	str	r2, [r3, #12]
 800686e:	e04f      	b.n	8006910 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006870:	2301      	movs	r3, #1
 8006872:	77bb      	strb	r3, [r7, #30]
 8006874:	e04c      	b.n	8006910 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006876:	7ffb      	ldrb	r3, [r7, #31]
 8006878:	2b08      	cmp	r3, #8
 800687a:	d828      	bhi.n	80068ce <UART_SetConfig+0x462>
 800687c:	a201      	add	r2, pc, #4	; (adr r2, 8006884 <UART_SetConfig+0x418>)
 800687e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006882:	bf00      	nop
 8006884:	080068a9 	.word	0x080068a9
 8006888:	080068b1 	.word	0x080068b1
 800688c:	080068b9 	.word	0x080068b9
 8006890:	080068cf 	.word	0x080068cf
 8006894:	080068bf 	.word	0x080068bf
 8006898:	080068cf 	.word	0x080068cf
 800689c:	080068cf 	.word	0x080068cf
 80068a0:	080068cf 	.word	0x080068cf
 80068a4:	080068c7 	.word	0x080068c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80068a8:	f7fe f96c 	bl	8004b84 <HAL_RCC_GetPCLK1Freq>
 80068ac:	61b8      	str	r0, [r7, #24]
        break;
 80068ae:	e013      	b.n	80068d8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80068b0:	f7fe f97c 	bl	8004bac <HAL_RCC_GetPCLK2Freq>
 80068b4:	61b8      	str	r0, [r7, #24]
        break;
 80068b6:	e00f      	b.n	80068d8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80068b8:	4b1d      	ldr	r3, [pc, #116]	; (8006930 <UART_SetConfig+0x4c4>)
 80068ba:	61bb      	str	r3, [r7, #24]
        break;
 80068bc:	e00c      	b.n	80068d8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80068be:	f7fe f84f 	bl	8004960 <HAL_RCC_GetSysClockFreq>
 80068c2:	61b8      	str	r0, [r7, #24]
        break;
 80068c4:	e008      	b.n	80068d8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80068c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80068ca:	61bb      	str	r3, [r7, #24]
        break;
 80068cc:	e004      	b.n	80068d8 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80068ce:	2300      	movs	r3, #0
 80068d0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80068d2:	2301      	movs	r3, #1
 80068d4:	77bb      	strb	r3, [r7, #30]
        break;
 80068d6:	bf00      	nop
    }

    if (pclk != 0U)
 80068d8:	69bb      	ldr	r3, [r7, #24]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d018      	beq.n	8006910 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	685b      	ldr	r3, [r3, #4]
 80068e2:	085a      	lsrs	r2, r3, #1
 80068e4:	69bb      	ldr	r3, [r7, #24]
 80068e6:	441a      	add	r2, r3
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	685b      	ldr	r3, [r3, #4]
 80068ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80068f0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80068f2:	693b      	ldr	r3, [r7, #16]
 80068f4:	2b0f      	cmp	r3, #15
 80068f6:	d909      	bls.n	800690c <UART_SetConfig+0x4a0>
 80068f8:	693b      	ldr	r3, [r7, #16]
 80068fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80068fe:	d205      	bcs.n	800690c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006900:	693b      	ldr	r3, [r7, #16]
 8006902:	b29a      	uxth	r2, r3
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	60da      	str	r2, [r3, #12]
 800690a:	e001      	b.n	8006910 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800690c:	2301      	movs	r3, #1
 800690e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2200      	movs	r2, #0
 8006914:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	2200      	movs	r2, #0
 800691a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800691c:	7fbb      	ldrb	r3, [r7, #30]
}
 800691e:	4618      	mov	r0, r3
 8006920:	3720      	adds	r7, #32
 8006922:	46bd      	mov	sp, r7
 8006924:	bd80      	pop	{r7, pc}
 8006926:	bf00      	nop
 8006928:	40007c00 	.word	0x40007c00
 800692c:	40023800 	.word	0x40023800
 8006930:	00f42400 	.word	0x00f42400

08006934 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006934:	b480      	push	{r7}
 8006936:	b083      	sub	sp, #12
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006940:	f003 0301 	and.w	r3, r3, #1
 8006944:	2b00      	cmp	r3, #0
 8006946:	d00a      	beq.n	800695e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	685b      	ldr	r3, [r3, #4]
 800694e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	430a      	orrs	r2, r1
 800695c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006962:	f003 0302 	and.w	r3, r3, #2
 8006966:	2b00      	cmp	r3, #0
 8006968:	d00a      	beq.n	8006980 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	685b      	ldr	r3, [r3, #4]
 8006970:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	430a      	orrs	r2, r1
 800697e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006984:	f003 0304 	and.w	r3, r3, #4
 8006988:	2b00      	cmp	r3, #0
 800698a:	d00a      	beq.n	80069a2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	685b      	ldr	r3, [r3, #4]
 8006992:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	430a      	orrs	r2, r1
 80069a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069a6:	f003 0308 	and.w	r3, r3, #8
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d00a      	beq.n	80069c4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	685b      	ldr	r3, [r3, #4]
 80069b4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	430a      	orrs	r2, r1
 80069c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069c8:	f003 0310 	and.w	r3, r3, #16
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d00a      	beq.n	80069e6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	689b      	ldr	r3, [r3, #8]
 80069d6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	430a      	orrs	r2, r1
 80069e4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069ea:	f003 0320 	and.w	r3, r3, #32
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d00a      	beq.n	8006a08 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	689b      	ldr	r3, [r3, #8]
 80069f8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	430a      	orrs	r2, r1
 8006a06:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d01a      	beq.n	8006a4a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	685b      	ldr	r3, [r3, #4]
 8006a1a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	430a      	orrs	r2, r1
 8006a28:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a2e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006a32:	d10a      	bne.n	8006a4a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	685b      	ldr	r3, [r3, #4]
 8006a3a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	430a      	orrs	r2, r1
 8006a48:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d00a      	beq.n	8006a6c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	685b      	ldr	r3, [r3, #4]
 8006a5c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	430a      	orrs	r2, r1
 8006a6a:	605a      	str	r2, [r3, #4]
  }
}
 8006a6c:	bf00      	nop
 8006a6e:	370c      	adds	r7, #12
 8006a70:	46bd      	mov	sp, r7
 8006a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a76:	4770      	bx	lr

08006a78 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	b086      	sub	sp, #24
 8006a7c:	af02      	add	r7, sp, #8
 8006a7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2200      	movs	r2, #0
 8006a84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006a88:	f7fb fa52 	bl	8001f30 <HAL_GetTick>
 8006a8c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	f003 0308 	and.w	r3, r3, #8
 8006a98:	2b08      	cmp	r3, #8
 8006a9a:	d10e      	bne.n	8006aba <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006a9c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006aa0:	9300      	str	r3, [sp, #0]
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006aaa:	6878      	ldr	r0, [r7, #4]
 8006aac:	f000 f81b 	bl	8006ae6 <UART_WaitOnFlagUntilTimeout>
 8006ab0:	4603      	mov	r3, r0
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d001      	beq.n	8006aba <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006ab6:	2303      	movs	r3, #3
 8006ab8:	e011      	b.n	8006ade <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	2220      	movs	r2, #32
 8006abe:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2220      	movs	r2, #32
 8006ac4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2200      	movs	r2, #0
 8006acc:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	2200      	movs	r2, #0
 8006ad2:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8006adc:	2300      	movs	r3, #0
}
 8006ade:	4618      	mov	r0, r3
 8006ae0:	3710      	adds	r7, #16
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	bd80      	pop	{r7, pc}

08006ae6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006ae6:	b580      	push	{r7, lr}
 8006ae8:	b09c      	sub	sp, #112	; 0x70
 8006aea:	af00      	add	r7, sp, #0
 8006aec:	60f8      	str	r0, [r7, #12]
 8006aee:	60b9      	str	r1, [r7, #8]
 8006af0:	603b      	str	r3, [r7, #0]
 8006af2:	4613      	mov	r3, r2
 8006af4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006af6:	e0a7      	b.n	8006c48 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006af8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006afa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006afe:	f000 80a3 	beq.w	8006c48 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b02:	f7fb fa15 	bl	8001f30 <HAL_GetTick>
 8006b06:	4602      	mov	r2, r0
 8006b08:	683b      	ldr	r3, [r7, #0]
 8006b0a:	1ad3      	subs	r3, r2, r3
 8006b0c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006b0e:	429a      	cmp	r2, r3
 8006b10:	d302      	bcc.n	8006b18 <UART_WaitOnFlagUntilTimeout+0x32>
 8006b12:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d13f      	bne.n	8006b98 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b20:	e853 3f00 	ldrex	r3, [r3]
 8006b24:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006b26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b28:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006b2c:	667b      	str	r3, [r7, #100]	; 0x64
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	461a      	mov	r2, r3
 8006b34:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006b36:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006b38:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b3a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006b3c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006b3e:	e841 2300 	strex	r3, r2, [r1]
 8006b42:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006b44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d1e6      	bne.n	8006b18 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	3308      	adds	r3, #8
 8006b50:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b54:	e853 3f00 	ldrex	r3, [r3]
 8006b58:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006b5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b5c:	f023 0301 	bic.w	r3, r3, #1
 8006b60:	663b      	str	r3, [r7, #96]	; 0x60
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	3308      	adds	r3, #8
 8006b68:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006b6a:	64ba      	str	r2, [r7, #72]	; 0x48
 8006b6c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b6e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006b70:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006b72:	e841 2300 	strex	r3, r2, [r1]
 8006b76:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006b78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d1e5      	bne.n	8006b4a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	2220      	movs	r2, #32
 8006b82:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	2220      	movs	r2, #32
 8006b88:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	2200      	movs	r2, #0
 8006b90:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8006b94:	2303      	movs	r3, #3
 8006b96:	e068      	b.n	8006c6a <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	f003 0304 	and.w	r3, r3, #4
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d050      	beq.n	8006c48 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	69db      	ldr	r3, [r3, #28]
 8006bac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006bb0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006bb4:	d148      	bne.n	8006c48 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006bbe:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bc8:	e853 3f00 	ldrex	r3, [r3]
 8006bcc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bd0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006bd4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	461a      	mov	r2, r3
 8006bdc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006bde:	637b      	str	r3, [r7, #52]	; 0x34
 8006be0:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006be2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006be4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006be6:	e841 2300 	strex	r3, r2, [r1]
 8006bea:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006bec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d1e6      	bne.n	8006bc0 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	3308      	adds	r3, #8
 8006bf8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bfa:	697b      	ldr	r3, [r7, #20]
 8006bfc:	e853 3f00 	ldrex	r3, [r3]
 8006c00:	613b      	str	r3, [r7, #16]
   return(result);
 8006c02:	693b      	ldr	r3, [r7, #16]
 8006c04:	f023 0301 	bic.w	r3, r3, #1
 8006c08:	66bb      	str	r3, [r7, #104]	; 0x68
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	3308      	adds	r3, #8
 8006c10:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006c12:	623a      	str	r2, [r7, #32]
 8006c14:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c16:	69f9      	ldr	r1, [r7, #28]
 8006c18:	6a3a      	ldr	r2, [r7, #32]
 8006c1a:	e841 2300 	strex	r3, r2, [r1]
 8006c1e:	61bb      	str	r3, [r7, #24]
   return(result);
 8006c20:	69bb      	ldr	r3, [r7, #24]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d1e5      	bne.n	8006bf2 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	2220      	movs	r2, #32
 8006c2a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	2220      	movs	r2, #32
 8006c30:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	2220      	movs	r2, #32
 8006c38:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	2200      	movs	r2, #0
 8006c40:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8006c44:	2303      	movs	r3, #3
 8006c46:	e010      	b.n	8006c6a <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	69da      	ldr	r2, [r3, #28]
 8006c4e:	68bb      	ldr	r3, [r7, #8]
 8006c50:	4013      	ands	r3, r2
 8006c52:	68ba      	ldr	r2, [r7, #8]
 8006c54:	429a      	cmp	r2, r3
 8006c56:	bf0c      	ite	eq
 8006c58:	2301      	moveq	r3, #1
 8006c5a:	2300      	movne	r3, #0
 8006c5c:	b2db      	uxtb	r3, r3
 8006c5e:	461a      	mov	r2, r3
 8006c60:	79fb      	ldrb	r3, [r7, #7]
 8006c62:	429a      	cmp	r2, r3
 8006c64:	f43f af48 	beq.w	8006af8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006c68:	2300      	movs	r3, #0
}
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	3770      	adds	r7, #112	; 0x70
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	bd80      	pop	{r7, pc}

08006c72 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006c72:	b480      	push	{r7}
 8006c74:	b095      	sub	sp, #84	; 0x54
 8006c76:	af00      	add	r7, sp, #0
 8006c78:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c82:	e853 3f00 	ldrex	r3, [r3]
 8006c86:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006c88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c8a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006c8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	461a      	mov	r2, r3
 8006c96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c98:	643b      	str	r3, [r7, #64]	; 0x40
 8006c9a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c9c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006c9e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006ca0:	e841 2300 	strex	r3, r2, [r1]
 8006ca4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006ca6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d1e6      	bne.n	8006c7a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	3308      	adds	r3, #8
 8006cb2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cb4:	6a3b      	ldr	r3, [r7, #32]
 8006cb6:	e853 3f00 	ldrex	r3, [r3]
 8006cba:	61fb      	str	r3, [r7, #28]
   return(result);
 8006cbc:	69fb      	ldr	r3, [r7, #28]
 8006cbe:	f023 0301 	bic.w	r3, r3, #1
 8006cc2:	64bb      	str	r3, [r7, #72]	; 0x48
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	3308      	adds	r3, #8
 8006cca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006ccc:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006cce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cd0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006cd2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006cd4:	e841 2300 	strex	r3, r2, [r1]
 8006cd8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d1e5      	bne.n	8006cac <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ce4:	2b01      	cmp	r3, #1
 8006ce6:	d118      	bne.n	8006d1a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	e853 3f00 	ldrex	r3, [r3]
 8006cf4:	60bb      	str	r3, [r7, #8]
   return(result);
 8006cf6:	68bb      	ldr	r3, [r7, #8]
 8006cf8:	f023 0310 	bic.w	r3, r3, #16
 8006cfc:	647b      	str	r3, [r7, #68]	; 0x44
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	461a      	mov	r2, r3
 8006d04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d06:	61bb      	str	r3, [r7, #24]
 8006d08:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d0a:	6979      	ldr	r1, [r7, #20]
 8006d0c:	69ba      	ldr	r2, [r7, #24]
 8006d0e:	e841 2300 	strex	r3, r2, [r1]
 8006d12:	613b      	str	r3, [r7, #16]
   return(result);
 8006d14:	693b      	ldr	r3, [r7, #16]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d1e6      	bne.n	8006ce8 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	2220      	movs	r2, #32
 8006d1e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	2200      	movs	r2, #0
 8006d26:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006d2e:	bf00      	nop
 8006d30:	3754      	adds	r7, #84	; 0x54
 8006d32:	46bd      	mov	sp, r7
 8006d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d38:	4770      	bx	lr

08006d3a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006d3a:	b580      	push	{r7, lr}
 8006d3c:	b084      	sub	sp, #16
 8006d3e:	af00      	add	r7, sp, #0
 8006d40:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d46:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	2200      	movs	r2, #0
 8006d54:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006d58:	68f8      	ldr	r0, [r7, #12]
 8006d5a:	f7ff fb71 	bl	8006440 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006d5e:	bf00      	nop
 8006d60:	3710      	adds	r7, #16
 8006d62:	46bd      	mov	sp, r7
 8006d64:	bd80      	pop	{r7, pc}

08006d66 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006d66:	b480      	push	{r7}
 8006d68:	b08f      	sub	sp, #60	; 0x3c
 8006d6a:	af00      	add	r7, sp, #0
 8006d6c:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006d72:	2b21      	cmp	r3, #33	; 0x21
 8006d74:	d14c      	bne.n	8006e10 <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006d7c:	b29b      	uxth	r3, r3
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d132      	bne.n	8006de8 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d88:	6a3b      	ldr	r3, [r7, #32]
 8006d8a:	e853 3f00 	ldrex	r3, [r3]
 8006d8e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006d90:	69fb      	ldr	r3, [r7, #28]
 8006d92:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006d96:	637b      	str	r3, [r7, #52]	; 0x34
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	461a      	mov	r2, r3
 8006d9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006da0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006da2:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006da4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006da6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006da8:	e841 2300 	strex	r3, r2, [r1]
 8006dac:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d1e6      	bne.n	8006d82 <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	e853 3f00 	ldrex	r3, [r3]
 8006dc0:	60bb      	str	r3, [r7, #8]
   return(result);
 8006dc2:	68bb      	ldr	r3, [r7, #8]
 8006dc4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006dc8:	633b      	str	r3, [r7, #48]	; 0x30
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	461a      	mov	r2, r3
 8006dd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dd2:	61bb      	str	r3, [r7, #24]
 8006dd4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dd6:	6979      	ldr	r1, [r7, #20]
 8006dd8:	69ba      	ldr	r2, [r7, #24]
 8006dda:	e841 2300 	strex	r3, r2, [r1]
 8006dde:	613b      	str	r3, [r7, #16]
   return(result);
 8006de0:	693b      	ldr	r3, [r7, #16]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d1e6      	bne.n	8006db4 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8006de6:	e013      	b.n	8006e10 <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006dec:	781a      	ldrb	r2, [r3, #0]
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006df8:	1c5a      	adds	r2, r3, #1
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006e04:	b29b      	uxth	r3, r3
 8006e06:	3b01      	subs	r3, #1
 8006e08:	b29a      	uxth	r2, r3
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8006e10:	bf00      	nop
 8006e12:	373c      	adds	r7, #60	; 0x3c
 8006e14:	46bd      	mov	sp, r7
 8006e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1a:	4770      	bx	lr

08006e1c <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006e1c:	b480      	push	{r7}
 8006e1e:	b091      	sub	sp, #68	; 0x44
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006e28:	2b21      	cmp	r3, #33	; 0x21
 8006e2a:	d151      	bne.n	8006ed0 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006e32:	b29b      	uxth	r3, r3
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d132      	bne.n	8006e9e <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e40:	e853 3f00 	ldrex	r3, [r3]
 8006e44:	623b      	str	r3, [r7, #32]
   return(result);
 8006e46:	6a3b      	ldr	r3, [r7, #32]
 8006e48:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006e4c:	63bb      	str	r3, [r7, #56]	; 0x38
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	461a      	mov	r2, r3
 8006e54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e56:	633b      	str	r3, [r7, #48]	; 0x30
 8006e58:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e5a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006e5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e5e:	e841 2300 	strex	r3, r2, [r1]
 8006e62:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006e64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d1e6      	bne.n	8006e38 <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e70:	693b      	ldr	r3, [r7, #16]
 8006e72:	e853 3f00 	ldrex	r3, [r3]
 8006e76:	60fb      	str	r3, [r7, #12]
   return(result);
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006e7e:	637b      	str	r3, [r7, #52]	; 0x34
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	461a      	mov	r2, r3
 8006e86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e88:	61fb      	str	r3, [r7, #28]
 8006e8a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e8c:	69b9      	ldr	r1, [r7, #24]
 8006e8e:	69fa      	ldr	r2, [r7, #28]
 8006e90:	e841 2300 	strex	r3, r2, [r1]
 8006e94:	617b      	str	r3, [r7, #20]
   return(result);
 8006e96:	697b      	ldr	r3, [r7, #20]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d1e6      	bne.n	8006e6a <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8006e9c:	e018      	b.n	8006ed0 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ea2:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8006ea4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ea6:	881b      	ldrh	r3, [r3, #0]
 8006ea8:	461a      	mov	r2, r3
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006eb2:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006eb8:	1c9a      	adds	r2, r3, #2
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006ec4:	b29b      	uxth	r3, r3
 8006ec6:	3b01      	subs	r3, #1
 8006ec8:	b29a      	uxth	r2, r3
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8006ed0:	bf00      	nop
 8006ed2:	3744      	adds	r7, #68	; 0x44
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eda:	4770      	bx	lr

08006edc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006edc:	b580      	push	{r7, lr}
 8006ede:	b088      	sub	sp, #32
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	e853 3f00 	ldrex	r3, [r3]
 8006ef0:	60bb      	str	r3, [r7, #8]
   return(result);
 8006ef2:	68bb      	ldr	r3, [r7, #8]
 8006ef4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ef8:	61fb      	str	r3, [r7, #28]
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	461a      	mov	r2, r3
 8006f00:	69fb      	ldr	r3, [r7, #28]
 8006f02:	61bb      	str	r3, [r7, #24]
 8006f04:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f06:	6979      	ldr	r1, [r7, #20]
 8006f08:	69ba      	ldr	r2, [r7, #24]
 8006f0a:	e841 2300 	strex	r3, r2, [r1]
 8006f0e:	613b      	str	r3, [r7, #16]
   return(result);
 8006f10:	693b      	ldr	r3, [r7, #16]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d1e6      	bne.n	8006ee4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	2220      	movs	r2, #32
 8006f1a:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	2200      	movs	r2, #0
 8006f20:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006f22:	6878      	ldr	r0, [r7, #4]
 8006f24:	f7fa fc0a 	bl	800173c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006f28:	bf00      	nop
 8006f2a:	3720      	adds	r7, #32
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	bd80      	pop	{r7, pc}

08006f30 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006f30:	b084      	sub	sp, #16
 8006f32:	b580      	push	{r7, lr}
 8006f34:	b084      	sub	sp, #16
 8006f36:	af00      	add	r7, sp, #0
 8006f38:	6078      	str	r0, [r7, #4]
 8006f3a:	f107 001c 	add.w	r0, r7, #28
 8006f3e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006f42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f44:	2b01      	cmp	r3, #1
 8006f46:	d120      	bne.n	8006f8a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f4c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	68da      	ldr	r2, [r3, #12]
 8006f58:	4b20      	ldr	r3, [pc, #128]	; (8006fdc <USB_CoreInit+0xac>)
 8006f5a:	4013      	ands	r3, r2
 8006f5c:	687a      	ldr	r2, [r7, #4]
 8006f5e:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	68db      	ldr	r3, [r3, #12]
 8006f64:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006f6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f6e:	2b01      	cmp	r3, #1
 8006f70:	d105      	bne.n	8006f7e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	68db      	ldr	r3, [r3, #12]
 8006f76:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006f7e:	6878      	ldr	r0, [r7, #4]
 8006f80:	f001 fbee 	bl	8008760 <USB_CoreReset>
 8006f84:	4603      	mov	r3, r0
 8006f86:	73fb      	strb	r3, [r7, #15]
 8006f88:	e010      	b.n	8006fac <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	68db      	ldr	r3, [r3, #12]
 8006f8e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006f96:	6878      	ldr	r0, [r7, #4]
 8006f98:	f001 fbe2 	bl	8008760 <USB_CoreReset>
 8006f9c:	4603      	mov	r3, r0
 8006f9e:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fa4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8006fac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fae:	2b01      	cmp	r3, #1
 8006fb0:	d10b      	bne.n	8006fca <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	689b      	ldr	r3, [r3, #8]
 8006fb6:	f043 0206 	orr.w	r2, r3, #6
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	689b      	ldr	r3, [r3, #8]
 8006fc2:	f043 0220 	orr.w	r2, r3, #32
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006fca:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fcc:	4618      	mov	r0, r3
 8006fce:	3710      	adds	r7, #16
 8006fd0:	46bd      	mov	sp, r7
 8006fd2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006fd6:	b004      	add	sp, #16
 8006fd8:	4770      	bx	lr
 8006fda:	bf00      	nop
 8006fdc:	ffbdffbf 	.word	0xffbdffbf

08006fe0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006fe0:	b480      	push	{r7}
 8006fe2:	b087      	sub	sp, #28
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	60f8      	str	r0, [r7, #12]
 8006fe8:	60b9      	str	r1, [r7, #8]
 8006fea:	4613      	mov	r3, r2
 8006fec:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8006fee:	79fb      	ldrb	r3, [r7, #7]
 8006ff0:	2b02      	cmp	r3, #2
 8006ff2:	d165      	bne.n	80070c0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006ff4:	68bb      	ldr	r3, [r7, #8]
 8006ff6:	4a41      	ldr	r2, [pc, #260]	; (80070fc <USB_SetTurnaroundTime+0x11c>)
 8006ff8:	4293      	cmp	r3, r2
 8006ffa:	d906      	bls.n	800700a <USB_SetTurnaroundTime+0x2a>
 8006ffc:	68bb      	ldr	r3, [r7, #8]
 8006ffe:	4a40      	ldr	r2, [pc, #256]	; (8007100 <USB_SetTurnaroundTime+0x120>)
 8007000:	4293      	cmp	r3, r2
 8007002:	d202      	bcs.n	800700a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8007004:	230f      	movs	r3, #15
 8007006:	617b      	str	r3, [r7, #20]
 8007008:	e062      	b.n	80070d0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800700a:	68bb      	ldr	r3, [r7, #8]
 800700c:	4a3c      	ldr	r2, [pc, #240]	; (8007100 <USB_SetTurnaroundTime+0x120>)
 800700e:	4293      	cmp	r3, r2
 8007010:	d306      	bcc.n	8007020 <USB_SetTurnaroundTime+0x40>
 8007012:	68bb      	ldr	r3, [r7, #8]
 8007014:	4a3b      	ldr	r2, [pc, #236]	; (8007104 <USB_SetTurnaroundTime+0x124>)
 8007016:	4293      	cmp	r3, r2
 8007018:	d202      	bcs.n	8007020 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800701a:	230e      	movs	r3, #14
 800701c:	617b      	str	r3, [r7, #20]
 800701e:	e057      	b.n	80070d0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8007020:	68bb      	ldr	r3, [r7, #8]
 8007022:	4a38      	ldr	r2, [pc, #224]	; (8007104 <USB_SetTurnaroundTime+0x124>)
 8007024:	4293      	cmp	r3, r2
 8007026:	d306      	bcc.n	8007036 <USB_SetTurnaroundTime+0x56>
 8007028:	68bb      	ldr	r3, [r7, #8]
 800702a:	4a37      	ldr	r2, [pc, #220]	; (8007108 <USB_SetTurnaroundTime+0x128>)
 800702c:	4293      	cmp	r3, r2
 800702e:	d202      	bcs.n	8007036 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8007030:	230d      	movs	r3, #13
 8007032:	617b      	str	r3, [r7, #20]
 8007034:	e04c      	b.n	80070d0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8007036:	68bb      	ldr	r3, [r7, #8]
 8007038:	4a33      	ldr	r2, [pc, #204]	; (8007108 <USB_SetTurnaroundTime+0x128>)
 800703a:	4293      	cmp	r3, r2
 800703c:	d306      	bcc.n	800704c <USB_SetTurnaroundTime+0x6c>
 800703e:	68bb      	ldr	r3, [r7, #8]
 8007040:	4a32      	ldr	r2, [pc, #200]	; (800710c <USB_SetTurnaroundTime+0x12c>)
 8007042:	4293      	cmp	r3, r2
 8007044:	d802      	bhi.n	800704c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8007046:	230c      	movs	r3, #12
 8007048:	617b      	str	r3, [r7, #20]
 800704a:	e041      	b.n	80070d0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800704c:	68bb      	ldr	r3, [r7, #8]
 800704e:	4a2f      	ldr	r2, [pc, #188]	; (800710c <USB_SetTurnaroundTime+0x12c>)
 8007050:	4293      	cmp	r3, r2
 8007052:	d906      	bls.n	8007062 <USB_SetTurnaroundTime+0x82>
 8007054:	68bb      	ldr	r3, [r7, #8]
 8007056:	4a2e      	ldr	r2, [pc, #184]	; (8007110 <USB_SetTurnaroundTime+0x130>)
 8007058:	4293      	cmp	r3, r2
 800705a:	d802      	bhi.n	8007062 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800705c:	230b      	movs	r3, #11
 800705e:	617b      	str	r3, [r7, #20]
 8007060:	e036      	b.n	80070d0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8007062:	68bb      	ldr	r3, [r7, #8]
 8007064:	4a2a      	ldr	r2, [pc, #168]	; (8007110 <USB_SetTurnaroundTime+0x130>)
 8007066:	4293      	cmp	r3, r2
 8007068:	d906      	bls.n	8007078 <USB_SetTurnaroundTime+0x98>
 800706a:	68bb      	ldr	r3, [r7, #8]
 800706c:	4a29      	ldr	r2, [pc, #164]	; (8007114 <USB_SetTurnaroundTime+0x134>)
 800706e:	4293      	cmp	r3, r2
 8007070:	d802      	bhi.n	8007078 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8007072:	230a      	movs	r3, #10
 8007074:	617b      	str	r3, [r7, #20]
 8007076:	e02b      	b.n	80070d0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8007078:	68bb      	ldr	r3, [r7, #8]
 800707a:	4a26      	ldr	r2, [pc, #152]	; (8007114 <USB_SetTurnaroundTime+0x134>)
 800707c:	4293      	cmp	r3, r2
 800707e:	d906      	bls.n	800708e <USB_SetTurnaroundTime+0xae>
 8007080:	68bb      	ldr	r3, [r7, #8]
 8007082:	4a25      	ldr	r2, [pc, #148]	; (8007118 <USB_SetTurnaroundTime+0x138>)
 8007084:	4293      	cmp	r3, r2
 8007086:	d202      	bcs.n	800708e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8007088:	2309      	movs	r3, #9
 800708a:	617b      	str	r3, [r7, #20]
 800708c:	e020      	b.n	80070d0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800708e:	68bb      	ldr	r3, [r7, #8]
 8007090:	4a21      	ldr	r2, [pc, #132]	; (8007118 <USB_SetTurnaroundTime+0x138>)
 8007092:	4293      	cmp	r3, r2
 8007094:	d306      	bcc.n	80070a4 <USB_SetTurnaroundTime+0xc4>
 8007096:	68bb      	ldr	r3, [r7, #8]
 8007098:	4a20      	ldr	r2, [pc, #128]	; (800711c <USB_SetTurnaroundTime+0x13c>)
 800709a:	4293      	cmp	r3, r2
 800709c:	d802      	bhi.n	80070a4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800709e:	2308      	movs	r3, #8
 80070a0:	617b      	str	r3, [r7, #20]
 80070a2:	e015      	b.n	80070d0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80070a4:	68bb      	ldr	r3, [r7, #8]
 80070a6:	4a1d      	ldr	r2, [pc, #116]	; (800711c <USB_SetTurnaroundTime+0x13c>)
 80070a8:	4293      	cmp	r3, r2
 80070aa:	d906      	bls.n	80070ba <USB_SetTurnaroundTime+0xda>
 80070ac:	68bb      	ldr	r3, [r7, #8]
 80070ae:	4a1c      	ldr	r2, [pc, #112]	; (8007120 <USB_SetTurnaroundTime+0x140>)
 80070b0:	4293      	cmp	r3, r2
 80070b2:	d202      	bcs.n	80070ba <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80070b4:	2307      	movs	r3, #7
 80070b6:	617b      	str	r3, [r7, #20]
 80070b8:	e00a      	b.n	80070d0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80070ba:	2306      	movs	r3, #6
 80070bc:	617b      	str	r3, [r7, #20]
 80070be:	e007      	b.n	80070d0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80070c0:	79fb      	ldrb	r3, [r7, #7]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d102      	bne.n	80070cc <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80070c6:	2309      	movs	r3, #9
 80070c8:	617b      	str	r3, [r7, #20]
 80070ca:	e001      	b.n	80070d0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80070cc:	2309      	movs	r3, #9
 80070ce:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	68db      	ldr	r3, [r3, #12]
 80070d4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	68da      	ldr	r2, [r3, #12]
 80070e0:	697b      	ldr	r3, [r7, #20]
 80070e2:	029b      	lsls	r3, r3, #10
 80070e4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80070e8:	431a      	orrs	r2, r3
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80070ee:	2300      	movs	r3, #0
}
 80070f0:	4618      	mov	r0, r3
 80070f2:	371c      	adds	r7, #28
 80070f4:	46bd      	mov	sp, r7
 80070f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fa:	4770      	bx	lr
 80070fc:	00d8acbf 	.word	0x00d8acbf
 8007100:	00e4e1c0 	.word	0x00e4e1c0
 8007104:	00f42400 	.word	0x00f42400
 8007108:	01067380 	.word	0x01067380
 800710c:	011a499f 	.word	0x011a499f
 8007110:	01312cff 	.word	0x01312cff
 8007114:	014ca43f 	.word	0x014ca43f
 8007118:	016e3600 	.word	0x016e3600
 800711c:	01a6ab1f 	.word	0x01a6ab1f
 8007120:	01e84800 	.word	0x01e84800

08007124 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007124:	b480      	push	{r7}
 8007126:	b083      	sub	sp, #12
 8007128:	af00      	add	r7, sp, #0
 800712a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	689b      	ldr	r3, [r3, #8]
 8007130:	f043 0201 	orr.w	r2, r3, #1
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007138:	2300      	movs	r3, #0
}
 800713a:	4618      	mov	r0, r3
 800713c:	370c      	adds	r7, #12
 800713e:	46bd      	mov	sp, r7
 8007140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007144:	4770      	bx	lr

08007146 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007146:	b480      	push	{r7}
 8007148:	b083      	sub	sp, #12
 800714a:	af00      	add	r7, sp, #0
 800714c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	689b      	ldr	r3, [r3, #8]
 8007152:	f023 0201 	bic.w	r2, r3, #1
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800715a:	2300      	movs	r3, #0
}
 800715c:	4618      	mov	r0, r3
 800715e:	370c      	adds	r7, #12
 8007160:	46bd      	mov	sp, r7
 8007162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007166:	4770      	bx	lr

08007168 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007168:	b580      	push	{r7, lr}
 800716a:	b084      	sub	sp, #16
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]
 8007170:	460b      	mov	r3, r1
 8007172:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007174:	2300      	movs	r3, #0
 8007176:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	68db      	ldr	r3, [r3, #12]
 800717c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007184:	78fb      	ldrb	r3, [r7, #3]
 8007186:	2b01      	cmp	r3, #1
 8007188:	d115      	bne.n	80071b6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	68db      	ldr	r3, [r3, #12]
 800718e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007196:	2001      	movs	r0, #1
 8007198:	f7fa fed6 	bl	8001f48 <HAL_Delay>
      ms++;
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	3301      	adds	r3, #1
 80071a0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80071a2:	6878      	ldr	r0, [r7, #4]
 80071a4:	f001 fa4b 	bl	800863e <USB_GetMode>
 80071a8:	4603      	mov	r3, r0
 80071aa:	2b01      	cmp	r3, #1
 80071ac:	d01e      	beq.n	80071ec <USB_SetCurrentMode+0x84>
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	2b31      	cmp	r3, #49	; 0x31
 80071b2:	d9f0      	bls.n	8007196 <USB_SetCurrentMode+0x2e>
 80071b4:	e01a      	b.n	80071ec <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80071b6:	78fb      	ldrb	r3, [r7, #3]
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d115      	bne.n	80071e8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	68db      	ldr	r3, [r3, #12]
 80071c0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80071c8:	2001      	movs	r0, #1
 80071ca:	f7fa febd 	bl	8001f48 <HAL_Delay>
      ms++;
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	3301      	adds	r3, #1
 80071d2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80071d4:	6878      	ldr	r0, [r7, #4]
 80071d6:	f001 fa32 	bl	800863e <USB_GetMode>
 80071da:	4603      	mov	r3, r0
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d005      	beq.n	80071ec <USB_SetCurrentMode+0x84>
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	2b31      	cmp	r3, #49	; 0x31
 80071e4:	d9f0      	bls.n	80071c8 <USB_SetCurrentMode+0x60>
 80071e6:	e001      	b.n	80071ec <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80071e8:	2301      	movs	r3, #1
 80071ea:	e005      	b.n	80071f8 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	2b32      	cmp	r3, #50	; 0x32
 80071f0:	d101      	bne.n	80071f6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80071f2:	2301      	movs	r3, #1
 80071f4:	e000      	b.n	80071f8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80071f6:	2300      	movs	r3, #0
}
 80071f8:	4618      	mov	r0, r3
 80071fa:	3710      	adds	r7, #16
 80071fc:	46bd      	mov	sp, r7
 80071fe:	bd80      	pop	{r7, pc}

08007200 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007200:	b084      	sub	sp, #16
 8007202:	b580      	push	{r7, lr}
 8007204:	b086      	sub	sp, #24
 8007206:	af00      	add	r7, sp, #0
 8007208:	6078      	str	r0, [r7, #4]
 800720a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800720e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007212:	2300      	movs	r3, #0
 8007214:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800721a:	2300      	movs	r3, #0
 800721c:	613b      	str	r3, [r7, #16]
 800721e:	e009      	b.n	8007234 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007220:	687a      	ldr	r2, [r7, #4]
 8007222:	693b      	ldr	r3, [r7, #16]
 8007224:	3340      	adds	r3, #64	; 0x40
 8007226:	009b      	lsls	r3, r3, #2
 8007228:	4413      	add	r3, r2
 800722a:	2200      	movs	r2, #0
 800722c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800722e:	693b      	ldr	r3, [r7, #16]
 8007230:	3301      	adds	r3, #1
 8007232:	613b      	str	r3, [r7, #16]
 8007234:	693b      	ldr	r3, [r7, #16]
 8007236:	2b0e      	cmp	r3, #14
 8007238:	d9f2      	bls.n	8007220 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800723a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800723c:	2b00      	cmp	r3, #0
 800723e:	d11c      	bne.n	800727a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007246:	685b      	ldr	r3, [r3, #4]
 8007248:	68fa      	ldr	r2, [r7, #12]
 800724a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800724e:	f043 0302 	orr.w	r3, r3, #2
 8007252:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007258:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	601a      	str	r2, [r3, #0]
 8007278:	e005      	b.n	8007286 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800727e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800728c:	461a      	mov	r2, r3
 800728e:	2300      	movs	r3, #0
 8007290:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007298:	4619      	mov	r1, r3
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072a0:	461a      	mov	r2, r3
 80072a2:	680b      	ldr	r3, [r1, #0]
 80072a4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80072a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072a8:	2b01      	cmp	r3, #1
 80072aa:	d10c      	bne.n	80072c6 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80072ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d104      	bne.n	80072bc <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80072b2:	2100      	movs	r1, #0
 80072b4:	6878      	ldr	r0, [r7, #4]
 80072b6:	f000 f965 	bl	8007584 <USB_SetDevSpeed>
 80072ba:	e008      	b.n	80072ce <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80072bc:	2101      	movs	r1, #1
 80072be:	6878      	ldr	r0, [r7, #4]
 80072c0:	f000 f960 	bl	8007584 <USB_SetDevSpeed>
 80072c4:	e003      	b.n	80072ce <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80072c6:	2103      	movs	r1, #3
 80072c8:	6878      	ldr	r0, [r7, #4]
 80072ca:	f000 f95b 	bl	8007584 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80072ce:	2110      	movs	r1, #16
 80072d0:	6878      	ldr	r0, [r7, #4]
 80072d2:	f000 f8f3 	bl	80074bc <USB_FlushTxFifo>
 80072d6:	4603      	mov	r3, r0
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d001      	beq.n	80072e0 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80072dc:	2301      	movs	r3, #1
 80072de:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80072e0:	6878      	ldr	r0, [r7, #4]
 80072e2:	f000 f91f 	bl	8007524 <USB_FlushRxFifo>
 80072e6:	4603      	mov	r3, r0
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d001      	beq.n	80072f0 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80072ec:	2301      	movs	r3, #1
 80072ee:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072f6:	461a      	mov	r2, r3
 80072f8:	2300      	movs	r3, #0
 80072fa:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007302:	461a      	mov	r2, r3
 8007304:	2300      	movs	r3, #0
 8007306:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800730e:	461a      	mov	r2, r3
 8007310:	2300      	movs	r3, #0
 8007312:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007314:	2300      	movs	r3, #0
 8007316:	613b      	str	r3, [r7, #16]
 8007318:	e043      	b.n	80073a2 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800731a:	693b      	ldr	r3, [r7, #16]
 800731c:	015a      	lsls	r2, r3, #5
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	4413      	add	r3, r2
 8007322:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800732c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007330:	d118      	bne.n	8007364 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8007332:	693b      	ldr	r3, [r7, #16]
 8007334:	2b00      	cmp	r3, #0
 8007336:	d10a      	bne.n	800734e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007338:	693b      	ldr	r3, [r7, #16]
 800733a:	015a      	lsls	r2, r3, #5
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	4413      	add	r3, r2
 8007340:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007344:	461a      	mov	r2, r3
 8007346:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800734a:	6013      	str	r3, [r2, #0]
 800734c:	e013      	b.n	8007376 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800734e:	693b      	ldr	r3, [r7, #16]
 8007350:	015a      	lsls	r2, r3, #5
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	4413      	add	r3, r2
 8007356:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800735a:	461a      	mov	r2, r3
 800735c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007360:	6013      	str	r3, [r2, #0]
 8007362:	e008      	b.n	8007376 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007364:	693b      	ldr	r3, [r7, #16]
 8007366:	015a      	lsls	r2, r3, #5
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	4413      	add	r3, r2
 800736c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007370:	461a      	mov	r2, r3
 8007372:	2300      	movs	r3, #0
 8007374:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007376:	693b      	ldr	r3, [r7, #16]
 8007378:	015a      	lsls	r2, r3, #5
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	4413      	add	r3, r2
 800737e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007382:	461a      	mov	r2, r3
 8007384:	2300      	movs	r3, #0
 8007386:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007388:	693b      	ldr	r3, [r7, #16]
 800738a:	015a      	lsls	r2, r3, #5
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	4413      	add	r3, r2
 8007390:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007394:	461a      	mov	r2, r3
 8007396:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800739a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800739c:	693b      	ldr	r3, [r7, #16]
 800739e:	3301      	adds	r3, #1
 80073a0:	613b      	str	r3, [r7, #16]
 80073a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073a4:	693a      	ldr	r2, [r7, #16]
 80073a6:	429a      	cmp	r2, r3
 80073a8:	d3b7      	bcc.n	800731a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80073aa:	2300      	movs	r3, #0
 80073ac:	613b      	str	r3, [r7, #16]
 80073ae:	e043      	b.n	8007438 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80073b0:	693b      	ldr	r3, [r7, #16]
 80073b2:	015a      	lsls	r2, r3, #5
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	4413      	add	r3, r2
 80073b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80073c2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80073c6:	d118      	bne.n	80073fa <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80073c8:	693b      	ldr	r3, [r7, #16]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d10a      	bne.n	80073e4 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80073ce:	693b      	ldr	r3, [r7, #16]
 80073d0:	015a      	lsls	r2, r3, #5
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	4413      	add	r3, r2
 80073d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073da:	461a      	mov	r2, r3
 80073dc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80073e0:	6013      	str	r3, [r2, #0]
 80073e2:	e013      	b.n	800740c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80073e4:	693b      	ldr	r3, [r7, #16]
 80073e6:	015a      	lsls	r2, r3, #5
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	4413      	add	r3, r2
 80073ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073f0:	461a      	mov	r2, r3
 80073f2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80073f6:	6013      	str	r3, [r2, #0]
 80073f8:	e008      	b.n	800740c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80073fa:	693b      	ldr	r3, [r7, #16]
 80073fc:	015a      	lsls	r2, r3, #5
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	4413      	add	r3, r2
 8007402:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007406:	461a      	mov	r2, r3
 8007408:	2300      	movs	r3, #0
 800740a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800740c:	693b      	ldr	r3, [r7, #16]
 800740e:	015a      	lsls	r2, r3, #5
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	4413      	add	r3, r2
 8007414:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007418:	461a      	mov	r2, r3
 800741a:	2300      	movs	r3, #0
 800741c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800741e:	693b      	ldr	r3, [r7, #16]
 8007420:	015a      	lsls	r2, r3, #5
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	4413      	add	r3, r2
 8007426:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800742a:	461a      	mov	r2, r3
 800742c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007430:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007432:	693b      	ldr	r3, [r7, #16]
 8007434:	3301      	adds	r3, #1
 8007436:	613b      	str	r3, [r7, #16]
 8007438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800743a:	693a      	ldr	r2, [r7, #16]
 800743c:	429a      	cmp	r2, r3
 800743e:	d3b7      	bcc.n	80073b0 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007446:	691b      	ldr	r3, [r3, #16]
 8007448:	68fa      	ldr	r2, [r7, #12]
 800744a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800744e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007452:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2200      	movs	r2, #0
 8007458:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007460:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007464:	2b00      	cmp	r3, #0
 8007466:	d105      	bne.n	8007474 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	699b      	ldr	r3, [r3, #24]
 800746c:	f043 0210 	orr.w	r2, r3, #16
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	699a      	ldr	r2, [r3, #24]
 8007478:	4b0e      	ldr	r3, [pc, #56]	; (80074b4 <USB_DevInit+0x2b4>)
 800747a:	4313      	orrs	r3, r2
 800747c:	687a      	ldr	r2, [r7, #4]
 800747e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007480:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007482:	2b00      	cmp	r3, #0
 8007484:	d005      	beq.n	8007492 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	699b      	ldr	r3, [r3, #24]
 800748a:	f043 0208 	orr.w	r2, r3, #8
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007492:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007494:	2b01      	cmp	r3, #1
 8007496:	d105      	bne.n	80074a4 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	699a      	ldr	r2, [r3, #24]
 800749c:	4b06      	ldr	r3, [pc, #24]	; (80074b8 <USB_DevInit+0x2b8>)
 800749e:	4313      	orrs	r3, r2
 80074a0:	687a      	ldr	r2, [r7, #4]
 80074a2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80074a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80074a6:	4618      	mov	r0, r3
 80074a8:	3718      	adds	r7, #24
 80074aa:	46bd      	mov	sp, r7
 80074ac:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80074b0:	b004      	add	sp, #16
 80074b2:	4770      	bx	lr
 80074b4:	803c3800 	.word	0x803c3800
 80074b8:	40000004 	.word	0x40000004

080074bc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80074bc:	b480      	push	{r7}
 80074be:	b085      	sub	sp, #20
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	6078      	str	r0, [r7, #4]
 80074c4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80074c6:	2300      	movs	r3, #0
 80074c8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	3301      	adds	r3, #1
 80074ce:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	4a13      	ldr	r2, [pc, #76]	; (8007520 <USB_FlushTxFifo+0x64>)
 80074d4:	4293      	cmp	r3, r2
 80074d6:	d901      	bls.n	80074dc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80074d8:	2303      	movs	r3, #3
 80074da:	e01b      	b.n	8007514 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	691b      	ldr	r3, [r3, #16]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	daf2      	bge.n	80074ca <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80074e4:	2300      	movs	r3, #0
 80074e6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80074e8:	683b      	ldr	r3, [r7, #0]
 80074ea:	019b      	lsls	r3, r3, #6
 80074ec:	f043 0220 	orr.w	r2, r3, #32
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	3301      	adds	r3, #1
 80074f8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	4a08      	ldr	r2, [pc, #32]	; (8007520 <USB_FlushTxFifo+0x64>)
 80074fe:	4293      	cmp	r3, r2
 8007500:	d901      	bls.n	8007506 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007502:	2303      	movs	r3, #3
 8007504:	e006      	b.n	8007514 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	691b      	ldr	r3, [r3, #16]
 800750a:	f003 0320 	and.w	r3, r3, #32
 800750e:	2b20      	cmp	r3, #32
 8007510:	d0f0      	beq.n	80074f4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007512:	2300      	movs	r3, #0
}
 8007514:	4618      	mov	r0, r3
 8007516:	3714      	adds	r7, #20
 8007518:	46bd      	mov	sp, r7
 800751a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751e:	4770      	bx	lr
 8007520:	00030d40 	.word	0x00030d40

08007524 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007524:	b480      	push	{r7}
 8007526:	b085      	sub	sp, #20
 8007528:	af00      	add	r7, sp, #0
 800752a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800752c:	2300      	movs	r3, #0
 800752e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	3301      	adds	r3, #1
 8007534:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	4a11      	ldr	r2, [pc, #68]	; (8007580 <USB_FlushRxFifo+0x5c>)
 800753a:	4293      	cmp	r3, r2
 800753c:	d901      	bls.n	8007542 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800753e:	2303      	movs	r3, #3
 8007540:	e018      	b.n	8007574 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	691b      	ldr	r3, [r3, #16]
 8007546:	2b00      	cmp	r3, #0
 8007548:	daf2      	bge.n	8007530 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800754a:	2300      	movs	r3, #0
 800754c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	2210      	movs	r2, #16
 8007552:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	3301      	adds	r3, #1
 8007558:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	4a08      	ldr	r2, [pc, #32]	; (8007580 <USB_FlushRxFifo+0x5c>)
 800755e:	4293      	cmp	r3, r2
 8007560:	d901      	bls.n	8007566 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007562:	2303      	movs	r3, #3
 8007564:	e006      	b.n	8007574 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	691b      	ldr	r3, [r3, #16]
 800756a:	f003 0310 	and.w	r3, r3, #16
 800756e:	2b10      	cmp	r3, #16
 8007570:	d0f0      	beq.n	8007554 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007572:	2300      	movs	r3, #0
}
 8007574:	4618      	mov	r0, r3
 8007576:	3714      	adds	r7, #20
 8007578:	46bd      	mov	sp, r7
 800757a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757e:	4770      	bx	lr
 8007580:	00030d40 	.word	0x00030d40

08007584 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007584:	b480      	push	{r7}
 8007586:	b085      	sub	sp, #20
 8007588:	af00      	add	r7, sp, #0
 800758a:	6078      	str	r0, [r7, #4]
 800758c:	460b      	mov	r3, r1
 800758e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800759a:	681a      	ldr	r2, [r3, #0]
 800759c:	78fb      	ldrb	r3, [r7, #3]
 800759e:	68f9      	ldr	r1, [r7, #12]
 80075a0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80075a4:	4313      	orrs	r3, r2
 80075a6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80075a8:	2300      	movs	r3, #0
}
 80075aa:	4618      	mov	r0, r3
 80075ac:	3714      	adds	r7, #20
 80075ae:	46bd      	mov	sp, r7
 80075b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b4:	4770      	bx	lr

080075b6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80075b6:	b480      	push	{r7}
 80075b8:	b087      	sub	sp, #28
 80075ba:	af00      	add	r7, sp, #0
 80075bc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80075c2:	693b      	ldr	r3, [r7, #16]
 80075c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075c8:	689b      	ldr	r3, [r3, #8]
 80075ca:	f003 0306 	and.w	r3, r3, #6
 80075ce:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d102      	bne.n	80075dc <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80075d6:	2300      	movs	r3, #0
 80075d8:	75fb      	strb	r3, [r7, #23]
 80075da:	e00a      	b.n	80075f2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	2b02      	cmp	r3, #2
 80075e0:	d002      	beq.n	80075e8 <USB_GetDevSpeed+0x32>
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	2b06      	cmp	r3, #6
 80075e6:	d102      	bne.n	80075ee <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80075e8:	2302      	movs	r3, #2
 80075ea:	75fb      	strb	r3, [r7, #23]
 80075ec:	e001      	b.n	80075f2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80075ee:	230f      	movs	r3, #15
 80075f0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80075f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80075f4:	4618      	mov	r0, r3
 80075f6:	371c      	adds	r7, #28
 80075f8:	46bd      	mov	sp, r7
 80075fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075fe:	4770      	bx	lr

08007600 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007600:	b480      	push	{r7}
 8007602:	b085      	sub	sp, #20
 8007604:	af00      	add	r7, sp, #0
 8007606:	6078      	str	r0, [r7, #4]
 8007608:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800760e:	683b      	ldr	r3, [r7, #0]
 8007610:	781b      	ldrb	r3, [r3, #0]
 8007612:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007614:	683b      	ldr	r3, [r7, #0]
 8007616:	785b      	ldrb	r3, [r3, #1]
 8007618:	2b01      	cmp	r3, #1
 800761a:	d139      	bne.n	8007690 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007622:	69da      	ldr	r2, [r3, #28]
 8007624:	683b      	ldr	r3, [r7, #0]
 8007626:	781b      	ldrb	r3, [r3, #0]
 8007628:	f003 030f 	and.w	r3, r3, #15
 800762c:	2101      	movs	r1, #1
 800762e:	fa01 f303 	lsl.w	r3, r1, r3
 8007632:	b29b      	uxth	r3, r3
 8007634:	68f9      	ldr	r1, [r7, #12]
 8007636:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800763a:	4313      	orrs	r3, r2
 800763c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800763e:	68bb      	ldr	r3, [r7, #8]
 8007640:	015a      	lsls	r2, r3, #5
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	4413      	add	r3, r2
 8007646:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007650:	2b00      	cmp	r3, #0
 8007652:	d153      	bne.n	80076fc <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007654:	68bb      	ldr	r3, [r7, #8]
 8007656:	015a      	lsls	r2, r3, #5
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	4413      	add	r3, r2
 800765c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007660:	681a      	ldr	r2, [r3, #0]
 8007662:	683b      	ldr	r3, [r7, #0]
 8007664:	68db      	ldr	r3, [r3, #12]
 8007666:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800766a:	683b      	ldr	r3, [r7, #0]
 800766c:	791b      	ldrb	r3, [r3, #4]
 800766e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007670:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007672:	68bb      	ldr	r3, [r7, #8]
 8007674:	059b      	lsls	r3, r3, #22
 8007676:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007678:	431a      	orrs	r2, r3
 800767a:	68bb      	ldr	r3, [r7, #8]
 800767c:	0159      	lsls	r1, r3, #5
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	440b      	add	r3, r1
 8007682:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007686:	4619      	mov	r1, r3
 8007688:	4b20      	ldr	r3, [pc, #128]	; (800770c <USB_ActivateEndpoint+0x10c>)
 800768a:	4313      	orrs	r3, r2
 800768c:	600b      	str	r3, [r1, #0]
 800768e:	e035      	b.n	80076fc <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007696:	69da      	ldr	r2, [r3, #28]
 8007698:	683b      	ldr	r3, [r7, #0]
 800769a:	781b      	ldrb	r3, [r3, #0]
 800769c:	f003 030f 	and.w	r3, r3, #15
 80076a0:	2101      	movs	r1, #1
 80076a2:	fa01 f303 	lsl.w	r3, r1, r3
 80076a6:	041b      	lsls	r3, r3, #16
 80076a8:	68f9      	ldr	r1, [r7, #12]
 80076aa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80076ae:	4313      	orrs	r3, r2
 80076b0:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80076b2:	68bb      	ldr	r3, [r7, #8]
 80076b4:	015a      	lsls	r2, r3, #5
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	4413      	add	r3, r2
 80076ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d119      	bne.n	80076fc <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80076c8:	68bb      	ldr	r3, [r7, #8]
 80076ca:	015a      	lsls	r2, r3, #5
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	4413      	add	r3, r2
 80076d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076d4:	681a      	ldr	r2, [r3, #0]
 80076d6:	683b      	ldr	r3, [r7, #0]
 80076d8:	68db      	ldr	r3, [r3, #12]
 80076da:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80076de:	683b      	ldr	r3, [r7, #0]
 80076e0:	791b      	ldrb	r3, [r3, #4]
 80076e2:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80076e4:	430b      	orrs	r3, r1
 80076e6:	431a      	orrs	r2, r3
 80076e8:	68bb      	ldr	r3, [r7, #8]
 80076ea:	0159      	lsls	r1, r3, #5
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	440b      	add	r3, r1
 80076f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076f4:	4619      	mov	r1, r3
 80076f6:	4b05      	ldr	r3, [pc, #20]	; (800770c <USB_ActivateEndpoint+0x10c>)
 80076f8:	4313      	orrs	r3, r2
 80076fa:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80076fc:	2300      	movs	r3, #0
}
 80076fe:	4618      	mov	r0, r3
 8007700:	3714      	adds	r7, #20
 8007702:	46bd      	mov	sp, r7
 8007704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007708:	4770      	bx	lr
 800770a:	bf00      	nop
 800770c:	10008000 	.word	0x10008000

08007710 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007710:	b480      	push	{r7}
 8007712:	b085      	sub	sp, #20
 8007714:	af00      	add	r7, sp, #0
 8007716:	6078      	str	r0, [r7, #4]
 8007718:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800771e:	683b      	ldr	r3, [r7, #0]
 8007720:	781b      	ldrb	r3, [r3, #0]
 8007722:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8007724:	683b      	ldr	r3, [r7, #0]
 8007726:	785b      	ldrb	r3, [r3, #1]
 8007728:	2b01      	cmp	r3, #1
 800772a:	d161      	bne.n	80077f0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800772c:	68bb      	ldr	r3, [r7, #8]
 800772e:	015a      	lsls	r2, r3, #5
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	4413      	add	r3, r2
 8007734:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800773e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007742:	d11f      	bne.n	8007784 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007744:	68bb      	ldr	r3, [r7, #8]
 8007746:	015a      	lsls	r2, r3, #5
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	4413      	add	r3, r2
 800774c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	68ba      	ldr	r2, [r7, #8]
 8007754:	0151      	lsls	r1, r2, #5
 8007756:	68fa      	ldr	r2, [r7, #12]
 8007758:	440a      	add	r2, r1
 800775a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800775e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007762:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8007764:	68bb      	ldr	r3, [r7, #8]
 8007766:	015a      	lsls	r2, r3, #5
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	4413      	add	r3, r2
 800776c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	68ba      	ldr	r2, [r7, #8]
 8007774:	0151      	lsls	r1, r2, #5
 8007776:	68fa      	ldr	r2, [r7, #12]
 8007778:	440a      	add	r2, r1
 800777a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800777e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007782:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800778a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800778c:	683b      	ldr	r3, [r7, #0]
 800778e:	781b      	ldrb	r3, [r3, #0]
 8007790:	f003 030f 	and.w	r3, r3, #15
 8007794:	2101      	movs	r1, #1
 8007796:	fa01 f303 	lsl.w	r3, r1, r3
 800779a:	b29b      	uxth	r3, r3
 800779c:	43db      	mvns	r3, r3
 800779e:	68f9      	ldr	r1, [r7, #12]
 80077a0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80077a4:	4013      	ands	r3, r2
 80077a6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077ae:	69da      	ldr	r2, [r3, #28]
 80077b0:	683b      	ldr	r3, [r7, #0]
 80077b2:	781b      	ldrb	r3, [r3, #0]
 80077b4:	f003 030f 	and.w	r3, r3, #15
 80077b8:	2101      	movs	r1, #1
 80077ba:	fa01 f303 	lsl.w	r3, r1, r3
 80077be:	b29b      	uxth	r3, r3
 80077c0:	43db      	mvns	r3, r3
 80077c2:	68f9      	ldr	r1, [r7, #12]
 80077c4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80077c8:	4013      	ands	r3, r2
 80077ca:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80077cc:	68bb      	ldr	r3, [r7, #8]
 80077ce:	015a      	lsls	r2, r3, #5
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	4413      	add	r3, r2
 80077d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077d8:	681a      	ldr	r2, [r3, #0]
 80077da:	68bb      	ldr	r3, [r7, #8]
 80077dc:	0159      	lsls	r1, r3, #5
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	440b      	add	r3, r1
 80077e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077e6:	4619      	mov	r1, r3
 80077e8:	4b35      	ldr	r3, [pc, #212]	; (80078c0 <USB_DeactivateEndpoint+0x1b0>)
 80077ea:	4013      	ands	r3, r2
 80077ec:	600b      	str	r3, [r1, #0]
 80077ee:	e060      	b.n	80078b2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80077f0:	68bb      	ldr	r3, [r7, #8]
 80077f2:	015a      	lsls	r2, r3, #5
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	4413      	add	r3, r2
 80077f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007802:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007806:	d11f      	bne.n	8007848 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007808:	68bb      	ldr	r3, [r7, #8]
 800780a:	015a      	lsls	r2, r3, #5
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	4413      	add	r3, r2
 8007810:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	68ba      	ldr	r2, [r7, #8]
 8007818:	0151      	lsls	r1, r2, #5
 800781a:	68fa      	ldr	r2, [r7, #12]
 800781c:	440a      	add	r2, r1
 800781e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007822:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007826:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8007828:	68bb      	ldr	r3, [r7, #8]
 800782a:	015a      	lsls	r2, r3, #5
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	4413      	add	r3, r2
 8007830:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	68ba      	ldr	r2, [r7, #8]
 8007838:	0151      	lsls	r1, r2, #5
 800783a:	68fa      	ldr	r2, [r7, #12]
 800783c:	440a      	add	r2, r1
 800783e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007842:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007846:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800784e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007850:	683b      	ldr	r3, [r7, #0]
 8007852:	781b      	ldrb	r3, [r3, #0]
 8007854:	f003 030f 	and.w	r3, r3, #15
 8007858:	2101      	movs	r1, #1
 800785a:	fa01 f303 	lsl.w	r3, r1, r3
 800785e:	041b      	lsls	r3, r3, #16
 8007860:	43db      	mvns	r3, r3
 8007862:	68f9      	ldr	r1, [r7, #12]
 8007864:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007868:	4013      	ands	r3, r2
 800786a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007872:	69da      	ldr	r2, [r3, #28]
 8007874:	683b      	ldr	r3, [r7, #0]
 8007876:	781b      	ldrb	r3, [r3, #0]
 8007878:	f003 030f 	and.w	r3, r3, #15
 800787c:	2101      	movs	r1, #1
 800787e:	fa01 f303 	lsl.w	r3, r1, r3
 8007882:	041b      	lsls	r3, r3, #16
 8007884:	43db      	mvns	r3, r3
 8007886:	68f9      	ldr	r1, [r7, #12]
 8007888:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800788c:	4013      	ands	r3, r2
 800788e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8007890:	68bb      	ldr	r3, [r7, #8]
 8007892:	015a      	lsls	r2, r3, #5
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	4413      	add	r3, r2
 8007898:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800789c:	681a      	ldr	r2, [r3, #0]
 800789e:	68bb      	ldr	r3, [r7, #8]
 80078a0:	0159      	lsls	r1, r3, #5
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	440b      	add	r3, r1
 80078a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078aa:	4619      	mov	r1, r3
 80078ac:	4b05      	ldr	r3, [pc, #20]	; (80078c4 <USB_DeactivateEndpoint+0x1b4>)
 80078ae:	4013      	ands	r3, r2
 80078b0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80078b2:	2300      	movs	r3, #0
}
 80078b4:	4618      	mov	r0, r3
 80078b6:	3714      	adds	r7, #20
 80078b8:	46bd      	mov	sp, r7
 80078ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078be:	4770      	bx	lr
 80078c0:	ec337800 	.word	0xec337800
 80078c4:	eff37800 	.word	0xeff37800

080078c8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80078c8:	b580      	push	{r7, lr}
 80078ca:	b08a      	sub	sp, #40	; 0x28
 80078cc:	af02      	add	r7, sp, #8
 80078ce:	60f8      	str	r0, [r7, #12]
 80078d0:	60b9      	str	r1, [r7, #8]
 80078d2:	4613      	mov	r3, r2
 80078d4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80078da:	68bb      	ldr	r3, [r7, #8]
 80078dc:	781b      	ldrb	r3, [r3, #0]
 80078de:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80078e0:	68bb      	ldr	r3, [r7, #8]
 80078e2:	785b      	ldrb	r3, [r3, #1]
 80078e4:	2b01      	cmp	r3, #1
 80078e6:	f040 8163 	bne.w	8007bb0 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80078ea:	68bb      	ldr	r3, [r7, #8]
 80078ec:	699b      	ldr	r3, [r3, #24]
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d132      	bne.n	8007958 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80078f2:	69bb      	ldr	r3, [r7, #24]
 80078f4:	015a      	lsls	r2, r3, #5
 80078f6:	69fb      	ldr	r3, [r7, #28]
 80078f8:	4413      	add	r3, r2
 80078fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078fe:	691a      	ldr	r2, [r3, #16]
 8007900:	69bb      	ldr	r3, [r7, #24]
 8007902:	0159      	lsls	r1, r3, #5
 8007904:	69fb      	ldr	r3, [r7, #28]
 8007906:	440b      	add	r3, r1
 8007908:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800790c:	4619      	mov	r1, r3
 800790e:	4ba5      	ldr	r3, [pc, #660]	; (8007ba4 <USB_EPStartXfer+0x2dc>)
 8007910:	4013      	ands	r3, r2
 8007912:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007914:	69bb      	ldr	r3, [r7, #24]
 8007916:	015a      	lsls	r2, r3, #5
 8007918:	69fb      	ldr	r3, [r7, #28]
 800791a:	4413      	add	r3, r2
 800791c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007920:	691b      	ldr	r3, [r3, #16]
 8007922:	69ba      	ldr	r2, [r7, #24]
 8007924:	0151      	lsls	r1, r2, #5
 8007926:	69fa      	ldr	r2, [r7, #28]
 8007928:	440a      	add	r2, r1
 800792a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800792e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007932:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007934:	69bb      	ldr	r3, [r7, #24]
 8007936:	015a      	lsls	r2, r3, #5
 8007938:	69fb      	ldr	r3, [r7, #28]
 800793a:	4413      	add	r3, r2
 800793c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007940:	691a      	ldr	r2, [r3, #16]
 8007942:	69bb      	ldr	r3, [r7, #24]
 8007944:	0159      	lsls	r1, r3, #5
 8007946:	69fb      	ldr	r3, [r7, #28]
 8007948:	440b      	add	r3, r1
 800794a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800794e:	4619      	mov	r1, r3
 8007950:	4b95      	ldr	r3, [pc, #596]	; (8007ba8 <USB_EPStartXfer+0x2e0>)
 8007952:	4013      	ands	r3, r2
 8007954:	610b      	str	r3, [r1, #16]
 8007956:	e074      	b.n	8007a42 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007958:	69bb      	ldr	r3, [r7, #24]
 800795a:	015a      	lsls	r2, r3, #5
 800795c:	69fb      	ldr	r3, [r7, #28]
 800795e:	4413      	add	r3, r2
 8007960:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007964:	691a      	ldr	r2, [r3, #16]
 8007966:	69bb      	ldr	r3, [r7, #24]
 8007968:	0159      	lsls	r1, r3, #5
 800796a:	69fb      	ldr	r3, [r7, #28]
 800796c:	440b      	add	r3, r1
 800796e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007972:	4619      	mov	r1, r3
 8007974:	4b8c      	ldr	r3, [pc, #560]	; (8007ba8 <USB_EPStartXfer+0x2e0>)
 8007976:	4013      	ands	r3, r2
 8007978:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800797a:	69bb      	ldr	r3, [r7, #24]
 800797c:	015a      	lsls	r2, r3, #5
 800797e:	69fb      	ldr	r3, [r7, #28]
 8007980:	4413      	add	r3, r2
 8007982:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007986:	691a      	ldr	r2, [r3, #16]
 8007988:	69bb      	ldr	r3, [r7, #24]
 800798a:	0159      	lsls	r1, r3, #5
 800798c:	69fb      	ldr	r3, [r7, #28]
 800798e:	440b      	add	r3, r1
 8007990:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007994:	4619      	mov	r1, r3
 8007996:	4b83      	ldr	r3, [pc, #524]	; (8007ba4 <USB_EPStartXfer+0x2dc>)
 8007998:	4013      	ands	r3, r2
 800799a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800799c:	69bb      	ldr	r3, [r7, #24]
 800799e:	015a      	lsls	r2, r3, #5
 80079a0:	69fb      	ldr	r3, [r7, #28]
 80079a2:	4413      	add	r3, r2
 80079a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079a8:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80079aa:	68bb      	ldr	r3, [r7, #8]
 80079ac:	6999      	ldr	r1, [r3, #24]
 80079ae:	68bb      	ldr	r3, [r7, #8]
 80079b0:	68db      	ldr	r3, [r3, #12]
 80079b2:	440b      	add	r3, r1
 80079b4:	1e59      	subs	r1, r3, #1
 80079b6:	68bb      	ldr	r3, [r7, #8]
 80079b8:	68db      	ldr	r3, [r3, #12]
 80079ba:	fbb1 f3f3 	udiv	r3, r1, r3
 80079be:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80079c0:	4b7a      	ldr	r3, [pc, #488]	; (8007bac <USB_EPStartXfer+0x2e4>)
 80079c2:	400b      	ands	r3, r1
 80079c4:	69b9      	ldr	r1, [r7, #24]
 80079c6:	0148      	lsls	r0, r1, #5
 80079c8:	69f9      	ldr	r1, [r7, #28]
 80079ca:	4401      	add	r1, r0
 80079cc:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80079d0:	4313      	orrs	r3, r2
 80079d2:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80079d4:	69bb      	ldr	r3, [r7, #24]
 80079d6:	015a      	lsls	r2, r3, #5
 80079d8:	69fb      	ldr	r3, [r7, #28]
 80079da:	4413      	add	r3, r2
 80079dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079e0:	691a      	ldr	r2, [r3, #16]
 80079e2:	68bb      	ldr	r3, [r7, #8]
 80079e4:	699b      	ldr	r3, [r3, #24]
 80079e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80079ea:	69b9      	ldr	r1, [r7, #24]
 80079ec:	0148      	lsls	r0, r1, #5
 80079ee:	69f9      	ldr	r1, [r7, #28]
 80079f0:	4401      	add	r1, r0
 80079f2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80079f6:	4313      	orrs	r3, r2
 80079f8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80079fa:	68bb      	ldr	r3, [r7, #8]
 80079fc:	791b      	ldrb	r3, [r3, #4]
 80079fe:	2b01      	cmp	r3, #1
 8007a00:	d11f      	bne.n	8007a42 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8007a02:	69bb      	ldr	r3, [r7, #24]
 8007a04:	015a      	lsls	r2, r3, #5
 8007a06:	69fb      	ldr	r3, [r7, #28]
 8007a08:	4413      	add	r3, r2
 8007a0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a0e:	691b      	ldr	r3, [r3, #16]
 8007a10:	69ba      	ldr	r2, [r7, #24]
 8007a12:	0151      	lsls	r1, r2, #5
 8007a14:	69fa      	ldr	r2, [r7, #28]
 8007a16:	440a      	add	r2, r1
 8007a18:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a1c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8007a20:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8007a22:	69bb      	ldr	r3, [r7, #24]
 8007a24:	015a      	lsls	r2, r3, #5
 8007a26:	69fb      	ldr	r3, [r7, #28]
 8007a28:	4413      	add	r3, r2
 8007a2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a2e:	691b      	ldr	r3, [r3, #16]
 8007a30:	69ba      	ldr	r2, [r7, #24]
 8007a32:	0151      	lsls	r1, r2, #5
 8007a34:	69fa      	ldr	r2, [r7, #28]
 8007a36:	440a      	add	r2, r1
 8007a38:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a3c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007a40:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8007a42:	79fb      	ldrb	r3, [r7, #7]
 8007a44:	2b01      	cmp	r3, #1
 8007a46:	d14b      	bne.n	8007ae0 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007a48:	68bb      	ldr	r3, [r7, #8]
 8007a4a:	695b      	ldr	r3, [r3, #20]
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d009      	beq.n	8007a64 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007a50:	69bb      	ldr	r3, [r7, #24]
 8007a52:	015a      	lsls	r2, r3, #5
 8007a54:	69fb      	ldr	r3, [r7, #28]
 8007a56:	4413      	add	r3, r2
 8007a58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a5c:	461a      	mov	r2, r3
 8007a5e:	68bb      	ldr	r3, [r7, #8]
 8007a60:	695b      	ldr	r3, [r3, #20]
 8007a62:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8007a64:	68bb      	ldr	r3, [r7, #8]
 8007a66:	791b      	ldrb	r3, [r3, #4]
 8007a68:	2b01      	cmp	r3, #1
 8007a6a:	d128      	bne.n	8007abe <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007a6c:	69fb      	ldr	r3, [r7, #28]
 8007a6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a72:	689b      	ldr	r3, [r3, #8]
 8007a74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d110      	bne.n	8007a9e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007a7c:	69bb      	ldr	r3, [r7, #24]
 8007a7e:	015a      	lsls	r2, r3, #5
 8007a80:	69fb      	ldr	r3, [r7, #28]
 8007a82:	4413      	add	r3, r2
 8007a84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	69ba      	ldr	r2, [r7, #24]
 8007a8c:	0151      	lsls	r1, r2, #5
 8007a8e:	69fa      	ldr	r2, [r7, #28]
 8007a90:	440a      	add	r2, r1
 8007a92:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a96:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007a9a:	6013      	str	r3, [r2, #0]
 8007a9c:	e00f      	b.n	8007abe <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007a9e:	69bb      	ldr	r3, [r7, #24]
 8007aa0:	015a      	lsls	r2, r3, #5
 8007aa2:	69fb      	ldr	r3, [r7, #28]
 8007aa4:	4413      	add	r3, r2
 8007aa6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	69ba      	ldr	r2, [r7, #24]
 8007aae:	0151      	lsls	r1, r2, #5
 8007ab0:	69fa      	ldr	r2, [r7, #28]
 8007ab2:	440a      	add	r2, r1
 8007ab4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007ab8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007abc:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007abe:	69bb      	ldr	r3, [r7, #24]
 8007ac0:	015a      	lsls	r2, r3, #5
 8007ac2:	69fb      	ldr	r3, [r7, #28]
 8007ac4:	4413      	add	r3, r2
 8007ac6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	69ba      	ldr	r2, [r7, #24]
 8007ace:	0151      	lsls	r1, r2, #5
 8007ad0:	69fa      	ldr	r2, [r7, #28]
 8007ad2:	440a      	add	r2, r1
 8007ad4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007ad8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007adc:	6013      	str	r3, [r2, #0]
 8007ade:	e137      	b.n	8007d50 <USB_EPStartXfer+0x488>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007ae0:	69bb      	ldr	r3, [r7, #24]
 8007ae2:	015a      	lsls	r2, r3, #5
 8007ae4:	69fb      	ldr	r3, [r7, #28]
 8007ae6:	4413      	add	r3, r2
 8007ae8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	69ba      	ldr	r2, [r7, #24]
 8007af0:	0151      	lsls	r1, r2, #5
 8007af2:	69fa      	ldr	r2, [r7, #28]
 8007af4:	440a      	add	r2, r1
 8007af6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007afa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007afe:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007b00:	68bb      	ldr	r3, [r7, #8]
 8007b02:	791b      	ldrb	r3, [r3, #4]
 8007b04:	2b01      	cmp	r3, #1
 8007b06:	d015      	beq.n	8007b34 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8007b08:	68bb      	ldr	r3, [r7, #8]
 8007b0a:	699b      	ldr	r3, [r3, #24]
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	f000 811f 	beq.w	8007d50 <USB_EPStartXfer+0x488>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007b12:	69fb      	ldr	r3, [r7, #28]
 8007b14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b18:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007b1a:	68bb      	ldr	r3, [r7, #8]
 8007b1c:	781b      	ldrb	r3, [r3, #0]
 8007b1e:	f003 030f 	and.w	r3, r3, #15
 8007b22:	2101      	movs	r1, #1
 8007b24:	fa01 f303 	lsl.w	r3, r1, r3
 8007b28:	69f9      	ldr	r1, [r7, #28]
 8007b2a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007b2e:	4313      	orrs	r3, r2
 8007b30:	634b      	str	r3, [r1, #52]	; 0x34
 8007b32:	e10d      	b.n	8007d50 <USB_EPStartXfer+0x488>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007b34:	69fb      	ldr	r3, [r7, #28]
 8007b36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b3a:	689b      	ldr	r3, [r3, #8]
 8007b3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d110      	bne.n	8007b66 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007b44:	69bb      	ldr	r3, [r7, #24]
 8007b46:	015a      	lsls	r2, r3, #5
 8007b48:	69fb      	ldr	r3, [r7, #28]
 8007b4a:	4413      	add	r3, r2
 8007b4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	69ba      	ldr	r2, [r7, #24]
 8007b54:	0151      	lsls	r1, r2, #5
 8007b56:	69fa      	ldr	r2, [r7, #28]
 8007b58:	440a      	add	r2, r1
 8007b5a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b5e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007b62:	6013      	str	r3, [r2, #0]
 8007b64:	e00f      	b.n	8007b86 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007b66:	69bb      	ldr	r3, [r7, #24]
 8007b68:	015a      	lsls	r2, r3, #5
 8007b6a:	69fb      	ldr	r3, [r7, #28]
 8007b6c:	4413      	add	r3, r2
 8007b6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	69ba      	ldr	r2, [r7, #24]
 8007b76:	0151      	lsls	r1, r2, #5
 8007b78:	69fa      	ldr	r2, [r7, #28]
 8007b7a:	440a      	add	r2, r1
 8007b7c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007b84:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8007b86:	68bb      	ldr	r3, [r7, #8]
 8007b88:	6919      	ldr	r1, [r3, #16]
 8007b8a:	68bb      	ldr	r3, [r7, #8]
 8007b8c:	781a      	ldrb	r2, [r3, #0]
 8007b8e:	68bb      	ldr	r3, [r7, #8]
 8007b90:	699b      	ldr	r3, [r3, #24]
 8007b92:	b298      	uxth	r0, r3
 8007b94:	79fb      	ldrb	r3, [r7, #7]
 8007b96:	9300      	str	r3, [sp, #0]
 8007b98:	4603      	mov	r3, r0
 8007b9a:	68f8      	ldr	r0, [r7, #12]
 8007b9c:	f000 faea 	bl	8008174 <USB_WritePacket>
 8007ba0:	e0d6      	b.n	8007d50 <USB_EPStartXfer+0x488>
 8007ba2:	bf00      	nop
 8007ba4:	e007ffff 	.word	0xe007ffff
 8007ba8:	fff80000 	.word	0xfff80000
 8007bac:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007bb0:	69bb      	ldr	r3, [r7, #24]
 8007bb2:	015a      	lsls	r2, r3, #5
 8007bb4:	69fb      	ldr	r3, [r7, #28]
 8007bb6:	4413      	add	r3, r2
 8007bb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bbc:	691a      	ldr	r2, [r3, #16]
 8007bbe:	69bb      	ldr	r3, [r7, #24]
 8007bc0:	0159      	lsls	r1, r3, #5
 8007bc2:	69fb      	ldr	r3, [r7, #28]
 8007bc4:	440b      	add	r3, r1
 8007bc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bca:	4619      	mov	r1, r3
 8007bcc:	4b63      	ldr	r3, [pc, #396]	; (8007d5c <USB_EPStartXfer+0x494>)
 8007bce:	4013      	ands	r3, r2
 8007bd0:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007bd2:	69bb      	ldr	r3, [r7, #24]
 8007bd4:	015a      	lsls	r2, r3, #5
 8007bd6:	69fb      	ldr	r3, [r7, #28]
 8007bd8:	4413      	add	r3, r2
 8007bda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bde:	691a      	ldr	r2, [r3, #16]
 8007be0:	69bb      	ldr	r3, [r7, #24]
 8007be2:	0159      	lsls	r1, r3, #5
 8007be4:	69fb      	ldr	r3, [r7, #28]
 8007be6:	440b      	add	r3, r1
 8007be8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bec:	4619      	mov	r1, r3
 8007bee:	4b5c      	ldr	r3, [pc, #368]	; (8007d60 <USB_EPStartXfer+0x498>)
 8007bf0:	4013      	ands	r3, r2
 8007bf2:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 8007bf4:	68bb      	ldr	r3, [r7, #8]
 8007bf6:	699b      	ldr	r3, [r3, #24]
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d123      	bne.n	8007c44 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8007bfc:	69bb      	ldr	r3, [r7, #24]
 8007bfe:	015a      	lsls	r2, r3, #5
 8007c00:	69fb      	ldr	r3, [r7, #28]
 8007c02:	4413      	add	r3, r2
 8007c04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c08:	691a      	ldr	r2, [r3, #16]
 8007c0a:	68bb      	ldr	r3, [r7, #8]
 8007c0c:	68db      	ldr	r3, [r3, #12]
 8007c0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007c12:	69b9      	ldr	r1, [r7, #24]
 8007c14:	0148      	lsls	r0, r1, #5
 8007c16:	69f9      	ldr	r1, [r7, #28]
 8007c18:	4401      	add	r1, r0
 8007c1a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007c1e:	4313      	orrs	r3, r2
 8007c20:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007c22:	69bb      	ldr	r3, [r7, #24]
 8007c24:	015a      	lsls	r2, r3, #5
 8007c26:	69fb      	ldr	r3, [r7, #28]
 8007c28:	4413      	add	r3, r2
 8007c2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c2e:	691b      	ldr	r3, [r3, #16]
 8007c30:	69ba      	ldr	r2, [r7, #24]
 8007c32:	0151      	lsls	r1, r2, #5
 8007c34:	69fa      	ldr	r2, [r7, #28]
 8007c36:	440a      	add	r2, r1
 8007c38:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007c3c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007c40:	6113      	str	r3, [r2, #16]
 8007c42:	e037      	b.n	8007cb4 <USB_EPStartXfer+0x3ec>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007c44:	68bb      	ldr	r3, [r7, #8]
 8007c46:	699a      	ldr	r2, [r3, #24]
 8007c48:	68bb      	ldr	r3, [r7, #8]
 8007c4a:	68db      	ldr	r3, [r3, #12]
 8007c4c:	4413      	add	r3, r2
 8007c4e:	1e5a      	subs	r2, r3, #1
 8007c50:	68bb      	ldr	r3, [r7, #8]
 8007c52:	68db      	ldr	r3, [r3, #12]
 8007c54:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c58:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8007c5a:	68bb      	ldr	r3, [r7, #8]
 8007c5c:	68db      	ldr	r3, [r3, #12]
 8007c5e:	8afa      	ldrh	r2, [r7, #22]
 8007c60:	fb03 f202 	mul.w	r2, r3, r2
 8007c64:	68bb      	ldr	r3, [r7, #8]
 8007c66:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007c68:	69bb      	ldr	r3, [r7, #24]
 8007c6a:	015a      	lsls	r2, r3, #5
 8007c6c:	69fb      	ldr	r3, [r7, #28]
 8007c6e:	4413      	add	r3, r2
 8007c70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c74:	691a      	ldr	r2, [r3, #16]
 8007c76:	8afb      	ldrh	r3, [r7, #22]
 8007c78:	04d9      	lsls	r1, r3, #19
 8007c7a:	4b3a      	ldr	r3, [pc, #232]	; (8007d64 <USB_EPStartXfer+0x49c>)
 8007c7c:	400b      	ands	r3, r1
 8007c7e:	69b9      	ldr	r1, [r7, #24]
 8007c80:	0148      	lsls	r0, r1, #5
 8007c82:	69f9      	ldr	r1, [r7, #28]
 8007c84:	4401      	add	r1, r0
 8007c86:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007c8a:	4313      	orrs	r3, r2
 8007c8c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8007c8e:	69bb      	ldr	r3, [r7, #24]
 8007c90:	015a      	lsls	r2, r3, #5
 8007c92:	69fb      	ldr	r3, [r7, #28]
 8007c94:	4413      	add	r3, r2
 8007c96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c9a:	691a      	ldr	r2, [r3, #16]
 8007c9c:	68bb      	ldr	r3, [r7, #8]
 8007c9e:	69db      	ldr	r3, [r3, #28]
 8007ca0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007ca4:	69b9      	ldr	r1, [r7, #24]
 8007ca6:	0148      	lsls	r0, r1, #5
 8007ca8:	69f9      	ldr	r1, [r7, #28]
 8007caa:	4401      	add	r1, r0
 8007cac:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007cb0:	4313      	orrs	r3, r2
 8007cb2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007cb4:	79fb      	ldrb	r3, [r7, #7]
 8007cb6:	2b01      	cmp	r3, #1
 8007cb8:	d10d      	bne.n	8007cd6 <USB_EPStartXfer+0x40e>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007cba:	68bb      	ldr	r3, [r7, #8]
 8007cbc:	691b      	ldr	r3, [r3, #16]
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d009      	beq.n	8007cd6 <USB_EPStartXfer+0x40e>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007cc2:	68bb      	ldr	r3, [r7, #8]
 8007cc4:	6919      	ldr	r1, [r3, #16]
 8007cc6:	69bb      	ldr	r3, [r7, #24]
 8007cc8:	015a      	lsls	r2, r3, #5
 8007cca:	69fb      	ldr	r3, [r7, #28]
 8007ccc:	4413      	add	r3, r2
 8007cce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007cd2:	460a      	mov	r2, r1
 8007cd4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8007cd6:	68bb      	ldr	r3, [r7, #8]
 8007cd8:	791b      	ldrb	r3, [r3, #4]
 8007cda:	2b01      	cmp	r3, #1
 8007cdc:	d128      	bne.n	8007d30 <USB_EPStartXfer+0x468>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007cde:	69fb      	ldr	r3, [r7, #28]
 8007ce0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ce4:	689b      	ldr	r3, [r3, #8]
 8007ce6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d110      	bne.n	8007d10 <USB_EPStartXfer+0x448>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8007cee:	69bb      	ldr	r3, [r7, #24]
 8007cf0:	015a      	lsls	r2, r3, #5
 8007cf2:	69fb      	ldr	r3, [r7, #28]
 8007cf4:	4413      	add	r3, r2
 8007cf6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	69ba      	ldr	r2, [r7, #24]
 8007cfe:	0151      	lsls	r1, r2, #5
 8007d00:	69fa      	ldr	r2, [r7, #28]
 8007d02:	440a      	add	r2, r1
 8007d04:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007d08:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007d0c:	6013      	str	r3, [r2, #0]
 8007d0e:	e00f      	b.n	8007d30 <USB_EPStartXfer+0x468>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007d10:	69bb      	ldr	r3, [r7, #24]
 8007d12:	015a      	lsls	r2, r3, #5
 8007d14:	69fb      	ldr	r3, [r7, #28]
 8007d16:	4413      	add	r3, r2
 8007d18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	69ba      	ldr	r2, [r7, #24]
 8007d20:	0151      	lsls	r1, r2, #5
 8007d22:	69fa      	ldr	r2, [r7, #28]
 8007d24:	440a      	add	r2, r1
 8007d26:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007d2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007d2e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007d30:	69bb      	ldr	r3, [r7, #24]
 8007d32:	015a      	lsls	r2, r3, #5
 8007d34:	69fb      	ldr	r3, [r7, #28]
 8007d36:	4413      	add	r3, r2
 8007d38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	69ba      	ldr	r2, [r7, #24]
 8007d40:	0151      	lsls	r1, r2, #5
 8007d42:	69fa      	ldr	r2, [r7, #28]
 8007d44:	440a      	add	r2, r1
 8007d46:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007d4a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007d4e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007d50:	2300      	movs	r3, #0
}
 8007d52:	4618      	mov	r0, r3
 8007d54:	3720      	adds	r7, #32
 8007d56:	46bd      	mov	sp, r7
 8007d58:	bd80      	pop	{r7, pc}
 8007d5a:	bf00      	nop
 8007d5c:	fff80000 	.word	0xfff80000
 8007d60:	e007ffff 	.word	0xe007ffff
 8007d64:	1ff80000 	.word	0x1ff80000

08007d68 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007d68:	b480      	push	{r7}
 8007d6a:	b087      	sub	sp, #28
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	60f8      	str	r0, [r7, #12]
 8007d70:	60b9      	str	r1, [r7, #8]
 8007d72:	4613      	mov	r3, r2
 8007d74:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8007d7a:	68bb      	ldr	r3, [r7, #8]
 8007d7c:	781b      	ldrb	r3, [r3, #0]
 8007d7e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007d80:	68bb      	ldr	r3, [r7, #8]
 8007d82:	785b      	ldrb	r3, [r3, #1]
 8007d84:	2b01      	cmp	r3, #1
 8007d86:	f040 80ce 	bne.w	8007f26 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007d8a:	68bb      	ldr	r3, [r7, #8]
 8007d8c:	699b      	ldr	r3, [r3, #24]
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d132      	bne.n	8007df8 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007d92:	693b      	ldr	r3, [r7, #16]
 8007d94:	015a      	lsls	r2, r3, #5
 8007d96:	697b      	ldr	r3, [r7, #20]
 8007d98:	4413      	add	r3, r2
 8007d9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d9e:	691a      	ldr	r2, [r3, #16]
 8007da0:	693b      	ldr	r3, [r7, #16]
 8007da2:	0159      	lsls	r1, r3, #5
 8007da4:	697b      	ldr	r3, [r7, #20]
 8007da6:	440b      	add	r3, r1
 8007da8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007dac:	4619      	mov	r1, r3
 8007dae:	4b9a      	ldr	r3, [pc, #616]	; (8008018 <USB_EP0StartXfer+0x2b0>)
 8007db0:	4013      	ands	r3, r2
 8007db2:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007db4:	693b      	ldr	r3, [r7, #16]
 8007db6:	015a      	lsls	r2, r3, #5
 8007db8:	697b      	ldr	r3, [r7, #20]
 8007dba:	4413      	add	r3, r2
 8007dbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007dc0:	691b      	ldr	r3, [r3, #16]
 8007dc2:	693a      	ldr	r2, [r7, #16]
 8007dc4:	0151      	lsls	r1, r2, #5
 8007dc6:	697a      	ldr	r2, [r7, #20]
 8007dc8:	440a      	add	r2, r1
 8007dca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007dce:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007dd2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007dd4:	693b      	ldr	r3, [r7, #16]
 8007dd6:	015a      	lsls	r2, r3, #5
 8007dd8:	697b      	ldr	r3, [r7, #20]
 8007dda:	4413      	add	r3, r2
 8007ddc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007de0:	691a      	ldr	r2, [r3, #16]
 8007de2:	693b      	ldr	r3, [r7, #16]
 8007de4:	0159      	lsls	r1, r3, #5
 8007de6:	697b      	ldr	r3, [r7, #20]
 8007de8:	440b      	add	r3, r1
 8007dea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007dee:	4619      	mov	r1, r3
 8007df0:	4b8a      	ldr	r3, [pc, #552]	; (800801c <USB_EP0StartXfer+0x2b4>)
 8007df2:	4013      	ands	r3, r2
 8007df4:	610b      	str	r3, [r1, #16]
 8007df6:	e04e      	b.n	8007e96 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007df8:	693b      	ldr	r3, [r7, #16]
 8007dfa:	015a      	lsls	r2, r3, #5
 8007dfc:	697b      	ldr	r3, [r7, #20]
 8007dfe:	4413      	add	r3, r2
 8007e00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e04:	691a      	ldr	r2, [r3, #16]
 8007e06:	693b      	ldr	r3, [r7, #16]
 8007e08:	0159      	lsls	r1, r3, #5
 8007e0a:	697b      	ldr	r3, [r7, #20]
 8007e0c:	440b      	add	r3, r1
 8007e0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e12:	4619      	mov	r1, r3
 8007e14:	4b81      	ldr	r3, [pc, #516]	; (800801c <USB_EP0StartXfer+0x2b4>)
 8007e16:	4013      	ands	r3, r2
 8007e18:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007e1a:	693b      	ldr	r3, [r7, #16]
 8007e1c:	015a      	lsls	r2, r3, #5
 8007e1e:	697b      	ldr	r3, [r7, #20]
 8007e20:	4413      	add	r3, r2
 8007e22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e26:	691a      	ldr	r2, [r3, #16]
 8007e28:	693b      	ldr	r3, [r7, #16]
 8007e2a:	0159      	lsls	r1, r3, #5
 8007e2c:	697b      	ldr	r3, [r7, #20]
 8007e2e:	440b      	add	r3, r1
 8007e30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e34:	4619      	mov	r1, r3
 8007e36:	4b78      	ldr	r3, [pc, #480]	; (8008018 <USB_EP0StartXfer+0x2b0>)
 8007e38:	4013      	ands	r3, r2
 8007e3a:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 8007e3c:	68bb      	ldr	r3, [r7, #8]
 8007e3e:	699a      	ldr	r2, [r3, #24]
 8007e40:	68bb      	ldr	r3, [r7, #8]
 8007e42:	68db      	ldr	r3, [r3, #12]
 8007e44:	429a      	cmp	r2, r3
 8007e46:	d903      	bls.n	8007e50 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8007e48:	68bb      	ldr	r3, [r7, #8]
 8007e4a:	68da      	ldr	r2, [r3, #12]
 8007e4c:	68bb      	ldr	r3, [r7, #8]
 8007e4e:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007e50:	693b      	ldr	r3, [r7, #16]
 8007e52:	015a      	lsls	r2, r3, #5
 8007e54:	697b      	ldr	r3, [r7, #20]
 8007e56:	4413      	add	r3, r2
 8007e58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e5c:	691b      	ldr	r3, [r3, #16]
 8007e5e:	693a      	ldr	r2, [r7, #16]
 8007e60:	0151      	lsls	r1, r2, #5
 8007e62:	697a      	ldr	r2, [r7, #20]
 8007e64:	440a      	add	r2, r1
 8007e66:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007e6a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007e6e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007e70:	693b      	ldr	r3, [r7, #16]
 8007e72:	015a      	lsls	r2, r3, #5
 8007e74:	697b      	ldr	r3, [r7, #20]
 8007e76:	4413      	add	r3, r2
 8007e78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e7c:	691a      	ldr	r2, [r3, #16]
 8007e7e:	68bb      	ldr	r3, [r7, #8]
 8007e80:	699b      	ldr	r3, [r3, #24]
 8007e82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007e86:	6939      	ldr	r1, [r7, #16]
 8007e88:	0148      	lsls	r0, r1, #5
 8007e8a:	6979      	ldr	r1, [r7, #20]
 8007e8c:	4401      	add	r1, r0
 8007e8e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007e92:	4313      	orrs	r3, r2
 8007e94:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007e96:	79fb      	ldrb	r3, [r7, #7]
 8007e98:	2b01      	cmp	r3, #1
 8007e9a:	d11e      	bne.n	8007eda <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007e9c:	68bb      	ldr	r3, [r7, #8]
 8007e9e:	695b      	ldr	r3, [r3, #20]
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d009      	beq.n	8007eb8 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007ea4:	693b      	ldr	r3, [r7, #16]
 8007ea6:	015a      	lsls	r2, r3, #5
 8007ea8:	697b      	ldr	r3, [r7, #20]
 8007eaa:	4413      	add	r3, r2
 8007eac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007eb0:	461a      	mov	r2, r3
 8007eb2:	68bb      	ldr	r3, [r7, #8]
 8007eb4:	695b      	ldr	r3, [r3, #20]
 8007eb6:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007eb8:	693b      	ldr	r3, [r7, #16]
 8007eba:	015a      	lsls	r2, r3, #5
 8007ebc:	697b      	ldr	r3, [r7, #20]
 8007ebe:	4413      	add	r3, r2
 8007ec0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	693a      	ldr	r2, [r7, #16]
 8007ec8:	0151      	lsls	r1, r2, #5
 8007eca:	697a      	ldr	r2, [r7, #20]
 8007ecc:	440a      	add	r2, r1
 8007ece:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007ed2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007ed6:	6013      	str	r3, [r2, #0]
 8007ed8:	e097      	b.n	800800a <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007eda:	693b      	ldr	r3, [r7, #16]
 8007edc:	015a      	lsls	r2, r3, #5
 8007ede:	697b      	ldr	r3, [r7, #20]
 8007ee0:	4413      	add	r3, r2
 8007ee2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	693a      	ldr	r2, [r7, #16]
 8007eea:	0151      	lsls	r1, r2, #5
 8007eec:	697a      	ldr	r2, [r7, #20]
 8007eee:	440a      	add	r2, r1
 8007ef0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007ef4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007ef8:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8007efa:	68bb      	ldr	r3, [r7, #8]
 8007efc:	699b      	ldr	r3, [r3, #24]
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	f000 8083 	beq.w	800800a <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007f04:	697b      	ldr	r3, [r7, #20]
 8007f06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f0a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007f0c:	68bb      	ldr	r3, [r7, #8]
 8007f0e:	781b      	ldrb	r3, [r3, #0]
 8007f10:	f003 030f 	and.w	r3, r3, #15
 8007f14:	2101      	movs	r1, #1
 8007f16:	fa01 f303 	lsl.w	r3, r1, r3
 8007f1a:	6979      	ldr	r1, [r7, #20]
 8007f1c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007f20:	4313      	orrs	r3, r2
 8007f22:	634b      	str	r3, [r1, #52]	; 0x34
 8007f24:	e071      	b.n	800800a <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007f26:	693b      	ldr	r3, [r7, #16]
 8007f28:	015a      	lsls	r2, r3, #5
 8007f2a:	697b      	ldr	r3, [r7, #20]
 8007f2c:	4413      	add	r3, r2
 8007f2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f32:	691a      	ldr	r2, [r3, #16]
 8007f34:	693b      	ldr	r3, [r7, #16]
 8007f36:	0159      	lsls	r1, r3, #5
 8007f38:	697b      	ldr	r3, [r7, #20]
 8007f3a:	440b      	add	r3, r1
 8007f3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f40:	4619      	mov	r1, r3
 8007f42:	4b36      	ldr	r3, [pc, #216]	; (800801c <USB_EP0StartXfer+0x2b4>)
 8007f44:	4013      	ands	r3, r2
 8007f46:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007f48:	693b      	ldr	r3, [r7, #16]
 8007f4a:	015a      	lsls	r2, r3, #5
 8007f4c:	697b      	ldr	r3, [r7, #20]
 8007f4e:	4413      	add	r3, r2
 8007f50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f54:	691a      	ldr	r2, [r3, #16]
 8007f56:	693b      	ldr	r3, [r7, #16]
 8007f58:	0159      	lsls	r1, r3, #5
 8007f5a:	697b      	ldr	r3, [r7, #20]
 8007f5c:	440b      	add	r3, r1
 8007f5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f62:	4619      	mov	r1, r3
 8007f64:	4b2c      	ldr	r3, [pc, #176]	; (8008018 <USB_EP0StartXfer+0x2b0>)
 8007f66:	4013      	ands	r3, r2
 8007f68:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 8007f6a:	68bb      	ldr	r3, [r7, #8]
 8007f6c:	699b      	ldr	r3, [r3, #24]
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d003      	beq.n	8007f7a <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8007f72:	68bb      	ldr	r3, [r7, #8]
 8007f74:	68da      	ldr	r2, [r3, #12]
 8007f76:	68bb      	ldr	r3, [r7, #8]
 8007f78:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8007f7a:	68bb      	ldr	r3, [r7, #8]
 8007f7c:	68da      	ldr	r2, [r3, #12]
 8007f7e:	68bb      	ldr	r3, [r7, #8]
 8007f80:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007f82:	693b      	ldr	r3, [r7, #16]
 8007f84:	015a      	lsls	r2, r3, #5
 8007f86:	697b      	ldr	r3, [r7, #20]
 8007f88:	4413      	add	r3, r2
 8007f8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f8e:	691b      	ldr	r3, [r3, #16]
 8007f90:	693a      	ldr	r2, [r7, #16]
 8007f92:	0151      	lsls	r1, r2, #5
 8007f94:	697a      	ldr	r2, [r7, #20]
 8007f96:	440a      	add	r2, r1
 8007f98:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007f9c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007fa0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8007fa2:	693b      	ldr	r3, [r7, #16]
 8007fa4:	015a      	lsls	r2, r3, #5
 8007fa6:	697b      	ldr	r3, [r7, #20]
 8007fa8:	4413      	add	r3, r2
 8007faa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fae:	691a      	ldr	r2, [r3, #16]
 8007fb0:	68bb      	ldr	r3, [r7, #8]
 8007fb2:	69db      	ldr	r3, [r3, #28]
 8007fb4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007fb8:	6939      	ldr	r1, [r7, #16]
 8007fba:	0148      	lsls	r0, r1, #5
 8007fbc:	6979      	ldr	r1, [r7, #20]
 8007fbe:	4401      	add	r1, r0
 8007fc0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007fc4:	4313      	orrs	r3, r2
 8007fc6:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8007fc8:	79fb      	ldrb	r3, [r7, #7]
 8007fca:	2b01      	cmp	r3, #1
 8007fcc:	d10d      	bne.n	8007fea <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007fce:	68bb      	ldr	r3, [r7, #8]
 8007fd0:	691b      	ldr	r3, [r3, #16]
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d009      	beq.n	8007fea <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007fd6:	68bb      	ldr	r3, [r7, #8]
 8007fd8:	6919      	ldr	r1, [r3, #16]
 8007fda:	693b      	ldr	r3, [r7, #16]
 8007fdc:	015a      	lsls	r2, r3, #5
 8007fde:	697b      	ldr	r3, [r7, #20]
 8007fe0:	4413      	add	r3, r2
 8007fe2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fe6:	460a      	mov	r2, r1
 8007fe8:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007fea:	693b      	ldr	r3, [r7, #16]
 8007fec:	015a      	lsls	r2, r3, #5
 8007fee:	697b      	ldr	r3, [r7, #20]
 8007ff0:	4413      	add	r3, r2
 8007ff2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	693a      	ldr	r2, [r7, #16]
 8007ffa:	0151      	lsls	r1, r2, #5
 8007ffc:	697a      	ldr	r2, [r7, #20]
 8007ffe:	440a      	add	r2, r1
 8008000:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008004:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008008:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800800a:	2300      	movs	r3, #0
}
 800800c:	4618      	mov	r0, r3
 800800e:	371c      	adds	r7, #28
 8008010:	46bd      	mov	sp, r7
 8008012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008016:	4770      	bx	lr
 8008018:	e007ffff 	.word	0xe007ffff
 800801c:	fff80000 	.word	0xfff80000

08008020 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008020:	b480      	push	{r7}
 8008022:	b087      	sub	sp, #28
 8008024:	af00      	add	r7, sp, #0
 8008026:	6078      	str	r0, [r7, #4]
 8008028:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800802a:	2300      	movs	r3, #0
 800802c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800802e:	2300      	movs	r3, #0
 8008030:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008036:	683b      	ldr	r3, [r7, #0]
 8008038:	785b      	ldrb	r3, [r3, #1]
 800803a:	2b01      	cmp	r3, #1
 800803c:	d14a      	bne.n	80080d4 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800803e:	683b      	ldr	r3, [r7, #0]
 8008040:	781b      	ldrb	r3, [r3, #0]
 8008042:	015a      	lsls	r2, r3, #5
 8008044:	693b      	ldr	r3, [r7, #16]
 8008046:	4413      	add	r3, r2
 8008048:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008052:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008056:	f040 8086 	bne.w	8008166 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800805a:	683b      	ldr	r3, [r7, #0]
 800805c:	781b      	ldrb	r3, [r3, #0]
 800805e:	015a      	lsls	r2, r3, #5
 8008060:	693b      	ldr	r3, [r7, #16]
 8008062:	4413      	add	r3, r2
 8008064:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	683a      	ldr	r2, [r7, #0]
 800806c:	7812      	ldrb	r2, [r2, #0]
 800806e:	0151      	lsls	r1, r2, #5
 8008070:	693a      	ldr	r2, [r7, #16]
 8008072:	440a      	add	r2, r1
 8008074:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008078:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800807c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800807e:	683b      	ldr	r3, [r7, #0]
 8008080:	781b      	ldrb	r3, [r3, #0]
 8008082:	015a      	lsls	r2, r3, #5
 8008084:	693b      	ldr	r3, [r7, #16]
 8008086:	4413      	add	r3, r2
 8008088:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	683a      	ldr	r2, [r7, #0]
 8008090:	7812      	ldrb	r2, [r2, #0]
 8008092:	0151      	lsls	r1, r2, #5
 8008094:	693a      	ldr	r2, [r7, #16]
 8008096:	440a      	add	r2, r1
 8008098:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800809c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80080a0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	3301      	adds	r3, #1
 80080a6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	f242 7210 	movw	r2, #10000	; 0x2710
 80080ae:	4293      	cmp	r3, r2
 80080b0:	d902      	bls.n	80080b8 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80080b2:	2301      	movs	r3, #1
 80080b4:	75fb      	strb	r3, [r7, #23]
          break;
 80080b6:	e056      	b.n	8008166 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80080b8:	683b      	ldr	r3, [r7, #0]
 80080ba:	781b      	ldrb	r3, [r3, #0]
 80080bc:	015a      	lsls	r2, r3, #5
 80080be:	693b      	ldr	r3, [r7, #16]
 80080c0:	4413      	add	r3, r2
 80080c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80080cc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80080d0:	d0e7      	beq.n	80080a2 <USB_EPStopXfer+0x82>
 80080d2:	e048      	b.n	8008166 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80080d4:	683b      	ldr	r3, [r7, #0]
 80080d6:	781b      	ldrb	r3, [r3, #0]
 80080d8:	015a      	lsls	r2, r3, #5
 80080da:	693b      	ldr	r3, [r7, #16]
 80080dc:	4413      	add	r3, r2
 80080de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80080e8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80080ec:	d13b      	bne.n	8008166 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80080ee:	683b      	ldr	r3, [r7, #0]
 80080f0:	781b      	ldrb	r3, [r3, #0]
 80080f2:	015a      	lsls	r2, r3, #5
 80080f4:	693b      	ldr	r3, [r7, #16]
 80080f6:	4413      	add	r3, r2
 80080f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	683a      	ldr	r2, [r7, #0]
 8008100:	7812      	ldrb	r2, [r2, #0]
 8008102:	0151      	lsls	r1, r2, #5
 8008104:	693a      	ldr	r2, [r7, #16]
 8008106:	440a      	add	r2, r1
 8008108:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800810c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008110:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8008112:	683b      	ldr	r3, [r7, #0]
 8008114:	781b      	ldrb	r3, [r3, #0]
 8008116:	015a      	lsls	r2, r3, #5
 8008118:	693b      	ldr	r3, [r7, #16]
 800811a:	4413      	add	r3, r2
 800811c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	683a      	ldr	r2, [r7, #0]
 8008124:	7812      	ldrb	r2, [r2, #0]
 8008126:	0151      	lsls	r1, r2, #5
 8008128:	693a      	ldr	r2, [r7, #16]
 800812a:	440a      	add	r2, r1
 800812c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008130:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008134:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	3301      	adds	r3, #1
 800813a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	f242 7210 	movw	r2, #10000	; 0x2710
 8008142:	4293      	cmp	r3, r2
 8008144:	d902      	bls.n	800814c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8008146:	2301      	movs	r3, #1
 8008148:	75fb      	strb	r3, [r7, #23]
          break;
 800814a:	e00c      	b.n	8008166 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800814c:	683b      	ldr	r3, [r7, #0]
 800814e:	781b      	ldrb	r3, [r3, #0]
 8008150:	015a      	lsls	r2, r3, #5
 8008152:	693b      	ldr	r3, [r7, #16]
 8008154:	4413      	add	r3, r2
 8008156:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008160:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008164:	d0e7      	beq.n	8008136 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8008166:	7dfb      	ldrb	r3, [r7, #23]
}
 8008168:	4618      	mov	r0, r3
 800816a:	371c      	adds	r7, #28
 800816c:	46bd      	mov	sp, r7
 800816e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008172:	4770      	bx	lr

08008174 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008174:	b480      	push	{r7}
 8008176:	b089      	sub	sp, #36	; 0x24
 8008178:	af00      	add	r7, sp, #0
 800817a:	60f8      	str	r0, [r7, #12]
 800817c:	60b9      	str	r1, [r7, #8]
 800817e:	4611      	mov	r1, r2
 8008180:	461a      	mov	r2, r3
 8008182:	460b      	mov	r3, r1
 8008184:	71fb      	strb	r3, [r7, #7]
 8008186:	4613      	mov	r3, r2
 8008188:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800818e:	68bb      	ldr	r3, [r7, #8]
 8008190:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8008192:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008196:	2b00      	cmp	r3, #0
 8008198:	d123      	bne.n	80081e2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800819a:	88bb      	ldrh	r3, [r7, #4]
 800819c:	3303      	adds	r3, #3
 800819e:	089b      	lsrs	r3, r3, #2
 80081a0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80081a2:	2300      	movs	r3, #0
 80081a4:	61bb      	str	r3, [r7, #24]
 80081a6:	e018      	b.n	80081da <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80081a8:	79fb      	ldrb	r3, [r7, #7]
 80081aa:	031a      	lsls	r2, r3, #12
 80081ac:	697b      	ldr	r3, [r7, #20]
 80081ae:	4413      	add	r3, r2
 80081b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80081b4:	461a      	mov	r2, r3
 80081b6:	69fb      	ldr	r3, [r7, #28]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	6013      	str	r3, [r2, #0]
      pSrc++;
 80081bc:	69fb      	ldr	r3, [r7, #28]
 80081be:	3301      	adds	r3, #1
 80081c0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80081c2:	69fb      	ldr	r3, [r7, #28]
 80081c4:	3301      	adds	r3, #1
 80081c6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80081c8:	69fb      	ldr	r3, [r7, #28]
 80081ca:	3301      	adds	r3, #1
 80081cc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80081ce:	69fb      	ldr	r3, [r7, #28]
 80081d0:	3301      	adds	r3, #1
 80081d2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80081d4:	69bb      	ldr	r3, [r7, #24]
 80081d6:	3301      	adds	r3, #1
 80081d8:	61bb      	str	r3, [r7, #24]
 80081da:	69ba      	ldr	r2, [r7, #24]
 80081dc:	693b      	ldr	r3, [r7, #16]
 80081de:	429a      	cmp	r2, r3
 80081e0:	d3e2      	bcc.n	80081a8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80081e2:	2300      	movs	r3, #0
}
 80081e4:	4618      	mov	r0, r3
 80081e6:	3724      	adds	r7, #36	; 0x24
 80081e8:	46bd      	mov	sp, r7
 80081ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ee:	4770      	bx	lr

080081f0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80081f0:	b480      	push	{r7}
 80081f2:	b08b      	sub	sp, #44	; 0x2c
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	60f8      	str	r0, [r7, #12]
 80081f8:	60b9      	str	r1, [r7, #8]
 80081fa:	4613      	mov	r3, r2
 80081fc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8008202:	68bb      	ldr	r3, [r7, #8]
 8008204:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8008206:	88fb      	ldrh	r3, [r7, #6]
 8008208:	089b      	lsrs	r3, r3, #2
 800820a:	b29b      	uxth	r3, r3
 800820c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800820e:	88fb      	ldrh	r3, [r7, #6]
 8008210:	f003 0303 	and.w	r3, r3, #3
 8008214:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8008216:	2300      	movs	r3, #0
 8008218:	623b      	str	r3, [r7, #32]
 800821a:	e014      	b.n	8008246 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800821c:	69bb      	ldr	r3, [r7, #24]
 800821e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008222:	681a      	ldr	r2, [r3, #0]
 8008224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008226:	601a      	str	r2, [r3, #0]
    pDest++;
 8008228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800822a:	3301      	adds	r3, #1
 800822c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800822e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008230:	3301      	adds	r3, #1
 8008232:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008236:	3301      	adds	r3, #1
 8008238:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800823a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800823c:	3301      	adds	r3, #1
 800823e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8008240:	6a3b      	ldr	r3, [r7, #32]
 8008242:	3301      	adds	r3, #1
 8008244:	623b      	str	r3, [r7, #32]
 8008246:	6a3a      	ldr	r2, [r7, #32]
 8008248:	697b      	ldr	r3, [r7, #20]
 800824a:	429a      	cmp	r2, r3
 800824c:	d3e6      	bcc.n	800821c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800824e:	8bfb      	ldrh	r3, [r7, #30]
 8008250:	2b00      	cmp	r3, #0
 8008252:	d01e      	beq.n	8008292 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8008254:	2300      	movs	r3, #0
 8008256:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008258:	69bb      	ldr	r3, [r7, #24]
 800825a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800825e:	461a      	mov	r2, r3
 8008260:	f107 0310 	add.w	r3, r7, #16
 8008264:	6812      	ldr	r2, [r2, #0]
 8008266:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008268:	693a      	ldr	r2, [r7, #16]
 800826a:	6a3b      	ldr	r3, [r7, #32]
 800826c:	b2db      	uxtb	r3, r3
 800826e:	00db      	lsls	r3, r3, #3
 8008270:	fa22 f303 	lsr.w	r3, r2, r3
 8008274:	b2da      	uxtb	r2, r3
 8008276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008278:	701a      	strb	r2, [r3, #0]
      i++;
 800827a:	6a3b      	ldr	r3, [r7, #32]
 800827c:	3301      	adds	r3, #1
 800827e:	623b      	str	r3, [r7, #32]
      pDest++;
 8008280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008282:	3301      	adds	r3, #1
 8008284:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8008286:	8bfb      	ldrh	r3, [r7, #30]
 8008288:	3b01      	subs	r3, #1
 800828a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800828c:	8bfb      	ldrh	r3, [r7, #30]
 800828e:	2b00      	cmp	r3, #0
 8008290:	d1ea      	bne.n	8008268 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8008292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008294:	4618      	mov	r0, r3
 8008296:	372c      	adds	r7, #44	; 0x2c
 8008298:	46bd      	mov	sp, r7
 800829a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800829e:	4770      	bx	lr

080082a0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80082a0:	b480      	push	{r7}
 80082a2:	b085      	sub	sp, #20
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	6078      	str	r0, [r7, #4]
 80082a8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80082ae:	683b      	ldr	r3, [r7, #0]
 80082b0:	781b      	ldrb	r3, [r3, #0]
 80082b2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80082b4:	683b      	ldr	r3, [r7, #0]
 80082b6:	785b      	ldrb	r3, [r3, #1]
 80082b8:	2b01      	cmp	r3, #1
 80082ba:	d12c      	bne.n	8008316 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80082bc:	68bb      	ldr	r3, [r7, #8]
 80082be:	015a      	lsls	r2, r3, #5
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	4413      	add	r3, r2
 80082c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	db12      	blt.n	80082f4 <USB_EPSetStall+0x54>
 80082ce:	68bb      	ldr	r3, [r7, #8]
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d00f      	beq.n	80082f4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80082d4:	68bb      	ldr	r3, [r7, #8]
 80082d6:	015a      	lsls	r2, r3, #5
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	4413      	add	r3, r2
 80082dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	68ba      	ldr	r2, [r7, #8]
 80082e4:	0151      	lsls	r1, r2, #5
 80082e6:	68fa      	ldr	r2, [r7, #12]
 80082e8:	440a      	add	r2, r1
 80082ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80082ee:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80082f2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80082f4:	68bb      	ldr	r3, [r7, #8]
 80082f6:	015a      	lsls	r2, r3, #5
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	4413      	add	r3, r2
 80082fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	68ba      	ldr	r2, [r7, #8]
 8008304:	0151      	lsls	r1, r2, #5
 8008306:	68fa      	ldr	r2, [r7, #12]
 8008308:	440a      	add	r2, r1
 800830a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800830e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008312:	6013      	str	r3, [r2, #0]
 8008314:	e02b      	b.n	800836e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008316:	68bb      	ldr	r3, [r7, #8]
 8008318:	015a      	lsls	r2, r3, #5
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	4413      	add	r3, r2
 800831e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	2b00      	cmp	r3, #0
 8008326:	db12      	blt.n	800834e <USB_EPSetStall+0xae>
 8008328:	68bb      	ldr	r3, [r7, #8]
 800832a:	2b00      	cmp	r3, #0
 800832c:	d00f      	beq.n	800834e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800832e:	68bb      	ldr	r3, [r7, #8]
 8008330:	015a      	lsls	r2, r3, #5
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	4413      	add	r3, r2
 8008336:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	68ba      	ldr	r2, [r7, #8]
 800833e:	0151      	lsls	r1, r2, #5
 8008340:	68fa      	ldr	r2, [r7, #12]
 8008342:	440a      	add	r2, r1
 8008344:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008348:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800834c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800834e:	68bb      	ldr	r3, [r7, #8]
 8008350:	015a      	lsls	r2, r3, #5
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	4413      	add	r3, r2
 8008356:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	68ba      	ldr	r2, [r7, #8]
 800835e:	0151      	lsls	r1, r2, #5
 8008360:	68fa      	ldr	r2, [r7, #12]
 8008362:	440a      	add	r2, r1
 8008364:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008368:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800836c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800836e:	2300      	movs	r3, #0
}
 8008370:	4618      	mov	r0, r3
 8008372:	3714      	adds	r7, #20
 8008374:	46bd      	mov	sp, r7
 8008376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800837a:	4770      	bx	lr

0800837c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800837c:	b480      	push	{r7}
 800837e:	b085      	sub	sp, #20
 8008380:	af00      	add	r7, sp, #0
 8008382:	6078      	str	r0, [r7, #4]
 8008384:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800838a:	683b      	ldr	r3, [r7, #0]
 800838c:	781b      	ldrb	r3, [r3, #0]
 800838e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008390:	683b      	ldr	r3, [r7, #0]
 8008392:	785b      	ldrb	r3, [r3, #1]
 8008394:	2b01      	cmp	r3, #1
 8008396:	d128      	bne.n	80083ea <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008398:	68bb      	ldr	r3, [r7, #8]
 800839a:	015a      	lsls	r2, r3, #5
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	4413      	add	r3, r2
 80083a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	68ba      	ldr	r2, [r7, #8]
 80083a8:	0151      	lsls	r1, r2, #5
 80083aa:	68fa      	ldr	r2, [r7, #12]
 80083ac:	440a      	add	r2, r1
 80083ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80083b2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80083b6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80083b8:	683b      	ldr	r3, [r7, #0]
 80083ba:	791b      	ldrb	r3, [r3, #4]
 80083bc:	2b03      	cmp	r3, #3
 80083be:	d003      	beq.n	80083c8 <USB_EPClearStall+0x4c>
 80083c0:	683b      	ldr	r3, [r7, #0]
 80083c2:	791b      	ldrb	r3, [r3, #4]
 80083c4:	2b02      	cmp	r3, #2
 80083c6:	d138      	bne.n	800843a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80083c8:	68bb      	ldr	r3, [r7, #8]
 80083ca:	015a      	lsls	r2, r3, #5
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	4413      	add	r3, r2
 80083d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	68ba      	ldr	r2, [r7, #8]
 80083d8:	0151      	lsls	r1, r2, #5
 80083da:	68fa      	ldr	r2, [r7, #12]
 80083dc:	440a      	add	r2, r1
 80083de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80083e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80083e6:	6013      	str	r3, [r2, #0]
 80083e8:	e027      	b.n	800843a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80083ea:	68bb      	ldr	r3, [r7, #8]
 80083ec:	015a      	lsls	r2, r3, #5
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	4413      	add	r3, r2
 80083f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	68ba      	ldr	r2, [r7, #8]
 80083fa:	0151      	lsls	r1, r2, #5
 80083fc:	68fa      	ldr	r2, [r7, #12]
 80083fe:	440a      	add	r2, r1
 8008400:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008404:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008408:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800840a:	683b      	ldr	r3, [r7, #0]
 800840c:	791b      	ldrb	r3, [r3, #4]
 800840e:	2b03      	cmp	r3, #3
 8008410:	d003      	beq.n	800841a <USB_EPClearStall+0x9e>
 8008412:	683b      	ldr	r3, [r7, #0]
 8008414:	791b      	ldrb	r3, [r3, #4]
 8008416:	2b02      	cmp	r3, #2
 8008418:	d10f      	bne.n	800843a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800841a:	68bb      	ldr	r3, [r7, #8]
 800841c:	015a      	lsls	r2, r3, #5
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	4413      	add	r3, r2
 8008422:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	68ba      	ldr	r2, [r7, #8]
 800842a:	0151      	lsls	r1, r2, #5
 800842c:	68fa      	ldr	r2, [r7, #12]
 800842e:	440a      	add	r2, r1
 8008430:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008434:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008438:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800843a:	2300      	movs	r3, #0
}
 800843c:	4618      	mov	r0, r3
 800843e:	3714      	adds	r7, #20
 8008440:	46bd      	mov	sp, r7
 8008442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008446:	4770      	bx	lr

08008448 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8008448:	b480      	push	{r7}
 800844a:	b085      	sub	sp, #20
 800844c:	af00      	add	r7, sp, #0
 800844e:	6078      	str	r0, [r7, #4]
 8008450:	460b      	mov	r3, r1
 8008452:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	68fa      	ldr	r2, [r7, #12]
 8008462:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008466:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800846a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008472:	681a      	ldr	r2, [r3, #0]
 8008474:	78fb      	ldrb	r3, [r7, #3]
 8008476:	011b      	lsls	r3, r3, #4
 8008478:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800847c:	68f9      	ldr	r1, [r7, #12]
 800847e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008482:	4313      	orrs	r3, r2
 8008484:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8008486:	2300      	movs	r3, #0
}
 8008488:	4618      	mov	r0, r3
 800848a:	3714      	adds	r7, #20
 800848c:	46bd      	mov	sp, r7
 800848e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008492:	4770      	bx	lr

08008494 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008494:	b480      	push	{r7}
 8008496:	b085      	sub	sp, #20
 8008498:	af00      	add	r7, sp, #0
 800849a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	68fa      	ldr	r2, [r7, #12]
 80084aa:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80084ae:	f023 0303 	bic.w	r3, r3, #3
 80084b2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80084ba:	685b      	ldr	r3, [r3, #4]
 80084bc:	68fa      	ldr	r2, [r7, #12]
 80084be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80084c2:	f023 0302 	bic.w	r3, r3, #2
 80084c6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80084c8:	2300      	movs	r3, #0
}
 80084ca:	4618      	mov	r0, r3
 80084cc:	3714      	adds	r7, #20
 80084ce:	46bd      	mov	sp, r7
 80084d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d4:	4770      	bx	lr

080084d6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80084d6:	b480      	push	{r7}
 80084d8:	b085      	sub	sp, #20
 80084da:	af00      	add	r7, sp, #0
 80084dc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	68fa      	ldr	r2, [r7, #12]
 80084ec:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80084f0:	f023 0303 	bic.w	r3, r3, #3
 80084f4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80084fc:	685b      	ldr	r3, [r3, #4]
 80084fe:	68fa      	ldr	r2, [r7, #12]
 8008500:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008504:	f043 0302 	orr.w	r3, r3, #2
 8008508:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800850a:	2300      	movs	r3, #0
}
 800850c:	4618      	mov	r0, r3
 800850e:	3714      	adds	r7, #20
 8008510:	46bd      	mov	sp, r7
 8008512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008516:	4770      	bx	lr

08008518 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8008518:	b480      	push	{r7}
 800851a:	b085      	sub	sp, #20
 800851c:	af00      	add	r7, sp, #0
 800851e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	695b      	ldr	r3, [r3, #20]
 8008524:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	699b      	ldr	r3, [r3, #24]
 800852a:	68fa      	ldr	r2, [r7, #12]
 800852c:	4013      	ands	r3, r2
 800852e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008530:	68fb      	ldr	r3, [r7, #12]
}
 8008532:	4618      	mov	r0, r3
 8008534:	3714      	adds	r7, #20
 8008536:	46bd      	mov	sp, r7
 8008538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800853c:	4770      	bx	lr

0800853e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800853e:	b480      	push	{r7}
 8008540:	b085      	sub	sp, #20
 8008542:	af00      	add	r7, sp, #0
 8008544:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008550:	699b      	ldr	r3, [r3, #24]
 8008552:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800855a:	69db      	ldr	r3, [r3, #28]
 800855c:	68ba      	ldr	r2, [r7, #8]
 800855e:	4013      	ands	r3, r2
 8008560:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8008562:	68bb      	ldr	r3, [r7, #8]
 8008564:	0c1b      	lsrs	r3, r3, #16
}
 8008566:	4618      	mov	r0, r3
 8008568:	3714      	adds	r7, #20
 800856a:	46bd      	mov	sp, r7
 800856c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008570:	4770      	bx	lr

08008572 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008572:	b480      	push	{r7}
 8008574:	b085      	sub	sp, #20
 8008576:	af00      	add	r7, sp, #0
 8008578:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008584:	699b      	ldr	r3, [r3, #24]
 8008586:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800858e:	69db      	ldr	r3, [r3, #28]
 8008590:	68ba      	ldr	r2, [r7, #8]
 8008592:	4013      	ands	r3, r2
 8008594:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8008596:	68bb      	ldr	r3, [r7, #8]
 8008598:	b29b      	uxth	r3, r3
}
 800859a:	4618      	mov	r0, r3
 800859c:	3714      	adds	r7, #20
 800859e:	46bd      	mov	sp, r7
 80085a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a4:	4770      	bx	lr

080085a6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80085a6:	b480      	push	{r7}
 80085a8:	b085      	sub	sp, #20
 80085aa:	af00      	add	r7, sp, #0
 80085ac:	6078      	str	r0, [r7, #4]
 80085ae:	460b      	mov	r3, r1
 80085b0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80085b6:	78fb      	ldrb	r3, [r7, #3]
 80085b8:	015a      	lsls	r2, r3, #5
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	4413      	add	r3, r2
 80085be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085c2:	689b      	ldr	r3, [r3, #8]
 80085c4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80085cc:	695b      	ldr	r3, [r3, #20]
 80085ce:	68ba      	ldr	r2, [r7, #8]
 80085d0:	4013      	ands	r3, r2
 80085d2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80085d4:	68bb      	ldr	r3, [r7, #8]
}
 80085d6:	4618      	mov	r0, r3
 80085d8:	3714      	adds	r7, #20
 80085da:	46bd      	mov	sp, r7
 80085dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e0:	4770      	bx	lr

080085e2 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80085e2:	b480      	push	{r7}
 80085e4:	b087      	sub	sp, #28
 80085e6:	af00      	add	r7, sp, #0
 80085e8:	6078      	str	r0, [r7, #4]
 80085ea:	460b      	mov	r3, r1
 80085ec:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80085f2:	697b      	ldr	r3, [r7, #20]
 80085f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80085f8:	691b      	ldr	r3, [r3, #16]
 80085fa:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80085fc:	697b      	ldr	r3, [r7, #20]
 80085fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008602:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008604:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8008606:	78fb      	ldrb	r3, [r7, #3]
 8008608:	f003 030f 	and.w	r3, r3, #15
 800860c:	68fa      	ldr	r2, [r7, #12]
 800860e:	fa22 f303 	lsr.w	r3, r2, r3
 8008612:	01db      	lsls	r3, r3, #7
 8008614:	b2db      	uxtb	r3, r3
 8008616:	693a      	ldr	r2, [r7, #16]
 8008618:	4313      	orrs	r3, r2
 800861a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800861c:	78fb      	ldrb	r3, [r7, #3]
 800861e:	015a      	lsls	r2, r3, #5
 8008620:	697b      	ldr	r3, [r7, #20]
 8008622:	4413      	add	r3, r2
 8008624:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008628:	689b      	ldr	r3, [r3, #8]
 800862a:	693a      	ldr	r2, [r7, #16]
 800862c:	4013      	ands	r3, r2
 800862e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008630:	68bb      	ldr	r3, [r7, #8]
}
 8008632:	4618      	mov	r0, r3
 8008634:	371c      	adds	r7, #28
 8008636:	46bd      	mov	sp, r7
 8008638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800863c:	4770      	bx	lr

0800863e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800863e:	b480      	push	{r7}
 8008640:	b083      	sub	sp, #12
 8008642:	af00      	add	r7, sp, #0
 8008644:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	695b      	ldr	r3, [r3, #20]
 800864a:	f003 0301 	and.w	r3, r3, #1
}
 800864e:	4618      	mov	r0, r3
 8008650:	370c      	adds	r7, #12
 8008652:	46bd      	mov	sp, r7
 8008654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008658:	4770      	bx	lr
	...

0800865c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800865c:	b480      	push	{r7}
 800865e:	b085      	sub	sp, #20
 8008660:	af00      	add	r7, sp, #0
 8008662:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800866e:	681a      	ldr	r2, [r3, #0]
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008676:	4619      	mov	r1, r3
 8008678:	4b09      	ldr	r3, [pc, #36]	; (80086a0 <USB_ActivateSetup+0x44>)
 800867a:	4013      	ands	r3, r2
 800867c:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008684:	685b      	ldr	r3, [r3, #4]
 8008686:	68fa      	ldr	r2, [r7, #12]
 8008688:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800868c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008690:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008692:	2300      	movs	r3, #0
}
 8008694:	4618      	mov	r0, r3
 8008696:	3714      	adds	r7, #20
 8008698:	46bd      	mov	sp, r7
 800869a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800869e:	4770      	bx	lr
 80086a0:	fffff800 	.word	0xfffff800

080086a4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80086a4:	b480      	push	{r7}
 80086a6:	b087      	sub	sp, #28
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	60f8      	str	r0, [r7, #12]
 80086ac:	460b      	mov	r3, r1
 80086ae:	607a      	str	r2, [r7, #4]
 80086b0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	333c      	adds	r3, #60	; 0x3c
 80086ba:	3304      	adds	r3, #4
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80086c0:	693b      	ldr	r3, [r7, #16]
 80086c2:	4a26      	ldr	r2, [pc, #152]	; (800875c <USB_EP0_OutStart+0xb8>)
 80086c4:	4293      	cmp	r3, r2
 80086c6:	d90a      	bls.n	80086de <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80086c8:	697b      	ldr	r3, [r7, #20]
 80086ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80086d4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80086d8:	d101      	bne.n	80086de <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80086da:	2300      	movs	r3, #0
 80086dc:	e037      	b.n	800874e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80086de:	697b      	ldr	r3, [r7, #20]
 80086e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086e4:	461a      	mov	r2, r3
 80086e6:	2300      	movs	r3, #0
 80086e8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80086ea:	697b      	ldr	r3, [r7, #20]
 80086ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086f0:	691b      	ldr	r3, [r3, #16]
 80086f2:	697a      	ldr	r2, [r7, #20]
 80086f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80086f8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80086fc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80086fe:	697b      	ldr	r3, [r7, #20]
 8008700:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008704:	691b      	ldr	r3, [r3, #16]
 8008706:	697a      	ldr	r2, [r7, #20]
 8008708:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800870c:	f043 0318 	orr.w	r3, r3, #24
 8008710:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8008712:	697b      	ldr	r3, [r7, #20]
 8008714:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008718:	691b      	ldr	r3, [r3, #16]
 800871a:	697a      	ldr	r2, [r7, #20]
 800871c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008720:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8008724:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8008726:	7afb      	ldrb	r3, [r7, #11]
 8008728:	2b01      	cmp	r3, #1
 800872a:	d10f      	bne.n	800874c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800872c:	697b      	ldr	r3, [r7, #20]
 800872e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008732:	461a      	mov	r2, r3
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8008738:	697b      	ldr	r3, [r7, #20]
 800873a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	697a      	ldr	r2, [r7, #20]
 8008742:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008746:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800874a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800874c:	2300      	movs	r3, #0
}
 800874e:	4618      	mov	r0, r3
 8008750:	371c      	adds	r7, #28
 8008752:	46bd      	mov	sp, r7
 8008754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008758:	4770      	bx	lr
 800875a:	bf00      	nop
 800875c:	4f54300a 	.word	0x4f54300a

08008760 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008760:	b480      	push	{r7}
 8008762:	b085      	sub	sp, #20
 8008764:	af00      	add	r7, sp, #0
 8008766:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008768:	2300      	movs	r3, #0
 800876a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	3301      	adds	r3, #1
 8008770:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	4a13      	ldr	r2, [pc, #76]	; (80087c4 <USB_CoreReset+0x64>)
 8008776:	4293      	cmp	r3, r2
 8008778:	d901      	bls.n	800877e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800877a:	2303      	movs	r3, #3
 800877c:	e01b      	b.n	80087b6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	691b      	ldr	r3, [r3, #16]
 8008782:	2b00      	cmp	r3, #0
 8008784:	daf2      	bge.n	800876c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008786:	2300      	movs	r3, #0
 8008788:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	691b      	ldr	r3, [r3, #16]
 800878e:	f043 0201 	orr.w	r2, r3, #1
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	3301      	adds	r3, #1
 800879a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	4a09      	ldr	r2, [pc, #36]	; (80087c4 <USB_CoreReset+0x64>)
 80087a0:	4293      	cmp	r3, r2
 80087a2:	d901      	bls.n	80087a8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80087a4:	2303      	movs	r3, #3
 80087a6:	e006      	b.n	80087b6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	691b      	ldr	r3, [r3, #16]
 80087ac:	f003 0301 	and.w	r3, r3, #1
 80087b0:	2b01      	cmp	r3, #1
 80087b2:	d0f0      	beq.n	8008796 <USB_CoreReset+0x36>

  return HAL_OK;
 80087b4:	2300      	movs	r3, #0
}
 80087b6:	4618      	mov	r0, r3
 80087b8:	3714      	adds	r7, #20
 80087ba:	46bd      	mov	sp, r7
 80087bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c0:	4770      	bx	lr
 80087c2:	bf00      	nop
 80087c4:	00030d40 	.word	0x00030d40

080087c8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80087c8:	b580      	push	{r7, lr}
 80087ca:	b084      	sub	sp, #16
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	6078      	str	r0, [r7, #4]
 80087d0:	460b      	mov	r3, r1
 80087d2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80087d4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80087d8:	f002 fe20 	bl	800b41c <malloc>
 80087dc:	4603      	mov	r3, r0
 80087de:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d109      	bne.n	80087fa <USBD_CDC_Init+0x32>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	32b0      	adds	r2, #176	; 0xb0
 80087f0:	2100      	movs	r1, #0
 80087f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80087f6:	2302      	movs	r3, #2
 80087f8:	e0d4      	b.n	80089a4 <USBD_CDC_Init+0x1dc>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80087fa:	f44f 7207 	mov.w	r2, #540	; 0x21c
 80087fe:	2100      	movs	r1, #0
 8008800:	68f8      	ldr	r0, [r7, #12]
 8008802:	f003 fe62 	bl	800c4ca <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	32b0      	adds	r2, #176	; 0xb0
 8008810:	68f9      	ldr	r1, [r7, #12]
 8008812:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	32b0      	adds	r2, #176	; 0xb0
 8008820:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	7c1b      	ldrb	r3, [r3, #16]
 800882e:	2b00      	cmp	r3, #0
 8008830:	d138      	bne.n	80088a4 <USBD_CDC_Init+0xdc>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8008832:	4b5e      	ldr	r3, [pc, #376]	; (80089ac <USBD_CDC_Init+0x1e4>)
 8008834:	7819      	ldrb	r1, [r3, #0]
 8008836:	f44f 7300 	mov.w	r3, #512	; 0x200
 800883a:	2202      	movs	r2, #2
 800883c:	6878      	ldr	r0, [r7, #4]
 800883e:	f002 fc4a 	bl	800b0d6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008842:	4b5a      	ldr	r3, [pc, #360]	; (80089ac <USBD_CDC_Init+0x1e4>)
 8008844:	781b      	ldrb	r3, [r3, #0]
 8008846:	f003 020f 	and.w	r2, r3, #15
 800884a:	6879      	ldr	r1, [r7, #4]
 800884c:	4613      	mov	r3, r2
 800884e:	009b      	lsls	r3, r3, #2
 8008850:	4413      	add	r3, r2
 8008852:	009b      	lsls	r3, r3, #2
 8008854:	440b      	add	r3, r1
 8008856:	3324      	adds	r3, #36	; 0x24
 8008858:	2201      	movs	r2, #1
 800885a:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800885c:	4b54      	ldr	r3, [pc, #336]	; (80089b0 <USBD_CDC_Init+0x1e8>)
 800885e:	7819      	ldrb	r1, [r3, #0]
 8008860:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008864:	2202      	movs	r2, #2
 8008866:	6878      	ldr	r0, [r7, #4]
 8008868:	f002 fc35 	bl	800b0d6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800886c:	4b50      	ldr	r3, [pc, #320]	; (80089b0 <USBD_CDC_Init+0x1e8>)
 800886e:	781b      	ldrb	r3, [r3, #0]
 8008870:	f003 020f 	and.w	r2, r3, #15
 8008874:	6879      	ldr	r1, [r7, #4]
 8008876:	4613      	mov	r3, r2
 8008878:	009b      	lsls	r3, r3, #2
 800887a:	4413      	add	r3, r2
 800887c:	009b      	lsls	r3, r3, #2
 800887e:	440b      	add	r3, r1
 8008880:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008884:	2201      	movs	r2, #1
 8008886:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8008888:	4b4a      	ldr	r3, [pc, #296]	; (80089b4 <USBD_CDC_Init+0x1ec>)
 800888a:	781b      	ldrb	r3, [r3, #0]
 800888c:	f003 020f 	and.w	r2, r3, #15
 8008890:	6879      	ldr	r1, [r7, #4]
 8008892:	4613      	mov	r3, r2
 8008894:	009b      	lsls	r3, r3, #2
 8008896:	4413      	add	r3, r2
 8008898:	009b      	lsls	r3, r3, #2
 800889a:	440b      	add	r3, r1
 800889c:	3326      	adds	r3, #38	; 0x26
 800889e:	2210      	movs	r2, #16
 80088a0:	801a      	strh	r2, [r3, #0]
 80088a2:	e035      	b.n	8008910 <USBD_CDC_Init+0x148>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80088a4:	4b41      	ldr	r3, [pc, #260]	; (80089ac <USBD_CDC_Init+0x1e4>)
 80088a6:	7819      	ldrb	r1, [r3, #0]
 80088a8:	2340      	movs	r3, #64	; 0x40
 80088aa:	2202      	movs	r2, #2
 80088ac:	6878      	ldr	r0, [r7, #4]
 80088ae:	f002 fc12 	bl	800b0d6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80088b2:	4b3e      	ldr	r3, [pc, #248]	; (80089ac <USBD_CDC_Init+0x1e4>)
 80088b4:	781b      	ldrb	r3, [r3, #0]
 80088b6:	f003 020f 	and.w	r2, r3, #15
 80088ba:	6879      	ldr	r1, [r7, #4]
 80088bc:	4613      	mov	r3, r2
 80088be:	009b      	lsls	r3, r3, #2
 80088c0:	4413      	add	r3, r2
 80088c2:	009b      	lsls	r3, r3, #2
 80088c4:	440b      	add	r3, r1
 80088c6:	3324      	adds	r3, #36	; 0x24
 80088c8:	2201      	movs	r2, #1
 80088ca:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80088cc:	4b38      	ldr	r3, [pc, #224]	; (80089b0 <USBD_CDC_Init+0x1e8>)
 80088ce:	7819      	ldrb	r1, [r3, #0]
 80088d0:	2340      	movs	r3, #64	; 0x40
 80088d2:	2202      	movs	r2, #2
 80088d4:	6878      	ldr	r0, [r7, #4]
 80088d6:	f002 fbfe 	bl	800b0d6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80088da:	4b35      	ldr	r3, [pc, #212]	; (80089b0 <USBD_CDC_Init+0x1e8>)
 80088dc:	781b      	ldrb	r3, [r3, #0]
 80088de:	f003 020f 	and.w	r2, r3, #15
 80088e2:	6879      	ldr	r1, [r7, #4]
 80088e4:	4613      	mov	r3, r2
 80088e6:	009b      	lsls	r3, r3, #2
 80088e8:	4413      	add	r3, r2
 80088ea:	009b      	lsls	r3, r3, #2
 80088ec:	440b      	add	r3, r1
 80088ee:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80088f2:	2201      	movs	r2, #1
 80088f4:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80088f6:	4b2f      	ldr	r3, [pc, #188]	; (80089b4 <USBD_CDC_Init+0x1ec>)
 80088f8:	781b      	ldrb	r3, [r3, #0]
 80088fa:	f003 020f 	and.w	r2, r3, #15
 80088fe:	6879      	ldr	r1, [r7, #4]
 8008900:	4613      	mov	r3, r2
 8008902:	009b      	lsls	r3, r3, #2
 8008904:	4413      	add	r3, r2
 8008906:	009b      	lsls	r3, r3, #2
 8008908:	440b      	add	r3, r1
 800890a:	3326      	adds	r3, #38	; 0x26
 800890c:	2210      	movs	r2, #16
 800890e:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008910:	4b28      	ldr	r3, [pc, #160]	; (80089b4 <USBD_CDC_Init+0x1ec>)
 8008912:	7819      	ldrb	r1, [r3, #0]
 8008914:	2308      	movs	r3, #8
 8008916:	2203      	movs	r2, #3
 8008918:	6878      	ldr	r0, [r7, #4]
 800891a:	f002 fbdc 	bl	800b0d6 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800891e:	4b25      	ldr	r3, [pc, #148]	; (80089b4 <USBD_CDC_Init+0x1ec>)
 8008920:	781b      	ldrb	r3, [r3, #0]
 8008922:	f003 020f 	and.w	r2, r3, #15
 8008926:	6879      	ldr	r1, [r7, #4]
 8008928:	4613      	mov	r3, r2
 800892a:	009b      	lsls	r3, r3, #2
 800892c:	4413      	add	r3, r2
 800892e:	009b      	lsls	r3, r3, #2
 8008930:	440b      	add	r3, r1
 8008932:	3324      	adds	r3, #36	; 0x24
 8008934:	2201      	movs	r2, #1
 8008936:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	2200      	movs	r2, #0
 800893c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008946:	687a      	ldr	r2, [r7, #4]
 8008948:	33b0      	adds	r3, #176	; 0xb0
 800894a:	009b      	lsls	r3, r3, #2
 800894c:	4413      	add	r3, r2
 800894e:	685b      	ldr	r3, [r3, #4]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	2200      	movs	r2, #0
 8008958:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	2200      	movs	r2, #0
 8008960:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800896a:	2b00      	cmp	r3, #0
 800896c:	d101      	bne.n	8008972 <USBD_CDC_Init+0x1aa>
  {
    return (uint8_t)USBD_EMEM;
 800896e:	2302      	movs	r3, #2
 8008970:	e018      	b.n	80089a4 <USBD_CDC_Init+0x1dc>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	7c1b      	ldrb	r3, [r3, #16]
 8008976:	2b00      	cmp	r3, #0
 8008978:	d10a      	bne.n	8008990 <USBD_CDC_Init+0x1c8>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800897a:	4b0d      	ldr	r3, [pc, #52]	; (80089b0 <USBD_CDC_Init+0x1e8>)
 800897c:	7819      	ldrb	r1, [r3, #0]
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008984:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008988:	6878      	ldr	r0, [r7, #4]
 800898a:	f002 fc93 	bl	800b2b4 <USBD_LL_PrepareReceive>
 800898e:	e008      	b.n	80089a2 <USBD_CDC_Init+0x1da>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008990:	4b07      	ldr	r3, [pc, #28]	; (80089b0 <USBD_CDC_Init+0x1e8>)
 8008992:	7819      	ldrb	r1, [r3, #0]
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800899a:	2340      	movs	r3, #64	; 0x40
 800899c:	6878      	ldr	r0, [r7, #4]
 800899e:	f002 fc89 	bl	800b2b4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80089a2:	2300      	movs	r3, #0
}
 80089a4:	4618      	mov	r0, r3
 80089a6:	3710      	adds	r7, #16
 80089a8:	46bd      	mov	sp, r7
 80089aa:	bd80      	pop	{r7, pc}
 80089ac:	20000093 	.word	0x20000093
 80089b0:	20000094 	.word	0x20000094
 80089b4:	20000095 	.word	0x20000095

080089b8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80089b8:	b580      	push	{r7, lr}
 80089ba:	b082      	sub	sp, #8
 80089bc:	af00      	add	r7, sp, #0
 80089be:	6078      	str	r0, [r7, #4]
 80089c0:	460b      	mov	r3, r1
 80089c2:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80089c4:	4b3a      	ldr	r3, [pc, #232]	; (8008ab0 <USBD_CDC_DeInit+0xf8>)
 80089c6:	781b      	ldrb	r3, [r3, #0]
 80089c8:	4619      	mov	r1, r3
 80089ca:	6878      	ldr	r0, [r7, #4]
 80089cc:	f002 fba9 	bl	800b122 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80089d0:	4b37      	ldr	r3, [pc, #220]	; (8008ab0 <USBD_CDC_DeInit+0xf8>)
 80089d2:	781b      	ldrb	r3, [r3, #0]
 80089d4:	f003 020f 	and.w	r2, r3, #15
 80089d8:	6879      	ldr	r1, [r7, #4]
 80089da:	4613      	mov	r3, r2
 80089dc:	009b      	lsls	r3, r3, #2
 80089de:	4413      	add	r3, r2
 80089e0:	009b      	lsls	r3, r3, #2
 80089e2:	440b      	add	r3, r1
 80089e4:	3324      	adds	r3, #36	; 0x24
 80089e6:	2200      	movs	r2, #0
 80089e8:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80089ea:	4b32      	ldr	r3, [pc, #200]	; (8008ab4 <USBD_CDC_DeInit+0xfc>)
 80089ec:	781b      	ldrb	r3, [r3, #0]
 80089ee:	4619      	mov	r1, r3
 80089f0:	6878      	ldr	r0, [r7, #4]
 80089f2:	f002 fb96 	bl	800b122 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80089f6:	4b2f      	ldr	r3, [pc, #188]	; (8008ab4 <USBD_CDC_DeInit+0xfc>)
 80089f8:	781b      	ldrb	r3, [r3, #0]
 80089fa:	f003 020f 	and.w	r2, r3, #15
 80089fe:	6879      	ldr	r1, [r7, #4]
 8008a00:	4613      	mov	r3, r2
 8008a02:	009b      	lsls	r3, r3, #2
 8008a04:	4413      	add	r3, r2
 8008a06:	009b      	lsls	r3, r3, #2
 8008a08:	440b      	add	r3, r1
 8008a0a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008a0e:	2200      	movs	r2, #0
 8008a10:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8008a12:	4b29      	ldr	r3, [pc, #164]	; (8008ab8 <USBD_CDC_DeInit+0x100>)
 8008a14:	781b      	ldrb	r3, [r3, #0]
 8008a16:	4619      	mov	r1, r3
 8008a18:	6878      	ldr	r0, [r7, #4]
 8008a1a:	f002 fb82 	bl	800b122 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8008a1e:	4b26      	ldr	r3, [pc, #152]	; (8008ab8 <USBD_CDC_DeInit+0x100>)
 8008a20:	781b      	ldrb	r3, [r3, #0]
 8008a22:	f003 020f 	and.w	r2, r3, #15
 8008a26:	6879      	ldr	r1, [r7, #4]
 8008a28:	4613      	mov	r3, r2
 8008a2a:	009b      	lsls	r3, r3, #2
 8008a2c:	4413      	add	r3, r2
 8008a2e:	009b      	lsls	r3, r3, #2
 8008a30:	440b      	add	r3, r1
 8008a32:	3324      	adds	r3, #36	; 0x24
 8008a34:	2200      	movs	r2, #0
 8008a36:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8008a38:	4b1f      	ldr	r3, [pc, #124]	; (8008ab8 <USBD_CDC_DeInit+0x100>)
 8008a3a:	781b      	ldrb	r3, [r3, #0]
 8008a3c:	f003 020f 	and.w	r2, r3, #15
 8008a40:	6879      	ldr	r1, [r7, #4]
 8008a42:	4613      	mov	r3, r2
 8008a44:	009b      	lsls	r3, r3, #2
 8008a46:	4413      	add	r3, r2
 8008a48:	009b      	lsls	r3, r3, #2
 8008a4a:	440b      	add	r3, r1
 8008a4c:	3326      	adds	r3, #38	; 0x26
 8008a4e:	2200      	movs	r2, #0
 8008a50:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	32b0      	adds	r2, #176	; 0xb0
 8008a5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d01f      	beq.n	8008aa4 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008a6a:	687a      	ldr	r2, [r7, #4]
 8008a6c:	33b0      	adds	r3, #176	; 0xb0
 8008a6e:	009b      	lsls	r3, r3, #2
 8008a70:	4413      	add	r3, r2
 8008a72:	685b      	ldr	r3, [r3, #4]
 8008a74:	685b      	ldr	r3, [r3, #4]
 8008a76:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	32b0      	adds	r2, #176	; 0xb0
 8008a82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a86:	4618      	mov	r0, r3
 8008a88:	f002 fcd0 	bl	800b42c <free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	32b0      	adds	r2, #176	; 0xb0
 8008a96:	2100      	movs	r1, #0
 8008a98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	2200      	movs	r2, #0
 8008aa0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8008aa4:	2300      	movs	r3, #0
}
 8008aa6:	4618      	mov	r0, r3
 8008aa8:	3708      	adds	r7, #8
 8008aaa:	46bd      	mov	sp, r7
 8008aac:	bd80      	pop	{r7, pc}
 8008aae:	bf00      	nop
 8008ab0:	20000093 	.word	0x20000093
 8008ab4:	20000094 	.word	0x20000094
 8008ab8:	20000095 	.word	0x20000095

08008abc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8008abc:	b580      	push	{r7, lr}
 8008abe:	b086      	sub	sp, #24
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	6078      	str	r0, [r7, #4]
 8008ac4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	32b0      	adds	r2, #176	; 0xb0
 8008ad0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ad4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8008ad6:	2300      	movs	r3, #0
 8008ad8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8008ada:	2300      	movs	r3, #0
 8008adc:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8008ade:	2300      	movs	r3, #0
 8008ae0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8008ae2:	693b      	ldr	r3, [r7, #16]
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d101      	bne.n	8008aec <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8008ae8:	2303      	movs	r3, #3
 8008aea:	e0bf      	b.n	8008c6c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008aec:	683b      	ldr	r3, [r7, #0]
 8008aee:	781b      	ldrb	r3, [r3, #0]
 8008af0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d050      	beq.n	8008b9a <USBD_CDC_Setup+0xde>
 8008af8:	2b20      	cmp	r3, #32
 8008afa:	f040 80af 	bne.w	8008c5c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8008afe:	683b      	ldr	r3, [r7, #0]
 8008b00:	88db      	ldrh	r3, [r3, #6]
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d03a      	beq.n	8008b7c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8008b06:	683b      	ldr	r3, [r7, #0]
 8008b08:	781b      	ldrb	r3, [r3, #0]
 8008b0a:	b25b      	sxtb	r3, r3
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	da1b      	bge.n	8008b48 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008b16:	687a      	ldr	r2, [r7, #4]
 8008b18:	33b0      	adds	r3, #176	; 0xb0
 8008b1a:	009b      	lsls	r3, r3, #2
 8008b1c:	4413      	add	r3, r2
 8008b1e:	685b      	ldr	r3, [r3, #4]
 8008b20:	689b      	ldr	r3, [r3, #8]
 8008b22:	683a      	ldr	r2, [r7, #0]
 8008b24:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8008b26:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008b28:	683a      	ldr	r2, [r7, #0]
 8008b2a:	88d2      	ldrh	r2, [r2, #6]
 8008b2c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8008b2e:	683b      	ldr	r3, [r7, #0]
 8008b30:	88db      	ldrh	r3, [r3, #6]
 8008b32:	2b07      	cmp	r3, #7
 8008b34:	bf28      	it	cs
 8008b36:	2307      	movcs	r3, #7
 8008b38:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8008b3a:	693b      	ldr	r3, [r7, #16]
 8008b3c:	89fa      	ldrh	r2, [r7, #14]
 8008b3e:	4619      	mov	r1, r3
 8008b40:	6878      	ldr	r0, [r7, #4]
 8008b42:	f001 fdad 	bl	800a6a0 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8008b46:	e090      	b.n	8008c6a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8008b48:	683b      	ldr	r3, [r7, #0]
 8008b4a:	785a      	ldrb	r2, [r3, #1]
 8008b4c:	693b      	ldr	r3, [r7, #16]
 8008b4e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8008b52:	683b      	ldr	r3, [r7, #0]
 8008b54:	88db      	ldrh	r3, [r3, #6]
 8008b56:	2b3f      	cmp	r3, #63	; 0x3f
 8008b58:	d803      	bhi.n	8008b62 <USBD_CDC_Setup+0xa6>
 8008b5a:	683b      	ldr	r3, [r7, #0]
 8008b5c:	88db      	ldrh	r3, [r3, #6]
 8008b5e:	b2da      	uxtb	r2, r3
 8008b60:	e000      	b.n	8008b64 <USBD_CDC_Setup+0xa8>
 8008b62:	2240      	movs	r2, #64	; 0x40
 8008b64:	693b      	ldr	r3, [r7, #16]
 8008b66:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8008b6a:	6939      	ldr	r1, [r7, #16]
 8008b6c:	693b      	ldr	r3, [r7, #16]
 8008b6e:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8008b72:	461a      	mov	r2, r3
 8008b74:	6878      	ldr	r0, [r7, #4]
 8008b76:	f001 fdbf 	bl	800a6f8 <USBD_CtlPrepareRx>
      break;
 8008b7a:	e076      	b.n	8008c6a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008b82:	687a      	ldr	r2, [r7, #4]
 8008b84:	33b0      	adds	r3, #176	; 0xb0
 8008b86:	009b      	lsls	r3, r3, #2
 8008b88:	4413      	add	r3, r2
 8008b8a:	685b      	ldr	r3, [r3, #4]
 8008b8c:	689b      	ldr	r3, [r3, #8]
 8008b8e:	683a      	ldr	r2, [r7, #0]
 8008b90:	7850      	ldrb	r0, [r2, #1]
 8008b92:	2200      	movs	r2, #0
 8008b94:	6839      	ldr	r1, [r7, #0]
 8008b96:	4798      	blx	r3
      break;
 8008b98:	e067      	b.n	8008c6a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008b9a:	683b      	ldr	r3, [r7, #0]
 8008b9c:	785b      	ldrb	r3, [r3, #1]
 8008b9e:	2b0b      	cmp	r3, #11
 8008ba0:	d851      	bhi.n	8008c46 <USBD_CDC_Setup+0x18a>
 8008ba2:	a201      	add	r2, pc, #4	; (adr r2, 8008ba8 <USBD_CDC_Setup+0xec>)
 8008ba4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ba8:	08008bd9 	.word	0x08008bd9
 8008bac:	08008c55 	.word	0x08008c55
 8008bb0:	08008c47 	.word	0x08008c47
 8008bb4:	08008c47 	.word	0x08008c47
 8008bb8:	08008c47 	.word	0x08008c47
 8008bbc:	08008c47 	.word	0x08008c47
 8008bc0:	08008c47 	.word	0x08008c47
 8008bc4:	08008c47 	.word	0x08008c47
 8008bc8:	08008c47 	.word	0x08008c47
 8008bcc:	08008c47 	.word	0x08008c47
 8008bd0:	08008c03 	.word	0x08008c03
 8008bd4:	08008c2d 	.word	0x08008c2d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008bde:	b2db      	uxtb	r3, r3
 8008be0:	2b03      	cmp	r3, #3
 8008be2:	d107      	bne.n	8008bf4 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008be4:	f107 030a 	add.w	r3, r7, #10
 8008be8:	2202      	movs	r2, #2
 8008bea:	4619      	mov	r1, r3
 8008bec:	6878      	ldr	r0, [r7, #4]
 8008bee:	f001 fd57 	bl	800a6a0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008bf2:	e032      	b.n	8008c5a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008bf4:	6839      	ldr	r1, [r7, #0]
 8008bf6:	6878      	ldr	r0, [r7, #4]
 8008bf8:	f001 fce1 	bl	800a5be <USBD_CtlError>
            ret = USBD_FAIL;
 8008bfc:	2303      	movs	r3, #3
 8008bfe:	75fb      	strb	r3, [r7, #23]
          break;
 8008c00:	e02b      	b.n	8008c5a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c08:	b2db      	uxtb	r3, r3
 8008c0a:	2b03      	cmp	r3, #3
 8008c0c:	d107      	bne.n	8008c1e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8008c0e:	f107 030d 	add.w	r3, r7, #13
 8008c12:	2201      	movs	r2, #1
 8008c14:	4619      	mov	r1, r3
 8008c16:	6878      	ldr	r0, [r7, #4]
 8008c18:	f001 fd42 	bl	800a6a0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008c1c:	e01d      	b.n	8008c5a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008c1e:	6839      	ldr	r1, [r7, #0]
 8008c20:	6878      	ldr	r0, [r7, #4]
 8008c22:	f001 fccc 	bl	800a5be <USBD_CtlError>
            ret = USBD_FAIL;
 8008c26:	2303      	movs	r3, #3
 8008c28:	75fb      	strb	r3, [r7, #23]
          break;
 8008c2a:	e016      	b.n	8008c5a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c32:	b2db      	uxtb	r3, r3
 8008c34:	2b03      	cmp	r3, #3
 8008c36:	d00f      	beq.n	8008c58 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8008c38:	6839      	ldr	r1, [r7, #0]
 8008c3a:	6878      	ldr	r0, [r7, #4]
 8008c3c:	f001 fcbf 	bl	800a5be <USBD_CtlError>
            ret = USBD_FAIL;
 8008c40:	2303      	movs	r3, #3
 8008c42:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008c44:	e008      	b.n	8008c58 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8008c46:	6839      	ldr	r1, [r7, #0]
 8008c48:	6878      	ldr	r0, [r7, #4]
 8008c4a:	f001 fcb8 	bl	800a5be <USBD_CtlError>
          ret = USBD_FAIL;
 8008c4e:	2303      	movs	r3, #3
 8008c50:	75fb      	strb	r3, [r7, #23]
          break;
 8008c52:	e002      	b.n	8008c5a <USBD_CDC_Setup+0x19e>
          break;
 8008c54:	bf00      	nop
 8008c56:	e008      	b.n	8008c6a <USBD_CDC_Setup+0x1ae>
          break;
 8008c58:	bf00      	nop
      }
      break;
 8008c5a:	e006      	b.n	8008c6a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8008c5c:	6839      	ldr	r1, [r7, #0]
 8008c5e:	6878      	ldr	r0, [r7, #4]
 8008c60:	f001 fcad 	bl	800a5be <USBD_CtlError>
      ret = USBD_FAIL;
 8008c64:	2303      	movs	r3, #3
 8008c66:	75fb      	strb	r3, [r7, #23]
      break;
 8008c68:	bf00      	nop
  }

  return (uint8_t)ret;
 8008c6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c6c:	4618      	mov	r0, r3
 8008c6e:	3718      	adds	r7, #24
 8008c70:	46bd      	mov	sp, r7
 8008c72:	bd80      	pop	{r7, pc}

08008c74 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008c74:	b580      	push	{r7, lr}
 8008c76:	b084      	sub	sp, #16
 8008c78:	af00      	add	r7, sp, #0
 8008c7a:	6078      	str	r0, [r7, #4]
 8008c7c:	460b      	mov	r3, r1
 8008c7e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008c86:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	32b0      	adds	r2, #176	; 0xb0
 8008c92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d101      	bne.n	8008c9e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8008c9a:	2303      	movs	r3, #3
 8008c9c:	e065      	b.n	8008d6a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	32b0      	adds	r2, #176	; 0xb0
 8008ca8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008cac:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008cae:	78fb      	ldrb	r3, [r7, #3]
 8008cb0:	f003 020f 	and.w	r2, r3, #15
 8008cb4:	6879      	ldr	r1, [r7, #4]
 8008cb6:	4613      	mov	r3, r2
 8008cb8:	009b      	lsls	r3, r3, #2
 8008cba:	4413      	add	r3, r2
 8008cbc:	009b      	lsls	r3, r3, #2
 8008cbe:	440b      	add	r3, r1
 8008cc0:	3318      	adds	r3, #24
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d02f      	beq.n	8008d28 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8008cc8:	78fb      	ldrb	r3, [r7, #3]
 8008cca:	f003 020f 	and.w	r2, r3, #15
 8008cce:	6879      	ldr	r1, [r7, #4]
 8008cd0:	4613      	mov	r3, r2
 8008cd2:	009b      	lsls	r3, r3, #2
 8008cd4:	4413      	add	r3, r2
 8008cd6:	009b      	lsls	r3, r3, #2
 8008cd8:	440b      	add	r3, r1
 8008cda:	3318      	adds	r3, #24
 8008cdc:	681a      	ldr	r2, [r3, #0]
 8008cde:	78fb      	ldrb	r3, [r7, #3]
 8008ce0:	f003 010f 	and.w	r1, r3, #15
 8008ce4:	68f8      	ldr	r0, [r7, #12]
 8008ce6:	460b      	mov	r3, r1
 8008ce8:	00db      	lsls	r3, r3, #3
 8008cea:	440b      	add	r3, r1
 8008cec:	009b      	lsls	r3, r3, #2
 8008cee:	4403      	add	r3, r0
 8008cf0:	3348      	adds	r3, #72	; 0x48
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	fbb2 f1f3 	udiv	r1, r2, r3
 8008cf8:	fb01 f303 	mul.w	r3, r1, r3
 8008cfc:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d112      	bne.n	8008d28 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8008d02:	78fb      	ldrb	r3, [r7, #3]
 8008d04:	f003 020f 	and.w	r2, r3, #15
 8008d08:	6879      	ldr	r1, [r7, #4]
 8008d0a:	4613      	mov	r3, r2
 8008d0c:	009b      	lsls	r3, r3, #2
 8008d0e:	4413      	add	r3, r2
 8008d10:	009b      	lsls	r3, r3, #2
 8008d12:	440b      	add	r3, r1
 8008d14:	3318      	adds	r3, #24
 8008d16:	2200      	movs	r2, #0
 8008d18:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008d1a:	78f9      	ldrb	r1, [r7, #3]
 8008d1c:	2300      	movs	r3, #0
 8008d1e:	2200      	movs	r2, #0
 8008d20:	6878      	ldr	r0, [r7, #4]
 8008d22:	f002 faa6 	bl	800b272 <USBD_LL_Transmit>
 8008d26:	e01f      	b.n	8008d68 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8008d28:	68bb      	ldr	r3, [r7, #8]
 8008d2a:	2200      	movs	r2, #0
 8008d2c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008d36:	687a      	ldr	r2, [r7, #4]
 8008d38:	33b0      	adds	r3, #176	; 0xb0
 8008d3a:	009b      	lsls	r3, r3, #2
 8008d3c:	4413      	add	r3, r2
 8008d3e:	685b      	ldr	r3, [r3, #4]
 8008d40:	691b      	ldr	r3, [r3, #16]
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d010      	beq.n	8008d68 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008d4c:	687a      	ldr	r2, [r7, #4]
 8008d4e:	33b0      	adds	r3, #176	; 0xb0
 8008d50:	009b      	lsls	r3, r3, #2
 8008d52:	4413      	add	r3, r2
 8008d54:	685b      	ldr	r3, [r3, #4]
 8008d56:	691b      	ldr	r3, [r3, #16]
 8008d58:	68ba      	ldr	r2, [r7, #8]
 8008d5a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8008d5e:	68ba      	ldr	r2, [r7, #8]
 8008d60:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8008d64:	78fa      	ldrb	r2, [r7, #3]
 8008d66:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8008d68:	2300      	movs	r3, #0
}
 8008d6a:	4618      	mov	r0, r3
 8008d6c:	3710      	adds	r7, #16
 8008d6e:	46bd      	mov	sp, r7
 8008d70:	bd80      	pop	{r7, pc}

08008d72 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008d72:	b580      	push	{r7, lr}
 8008d74:	b084      	sub	sp, #16
 8008d76:	af00      	add	r7, sp, #0
 8008d78:	6078      	str	r0, [r7, #4]
 8008d7a:	460b      	mov	r3, r1
 8008d7c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	32b0      	adds	r2, #176	; 0xb0
 8008d88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d8c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	32b0      	adds	r2, #176	; 0xb0
 8008d98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d101      	bne.n	8008da4 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8008da0:	2303      	movs	r3, #3
 8008da2:	e01a      	b.n	8008dda <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008da4:	78fb      	ldrb	r3, [r7, #3]
 8008da6:	4619      	mov	r1, r3
 8008da8:	6878      	ldr	r0, [r7, #4]
 8008daa:	f002 faa4 	bl	800b2f6 <USBD_LL_GetRxDataSize>
 8008dae:	4602      	mov	r2, r0
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008dbc:	687a      	ldr	r2, [r7, #4]
 8008dbe:	33b0      	adds	r3, #176	; 0xb0
 8008dc0:	009b      	lsls	r3, r3, #2
 8008dc2:	4413      	add	r3, r2
 8008dc4:	685b      	ldr	r3, [r3, #4]
 8008dc6:	68db      	ldr	r3, [r3, #12]
 8008dc8:	68fa      	ldr	r2, [r7, #12]
 8008dca:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8008dce:	68fa      	ldr	r2, [r7, #12]
 8008dd0:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8008dd4:	4611      	mov	r1, r2
 8008dd6:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8008dd8:	2300      	movs	r3, #0
}
 8008dda:	4618      	mov	r0, r3
 8008ddc:	3710      	adds	r7, #16
 8008dde:	46bd      	mov	sp, r7
 8008de0:	bd80      	pop	{r7, pc}

08008de2 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008de2:	b580      	push	{r7, lr}
 8008de4:	b084      	sub	sp, #16
 8008de6:	af00      	add	r7, sp, #0
 8008de8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	32b0      	adds	r2, #176	; 0xb0
 8008df4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008df8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d101      	bne.n	8008e04 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008e00:	2303      	movs	r3, #3
 8008e02:	e025      	b.n	8008e50 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008e0a:	687a      	ldr	r2, [r7, #4]
 8008e0c:	33b0      	adds	r3, #176	; 0xb0
 8008e0e:	009b      	lsls	r3, r3, #2
 8008e10:	4413      	add	r3, r2
 8008e12:	685b      	ldr	r3, [r3, #4]
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d01a      	beq.n	8008e4e <USBD_CDC_EP0_RxReady+0x6c>
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8008e1e:	2bff      	cmp	r3, #255	; 0xff
 8008e20:	d015      	beq.n	8008e4e <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008e28:	687a      	ldr	r2, [r7, #4]
 8008e2a:	33b0      	adds	r3, #176	; 0xb0
 8008e2c:	009b      	lsls	r3, r3, #2
 8008e2e:	4413      	add	r3, r2
 8008e30:	685b      	ldr	r3, [r3, #4]
 8008e32:	689b      	ldr	r3, [r3, #8]
 8008e34:	68fa      	ldr	r2, [r7, #12]
 8008e36:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8008e3a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8008e3c:	68fa      	ldr	r2, [r7, #12]
 8008e3e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008e42:	b292      	uxth	r2, r2
 8008e44:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	22ff      	movs	r2, #255	; 0xff
 8008e4a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8008e4e:	2300      	movs	r3, #0
}
 8008e50:	4618      	mov	r0, r3
 8008e52:	3710      	adds	r7, #16
 8008e54:	46bd      	mov	sp, r7
 8008e56:	bd80      	pop	{r7, pc}

08008e58 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008e58:	b580      	push	{r7, lr}
 8008e5a:	b086      	sub	sp, #24
 8008e5c:	af00      	add	r7, sp, #0
 8008e5e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008e60:	2182      	movs	r1, #130	; 0x82
 8008e62:	4818      	ldr	r0, [pc, #96]	; (8008ec4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008e64:	f000 fd49 	bl	80098fa <USBD_GetEpDesc>
 8008e68:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008e6a:	2101      	movs	r1, #1
 8008e6c:	4815      	ldr	r0, [pc, #84]	; (8008ec4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008e6e:	f000 fd44 	bl	80098fa <USBD_GetEpDesc>
 8008e72:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008e74:	2181      	movs	r1, #129	; 0x81
 8008e76:	4813      	ldr	r0, [pc, #76]	; (8008ec4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008e78:	f000 fd3f 	bl	80098fa <USBD_GetEpDesc>
 8008e7c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008e7e:	697b      	ldr	r3, [r7, #20]
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d002      	beq.n	8008e8a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008e84:	697b      	ldr	r3, [r7, #20]
 8008e86:	2210      	movs	r2, #16
 8008e88:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008e8a:	693b      	ldr	r3, [r7, #16]
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d006      	beq.n	8008e9e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008e90:	693b      	ldr	r3, [r7, #16]
 8008e92:	2200      	movs	r2, #0
 8008e94:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008e98:	711a      	strb	r2, [r3, #4]
 8008e9a:	2200      	movs	r2, #0
 8008e9c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d006      	beq.n	8008eb2 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	2200      	movs	r2, #0
 8008ea8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008eac:	711a      	strb	r2, [r3, #4]
 8008eae:	2200      	movs	r2, #0
 8008eb0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	2243      	movs	r2, #67	; 0x43
 8008eb6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008eb8:	4b02      	ldr	r3, [pc, #8]	; (8008ec4 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8008eba:	4618      	mov	r0, r3
 8008ebc:	3718      	adds	r7, #24
 8008ebe:	46bd      	mov	sp, r7
 8008ec0:	bd80      	pop	{r7, pc}
 8008ec2:	bf00      	nop
 8008ec4:	20000050 	.word	0x20000050

08008ec8 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008ec8:	b580      	push	{r7, lr}
 8008eca:	b086      	sub	sp, #24
 8008ecc:	af00      	add	r7, sp, #0
 8008ece:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008ed0:	2182      	movs	r1, #130	; 0x82
 8008ed2:	4818      	ldr	r0, [pc, #96]	; (8008f34 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008ed4:	f000 fd11 	bl	80098fa <USBD_GetEpDesc>
 8008ed8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008eda:	2101      	movs	r1, #1
 8008edc:	4815      	ldr	r0, [pc, #84]	; (8008f34 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008ede:	f000 fd0c 	bl	80098fa <USBD_GetEpDesc>
 8008ee2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008ee4:	2181      	movs	r1, #129	; 0x81
 8008ee6:	4813      	ldr	r0, [pc, #76]	; (8008f34 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008ee8:	f000 fd07 	bl	80098fa <USBD_GetEpDesc>
 8008eec:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008eee:	697b      	ldr	r3, [r7, #20]
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d002      	beq.n	8008efa <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8008ef4:	697b      	ldr	r3, [r7, #20]
 8008ef6:	2210      	movs	r2, #16
 8008ef8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008efa:	693b      	ldr	r3, [r7, #16]
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d006      	beq.n	8008f0e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008f00:	693b      	ldr	r3, [r7, #16]
 8008f02:	2200      	movs	r2, #0
 8008f04:	711a      	strb	r2, [r3, #4]
 8008f06:	2200      	movs	r2, #0
 8008f08:	f042 0202 	orr.w	r2, r2, #2
 8008f0c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d006      	beq.n	8008f22 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	2200      	movs	r2, #0
 8008f18:	711a      	strb	r2, [r3, #4]
 8008f1a:	2200      	movs	r2, #0
 8008f1c:	f042 0202 	orr.w	r2, r2, #2
 8008f20:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	2243      	movs	r2, #67	; 0x43
 8008f26:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008f28:	4b02      	ldr	r3, [pc, #8]	; (8008f34 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8008f2a:	4618      	mov	r0, r3
 8008f2c:	3718      	adds	r7, #24
 8008f2e:	46bd      	mov	sp, r7
 8008f30:	bd80      	pop	{r7, pc}
 8008f32:	bf00      	nop
 8008f34:	20000050 	.word	0x20000050

08008f38 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008f38:	b580      	push	{r7, lr}
 8008f3a:	b086      	sub	sp, #24
 8008f3c:	af00      	add	r7, sp, #0
 8008f3e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008f40:	2182      	movs	r1, #130	; 0x82
 8008f42:	4818      	ldr	r0, [pc, #96]	; (8008fa4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008f44:	f000 fcd9 	bl	80098fa <USBD_GetEpDesc>
 8008f48:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008f4a:	2101      	movs	r1, #1
 8008f4c:	4815      	ldr	r0, [pc, #84]	; (8008fa4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008f4e:	f000 fcd4 	bl	80098fa <USBD_GetEpDesc>
 8008f52:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008f54:	2181      	movs	r1, #129	; 0x81
 8008f56:	4813      	ldr	r0, [pc, #76]	; (8008fa4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008f58:	f000 fccf 	bl	80098fa <USBD_GetEpDesc>
 8008f5c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008f5e:	697b      	ldr	r3, [r7, #20]
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d002      	beq.n	8008f6a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008f64:	697b      	ldr	r3, [r7, #20]
 8008f66:	2210      	movs	r2, #16
 8008f68:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008f6a:	693b      	ldr	r3, [r7, #16]
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d006      	beq.n	8008f7e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008f70:	693b      	ldr	r3, [r7, #16]
 8008f72:	2200      	movs	r2, #0
 8008f74:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008f78:	711a      	strb	r2, [r3, #4]
 8008f7a:	2200      	movs	r2, #0
 8008f7c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d006      	beq.n	8008f92 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	2200      	movs	r2, #0
 8008f88:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008f8c:	711a      	strb	r2, [r3, #4]
 8008f8e:	2200      	movs	r2, #0
 8008f90:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	2243      	movs	r2, #67	; 0x43
 8008f96:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008f98:	4b02      	ldr	r3, [pc, #8]	; (8008fa4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8008f9a:	4618      	mov	r0, r3
 8008f9c:	3718      	adds	r7, #24
 8008f9e:	46bd      	mov	sp, r7
 8008fa0:	bd80      	pop	{r7, pc}
 8008fa2:	bf00      	nop
 8008fa4:	20000050 	.word	0x20000050

08008fa8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008fa8:	b480      	push	{r7}
 8008faa:	b083      	sub	sp, #12
 8008fac:	af00      	add	r7, sp, #0
 8008fae:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	220a      	movs	r2, #10
 8008fb4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8008fb6:	4b03      	ldr	r3, [pc, #12]	; (8008fc4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008fb8:	4618      	mov	r0, r3
 8008fba:	370c      	adds	r7, #12
 8008fbc:	46bd      	mov	sp, r7
 8008fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc2:	4770      	bx	lr
 8008fc4:	2000000c 	.word	0x2000000c

08008fc8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8008fc8:	b480      	push	{r7}
 8008fca:	b083      	sub	sp, #12
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	6078      	str	r0, [r7, #4]
 8008fd0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8008fd2:	683b      	ldr	r3, [r7, #0]
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d101      	bne.n	8008fdc <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008fd8:	2303      	movs	r3, #3
 8008fda:	e009      	b.n	8008ff0 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008fe2:	687a      	ldr	r2, [r7, #4]
 8008fe4:	33b0      	adds	r3, #176	; 0xb0
 8008fe6:	009b      	lsls	r3, r3, #2
 8008fe8:	4413      	add	r3, r2
 8008fea:	683a      	ldr	r2, [r7, #0]
 8008fec:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8008fee:	2300      	movs	r3, #0
}
 8008ff0:	4618      	mov	r0, r3
 8008ff2:	370c      	adds	r7, #12
 8008ff4:	46bd      	mov	sp, r7
 8008ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ffa:	4770      	bx	lr

08008ffc <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8008ffc:	b480      	push	{r7}
 8008ffe:	b087      	sub	sp, #28
 8009000:	af00      	add	r7, sp, #0
 8009002:	60f8      	str	r0, [r7, #12]
 8009004:	60b9      	str	r1, [r7, #8]
 8009006:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	32b0      	adds	r2, #176	; 0xb0
 8009012:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009016:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8009018:	697b      	ldr	r3, [r7, #20]
 800901a:	2b00      	cmp	r3, #0
 800901c:	d101      	bne.n	8009022 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800901e:	2303      	movs	r3, #3
 8009020:	e008      	b.n	8009034 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8009022:	697b      	ldr	r3, [r7, #20]
 8009024:	68ba      	ldr	r2, [r7, #8]
 8009026:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800902a:	697b      	ldr	r3, [r7, #20]
 800902c:	687a      	ldr	r2, [r7, #4]
 800902e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8009032:	2300      	movs	r3, #0
}
 8009034:	4618      	mov	r0, r3
 8009036:	371c      	adds	r7, #28
 8009038:	46bd      	mov	sp, r7
 800903a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800903e:	4770      	bx	lr

08009040 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8009040:	b480      	push	{r7}
 8009042:	b085      	sub	sp, #20
 8009044:	af00      	add	r7, sp, #0
 8009046:	6078      	str	r0, [r7, #4]
 8009048:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	32b0      	adds	r2, #176	; 0xb0
 8009054:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009058:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	2b00      	cmp	r3, #0
 800905e:	d101      	bne.n	8009064 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8009060:	2303      	movs	r3, #3
 8009062:	e004      	b.n	800906e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	683a      	ldr	r2, [r7, #0]
 8009068:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800906c:	2300      	movs	r3, #0
}
 800906e:	4618      	mov	r0, r3
 8009070:	3714      	adds	r7, #20
 8009072:	46bd      	mov	sp, r7
 8009074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009078:	4770      	bx	lr
	...

0800907c <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800907c:	b580      	push	{r7, lr}
 800907e:	b084      	sub	sp, #16
 8009080:	af00      	add	r7, sp, #0
 8009082:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	32b0      	adds	r2, #176	; 0xb0
 800908e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009092:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8009094:	2301      	movs	r3, #1
 8009096:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8009098:	68bb      	ldr	r3, [r7, #8]
 800909a:	2b00      	cmp	r3, #0
 800909c:	d101      	bne.n	80090a2 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800909e:	2303      	movs	r3, #3
 80090a0:	e025      	b.n	80090ee <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 80090a2:	68bb      	ldr	r3, [r7, #8]
 80090a4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d11f      	bne.n	80090ec <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80090ac:	68bb      	ldr	r3, [r7, #8]
 80090ae:	2201      	movs	r2, #1
 80090b0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 80090b4:	4b10      	ldr	r3, [pc, #64]	; (80090f8 <USBD_CDC_TransmitPacket+0x7c>)
 80090b6:	781b      	ldrb	r3, [r3, #0]
 80090b8:	f003 020f 	and.w	r2, r3, #15
 80090bc:	68bb      	ldr	r3, [r7, #8]
 80090be:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 80090c2:	6878      	ldr	r0, [r7, #4]
 80090c4:	4613      	mov	r3, r2
 80090c6:	009b      	lsls	r3, r3, #2
 80090c8:	4413      	add	r3, r2
 80090ca:	009b      	lsls	r3, r3, #2
 80090cc:	4403      	add	r3, r0
 80090ce:	3318      	adds	r3, #24
 80090d0:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 80090d2:	4b09      	ldr	r3, [pc, #36]	; (80090f8 <USBD_CDC_TransmitPacket+0x7c>)
 80090d4:	7819      	ldrb	r1, [r3, #0]
 80090d6:	68bb      	ldr	r3, [r7, #8]
 80090d8:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80090dc:	68bb      	ldr	r3, [r7, #8]
 80090de:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80090e2:	6878      	ldr	r0, [r7, #4]
 80090e4:	f002 f8c5 	bl	800b272 <USBD_LL_Transmit>

    ret = USBD_OK;
 80090e8:	2300      	movs	r3, #0
 80090ea:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80090ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80090ee:	4618      	mov	r0, r3
 80090f0:	3710      	adds	r7, #16
 80090f2:	46bd      	mov	sp, r7
 80090f4:	bd80      	pop	{r7, pc}
 80090f6:	bf00      	nop
 80090f8:	20000093 	.word	0x20000093

080090fc <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80090fc:	b580      	push	{r7, lr}
 80090fe:	b084      	sub	sp, #16
 8009100:	af00      	add	r7, sp, #0
 8009102:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	32b0      	adds	r2, #176	; 0xb0
 800910e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009112:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	32b0      	adds	r2, #176	; 0xb0
 800911e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009122:	2b00      	cmp	r3, #0
 8009124:	d101      	bne.n	800912a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8009126:	2303      	movs	r3, #3
 8009128:	e018      	b.n	800915c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	7c1b      	ldrb	r3, [r3, #16]
 800912e:	2b00      	cmp	r3, #0
 8009130:	d10a      	bne.n	8009148 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009132:	4b0c      	ldr	r3, [pc, #48]	; (8009164 <USBD_CDC_ReceivePacket+0x68>)
 8009134:	7819      	ldrb	r1, [r3, #0]
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800913c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009140:	6878      	ldr	r0, [r7, #4]
 8009142:	f002 f8b7 	bl	800b2b4 <USBD_LL_PrepareReceive>
 8009146:	e008      	b.n	800915a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009148:	4b06      	ldr	r3, [pc, #24]	; (8009164 <USBD_CDC_ReceivePacket+0x68>)
 800914a:	7819      	ldrb	r1, [r3, #0]
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009152:	2340      	movs	r3, #64	; 0x40
 8009154:	6878      	ldr	r0, [r7, #4]
 8009156:	f002 f8ad 	bl	800b2b4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800915a:	2300      	movs	r3, #0
}
 800915c:	4618      	mov	r0, r3
 800915e:	3710      	adds	r7, #16
 8009160:	46bd      	mov	sp, r7
 8009162:	bd80      	pop	{r7, pc}
 8009164:	20000094 	.word	0x20000094

08009168 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009168:	b580      	push	{r7, lr}
 800916a:	b086      	sub	sp, #24
 800916c:	af00      	add	r7, sp, #0
 800916e:	60f8      	str	r0, [r7, #12]
 8009170:	60b9      	str	r1, [r7, #8]
 8009172:	4613      	mov	r3, r2
 8009174:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	2b00      	cmp	r3, #0
 800917a:	d101      	bne.n	8009180 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800917c:	2303      	movs	r3, #3
 800917e:	e01f      	b.n	80091c0 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	2200      	movs	r2, #0
 8009184:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	2200      	movs	r2, #0
 800918c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	2200      	movs	r2, #0
 8009194:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009198:	68bb      	ldr	r3, [r7, #8]
 800919a:	2b00      	cmp	r3, #0
 800919c:	d003      	beq.n	80091a6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	68ba      	ldr	r2, [r7, #8]
 80091a2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	2201      	movs	r2, #1
 80091aa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	79fa      	ldrb	r2, [r7, #7]
 80091b2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80091b4:	68f8      	ldr	r0, [r7, #12]
 80091b6:	f001 ff27 	bl	800b008 <USBD_LL_Init>
 80091ba:	4603      	mov	r3, r0
 80091bc:	75fb      	strb	r3, [r7, #23]

  return ret;
 80091be:	7dfb      	ldrb	r3, [r7, #23]
}
 80091c0:	4618      	mov	r0, r3
 80091c2:	3718      	adds	r7, #24
 80091c4:	46bd      	mov	sp, r7
 80091c6:	bd80      	pop	{r7, pc}

080091c8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80091c8:	b580      	push	{r7, lr}
 80091ca:	b084      	sub	sp, #16
 80091cc:	af00      	add	r7, sp, #0
 80091ce:	6078      	str	r0, [r7, #4]
 80091d0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80091d2:	2300      	movs	r3, #0
 80091d4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80091d6:	683b      	ldr	r3, [r7, #0]
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d101      	bne.n	80091e0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80091dc:	2303      	movs	r3, #3
 80091de:	e025      	b.n	800922c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	683a      	ldr	r2, [r7, #0]
 80091e4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	32ae      	adds	r2, #174	; 0xae
 80091f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80091f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d00f      	beq.n	800921c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	32ae      	adds	r2, #174	; 0xae
 8009206:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800920a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800920c:	f107 020e 	add.w	r2, r7, #14
 8009210:	4610      	mov	r0, r2
 8009212:	4798      	blx	r3
 8009214:	4602      	mov	r2, r0
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8009222:	1c5a      	adds	r2, r3, #1
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800922a:	2300      	movs	r3, #0
}
 800922c:	4618      	mov	r0, r3
 800922e:	3710      	adds	r7, #16
 8009230:	46bd      	mov	sp, r7
 8009232:	bd80      	pop	{r7, pc}

08009234 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009234:	b580      	push	{r7, lr}
 8009236:	b082      	sub	sp, #8
 8009238:	af00      	add	r7, sp, #0
 800923a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800923c:	6878      	ldr	r0, [r7, #4]
 800923e:	f001 ff2f 	bl	800b0a0 <USBD_LL_Start>
 8009242:	4603      	mov	r3, r0
}
 8009244:	4618      	mov	r0, r3
 8009246:	3708      	adds	r7, #8
 8009248:	46bd      	mov	sp, r7
 800924a:	bd80      	pop	{r7, pc}

0800924c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800924c:	b480      	push	{r7}
 800924e:	b083      	sub	sp, #12
 8009250:	af00      	add	r7, sp, #0
 8009252:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009254:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8009256:	4618      	mov	r0, r3
 8009258:	370c      	adds	r7, #12
 800925a:	46bd      	mov	sp, r7
 800925c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009260:	4770      	bx	lr

08009262 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009262:	b580      	push	{r7, lr}
 8009264:	b084      	sub	sp, #16
 8009266:	af00      	add	r7, sp, #0
 8009268:	6078      	str	r0, [r7, #4]
 800926a:	460b      	mov	r3, r1
 800926c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800926e:	2300      	movs	r3, #0
 8009270:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009278:	2b00      	cmp	r3, #0
 800927a:	d009      	beq.n	8009290 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	78fa      	ldrb	r2, [r7, #3]
 8009286:	4611      	mov	r1, r2
 8009288:	6878      	ldr	r0, [r7, #4]
 800928a:	4798      	blx	r3
 800928c:	4603      	mov	r3, r0
 800928e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009290:	7bfb      	ldrb	r3, [r7, #15]
}
 8009292:	4618      	mov	r0, r3
 8009294:	3710      	adds	r7, #16
 8009296:	46bd      	mov	sp, r7
 8009298:	bd80      	pop	{r7, pc}

0800929a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800929a:	b580      	push	{r7, lr}
 800929c:	b084      	sub	sp, #16
 800929e:	af00      	add	r7, sp, #0
 80092a0:	6078      	str	r0, [r7, #4]
 80092a2:	460b      	mov	r3, r1
 80092a4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80092a6:	2300      	movs	r3, #0
 80092a8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80092b0:	685b      	ldr	r3, [r3, #4]
 80092b2:	78fa      	ldrb	r2, [r7, #3]
 80092b4:	4611      	mov	r1, r2
 80092b6:	6878      	ldr	r0, [r7, #4]
 80092b8:	4798      	blx	r3
 80092ba:	4603      	mov	r3, r0
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d001      	beq.n	80092c4 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80092c0:	2303      	movs	r3, #3
 80092c2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80092c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80092c6:	4618      	mov	r0, r3
 80092c8:	3710      	adds	r7, #16
 80092ca:	46bd      	mov	sp, r7
 80092cc:	bd80      	pop	{r7, pc}

080092ce <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80092ce:	b580      	push	{r7, lr}
 80092d0:	b084      	sub	sp, #16
 80092d2:	af00      	add	r7, sp, #0
 80092d4:	6078      	str	r0, [r7, #4]
 80092d6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80092de:	6839      	ldr	r1, [r7, #0]
 80092e0:	4618      	mov	r0, r3
 80092e2:	f001 f932 	bl	800a54a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	2201      	movs	r2, #1
 80092ea:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80092f4:	461a      	mov	r2, r3
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009302:	f003 031f 	and.w	r3, r3, #31
 8009306:	2b02      	cmp	r3, #2
 8009308:	d01a      	beq.n	8009340 <USBD_LL_SetupStage+0x72>
 800930a:	2b02      	cmp	r3, #2
 800930c:	d822      	bhi.n	8009354 <USBD_LL_SetupStage+0x86>
 800930e:	2b00      	cmp	r3, #0
 8009310:	d002      	beq.n	8009318 <USBD_LL_SetupStage+0x4a>
 8009312:	2b01      	cmp	r3, #1
 8009314:	d00a      	beq.n	800932c <USBD_LL_SetupStage+0x5e>
 8009316:	e01d      	b.n	8009354 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800931e:	4619      	mov	r1, r3
 8009320:	6878      	ldr	r0, [r7, #4]
 8009322:	f000 fb5f 	bl	80099e4 <USBD_StdDevReq>
 8009326:	4603      	mov	r3, r0
 8009328:	73fb      	strb	r3, [r7, #15]
      break;
 800932a:	e020      	b.n	800936e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009332:	4619      	mov	r1, r3
 8009334:	6878      	ldr	r0, [r7, #4]
 8009336:	f000 fbc7 	bl	8009ac8 <USBD_StdItfReq>
 800933a:	4603      	mov	r3, r0
 800933c:	73fb      	strb	r3, [r7, #15]
      break;
 800933e:	e016      	b.n	800936e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009346:	4619      	mov	r1, r3
 8009348:	6878      	ldr	r0, [r7, #4]
 800934a:	f000 fc29 	bl	8009ba0 <USBD_StdEPReq>
 800934e:	4603      	mov	r3, r0
 8009350:	73fb      	strb	r3, [r7, #15]
      break;
 8009352:	e00c      	b.n	800936e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800935a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800935e:	b2db      	uxtb	r3, r3
 8009360:	4619      	mov	r1, r3
 8009362:	6878      	ldr	r0, [r7, #4]
 8009364:	f001 fefc 	bl	800b160 <USBD_LL_StallEP>
 8009368:	4603      	mov	r3, r0
 800936a:	73fb      	strb	r3, [r7, #15]
      break;
 800936c:	bf00      	nop
  }

  return ret;
 800936e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009370:	4618      	mov	r0, r3
 8009372:	3710      	adds	r7, #16
 8009374:	46bd      	mov	sp, r7
 8009376:	bd80      	pop	{r7, pc}

08009378 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009378:	b580      	push	{r7, lr}
 800937a:	b086      	sub	sp, #24
 800937c:	af00      	add	r7, sp, #0
 800937e:	60f8      	str	r0, [r7, #12]
 8009380:	460b      	mov	r3, r1
 8009382:	607a      	str	r2, [r7, #4]
 8009384:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8009386:	2300      	movs	r3, #0
 8009388:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800938a:	7afb      	ldrb	r3, [r7, #11]
 800938c:	2b00      	cmp	r3, #0
 800938e:	d16e      	bne.n	800946e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8009396:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800939e:	2b03      	cmp	r3, #3
 80093a0:	f040 8098 	bne.w	80094d4 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80093a4:	693b      	ldr	r3, [r7, #16]
 80093a6:	689a      	ldr	r2, [r3, #8]
 80093a8:	693b      	ldr	r3, [r7, #16]
 80093aa:	68db      	ldr	r3, [r3, #12]
 80093ac:	429a      	cmp	r2, r3
 80093ae:	d913      	bls.n	80093d8 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80093b0:	693b      	ldr	r3, [r7, #16]
 80093b2:	689a      	ldr	r2, [r3, #8]
 80093b4:	693b      	ldr	r3, [r7, #16]
 80093b6:	68db      	ldr	r3, [r3, #12]
 80093b8:	1ad2      	subs	r2, r2, r3
 80093ba:	693b      	ldr	r3, [r7, #16]
 80093bc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80093be:	693b      	ldr	r3, [r7, #16]
 80093c0:	68da      	ldr	r2, [r3, #12]
 80093c2:	693b      	ldr	r3, [r7, #16]
 80093c4:	689b      	ldr	r3, [r3, #8]
 80093c6:	4293      	cmp	r3, r2
 80093c8:	bf28      	it	cs
 80093ca:	4613      	movcs	r3, r2
 80093cc:	461a      	mov	r2, r3
 80093ce:	6879      	ldr	r1, [r7, #4]
 80093d0:	68f8      	ldr	r0, [r7, #12]
 80093d2:	f001 f9ae 	bl	800a732 <USBD_CtlContinueRx>
 80093d6:	e07d      	b.n	80094d4 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80093de:	f003 031f 	and.w	r3, r3, #31
 80093e2:	2b02      	cmp	r3, #2
 80093e4:	d014      	beq.n	8009410 <USBD_LL_DataOutStage+0x98>
 80093e6:	2b02      	cmp	r3, #2
 80093e8:	d81d      	bhi.n	8009426 <USBD_LL_DataOutStage+0xae>
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d002      	beq.n	80093f4 <USBD_LL_DataOutStage+0x7c>
 80093ee:	2b01      	cmp	r3, #1
 80093f0:	d003      	beq.n	80093fa <USBD_LL_DataOutStage+0x82>
 80093f2:	e018      	b.n	8009426 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80093f4:	2300      	movs	r3, #0
 80093f6:	75bb      	strb	r3, [r7, #22]
            break;
 80093f8:	e018      	b.n	800942c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8009400:	b2db      	uxtb	r3, r3
 8009402:	4619      	mov	r1, r3
 8009404:	68f8      	ldr	r0, [r7, #12]
 8009406:	f000 fa5e 	bl	80098c6 <USBD_CoreFindIF>
 800940a:	4603      	mov	r3, r0
 800940c:	75bb      	strb	r3, [r7, #22]
            break;
 800940e:	e00d      	b.n	800942c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8009416:	b2db      	uxtb	r3, r3
 8009418:	4619      	mov	r1, r3
 800941a:	68f8      	ldr	r0, [r7, #12]
 800941c:	f000 fa60 	bl	80098e0 <USBD_CoreFindEP>
 8009420:	4603      	mov	r3, r0
 8009422:	75bb      	strb	r3, [r7, #22]
            break;
 8009424:	e002      	b.n	800942c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8009426:	2300      	movs	r3, #0
 8009428:	75bb      	strb	r3, [r7, #22]
            break;
 800942a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800942c:	7dbb      	ldrb	r3, [r7, #22]
 800942e:	2b00      	cmp	r3, #0
 8009430:	d119      	bne.n	8009466 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009438:	b2db      	uxtb	r3, r3
 800943a:	2b03      	cmp	r3, #3
 800943c:	d113      	bne.n	8009466 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800943e:	7dba      	ldrb	r2, [r7, #22]
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	32ae      	adds	r2, #174	; 0xae
 8009444:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009448:	691b      	ldr	r3, [r3, #16]
 800944a:	2b00      	cmp	r3, #0
 800944c:	d00b      	beq.n	8009466 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800944e:	7dba      	ldrb	r2, [r7, #22]
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8009456:	7dba      	ldrb	r2, [r7, #22]
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	32ae      	adds	r2, #174	; 0xae
 800945c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009460:	691b      	ldr	r3, [r3, #16]
 8009462:	68f8      	ldr	r0, [r7, #12]
 8009464:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8009466:	68f8      	ldr	r0, [r7, #12]
 8009468:	f001 f974 	bl	800a754 <USBD_CtlSendStatus>
 800946c:	e032      	b.n	80094d4 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800946e:	7afb      	ldrb	r3, [r7, #11]
 8009470:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009474:	b2db      	uxtb	r3, r3
 8009476:	4619      	mov	r1, r3
 8009478:	68f8      	ldr	r0, [r7, #12]
 800947a:	f000 fa31 	bl	80098e0 <USBD_CoreFindEP>
 800947e:	4603      	mov	r3, r0
 8009480:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009482:	7dbb      	ldrb	r3, [r7, #22]
 8009484:	2bff      	cmp	r3, #255	; 0xff
 8009486:	d025      	beq.n	80094d4 <USBD_LL_DataOutStage+0x15c>
 8009488:	7dbb      	ldrb	r3, [r7, #22]
 800948a:	2b00      	cmp	r3, #0
 800948c:	d122      	bne.n	80094d4 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009494:	b2db      	uxtb	r3, r3
 8009496:	2b03      	cmp	r3, #3
 8009498:	d117      	bne.n	80094ca <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800949a:	7dba      	ldrb	r2, [r7, #22]
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	32ae      	adds	r2, #174	; 0xae
 80094a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094a4:	699b      	ldr	r3, [r3, #24]
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d00f      	beq.n	80094ca <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80094aa:	7dba      	ldrb	r2, [r7, #22]
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80094b2:	7dba      	ldrb	r2, [r7, #22]
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	32ae      	adds	r2, #174	; 0xae
 80094b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094bc:	699b      	ldr	r3, [r3, #24]
 80094be:	7afa      	ldrb	r2, [r7, #11]
 80094c0:	4611      	mov	r1, r2
 80094c2:	68f8      	ldr	r0, [r7, #12]
 80094c4:	4798      	blx	r3
 80094c6:	4603      	mov	r3, r0
 80094c8:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80094ca:	7dfb      	ldrb	r3, [r7, #23]
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d001      	beq.n	80094d4 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80094d0:	7dfb      	ldrb	r3, [r7, #23]
 80094d2:	e000      	b.n	80094d6 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80094d4:	2300      	movs	r3, #0
}
 80094d6:	4618      	mov	r0, r3
 80094d8:	3718      	adds	r7, #24
 80094da:	46bd      	mov	sp, r7
 80094dc:	bd80      	pop	{r7, pc}

080094de <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80094de:	b580      	push	{r7, lr}
 80094e0:	b086      	sub	sp, #24
 80094e2:	af00      	add	r7, sp, #0
 80094e4:	60f8      	str	r0, [r7, #12]
 80094e6:	460b      	mov	r3, r1
 80094e8:	607a      	str	r2, [r7, #4]
 80094ea:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80094ec:	7afb      	ldrb	r3, [r7, #11]
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d16f      	bne.n	80095d2 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	3314      	adds	r3, #20
 80094f6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80094fe:	2b02      	cmp	r3, #2
 8009500:	d15a      	bne.n	80095b8 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8009502:	693b      	ldr	r3, [r7, #16]
 8009504:	689a      	ldr	r2, [r3, #8]
 8009506:	693b      	ldr	r3, [r7, #16]
 8009508:	68db      	ldr	r3, [r3, #12]
 800950a:	429a      	cmp	r2, r3
 800950c:	d914      	bls.n	8009538 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800950e:	693b      	ldr	r3, [r7, #16]
 8009510:	689a      	ldr	r2, [r3, #8]
 8009512:	693b      	ldr	r3, [r7, #16]
 8009514:	68db      	ldr	r3, [r3, #12]
 8009516:	1ad2      	subs	r2, r2, r3
 8009518:	693b      	ldr	r3, [r7, #16]
 800951a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800951c:	693b      	ldr	r3, [r7, #16]
 800951e:	689b      	ldr	r3, [r3, #8]
 8009520:	461a      	mov	r2, r3
 8009522:	6879      	ldr	r1, [r7, #4]
 8009524:	68f8      	ldr	r0, [r7, #12]
 8009526:	f001 f8d6 	bl	800a6d6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800952a:	2300      	movs	r3, #0
 800952c:	2200      	movs	r2, #0
 800952e:	2100      	movs	r1, #0
 8009530:	68f8      	ldr	r0, [r7, #12]
 8009532:	f001 febf 	bl	800b2b4 <USBD_LL_PrepareReceive>
 8009536:	e03f      	b.n	80095b8 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8009538:	693b      	ldr	r3, [r7, #16]
 800953a:	68da      	ldr	r2, [r3, #12]
 800953c:	693b      	ldr	r3, [r7, #16]
 800953e:	689b      	ldr	r3, [r3, #8]
 8009540:	429a      	cmp	r2, r3
 8009542:	d11c      	bne.n	800957e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8009544:	693b      	ldr	r3, [r7, #16]
 8009546:	685a      	ldr	r2, [r3, #4]
 8009548:	693b      	ldr	r3, [r7, #16]
 800954a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800954c:	429a      	cmp	r2, r3
 800954e:	d316      	bcc.n	800957e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8009550:	693b      	ldr	r3, [r7, #16]
 8009552:	685a      	ldr	r2, [r3, #4]
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800955a:	429a      	cmp	r2, r3
 800955c:	d20f      	bcs.n	800957e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800955e:	2200      	movs	r2, #0
 8009560:	2100      	movs	r1, #0
 8009562:	68f8      	ldr	r0, [r7, #12]
 8009564:	f001 f8b7 	bl	800a6d6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	2200      	movs	r2, #0
 800956c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009570:	2300      	movs	r3, #0
 8009572:	2200      	movs	r2, #0
 8009574:	2100      	movs	r1, #0
 8009576:	68f8      	ldr	r0, [r7, #12]
 8009578:	f001 fe9c 	bl	800b2b4 <USBD_LL_PrepareReceive>
 800957c:	e01c      	b.n	80095b8 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009584:	b2db      	uxtb	r3, r3
 8009586:	2b03      	cmp	r3, #3
 8009588:	d10f      	bne.n	80095aa <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009590:	68db      	ldr	r3, [r3, #12]
 8009592:	2b00      	cmp	r3, #0
 8009594:	d009      	beq.n	80095aa <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	2200      	movs	r2, #0
 800959a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80095a4:	68db      	ldr	r3, [r3, #12]
 80095a6:	68f8      	ldr	r0, [r7, #12]
 80095a8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80095aa:	2180      	movs	r1, #128	; 0x80
 80095ac:	68f8      	ldr	r0, [r7, #12]
 80095ae:	f001 fdd7 	bl	800b160 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80095b2:	68f8      	ldr	r0, [r7, #12]
 80095b4:	f001 f8e1 	bl	800a77a <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d03a      	beq.n	8009638 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80095c2:	68f8      	ldr	r0, [r7, #12]
 80095c4:	f7ff fe42 	bl	800924c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	2200      	movs	r2, #0
 80095cc:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80095d0:	e032      	b.n	8009638 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80095d2:	7afb      	ldrb	r3, [r7, #11]
 80095d4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80095d8:	b2db      	uxtb	r3, r3
 80095da:	4619      	mov	r1, r3
 80095dc:	68f8      	ldr	r0, [r7, #12]
 80095de:	f000 f97f 	bl	80098e0 <USBD_CoreFindEP>
 80095e2:	4603      	mov	r3, r0
 80095e4:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80095e6:	7dfb      	ldrb	r3, [r7, #23]
 80095e8:	2bff      	cmp	r3, #255	; 0xff
 80095ea:	d025      	beq.n	8009638 <USBD_LL_DataInStage+0x15a>
 80095ec:	7dfb      	ldrb	r3, [r7, #23]
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d122      	bne.n	8009638 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80095f8:	b2db      	uxtb	r3, r3
 80095fa:	2b03      	cmp	r3, #3
 80095fc:	d11c      	bne.n	8009638 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80095fe:	7dfa      	ldrb	r2, [r7, #23]
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	32ae      	adds	r2, #174	; 0xae
 8009604:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009608:	695b      	ldr	r3, [r3, #20]
 800960a:	2b00      	cmp	r3, #0
 800960c:	d014      	beq.n	8009638 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800960e:	7dfa      	ldrb	r2, [r7, #23]
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8009616:	7dfa      	ldrb	r2, [r7, #23]
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	32ae      	adds	r2, #174	; 0xae
 800961c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009620:	695b      	ldr	r3, [r3, #20]
 8009622:	7afa      	ldrb	r2, [r7, #11]
 8009624:	4611      	mov	r1, r2
 8009626:	68f8      	ldr	r0, [r7, #12]
 8009628:	4798      	blx	r3
 800962a:	4603      	mov	r3, r0
 800962c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800962e:	7dbb      	ldrb	r3, [r7, #22]
 8009630:	2b00      	cmp	r3, #0
 8009632:	d001      	beq.n	8009638 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8009634:	7dbb      	ldrb	r3, [r7, #22]
 8009636:	e000      	b.n	800963a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8009638:	2300      	movs	r3, #0
}
 800963a:	4618      	mov	r0, r3
 800963c:	3718      	adds	r7, #24
 800963e:	46bd      	mov	sp, r7
 8009640:	bd80      	pop	{r7, pc}

08009642 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009642:	b580      	push	{r7, lr}
 8009644:	b084      	sub	sp, #16
 8009646:	af00      	add	r7, sp, #0
 8009648:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800964a:	2300      	movs	r3, #0
 800964c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	2201      	movs	r2, #1
 8009652:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	2200      	movs	r2, #0
 800965a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	2200      	movs	r2, #0
 8009662:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	2200      	movs	r2, #0
 8009668:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	2200      	movs	r2, #0
 8009670:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800967a:	2b00      	cmp	r3, #0
 800967c:	d014      	beq.n	80096a8 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009684:	685b      	ldr	r3, [r3, #4]
 8009686:	2b00      	cmp	r3, #0
 8009688:	d00e      	beq.n	80096a8 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009690:	685b      	ldr	r3, [r3, #4]
 8009692:	687a      	ldr	r2, [r7, #4]
 8009694:	6852      	ldr	r2, [r2, #4]
 8009696:	b2d2      	uxtb	r2, r2
 8009698:	4611      	mov	r1, r2
 800969a:	6878      	ldr	r0, [r7, #4]
 800969c:	4798      	blx	r3
 800969e:	4603      	mov	r3, r0
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d001      	beq.n	80096a8 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80096a4:	2303      	movs	r3, #3
 80096a6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80096a8:	2340      	movs	r3, #64	; 0x40
 80096aa:	2200      	movs	r2, #0
 80096ac:	2100      	movs	r1, #0
 80096ae:	6878      	ldr	r0, [r7, #4]
 80096b0:	f001 fd11 	bl	800b0d6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	2201      	movs	r2, #1
 80096b8:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	2240      	movs	r2, #64	; 0x40
 80096c0:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80096c4:	2340      	movs	r3, #64	; 0x40
 80096c6:	2200      	movs	r2, #0
 80096c8:	2180      	movs	r1, #128	; 0x80
 80096ca:	6878      	ldr	r0, [r7, #4]
 80096cc:	f001 fd03 	bl	800b0d6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	2201      	movs	r2, #1
 80096d4:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	2240      	movs	r2, #64	; 0x40
 80096da:	621a      	str	r2, [r3, #32]

  return ret;
 80096dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80096de:	4618      	mov	r0, r3
 80096e0:	3710      	adds	r7, #16
 80096e2:	46bd      	mov	sp, r7
 80096e4:	bd80      	pop	{r7, pc}

080096e6 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80096e6:	b480      	push	{r7}
 80096e8:	b083      	sub	sp, #12
 80096ea:	af00      	add	r7, sp, #0
 80096ec:	6078      	str	r0, [r7, #4]
 80096ee:	460b      	mov	r3, r1
 80096f0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	78fa      	ldrb	r2, [r7, #3]
 80096f6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80096f8:	2300      	movs	r3, #0
}
 80096fa:	4618      	mov	r0, r3
 80096fc:	370c      	adds	r7, #12
 80096fe:	46bd      	mov	sp, r7
 8009700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009704:	4770      	bx	lr

08009706 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009706:	b480      	push	{r7}
 8009708:	b083      	sub	sp, #12
 800970a:	af00      	add	r7, sp, #0
 800970c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009714:	b2da      	uxtb	r2, r3
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	2204      	movs	r2, #4
 8009720:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8009724:	2300      	movs	r3, #0
}
 8009726:	4618      	mov	r0, r3
 8009728:	370c      	adds	r7, #12
 800972a:	46bd      	mov	sp, r7
 800972c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009730:	4770      	bx	lr

08009732 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009732:	b480      	push	{r7}
 8009734:	b083      	sub	sp, #12
 8009736:	af00      	add	r7, sp, #0
 8009738:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009740:	b2db      	uxtb	r3, r3
 8009742:	2b04      	cmp	r3, #4
 8009744:	d106      	bne.n	8009754 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800974c:	b2da      	uxtb	r2, r3
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8009754:	2300      	movs	r3, #0
}
 8009756:	4618      	mov	r0, r3
 8009758:	370c      	adds	r7, #12
 800975a:	46bd      	mov	sp, r7
 800975c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009760:	4770      	bx	lr

08009762 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009762:	b580      	push	{r7, lr}
 8009764:	b082      	sub	sp, #8
 8009766:	af00      	add	r7, sp, #0
 8009768:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009770:	b2db      	uxtb	r3, r3
 8009772:	2b03      	cmp	r3, #3
 8009774:	d110      	bne.n	8009798 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800977c:	2b00      	cmp	r3, #0
 800977e:	d00b      	beq.n	8009798 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009786:	69db      	ldr	r3, [r3, #28]
 8009788:	2b00      	cmp	r3, #0
 800978a:	d005      	beq.n	8009798 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009792:	69db      	ldr	r3, [r3, #28]
 8009794:	6878      	ldr	r0, [r7, #4]
 8009796:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8009798:	2300      	movs	r3, #0
}
 800979a:	4618      	mov	r0, r3
 800979c:	3708      	adds	r7, #8
 800979e:	46bd      	mov	sp, r7
 80097a0:	bd80      	pop	{r7, pc}

080097a2 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80097a2:	b580      	push	{r7, lr}
 80097a4:	b082      	sub	sp, #8
 80097a6:	af00      	add	r7, sp, #0
 80097a8:	6078      	str	r0, [r7, #4]
 80097aa:	460b      	mov	r3, r1
 80097ac:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	32ae      	adds	r2, #174	; 0xae
 80097b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d101      	bne.n	80097c4 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80097c0:	2303      	movs	r3, #3
 80097c2:	e01c      	b.n	80097fe <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80097ca:	b2db      	uxtb	r3, r3
 80097cc:	2b03      	cmp	r3, #3
 80097ce:	d115      	bne.n	80097fc <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	32ae      	adds	r2, #174	; 0xae
 80097da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80097de:	6a1b      	ldr	r3, [r3, #32]
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d00b      	beq.n	80097fc <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	32ae      	adds	r2, #174	; 0xae
 80097ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80097f2:	6a1b      	ldr	r3, [r3, #32]
 80097f4:	78fa      	ldrb	r2, [r7, #3]
 80097f6:	4611      	mov	r1, r2
 80097f8:	6878      	ldr	r0, [r7, #4]
 80097fa:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80097fc:	2300      	movs	r3, #0
}
 80097fe:	4618      	mov	r0, r3
 8009800:	3708      	adds	r7, #8
 8009802:	46bd      	mov	sp, r7
 8009804:	bd80      	pop	{r7, pc}

08009806 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8009806:	b580      	push	{r7, lr}
 8009808:	b082      	sub	sp, #8
 800980a:	af00      	add	r7, sp, #0
 800980c:	6078      	str	r0, [r7, #4]
 800980e:	460b      	mov	r3, r1
 8009810:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	32ae      	adds	r2, #174	; 0xae
 800981c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009820:	2b00      	cmp	r3, #0
 8009822:	d101      	bne.n	8009828 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8009824:	2303      	movs	r3, #3
 8009826:	e01c      	b.n	8009862 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800982e:	b2db      	uxtb	r3, r3
 8009830:	2b03      	cmp	r3, #3
 8009832:	d115      	bne.n	8009860 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	32ae      	adds	r2, #174	; 0xae
 800983e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009844:	2b00      	cmp	r3, #0
 8009846:	d00b      	beq.n	8009860 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	32ae      	adds	r2, #174	; 0xae
 8009852:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009858:	78fa      	ldrb	r2, [r7, #3]
 800985a:	4611      	mov	r1, r2
 800985c:	6878      	ldr	r0, [r7, #4]
 800985e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009860:	2300      	movs	r3, #0
}
 8009862:	4618      	mov	r0, r3
 8009864:	3708      	adds	r7, #8
 8009866:	46bd      	mov	sp, r7
 8009868:	bd80      	pop	{r7, pc}

0800986a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800986a:	b480      	push	{r7}
 800986c:	b083      	sub	sp, #12
 800986e:	af00      	add	r7, sp, #0
 8009870:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009872:	2300      	movs	r3, #0
}
 8009874:	4618      	mov	r0, r3
 8009876:	370c      	adds	r7, #12
 8009878:	46bd      	mov	sp, r7
 800987a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800987e:	4770      	bx	lr

08009880 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8009880:	b580      	push	{r7, lr}
 8009882:	b084      	sub	sp, #16
 8009884:	af00      	add	r7, sp, #0
 8009886:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8009888:	2300      	movs	r3, #0
 800988a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	2201      	movs	r2, #1
 8009890:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800989a:	2b00      	cmp	r3, #0
 800989c:	d00e      	beq.n	80098bc <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80098a4:	685b      	ldr	r3, [r3, #4]
 80098a6:	687a      	ldr	r2, [r7, #4]
 80098a8:	6852      	ldr	r2, [r2, #4]
 80098aa:	b2d2      	uxtb	r2, r2
 80098ac:	4611      	mov	r1, r2
 80098ae:	6878      	ldr	r0, [r7, #4]
 80098b0:	4798      	blx	r3
 80098b2:	4603      	mov	r3, r0
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d001      	beq.n	80098bc <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80098b8:	2303      	movs	r3, #3
 80098ba:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80098bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80098be:	4618      	mov	r0, r3
 80098c0:	3710      	adds	r7, #16
 80098c2:	46bd      	mov	sp, r7
 80098c4:	bd80      	pop	{r7, pc}

080098c6 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80098c6:	b480      	push	{r7}
 80098c8:	b083      	sub	sp, #12
 80098ca:	af00      	add	r7, sp, #0
 80098cc:	6078      	str	r0, [r7, #4]
 80098ce:	460b      	mov	r3, r1
 80098d0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80098d2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80098d4:	4618      	mov	r0, r3
 80098d6:	370c      	adds	r7, #12
 80098d8:	46bd      	mov	sp, r7
 80098da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098de:	4770      	bx	lr

080098e0 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80098e0:	b480      	push	{r7}
 80098e2:	b083      	sub	sp, #12
 80098e4:	af00      	add	r7, sp, #0
 80098e6:	6078      	str	r0, [r7, #4]
 80098e8:	460b      	mov	r3, r1
 80098ea:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80098ec:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80098ee:	4618      	mov	r0, r3
 80098f0:	370c      	adds	r7, #12
 80098f2:	46bd      	mov	sp, r7
 80098f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098f8:	4770      	bx	lr

080098fa <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80098fa:	b580      	push	{r7, lr}
 80098fc:	b086      	sub	sp, #24
 80098fe:	af00      	add	r7, sp, #0
 8009900:	6078      	str	r0, [r7, #4]
 8009902:	460b      	mov	r3, r1
 8009904:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800990e:	2300      	movs	r3, #0
 8009910:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	885b      	ldrh	r3, [r3, #2]
 8009916:	b29a      	uxth	r2, r3
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	781b      	ldrb	r3, [r3, #0]
 800991c:	b29b      	uxth	r3, r3
 800991e:	429a      	cmp	r2, r3
 8009920:	d920      	bls.n	8009964 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	781b      	ldrb	r3, [r3, #0]
 8009926:	b29b      	uxth	r3, r3
 8009928:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800992a:	e013      	b.n	8009954 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800992c:	f107 030a 	add.w	r3, r7, #10
 8009930:	4619      	mov	r1, r3
 8009932:	6978      	ldr	r0, [r7, #20]
 8009934:	f000 f81b 	bl	800996e <USBD_GetNextDesc>
 8009938:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800993a:	697b      	ldr	r3, [r7, #20]
 800993c:	785b      	ldrb	r3, [r3, #1]
 800993e:	2b05      	cmp	r3, #5
 8009940:	d108      	bne.n	8009954 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8009942:	697b      	ldr	r3, [r7, #20]
 8009944:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8009946:	693b      	ldr	r3, [r7, #16]
 8009948:	789b      	ldrb	r3, [r3, #2]
 800994a:	78fa      	ldrb	r2, [r7, #3]
 800994c:	429a      	cmp	r2, r3
 800994e:	d008      	beq.n	8009962 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8009950:	2300      	movs	r3, #0
 8009952:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	885b      	ldrh	r3, [r3, #2]
 8009958:	b29a      	uxth	r2, r3
 800995a:	897b      	ldrh	r3, [r7, #10]
 800995c:	429a      	cmp	r2, r3
 800995e:	d8e5      	bhi.n	800992c <USBD_GetEpDesc+0x32>
 8009960:	e000      	b.n	8009964 <USBD_GetEpDesc+0x6a>
          break;
 8009962:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8009964:	693b      	ldr	r3, [r7, #16]
}
 8009966:	4618      	mov	r0, r3
 8009968:	3718      	adds	r7, #24
 800996a:	46bd      	mov	sp, r7
 800996c:	bd80      	pop	{r7, pc}

0800996e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800996e:	b480      	push	{r7}
 8009970:	b085      	sub	sp, #20
 8009972:	af00      	add	r7, sp, #0
 8009974:	6078      	str	r0, [r7, #4]
 8009976:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800997c:	683b      	ldr	r3, [r7, #0]
 800997e:	881a      	ldrh	r2, [r3, #0]
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	781b      	ldrb	r3, [r3, #0]
 8009984:	b29b      	uxth	r3, r3
 8009986:	4413      	add	r3, r2
 8009988:	b29a      	uxth	r2, r3
 800998a:	683b      	ldr	r3, [r7, #0]
 800998c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	781b      	ldrb	r3, [r3, #0]
 8009992:	461a      	mov	r2, r3
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	4413      	add	r3, r2
 8009998:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800999a:	68fb      	ldr	r3, [r7, #12]
}
 800999c:	4618      	mov	r0, r3
 800999e:	3714      	adds	r7, #20
 80099a0:	46bd      	mov	sp, r7
 80099a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a6:	4770      	bx	lr

080099a8 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80099a8:	b480      	push	{r7}
 80099aa:	b087      	sub	sp, #28
 80099ac:	af00      	add	r7, sp, #0
 80099ae:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80099b4:	697b      	ldr	r3, [r7, #20]
 80099b6:	781b      	ldrb	r3, [r3, #0]
 80099b8:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80099ba:	697b      	ldr	r3, [r7, #20]
 80099bc:	3301      	adds	r3, #1
 80099be:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80099c0:	697b      	ldr	r3, [r7, #20]
 80099c2:	781b      	ldrb	r3, [r3, #0]
 80099c4:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80099c6:	8a3b      	ldrh	r3, [r7, #16]
 80099c8:	021b      	lsls	r3, r3, #8
 80099ca:	b21a      	sxth	r2, r3
 80099cc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80099d0:	4313      	orrs	r3, r2
 80099d2:	b21b      	sxth	r3, r3
 80099d4:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80099d6:	89fb      	ldrh	r3, [r7, #14]
}
 80099d8:	4618      	mov	r0, r3
 80099da:	371c      	adds	r7, #28
 80099dc:	46bd      	mov	sp, r7
 80099de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e2:	4770      	bx	lr

080099e4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80099e4:	b580      	push	{r7, lr}
 80099e6:	b084      	sub	sp, #16
 80099e8:	af00      	add	r7, sp, #0
 80099ea:	6078      	str	r0, [r7, #4]
 80099ec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80099ee:	2300      	movs	r3, #0
 80099f0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80099f2:	683b      	ldr	r3, [r7, #0]
 80099f4:	781b      	ldrb	r3, [r3, #0]
 80099f6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80099fa:	2b40      	cmp	r3, #64	; 0x40
 80099fc:	d005      	beq.n	8009a0a <USBD_StdDevReq+0x26>
 80099fe:	2b40      	cmp	r3, #64	; 0x40
 8009a00:	d857      	bhi.n	8009ab2 <USBD_StdDevReq+0xce>
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d00f      	beq.n	8009a26 <USBD_StdDevReq+0x42>
 8009a06:	2b20      	cmp	r3, #32
 8009a08:	d153      	bne.n	8009ab2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	32ae      	adds	r2, #174	; 0xae
 8009a14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a18:	689b      	ldr	r3, [r3, #8]
 8009a1a:	6839      	ldr	r1, [r7, #0]
 8009a1c:	6878      	ldr	r0, [r7, #4]
 8009a1e:	4798      	blx	r3
 8009a20:	4603      	mov	r3, r0
 8009a22:	73fb      	strb	r3, [r7, #15]
      break;
 8009a24:	e04a      	b.n	8009abc <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009a26:	683b      	ldr	r3, [r7, #0]
 8009a28:	785b      	ldrb	r3, [r3, #1]
 8009a2a:	2b09      	cmp	r3, #9
 8009a2c:	d83b      	bhi.n	8009aa6 <USBD_StdDevReq+0xc2>
 8009a2e:	a201      	add	r2, pc, #4	; (adr r2, 8009a34 <USBD_StdDevReq+0x50>)
 8009a30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a34:	08009a89 	.word	0x08009a89
 8009a38:	08009a9d 	.word	0x08009a9d
 8009a3c:	08009aa7 	.word	0x08009aa7
 8009a40:	08009a93 	.word	0x08009a93
 8009a44:	08009aa7 	.word	0x08009aa7
 8009a48:	08009a67 	.word	0x08009a67
 8009a4c:	08009a5d 	.word	0x08009a5d
 8009a50:	08009aa7 	.word	0x08009aa7
 8009a54:	08009a7f 	.word	0x08009a7f
 8009a58:	08009a71 	.word	0x08009a71
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009a5c:	6839      	ldr	r1, [r7, #0]
 8009a5e:	6878      	ldr	r0, [r7, #4]
 8009a60:	f000 fa3c 	bl	8009edc <USBD_GetDescriptor>
          break;
 8009a64:	e024      	b.n	8009ab0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009a66:	6839      	ldr	r1, [r7, #0]
 8009a68:	6878      	ldr	r0, [r7, #4]
 8009a6a:	f000 fbcb 	bl	800a204 <USBD_SetAddress>
          break;
 8009a6e:	e01f      	b.n	8009ab0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8009a70:	6839      	ldr	r1, [r7, #0]
 8009a72:	6878      	ldr	r0, [r7, #4]
 8009a74:	f000 fc0a 	bl	800a28c <USBD_SetConfig>
 8009a78:	4603      	mov	r3, r0
 8009a7a:	73fb      	strb	r3, [r7, #15]
          break;
 8009a7c:	e018      	b.n	8009ab0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009a7e:	6839      	ldr	r1, [r7, #0]
 8009a80:	6878      	ldr	r0, [r7, #4]
 8009a82:	f000 fcad 	bl	800a3e0 <USBD_GetConfig>
          break;
 8009a86:	e013      	b.n	8009ab0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009a88:	6839      	ldr	r1, [r7, #0]
 8009a8a:	6878      	ldr	r0, [r7, #4]
 8009a8c:	f000 fcde 	bl	800a44c <USBD_GetStatus>
          break;
 8009a90:	e00e      	b.n	8009ab0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009a92:	6839      	ldr	r1, [r7, #0]
 8009a94:	6878      	ldr	r0, [r7, #4]
 8009a96:	f000 fd0d 	bl	800a4b4 <USBD_SetFeature>
          break;
 8009a9a:	e009      	b.n	8009ab0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009a9c:	6839      	ldr	r1, [r7, #0]
 8009a9e:	6878      	ldr	r0, [r7, #4]
 8009aa0:	f000 fd31 	bl	800a506 <USBD_ClrFeature>
          break;
 8009aa4:	e004      	b.n	8009ab0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8009aa6:	6839      	ldr	r1, [r7, #0]
 8009aa8:	6878      	ldr	r0, [r7, #4]
 8009aaa:	f000 fd88 	bl	800a5be <USBD_CtlError>
          break;
 8009aae:	bf00      	nop
      }
      break;
 8009ab0:	e004      	b.n	8009abc <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8009ab2:	6839      	ldr	r1, [r7, #0]
 8009ab4:	6878      	ldr	r0, [r7, #4]
 8009ab6:	f000 fd82 	bl	800a5be <USBD_CtlError>
      break;
 8009aba:	bf00      	nop
  }

  return ret;
 8009abc:	7bfb      	ldrb	r3, [r7, #15]
}
 8009abe:	4618      	mov	r0, r3
 8009ac0:	3710      	adds	r7, #16
 8009ac2:	46bd      	mov	sp, r7
 8009ac4:	bd80      	pop	{r7, pc}
 8009ac6:	bf00      	nop

08009ac8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009ac8:	b580      	push	{r7, lr}
 8009aca:	b084      	sub	sp, #16
 8009acc:	af00      	add	r7, sp, #0
 8009ace:	6078      	str	r0, [r7, #4]
 8009ad0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009ad2:	2300      	movs	r3, #0
 8009ad4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009ad6:	683b      	ldr	r3, [r7, #0]
 8009ad8:	781b      	ldrb	r3, [r3, #0]
 8009ada:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009ade:	2b40      	cmp	r3, #64	; 0x40
 8009ae0:	d005      	beq.n	8009aee <USBD_StdItfReq+0x26>
 8009ae2:	2b40      	cmp	r3, #64	; 0x40
 8009ae4:	d852      	bhi.n	8009b8c <USBD_StdItfReq+0xc4>
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d001      	beq.n	8009aee <USBD_StdItfReq+0x26>
 8009aea:	2b20      	cmp	r3, #32
 8009aec:	d14e      	bne.n	8009b8c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009af4:	b2db      	uxtb	r3, r3
 8009af6:	3b01      	subs	r3, #1
 8009af8:	2b02      	cmp	r3, #2
 8009afa:	d840      	bhi.n	8009b7e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009afc:	683b      	ldr	r3, [r7, #0]
 8009afe:	889b      	ldrh	r3, [r3, #4]
 8009b00:	b2db      	uxtb	r3, r3
 8009b02:	2b01      	cmp	r3, #1
 8009b04:	d836      	bhi.n	8009b74 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8009b06:	683b      	ldr	r3, [r7, #0]
 8009b08:	889b      	ldrh	r3, [r3, #4]
 8009b0a:	b2db      	uxtb	r3, r3
 8009b0c:	4619      	mov	r1, r3
 8009b0e:	6878      	ldr	r0, [r7, #4]
 8009b10:	f7ff fed9 	bl	80098c6 <USBD_CoreFindIF>
 8009b14:	4603      	mov	r3, r0
 8009b16:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009b18:	7bbb      	ldrb	r3, [r7, #14]
 8009b1a:	2bff      	cmp	r3, #255	; 0xff
 8009b1c:	d01d      	beq.n	8009b5a <USBD_StdItfReq+0x92>
 8009b1e:	7bbb      	ldrb	r3, [r7, #14]
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d11a      	bne.n	8009b5a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8009b24:	7bba      	ldrb	r2, [r7, #14]
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	32ae      	adds	r2, #174	; 0xae
 8009b2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b2e:	689b      	ldr	r3, [r3, #8]
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d00f      	beq.n	8009b54 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8009b34:	7bba      	ldrb	r2, [r7, #14]
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009b3c:	7bba      	ldrb	r2, [r7, #14]
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	32ae      	adds	r2, #174	; 0xae
 8009b42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b46:	689b      	ldr	r3, [r3, #8]
 8009b48:	6839      	ldr	r1, [r7, #0]
 8009b4a:	6878      	ldr	r0, [r7, #4]
 8009b4c:	4798      	blx	r3
 8009b4e:	4603      	mov	r3, r0
 8009b50:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009b52:	e004      	b.n	8009b5e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8009b54:	2303      	movs	r3, #3
 8009b56:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009b58:	e001      	b.n	8009b5e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8009b5a:	2303      	movs	r3, #3
 8009b5c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009b5e:	683b      	ldr	r3, [r7, #0]
 8009b60:	88db      	ldrh	r3, [r3, #6]
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d110      	bne.n	8009b88 <USBD_StdItfReq+0xc0>
 8009b66:	7bfb      	ldrb	r3, [r7, #15]
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d10d      	bne.n	8009b88 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8009b6c:	6878      	ldr	r0, [r7, #4]
 8009b6e:	f000 fdf1 	bl	800a754 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009b72:	e009      	b.n	8009b88 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8009b74:	6839      	ldr	r1, [r7, #0]
 8009b76:	6878      	ldr	r0, [r7, #4]
 8009b78:	f000 fd21 	bl	800a5be <USBD_CtlError>
          break;
 8009b7c:	e004      	b.n	8009b88 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8009b7e:	6839      	ldr	r1, [r7, #0]
 8009b80:	6878      	ldr	r0, [r7, #4]
 8009b82:	f000 fd1c 	bl	800a5be <USBD_CtlError>
          break;
 8009b86:	e000      	b.n	8009b8a <USBD_StdItfReq+0xc2>
          break;
 8009b88:	bf00      	nop
      }
      break;
 8009b8a:	e004      	b.n	8009b96 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8009b8c:	6839      	ldr	r1, [r7, #0]
 8009b8e:	6878      	ldr	r0, [r7, #4]
 8009b90:	f000 fd15 	bl	800a5be <USBD_CtlError>
      break;
 8009b94:	bf00      	nop
  }

  return ret;
 8009b96:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b98:	4618      	mov	r0, r3
 8009b9a:	3710      	adds	r7, #16
 8009b9c:	46bd      	mov	sp, r7
 8009b9e:	bd80      	pop	{r7, pc}

08009ba0 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009ba0:	b580      	push	{r7, lr}
 8009ba2:	b084      	sub	sp, #16
 8009ba4:	af00      	add	r7, sp, #0
 8009ba6:	6078      	str	r0, [r7, #4]
 8009ba8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8009baa:	2300      	movs	r3, #0
 8009bac:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8009bae:	683b      	ldr	r3, [r7, #0]
 8009bb0:	889b      	ldrh	r3, [r3, #4]
 8009bb2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009bb4:	683b      	ldr	r3, [r7, #0]
 8009bb6:	781b      	ldrb	r3, [r3, #0]
 8009bb8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009bbc:	2b40      	cmp	r3, #64	; 0x40
 8009bbe:	d007      	beq.n	8009bd0 <USBD_StdEPReq+0x30>
 8009bc0:	2b40      	cmp	r3, #64	; 0x40
 8009bc2:	f200 817f 	bhi.w	8009ec4 <USBD_StdEPReq+0x324>
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d02a      	beq.n	8009c20 <USBD_StdEPReq+0x80>
 8009bca:	2b20      	cmp	r3, #32
 8009bcc:	f040 817a 	bne.w	8009ec4 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8009bd0:	7bbb      	ldrb	r3, [r7, #14]
 8009bd2:	4619      	mov	r1, r3
 8009bd4:	6878      	ldr	r0, [r7, #4]
 8009bd6:	f7ff fe83 	bl	80098e0 <USBD_CoreFindEP>
 8009bda:	4603      	mov	r3, r0
 8009bdc:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009bde:	7b7b      	ldrb	r3, [r7, #13]
 8009be0:	2bff      	cmp	r3, #255	; 0xff
 8009be2:	f000 8174 	beq.w	8009ece <USBD_StdEPReq+0x32e>
 8009be6:	7b7b      	ldrb	r3, [r7, #13]
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	f040 8170 	bne.w	8009ece <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8009bee:	7b7a      	ldrb	r2, [r7, #13]
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8009bf6:	7b7a      	ldrb	r2, [r7, #13]
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	32ae      	adds	r2, #174	; 0xae
 8009bfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c00:	689b      	ldr	r3, [r3, #8]
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	f000 8163 	beq.w	8009ece <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8009c08:	7b7a      	ldrb	r2, [r7, #13]
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	32ae      	adds	r2, #174	; 0xae
 8009c0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c12:	689b      	ldr	r3, [r3, #8]
 8009c14:	6839      	ldr	r1, [r7, #0]
 8009c16:	6878      	ldr	r0, [r7, #4]
 8009c18:	4798      	blx	r3
 8009c1a:	4603      	mov	r3, r0
 8009c1c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8009c1e:	e156      	b.n	8009ece <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009c20:	683b      	ldr	r3, [r7, #0]
 8009c22:	785b      	ldrb	r3, [r3, #1]
 8009c24:	2b03      	cmp	r3, #3
 8009c26:	d008      	beq.n	8009c3a <USBD_StdEPReq+0x9a>
 8009c28:	2b03      	cmp	r3, #3
 8009c2a:	f300 8145 	bgt.w	8009eb8 <USBD_StdEPReq+0x318>
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	f000 809b 	beq.w	8009d6a <USBD_StdEPReq+0x1ca>
 8009c34:	2b01      	cmp	r3, #1
 8009c36:	d03c      	beq.n	8009cb2 <USBD_StdEPReq+0x112>
 8009c38:	e13e      	b.n	8009eb8 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c40:	b2db      	uxtb	r3, r3
 8009c42:	2b02      	cmp	r3, #2
 8009c44:	d002      	beq.n	8009c4c <USBD_StdEPReq+0xac>
 8009c46:	2b03      	cmp	r3, #3
 8009c48:	d016      	beq.n	8009c78 <USBD_StdEPReq+0xd8>
 8009c4a:	e02c      	b.n	8009ca6 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009c4c:	7bbb      	ldrb	r3, [r7, #14]
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d00d      	beq.n	8009c6e <USBD_StdEPReq+0xce>
 8009c52:	7bbb      	ldrb	r3, [r7, #14]
 8009c54:	2b80      	cmp	r3, #128	; 0x80
 8009c56:	d00a      	beq.n	8009c6e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009c58:	7bbb      	ldrb	r3, [r7, #14]
 8009c5a:	4619      	mov	r1, r3
 8009c5c:	6878      	ldr	r0, [r7, #4]
 8009c5e:	f001 fa7f 	bl	800b160 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009c62:	2180      	movs	r1, #128	; 0x80
 8009c64:	6878      	ldr	r0, [r7, #4]
 8009c66:	f001 fa7b 	bl	800b160 <USBD_LL_StallEP>
 8009c6a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009c6c:	e020      	b.n	8009cb0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8009c6e:	6839      	ldr	r1, [r7, #0]
 8009c70:	6878      	ldr	r0, [r7, #4]
 8009c72:	f000 fca4 	bl	800a5be <USBD_CtlError>
              break;
 8009c76:	e01b      	b.n	8009cb0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009c78:	683b      	ldr	r3, [r7, #0]
 8009c7a:	885b      	ldrh	r3, [r3, #2]
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d10e      	bne.n	8009c9e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009c80:	7bbb      	ldrb	r3, [r7, #14]
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d00b      	beq.n	8009c9e <USBD_StdEPReq+0xfe>
 8009c86:	7bbb      	ldrb	r3, [r7, #14]
 8009c88:	2b80      	cmp	r3, #128	; 0x80
 8009c8a:	d008      	beq.n	8009c9e <USBD_StdEPReq+0xfe>
 8009c8c:	683b      	ldr	r3, [r7, #0]
 8009c8e:	88db      	ldrh	r3, [r3, #6]
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d104      	bne.n	8009c9e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009c94:	7bbb      	ldrb	r3, [r7, #14]
 8009c96:	4619      	mov	r1, r3
 8009c98:	6878      	ldr	r0, [r7, #4]
 8009c9a:	f001 fa61 	bl	800b160 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8009c9e:	6878      	ldr	r0, [r7, #4]
 8009ca0:	f000 fd58 	bl	800a754 <USBD_CtlSendStatus>

              break;
 8009ca4:	e004      	b.n	8009cb0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8009ca6:	6839      	ldr	r1, [r7, #0]
 8009ca8:	6878      	ldr	r0, [r7, #4]
 8009caa:	f000 fc88 	bl	800a5be <USBD_CtlError>
              break;
 8009cae:	bf00      	nop
          }
          break;
 8009cb0:	e107      	b.n	8009ec2 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009cb8:	b2db      	uxtb	r3, r3
 8009cba:	2b02      	cmp	r3, #2
 8009cbc:	d002      	beq.n	8009cc4 <USBD_StdEPReq+0x124>
 8009cbe:	2b03      	cmp	r3, #3
 8009cc0:	d016      	beq.n	8009cf0 <USBD_StdEPReq+0x150>
 8009cc2:	e04b      	b.n	8009d5c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009cc4:	7bbb      	ldrb	r3, [r7, #14]
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d00d      	beq.n	8009ce6 <USBD_StdEPReq+0x146>
 8009cca:	7bbb      	ldrb	r3, [r7, #14]
 8009ccc:	2b80      	cmp	r3, #128	; 0x80
 8009cce:	d00a      	beq.n	8009ce6 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009cd0:	7bbb      	ldrb	r3, [r7, #14]
 8009cd2:	4619      	mov	r1, r3
 8009cd4:	6878      	ldr	r0, [r7, #4]
 8009cd6:	f001 fa43 	bl	800b160 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009cda:	2180      	movs	r1, #128	; 0x80
 8009cdc:	6878      	ldr	r0, [r7, #4]
 8009cde:	f001 fa3f 	bl	800b160 <USBD_LL_StallEP>
 8009ce2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009ce4:	e040      	b.n	8009d68 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8009ce6:	6839      	ldr	r1, [r7, #0]
 8009ce8:	6878      	ldr	r0, [r7, #4]
 8009cea:	f000 fc68 	bl	800a5be <USBD_CtlError>
              break;
 8009cee:	e03b      	b.n	8009d68 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009cf0:	683b      	ldr	r3, [r7, #0]
 8009cf2:	885b      	ldrh	r3, [r3, #2]
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d136      	bne.n	8009d66 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009cf8:	7bbb      	ldrb	r3, [r7, #14]
 8009cfa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d004      	beq.n	8009d0c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009d02:	7bbb      	ldrb	r3, [r7, #14]
 8009d04:	4619      	mov	r1, r3
 8009d06:	6878      	ldr	r0, [r7, #4]
 8009d08:	f001 fa49 	bl	800b19e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009d0c:	6878      	ldr	r0, [r7, #4]
 8009d0e:	f000 fd21 	bl	800a754 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8009d12:	7bbb      	ldrb	r3, [r7, #14]
 8009d14:	4619      	mov	r1, r3
 8009d16:	6878      	ldr	r0, [r7, #4]
 8009d18:	f7ff fde2 	bl	80098e0 <USBD_CoreFindEP>
 8009d1c:	4603      	mov	r3, r0
 8009d1e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009d20:	7b7b      	ldrb	r3, [r7, #13]
 8009d22:	2bff      	cmp	r3, #255	; 0xff
 8009d24:	d01f      	beq.n	8009d66 <USBD_StdEPReq+0x1c6>
 8009d26:	7b7b      	ldrb	r3, [r7, #13]
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d11c      	bne.n	8009d66 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8009d2c:	7b7a      	ldrb	r2, [r7, #13]
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8009d34:	7b7a      	ldrb	r2, [r7, #13]
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	32ae      	adds	r2, #174	; 0xae
 8009d3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d3e:	689b      	ldr	r3, [r3, #8]
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d010      	beq.n	8009d66 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009d44:	7b7a      	ldrb	r2, [r7, #13]
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	32ae      	adds	r2, #174	; 0xae
 8009d4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d4e:	689b      	ldr	r3, [r3, #8]
 8009d50:	6839      	ldr	r1, [r7, #0]
 8009d52:	6878      	ldr	r0, [r7, #4]
 8009d54:	4798      	blx	r3
 8009d56:	4603      	mov	r3, r0
 8009d58:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8009d5a:	e004      	b.n	8009d66 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8009d5c:	6839      	ldr	r1, [r7, #0]
 8009d5e:	6878      	ldr	r0, [r7, #4]
 8009d60:	f000 fc2d 	bl	800a5be <USBD_CtlError>
              break;
 8009d64:	e000      	b.n	8009d68 <USBD_StdEPReq+0x1c8>
              break;
 8009d66:	bf00      	nop
          }
          break;
 8009d68:	e0ab      	b.n	8009ec2 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009d70:	b2db      	uxtb	r3, r3
 8009d72:	2b02      	cmp	r3, #2
 8009d74:	d002      	beq.n	8009d7c <USBD_StdEPReq+0x1dc>
 8009d76:	2b03      	cmp	r3, #3
 8009d78:	d032      	beq.n	8009de0 <USBD_StdEPReq+0x240>
 8009d7a:	e097      	b.n	8009eac <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009d7c:	7bbb      	ldrb	r3, [r7, #14]
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d007      	beq.n	8009d92 <USBD_StdEPReq+0x1f2>
 8009d82:	7bbb      	ldrb	r3, [r7, #14]
 8009d84:	2b80      	cmp	r3, #128	; 0x80
 8009d86:	d004      	beq.n	8009d92 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8009d88:	6839      	ldr	r1, [r7, #0]
 8009d8a:	6878      	ldr	r0, [r7, #4]
 8009d8c:	f000 fc17 	bl	800a5be <USBD_CtlError>
                break;
 8009d90:	e091      	b.n	8009eb6 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009d92:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	da0b      	bge.n	8009db2 <USBD_StdEPReq+0x212>
 8009d9a:	7bbb      	ldrb	r3, [r7, #14]
 8009d9c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009da0:	4613      	mov	r3, r2
 8009da2:	009b      	lsls	r3, r3, #2
 8009da4:	4413      	add	r3, r2
 8009da6:	009b      	lsls	r3, r3, #2
 8009da8:	3310      	adds	r3, #16
 8009daa:	687a      	ldr	r2, [r7, #4]
 8009dac:	4413      	add	r3, r2
 8009dae:	3304      	adds	r3, #4
 8009db0:	e00b      	b.n	8009dca <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009db2:	7bbb      	ldrb	r3, [r7, #14]
 8009db4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009db8:	4613      	mov	r3, r2
 8009dba:	009b      	lsls	r3, r3, #2
 8009dbc:	4413      	add	r3, r2
 8009dbe:	009b      	lsls	r3, r3, #2
 8009dc0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009dc4:	687a      	ldr	r2, [r7, #4]
 8009dc6:	4413      	add	r3, r2
 8009dc8:	3304      	adds	r3, #4
 8009dca:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009dcc:	68bb      	ldr	r3, [r7, #8]
 8009dce:	2200      	movs	r2, #0
 8009dd0:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009dd2:	68bb      	ldr	r3, [r7, #8]
 8009dd4:	2202      	movs	r2, #2
 8009dd6:	4619      	mov	r1, r3
 8009dd8:	6878      	ldr	r0, [r7, #4]
 8009dda:	f000 fc61 	bl	800a6a0 <USBD_CtlSendData>
              break;
 8009dde:	e06a      	b.n	8009eb6 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009de0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	da11      	bge.n	8009e0c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009de8:	7bbb      	ldrb	r3, [r7, #14]
 8009dea:	f003 020f 	and.w	r2, r3, #15
 8009dee:	6879      	ldr	r1, [r7, #4]
 8009df0:	4613      	mov	r3, r2
 8009df2:	009b      	lsls	r3, r3, #2
 8009df4:	4413      	add	r3, r2
 8009df6:	009b      	lsls	r3, r3, #2
 8009df8:	440b      	add	r3, r1
 8009dfa:	3324      	adds	r3, #36	; 0x24
 8009dfc:	881b      	ldrh	r3, [r3, #0]
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d117      	bne.n	8009e32 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009e02:	6839      	ldr	r1, [r7, #0]
 8009e04:	6878      	ldr	r0, [r7, #4]
 8009e06:	f000 fbda 	bl	800a5be <USBD_CtlError>
                  break;
 8009e0a:	e054      	b.n	8009eb6 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009e0c:	7bbb      	ldrb	r3, [r7, #14]
 8009e0e:	f003 020f 	and.w	r2, r3, #15
 8009e12:	6879      	ldr	r1, [r7, #4]
 8009e14:	4613      	mov	r3, r2
 8009e16:	009b      	lsls	r3, r3, #2
 8009e18:	4413      	add	r3, r2
 8009e1a:	009b      	lsls	r3, r3, #2
 8009e1c:	440b      	add	r3, r1
 8009e1e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009e22:	881b      	ldrh	r3, [r3, #0]
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d104      	bne.n	8009e32 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009e28:	6839      	ldr	r1, [r7, #0]
 8009e2a:	6878      	ldr	r0, [r7, #4]
 8009e2c:	f000 fbc7 	bl	800a5be <USBD_CtlError>
                  break;
 8009e30:	e041      	b.n	8009eb6 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009e32:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	da0b      	bge.n	8009e52 <USBD_StdEPReq+0x2b2>
 8009e3a:	7bbb      	ldrb	r3, [r7, #14]
 8009e3c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009e40:	4613      	mov	r3, r2
 8009e42:	009b      	lsls	r3, r3, #2
 8009e44:	4413      	add	r3, r2
 8009e46:	009b      	lsls	r3, r3, #2
 8009e48:	3310      	adds	r3, #16
 8009e4a:	687a      	ldr	r2, [r7, #4]
 8009e4c:	4413      	add	r3, r2
 8009e4e:	3304      	adds	r3, #4
 8009e50:	e00b      	b.n	8009e6a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009e52:	7bbb      	ldrb	r3, [r7, #14]
 8009e54:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009e58:	4613      	mov	r3, r2
 8009e5a:	009b      	lsls	r3, r3, #2
 8009e5c:	4413      	add	r3, r2
 8009e5e:	009b      	lsls	r3, r3, #2
 8009e60:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009e64:	687a      	ldr	r2, [r7, #4]
 8009e66:	4413      	add	r3, r2
 8009e68:	3304      	adds	r3, #4
 8009e6a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009e6c:	7bbb      	ldrb	r3, [r7, #14]
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d002      	beq.n	8009e78 <USBD_StdEPReq+0x2d8>
 8009e72:	7bbb      	ldrb	r3, [r7, #14]
 8009e74:	2b80      	cmp	r3, #128	; 0x80
 8009e76:	d103      	bne.n	8009e80 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8009e78:	68bb      	ldr	r3, [r7, #8]
 8009e7a:	2200      	movs	r2, #0
 8009e7c:	601a      	str	r2, [r3, #0]
 8009e7e:	e00e      	b.n	8009e9e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009e80:	7bbb      	ldrb	r3, [r7, #14]
 8009e82:	4619      	mov	r1, r3
 8009e84:	6878      	ldr	r0, [r7, #4]
 8009e86:	f001 f9a9 	bl	800b1dc <USBD_LL_IsStallEP>
 8009e8a:	4603      	mov	r3, r0
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d003      	beq.n	8009e98 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8009e90:	68bb      	ldr	r3, [r7, #8]
 8009e92:	2201      	movs	r2, #1
 8009e94:	601a      	str	r2, [r3, #0]
 8009e96:	e002      	b.n	8009e9e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8009e98:	68bb      	ldr	r3, [r7, #8]
 8009e9a:	2200      	movs	r2, #0
 8009e9c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009e9e:	68bb      	ldr	r3, [r7, #8]
 8009ea0:	2202      	movs	r2, #2
 8009ea2:	4619      	mov	r1, r3
 8009ea4:	6878      	ldr	r0, [r7, #4]
 8009ea6:	f000 fbfb 	bl	800a6a0 <USBD_CtlSendData>
              break;
 8009eaa:	e004      	b.n	8009eb6 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8009eac:	6839      	ldr	r1, [r7, #0]
 8009eae:	6878      	ldr	r0, [r7, #4]
 8009eb0:	f000 fb85 	bl	800a5be <USBD_CtlError>
              break;
 8009eb4:	bf00      	nop
          }
          break;
 8009eb6:	e004      	b.n	8009ec2 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8009eb8:	6839      	ldr	r1, [r7, #0]
 8009eba:	6878      	ldr	r0, [r7, #4]
 8009ebc:	f000 fb7f 	bl	800a5be <USBD_CtlError>
          break;
 8009ec0:	bf00      	nop
      }
      break;
 8009ec2:	e005      	b.n	8009ed0 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8009ec4:	6839      	ldr	r1, [r7, #0]
 8009ec6:	6878      	ldr	r0, [r7, #4]
 8009ec8:	f000 fb79 	bl	800a5be <USBD_CtlError>
      break;
 8009ecc:	e000      	b.n	8009ed0 <USBD_StdEPReq+0x330>
      break;
 8009ece:	bf00      	nop
  }

  return ret;
 8009ed0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ed2:	4618      	mov	r0, r3
 8009ed4:	3710      	adds	r7, #16
 8009ed6:	46bd      	mov	sp, r7
 8009ed8:	bd80      	pop	{r7, pc}
	...

08009edc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009edc:	b580      	push	{r7, lr}
 8009ede:	b084      	sub	sp, #16
 8009ee0:	af00      	add	r7, sp, #0
 8009ee2:	6078      	str	r0, [r7, #4]
 8009ee4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009ee6:	2300      	movs	r3, #0
 8009ee8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009eea:	2300      	movs	r3, #0
 8009eec:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009eee:	2300      	movs	r3, #0
 8009ef0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009ef2:	683b      	ldr	r3, [r7, #0]
 8009ef4:	885b      	ldrh	r3, [r3, #2]
 8009ef6:	0a1b      	lsrs	r3, r3, #8
 8009ef8:	b29b      	uxth	r3, r3
 8009efa:	3b01      	subs	r3, #1
 8009efc:	2b0e      	cmp	r3, #14
 8009efe:	f200 8152 	bhi.w	800a1a6 <USBD_GetDescriptor+0x2ca>
 8009f02:	a201      	add	r2, pc, #4	; (adr r2, 8009f08 <USBD_GetDescriptor+0x2c>)
 8009f04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f08:	08009f79 	.word	0x08009f79
 8009f0c:	08009f91 	.word	0x08009f91
 8009f10:	08009fd1 	.word	0x08009fd1
 8009f14:	0800a1a7 	.word	0x0800a1a7
 8009f18:	0800a1a7 	.word	0x0800a1a7
 8009f1c:	0800a147 	.word	0x0800a147
 8009f20:	0800a173 	.word	0x0800a173
 8009f24:	0800a1a7 	.word	0x0800a1a7
 8009f28:	0800a1a7 	.word	0x0800a1a7
 8009f2c:	0800a1a7 	.word	0x0800a1a7
 8009f30:	0800a1a7 	.word	0x0800a1a7
 8009f34:	0800a1a7 	.word	0x0800a1a7
 8009f38:	0800a1a7 	.word	0x0800a1a7
 8009f3c:	0800a1a7 	.word	0x0800a1a7
 8009f40:	08009f45 	.word	0x08009f45
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009f4a:	69db      	ldr	r3, [r3, #28]
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d00b      	beq.n	8009f68 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009f56:	69db      	ldr	r3, [r3, #28]
 8009f58:	687a      	ldr	r2, [r7, #4]
 8009f5a:	7c12      	ldrb	r2, [r2, #16]
 8009f5c:	f107 0108 	add.w	r1, r7, #8
 8009f60:	4610      	mov	r0, r2
 8009f62:	4798      	blx	r3
 8009f64:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009f66:	e126      	b.n	800a1b6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009f68:	6839      	ldr	r1, [r7, #0]
 8009f6a:	6878      	ldr	r0, [r7, #4]
 8009f6c:	f000 fb27 	bl	800a5be <USBD_CtlError>
        err++;
 8009f70:	7afb      	ldrb	r3, [r7, #11]
 8009f72:	3301      	adds	r3, #1
 8009f74:	72fb      	strb	r3, [r7, #11]
      break;
 8009f76:	e11e      	b.n	800a1b6 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	687a      	ldr	r2, [r7, #4]
 8009f82:	7c12      	ldrb	r2, [r2, #16]
 8009f84:	f107 0108 	add.w	r1, r7, #8
 8009f88:	4610      	mov	r0, r2
 8009f8a:	4798      	blx	r3
 8009f8c:	60f8      	str	r0, [r7, #12]
      break;
 8009f8e:	e112      	b.n	800a1b6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	7c1b      	ldrb	r3, [r3, #16]
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d10d      	bne.n	8009fb4 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009f9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009fa0:	f107 0208 	add.w	r2, r7, #8
 8009fa4:	4610      	mov	r0, r2
 8009fa6:	4798      	blx	r3
 8009fa8:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	3301      	adds	r3, #1
 8009fae:	2202      	movs	r2, #2
 8009fb0:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009fb2:	e100      	b.n	800a1b6 <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fbc:	f107 0208 	add.w	r2, r7, #8
 8009fc0:	4610      	mov	r0, r2
 8009fc2:	4798      	blx	r3
 8009fc4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	3301      	adds	r3, #1
 8009fca:	2202      	movs	r2, #2
 8009fcc:	701a      	strb	r2, [r3, #0]
      break;
 8009fce:	e0f2      	b.n	800a1b6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009fd0:	683b      	ldr	r3, [r7, #0]
 8009fd2:	885b      	ldrh	r3, [r3, #2]
 8009fd4:	b2db      	uxtb	r3, r3
 8009fd6:	2b05      	cmp	r3, #5
 8009fd8:	f200 80ac 	bhi.w	800a134 <USBD_GetDescriptor+0x258>
 8009fdc:	a201      	add	r2, pc, #4	; (adr r2, 8009fe4 <USBD_GetDescriptor+0x108>)
 8009fde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fe2:	bf00      	nop
 8009fe4:	08009ffd 	.word	0x08009ffd
 8009fe8:	0800a031 	.word	0x0800a031
 8009fec:	0800a065 	.word	0x0800a065
 8009ff0:	0800a099 	.word	0x0800a099
 8009ff4:	0800a0cd 	.word	0x0800a0cd
 8009ff8:	0800a101 	.word	0x0800a101
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a002:	685b      	ldr	r3, [r3, #4]
 800a004:	2b00      	cmp	r3, #0
 800a006:	d00b      	beq.n	800a020 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a00e:	685b      	ldr	r3, [r3, #4]
 800a010:	687a      	ldr	r2, [r7, #4]
 800a012:	7c12      	ldrb	r2, [r2, #16]
 800a014:	f107 0108 	add.w	r1, r7, #8
 800a018:	4610      	mov	r0, r2
 800a01a:	4798      	blx	r3
 800a01c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a01e:	e091      	b.n	800a144 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a020:	6839      	ldr	r1, [r7, #0]
 800a022:	6878      	ldr	r0, [r7, #4]
 800a024:	f000 facb 	bl	800a5be <USBD_CtlError>
            err++;
 800a028:	7afb      	ldrb	r3, [r7, #11]
 800a02a:	3301      	adds	r3, #1
 800a02c:	72fb      	strb	r3, [r7, #11]
          break;
 800a02e:	e089      	b.n	800a144 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a036:	689b      	ldr	r3, [r3, #8]
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d00b      	beq.n	800a054 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a042:	689b      	ldr	r3, [r3, #8]
 800a044:	687a      	ldr	r2, [r7, #4]
 800a046:	7c12      	ldrb	r2, [r2, #16]
 800a048:	f107 0108 	add.w	r1, r7, #8
 800a04c:	4610      	mov	r0, r2
 800a04e:	4798      	blx	r3
 800a050:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a052:	e077      	b.n	800a144 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a054:	6839      	ldr	r1, [r7, #0]
 800a056:	6878      	ldr	r0, [r7, #4]
 800a058:	f000 fab1 	bl	800a5be <USBD_CtlError>
            err++;
 800a05c:	7afb      	ldrb	r3, [r7, #11]
 800a05e:	3301      	adds	r3, #1
 800a060:	72fb      	strb	r3, [r7, #11]
          break;
 800a062:	e06f      	b.n	800a144 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a06a:	68db      	ldr	r3, [r3, #12]
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d00b      	beq.n	800a088 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a076:	68db      	ldr	r3, [r3, #12]
 800a078:	687a      	ldr	r2, [r7, #4]
 800a07a:	7c12      	ldrb	r2, [r2, #16]
 800a07c:	f107 0108 	add.w	r1, r7, #8
 800a080:	4610      	mov	r0, r2
 800a082:	4798      	blx	r3
 800a084:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a086:	e05d      	b.n	800a144 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a088:	6839      	ldr	r1, [r7, #0]
 800a08a:	6878      	ldr	r0, [r7, #4]
 800a08c:	f000 fa97 	bl	800a5be <USBD_CtlError>
            err++;
 800a090:	7afb      	ldrb	r3, [r7, #11]
 800a092:	3301      	adds	r3, #1
 800a094:	72fb      	strb	r3, [r7, #11]
          break;
 800a096:	e055      	b.n	800a144 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a09e:	691b      	ldr	r3, [r3, #16]
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d00b      	beq.n	800a0bc <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a0aa:	691b      	ldr	r3, [r3, #16]
 800a0ac:	687a      	ldr	r2, [r7, #4]
 800a0ae:	7c12      	ldrb	r2, [r2, #16]
 800a0b0:	f107 0108 	add.w	r1, r7, #8
 800a0b4:	4610      	mov	r0, r2
 800a0b6:	4798      	blx	r3
 800a0b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a0ba:	e043      	b.n	800a144 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a0bc:	6839      	ldr	r1, [r7, #0]
 800a0be:	6878      	ldr	r0, [r7, #4]
 800a0c0:	f000 fa7d 	bl	800a5be <USBD_CtlError>
            err++;
 800a0c4:	7afb      	ldrb	r3, [r7, #11]
 800a0c6:	3301      	adds	r3, #1
 800a0c8:	72fb      	strb	r3, [r7, #11]
          break;
 800a0ca:	e03b      	b.n	800a144 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a0d2:	695b      	ldr	r3, [r3, #20]
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d00b      	beq.n	800a0f0 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a0de:	695b      	ldr	r3, [r3, #20]
 800a0e0:	687a      	ldr	r2, [r7, #4]
 800a0e2:	7c12      	ldrb	r2, [r2, #16]
 800a0e4:	f107 0108 	add.w	r1, r7, #8
 800a0e8:	4610      	mov	r0, r2
 800a0ea:	4798      	blx	r3
 800a0ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a0ee:	e029      	b.n	800a144 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a0f0:	6839      	ldr	r1, [r7, #0]
 800a0f2:	6878      	ldr	r0, [r7, #4]
 800a0f4:	f000 fa63 	bl	800a5be <USBD_CtlError>
            err++;
 800a0f8:	7afb      	ldrb	r3, [r7, #11]
 800a0fa:	3301      	adds	r3, #1
 800a0fc:	72fb      	strb	r3, [r7, #11]
          break;
 800a0fe:	e021      	b.n	800a144 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a106:	699b      	ldr	r3, [r3, #24]
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d00b      	beq.n	800a124 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a112:	699b      	ldr	r3, [r3, #24]
 800a114:	687a      	ldr	r2, [r7, #4]
 800a116:	7c12      	ldrb	r2, [r2, #16]
 800a118:	f107 0108 	add.w	r1, r7, #8
 800a11c:	4610      	mov	r0, r2
 800a11e:	4798      	blx	r3
 800a120:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a122:	e00f      	b.n	800a144 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a124:	6839      	ldr	r1, [r7, #0]
 800a126:	6878      	ldr	r0, [r7, #4]
 800a128:	f000 fa49 	bl	800a5be <USBD_CtlError>
            err++;
 800a12c:	7afb      	ldrb	r3, [r7, #11]
 800a12e:	3301      	adds	r3, #1
 800a130:	72fb      	strb	r3, [r7, #11]
          break;
 800a132:	e007      	b.n	800a144 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800a134:	6839      	ldr	r1, [r7, #0]
 800a136:	6878      	ldr	r0, [r7, #4]
 800a138:	f000 fa41 	bl	800a5be <USBD_CtlError>
          err++;
 800a13c:	7afb      	ldrb	r3, [r7, #11]
 800a13e:	3301      	adds	r3, #1
 800a140:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800a142:	bf00      	nop
      }
      break;
 800a144:	e037      	b.n	800a1b6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	7c1b      	ldrb	r3, [r3, #16]
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d109      	bne.n	800a162 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a154:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a156:	f107 0208 	add.w	r2, r7, #8
 800a15a:	4610      	mov	r0, r2
 800a15c:	4798      	blx	r3
 800a15e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a160:	e029      	b.n	800a1b6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a162:	6839      	ldr	r1, [r7, #0]
 800a164:	6878      	ldr	r0, [r7, #4]
 800a166:	f000 fa2a 	bl	800a5be <USBD_CtlError>
        err++;
 800a16a:	7afb      	ldrb	r3, [r7, #11]
 800a16c:	3301      	adds	r3, #1
 800a16e:	72fb      	strb	r3, [r7, #11]
      break;
 800a170:	e021      	b.n	800a1b6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	7c1b      	ldrb	r3, [r3, #16]
 800a176:	2b00      	cmp	r3, #0
 800a178:	d10d      	bne.n	800a196 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a182:	f107 0208 	add.w	r2, r7, #8
 800a186:	4610      	mov	r0, r2
 800a188:	4798      	blx	r3
 800a18a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	3301      	adds	r3, #1
 800a190:	2207      	movs	r2, #7
 800a192:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a194:	e00f      	b.n	800a1b6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a196:	6839      	ldr	r1, [r7, #0]
 800a198:	6878      	ldr	r0, [r7, #4]
 800a19a:	f000 fa10 	bl	800a5be <USBD_CtlError>
        err++;
 800a19e:	7afb      	ldrb	r3, [r7, #11]
 800a1a0:	3301      	adds	r3, #1
 800a1a2:	72fb      	strb	r3, [r7, #11]
      break;
 800a1a4:	e007      	b.n	800a1b6 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800a1a6:	6839      	ldr	r1, [r7, #0]
 800a1a8:	6878      	ldr	r0, [r7, #4]
 800a1aa:	f000 fa08 	bl	800a5be <USBD_CtlError>
      err++;
 800a1ae:	7afb      	ldrb	r3, [r7, #11]
 800a1b0:	3301      	adds	r3, #1
 800a1b2:	72fb      	strb	r3, [r7, #11]
      break;
 800a1b4:	bf00      	nop
  }

  if (err != 0U)
 800a1b6:	7afb      	ldrb	r3, [r7, #11]
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d11e      	bne.n	800a1fa <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800a1bc:	683b      	ldr	r3, [r7, #0]
 800a1be:	88db      	ldrh	r3, [r3, #6]
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d016      	beq.n	800a1f2 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800a1c4:	893b      	ldrh	r3, [r7, #8]
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d00e      	beq.n	800a1e8 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800a1ca:	683b      	ldr	r3, [r7, #0]
 800a1cc:	88da      	ldrh	r2, [r3, #6]
 800a1ce:	893b      	ldrh	r3, [r7, #8]
 800a1d0:	4293      	cmp	r3, r2
 800a1d2:	bf28      	it	cs
 800a1d4:	4613      	movcs	r3, r2
 800a1d6:	b29b      	uxth	r3, r3
 800a1d8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a1da:	893b      	ldrh	r3, [r7, #8]
 800a1dc:	461a      	mov	r2, r3
 800a1de:	68f9      	ldr	r1, [r7, #12]
 800a1e0:	6878      	ldr	r0, [r7, #4]
 800a1e2:	f000 fa5d 	bl	800a6a0 <USBD_CtlSendData>
 800a1e6:	e009      	b.n	800a1fc <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800a1e8:	6839      	ldr	r1, [r7, #0]
 800a1ea:	6878      	ldr	r0, [r7, #4]
 800a1ec:	f000 f9e7 	bl	800a5be <USBD_CtlError>
 800a1f0:	e004      	b.n	800a1fc <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800a1f2:	6878      	ldr	r0, [r7, #4]
 800a1f4:	f000 faae 	bl	800a754 <USBD_CtlSendStatus>
 800a1f8:	e000      	b.n	800a1fc <USBD_GetDescriptor+0x320>
    return;
 800a1fa:	bf00      	nop
  }
}
 800a1fc:	3710      	adds	r7, #16
 800a1fe:	46bd      	mov	sp, r7
 800a200:	bd80      	pop	{r7, pc}
 800a202:	bf00      	nop

0800a204 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a204:	b580      	push	{r7, lr}
 800a206:	b084      	sub	sp, #16
 800a208:	af00      	add	r7, sp, #0
 800a20a:	6078      	str	r0, [r7, #4]
 800a20c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a20e:	683b      	ldr	r3, [r7, #0]
 800a210:	889b      	ldrh	r3, [r3, #4]
 800a212:	2b00      	cmp	r3, #0
 800a214:	d131      	bne.n	800a27a <USBD_SetAddress+0x76>
 800a216:	683b      	ldr	r3, [r7, #0]
 800a218:	88db      	ldrh	r3, [r3, #6]
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d12d      	bne.n	800a27a <USBD_SetAddress+0x76>
 800a21e:	683b      	ldr	r3, [r7, #0]
 800a220:	885b      	ldrh	r3, [r3, #2]
 800a222:	2b7f      	cmp	r3, #127	; 0x7f
 800a224:	d829      	bhi.n	800a27a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a226:	683b      	ldr	r3, [r7, #0]
 800a228:	885b      	ldrh	r3, [r3, #2]
 800a22a:	b2db      	uxtb	r3, r3
 800a22c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a230:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a238:	b2db      	uxtb	r3, r3
 800a23a:	2b03      	cmp	r3, #3
 800a23c:	d104      	bne.n	800a248 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800a23e:	6839      	ldr	r1, [r7, #0]
 800a240:	6878      	ldr	r0, [r7, #4]
 800a242:	f000 f9bc 	bl	800a5be <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a246:	e01d      	b.n	800a284 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	7bfa      	ldrb	r2, [r7, #15]
 800a24c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a250:	7bfb      	ldrb	r3, [r7, #15]
 800a252:	4619      	mov	r1, r3
 800a254:	6878      	ldr	r0, [r7, #4]
 800a256:	f000 ffed 	bl	800b234 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800a25a:	6878      	ldr	r0, [r7, #4]
 800a25c:	f000 fa7a 	bl	800a754 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a260:	7bfb      	ldrb	r3, [r7, #15]
 800a262:	2b00      	cmp	r3, #0
 800a264:	d004      	beq.n	800a270 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	2202      	movs	r2, #2
 800a26a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a26e:	e009      	b.n	800a284 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	2201      	movs	r2, #1
 800a274:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a278:	e004      	b.n	800a284 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a27a:	6839      	ldr	r1, [r7, #0]
 800a27c:	6878      	ldr	r0, [r7, #4]
 800a27e:	f000 f99e 	bl	800a5be <USBD_CtlError>
  }
}
 800a282:	bf00      	nop
 800a284:	bf00      	nop
 800a286:	3710      	adds	r7, #16
 800a288:	46bd      	mov	sp, r7
 800a28a:	bd80      	pop	{r7, pc}

0800a28c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a28c:	b580      	push	{r7, lr}
 800a28e:	b084      	sub	sp, #16
 800a290:	af00      	add	r7, sp, #0
 800a292:	6078      	str	r0, [r7, #4]
 800a294:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a296:	2300      	movs	r3, #0
 800a298:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a29a:	683b      	ldr	r3, [r7, #0]
 800a29c:	885b      	ldrh	r3, [r3, #2]
 800a29e:	b2da      	uxtb	r2, r3
 800a2a0:	4b4e      	ldr	r3, [pc, #312]	; (800a3dc <USBD_SetConfig+0x150>)
 800a2a2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a2a4:	4b4d      	ldr	r3, [pc, #308]	; (800a3dc <USBD_SetConfig+0x150>)
 800a2a6:	781b      	ldrb	r3, [r3, #0]
 800a2a8:	2b01      	cmp	r3, #1
 800a2aa:	d905      	bls.n	800a2b8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800a2ac:	6839      	ldr	r1, [r7, #0]
 800a2ae:	6878      	ldr	r0, [r7, #4]
 800a2b0:	f000 f985 	bl	800a5be <USBD_CtlError>
    return USBD_FAIL;
 800a2b4:	2303      	movs	r3, #3
 800a2b6:	e08c      	b.n	800a3d2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a2be:	b2db      	uxtb	r3, r3
 800a2c0:	2b02      	cmp	r3, #2
 800a2c2:	d002      	beq.n	800a2ca <USBD_SetConfig+0x3e>
 800a2c4:	2b03      	cmp	r3, #3
 800a2c6:	d029      	beq.n	800a31c <USBD_SetConfig+0x90>
 800a2c8:	e075      	b.n	800a3b6 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800a2ca:	4b44      	ldr	r3, [pc, #272]	; (800a3dc <USBD_SetConfig+0x150>)
 800a2cc:	781b      	ldrb	r3, [r3, #0]
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d020      	beq.n	800a314 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800a2d2:	4b42      	ldr	r3, [pc, #264]	; (800a3dc <USBD_SetConfig+0x150>)
 800a2d4:	781b      	ldrb	r3, [r3, #0]
 800a2d6:	461a      	mov	r2, r3
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a2dc:	4b3f      	ldr	r3, [pc, #252]	; (800a3dc <USBD_SetConfig+0x150>)
 800a2de:	781b      	ldrb	r3, [r3, #0]
 800a2e0:	4619      	mov	r1, r3
 800a2e2:	6878      	ldr	r0, [r7, #4]
 800a2e4:	f7fe ffbd 	bl	8009262 <USBD_SetClassConfig>
 800a2e8:	4603      	mov	r3, r0
 800a2ea:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800a2ec:	7bfb      	ldrb	r3, [r7, #15]
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d008      	beq.n	800a304 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800a2f2:	6839      	ldr	r1, [r7, #0]
 800a2f4:	6878      	ldr	r0, [r7, #4]
 800a2f6:	f000 f962 	bl	800a5be <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	2202      	movs	r2, #2
 800a2fe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a302:	e065      	b.n	800a3d0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a304:	6878      	ldr	r0, [r7, #4]
 800a306:	f000 fa25 	bl	800a754 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	2203      	movs	r2, #3
 800a30e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800a312:	e05d      	b.n	800a3d0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a314:	6878      	ldr	r0, [r7, #4]
 800a316:	f000 fa1d 	bl	800a754 <USBD_CtlSendStatus>
      break;
 800a31a:	e059      	b.n	800a3d0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800a31c:	4b2f      	ldr	r3, [pc, #188]	; (800a3dc <USBD_SetConfig+0x150>)
 800a31e:	781b      	ldrb	r3, [r3, #0]
 800a320:	2b00      	cmp	r3, #0
 800a322:	d112      	bne.n	800a34a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	2202      	movs	r2, #2
 800a328:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800a32c:	4b2b      	ldr	r3, [pc, #172]	; (800a3dc <USBD_SetConfig+0x150>)
 800a32e:	781b      	ldrb	r3, [r3, #0]
 800a330:	461a      	mov	r2, r3
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a336:	4b29      	ldr	r3, [pc, #164]	; (800a3dc <USBD_SetConfig+0x150>)
 800a338:	781b      	ldrb	r3, [r3, #0]
 800a33a:	4619      	mov	r1, r3
 800a33c:	6878      	ldr	r0, [r7, #4]
 800a33e:	f7fe ffac 	bl	800929a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800a342:	6878      	ldr	r0, [r7, #4]
 800a344:	f000 fa06 	bl	800a754 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a348:	e042      	b.n	800a3d0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800a34a:	4b24      	ldr	r3, [pc, #144]	; (800a3dc <USBD_SetConfig+0x150>)
 800a34c:	781b      	ldrb	r3, [r3, #0]
 800a34e:	461a      	mov	r2, r3
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	685b      	ldr	r3, [r3, #4]
 800a354:	429a      	cmp	r2, r3
 800a356:	d02a      	beq.n	800a3ae <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	685b      	ldr	r3, [r3, #4]
 800a35c:	b2db      	uxtb	r3, r3
 800a35e:	4619      	mov	r1, r3
 800a360:	6878      	ldr	r0, [r7, #4]
 800a362:	f7fe ff9a 	bl	800929a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800a366:	4b1d      	ldr	r3, [pc, #116]	; (800a3dc <USBD_SetConfig+0x150>)
 800a368:	781b      	ldrb	r3, [r3, #0]
 800a36a:	461a      	mov	r2, r3
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a370:	4b1a      	ldr	r3, [pc, #104]	; (800a3dc <USBD_SetConfig+0x150>)
 800a372:	781b      	ldrb	r3, [r3, #0]
 800a374:	4619      	mov	r1, r3
 800a376:	6878      	ldr	r0, [r7, #4]
 800a378:	f7fe ff73 	bl	8009262 <USBD_SetClassConfig>
 800a37c:	4603      	mov	r3, r0
 800a37e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800a380:	7bfb      	ldrb	r3, [r7, #15]
 800a382:	2b00      	cmp	r3, #0
 800a384:	d00f      	beq.n	800a3a6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800a386:	6839      	ldr	r1, [r7, #0]
 800a388:	6878      	ldr	r0, [r7, #4]
 800a38a:	f000 f918 	bl	800a5be <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	685b      	ldr	r3, [r3, #4]
 800a392:	b2db      	uxtb	r3, r3
 800a394:	4619      	mov	r1, r3
 800a396:	6878      	ldr	r0, [r7, #4]
 800a398:	f7fe ff7f 	bl	800929a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	2202      	movs	r2, #2
 800a3a0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800a3a4:	e014      	b.n	800a3d0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a3a6:	6878      	ldr	r0, [r7, #4]
 800a3a8:	f000 f9d4 	bl	800a754 <USBD_CtlSendStatus>
      break;
 800a3ac:	e010      	b.n	800a3d0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a3ae:	6878      	ldr	r0, [r7, #4]
 800a3b0:	f000 f9d0 	bl	800a754 <USBD_CtlSendStatus>
      break;
 800a3b4:	e00c      	b.n	800a3d0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800a3b6:	6839      	ldr	r1, [r7, #0]
 800a3b8:	6878      	ldr	r0, [r7, #4]
 800a3ba:	f000 f900 	bl	800a5be <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a3be:	4b07      	ldr	r3, [pc, #28]	; (800a3dc <USBD_SetConfig+0x150>)
 800a3c0:	781b      	ldrb	r3, [r3, #0]
 800a3c2:	4619      	mov	r1, r3
 800a3c4:	6878      	ldr	r0, [r7, #4]
 800a3c6:	f7fe ff68 	bl	800929a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800a3ca:	2303      	movs	r3, #3
 800a3cc:	73fb      	strb	r3, [r7, #15]
      break;
 800a3ce:	bf00      	nop
  }

  return ret;
 800a3d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3d2:	4618      	mov	r0, r3
 800a3d4:	3710      	adds	r7, #16
 800a3d6:	46bd      	mov	sp, r7
 800a3d8:	bd80      	pop	{r7, pc}
 800a3da:	bf00      	nop
 800a3dc:	200007d8 	.word	0x200007d8

0800a3e0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a3e0:	b580      	push	{r7, lr}
 800a3e2:	b082      	sub	sp, #8
 800a3e4:	af00      	add	r7, sp, #0
 800a3e6:	6078      	str	r0, [r7, #4]
 800a3e8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a3ea:	683b      	ldr	r3, [r7, #0]
 800a3ec:	88db      	ldrh	r3, [r3, #6]
 800a3ee:	2b01      	cmp	r3, #1
 800a3f0:	d004      	beq.n	800a3fc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a3f2:	6839      	ldr	r1, [r7, #0]
 800a3f4:	6878      	ldr	r0, [r7, #4]
 800a3f6:	f000 f8e2 	bl	800a5be <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a3fa:	e023      	b.n	800a444 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a402:	b2db      	uxtb	r3, r3
 800a404:	2b02      	cmp	r3, #2
 800a406:	dc02      	bgt.n	800a40e <USBD_GetConfig+0x2e>
 800a408:	2b00      	cmp	r3, #0
 800a40a:	dc03      	bgt.n	800a414 <USBD_GetConfig+0x34>
 800a40c:	e015      	b.n	800a43a <USBD_GetConfig+0x5a>
 800a40e:	2b03      	cmp	r3, #3
 800a410:	d00b      	beq.n	800a42a <USBD_GetConfig+0x4a>
 800a412:	e012      	b.n	800a43a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	2200      	movs	r2, #0
 800a418:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	3308      	adds	r3, #8
 800a41e:	2201      	movs	r2, #1
 800a420:	4619      	mov	r1, r3
 800a422:	6878      	ldr	r0, [r7, #4]
 800a424:	f000 f93c 	bl	800a6a0 <USBD_CtlSendData>
        break;
 800a428:	e00c      	b.n	800a444 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	3304      	adds	r3, #4
 800a42e:	2201      	movs	r2, #1
 800a430:	4619      	mov	r1, r3
 800a432:	6878      	ldr	r0, [r7, #4]
 800a434:	f000 f934 	bl	800a6a0 <USBD_CtlSendData>
        break;
 800a438:	e004      	b.n	800a444 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800a43a:	6839      	ldr	r1, [r7, #0]
 800a43c:	6878      	ldr	r0, [r7, #4]
 800a43e:	f000 f8be 	bl	800a5be <USBD_CtlError>
        break;
 800a442:	bf00      	nop
}
 800a444:	bf00      	nop
 800a446:	3708      	adds	r7, #8
 800a448:	46bd      	mov	sp, r7
 800a44a:	bd80      	pop	{r7, pc}

0800a44c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a44c:	b580      	push	{r7, lr}
 800a44e:	b082      	sub	sp, #8
 800a450:	af00      	add	r7, sp, #0
 800a452:	6078      	str	r0, [r7, #4]
 800a454:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a45c:	b2db      	uxtb	r3, r3
 800a45e:	3b01      	subs	r3, #1
 800a460:	2b02      	cmp	r3, #2
 800a462:	d81e      	bhi.n	800a4a2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a464:	683b      	ldr	r3, [r7, #0]
 800a466:	88db      	ldrh	r3, [r3, #6]
 800a468:	2b02      	cmp	r3, #2
 800a46a:	d004      	beq.n	800a476 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800a46c:	6839      	ldr	r1, [r7, #0]
 800a46e:	6878      	ldr	r0, [r7, #4]
 800a470:	f000 f8a5 	bl	800a5be <USBD_CtlError>
        break;
 800a474:	e01a      	b.n	800a4ac <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	2201      	movs	r2, #1
 800a47a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800a482:	2b00      	cmp	r3, #0
 800a484:	d005      	beq.n	800a492 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	68db      	ldr	r3, [r3, #12]
 800a48a:	f043 0202 	orr.w	r2, r3, #2
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	330c      	adds	r3, #12
 800a496:	2202      	movs	r2, #2
 800a498:	4619      	mov	r1, r3
 800a49a:	6878      	ldr	r0, [r7, #4]
 800a49c:	f000 f900 	bl	800a6a0 <USBD_CtlSendData>
      break;
 800a4a0:	e004      	b.n	800a4ac <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800a4a2:	6839      	ldr	r1, [r7, #0]
 800a4a4:	6878      	ldr	r0, [r7, #4]
 800a4a6:	f000 f88a 	bl	800a5be <USBD_CtlError>
      break;
 800a4aa:	bf00      	nop
  }
}
 800a4ac:	bf00      	nop
 800a4ae:	3708      	adds	r7, #8
 800a4b0:	46bd      	mov	sp, r7
 800a4b2:	bd80      	pop	{r7, pc}

0800a4b4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a4b4:	b580      	push	{r7, lr}
 800a4b6:	b082      	sub	sp, #8
 800a4b8:	af00      	add	r7, sp, #0
 800a4ba:	6078      	str	r0, [r7, #4]
 800a4bc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a4be:	683b      	ldr	r3, [r7, #0]
 800a4c0:	885b      	ldrh	r3, [r3, #2]
 800a4c2:	2b01      	cmp	r3, #1
 800a4c4:	d107      	bne.n	800a4d6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	2201      	movs	r2, #1
 800a4ca:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800a4ce:	6878      	ldr	r0, [r7, #4]
 800a4d0:	f000 f940 	bl	800a754 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800a4d4:	e013      	b.n	800a4fe <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800a4d6:	683b      	ldr	r3, [r7, #0]
 800a4d8:	885b      	ldrh	r3, [r3, #2]
 800a4da:	2b02      	cmp	r3, #2
 800a4dc:	d10b      	bne.n	800a4f6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800a4de:	683b      	ldr	r3, [r7, #0]
 800a4e0:	889b      	ldrh	r3, [r3, #4]
 800a4e2:	0a1b      	lsrs	r3, r3, #8
 800a4e4:	b29b      	uxth	r3, r3
 800a4e6:	b2da      	uxtb	r2, r3
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800a4ee:	6878      	ldr	r0, [r7, #4]
 800a4f0:	f000 f930 	bl	800a754 <USBD_CtlSendStatus>
}
 800a4f4:	e003      	b.n	800a4fe <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800a4f6:	6839      	ldr	r1, [r7, #0]
 800a4f8:	6878      	ldr	r0, [r7, #4]
 800a4fa:	f000 f860 	bl	800a5be <USBD_CtlError>
}
 800a4fe:	bf00      	nop
 800a500:	3708      	adds	r7, #8
 800a502:	46bd      	mov	sp, r7
 800a504:	bd80      	pop	{r7, pc}

0800a506 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a506:	b580      	push	{r7, lr}
 800a508:	b082      	sub	sp, #8
 800a50a:	af00      	add	r7, sp, #0
 800a50c:	6078      	str	r0, [r7, #4]
 800a50e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a516:	b2db      	uxtb	r3, r3
 800a518:	3b01      	subs	r3, #1
 800a51a:	2b02      	cmp	r3, #2
 800a51c:	d80b      	bhi.n	800a536 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a51e:	683b      	ldr	r3, [r7, #0]
 800a520:	885b      	ldrh	r3, [r3, #2]
 800a522:	2b01      	cmp	r3, #1
 800a524:	d10c      	bne.n	800a540 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	2200      	movs	r2, #0
 800a52a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800a52e:	6878      	ldr	r0, [r7, #4]
 800a530:	f000 f910 	bl	800a754 <USBD_CtlSendStatus>
      }
      break;
 800a534:	e004      	b.n	800a540 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800a536:	6839      	ldr	r1, [r7, #0]
 800a538:	6878      	ldr	r0, [r7, #4]
 800a53a:	f000 f840 	bl	800a5be <USBD_CtlError>
      break;
 800a53e:	e000      	b.n	800a542 <USBD_ClrFeature+0x3c>
      break;
 800a540:	bf00      	nop
  }
}
 800a542:	bf00      	nop
 800a544:	3708      	adds	r7, #8
 800a546:	46bd      	mov	sp, r7
 800a548:	bd80      	pop	{r7, pc}

0800a54a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a54a:	b580      	push	{r7, lr}
 800a54c:	b084      	sub	sp, #16
 800a54e:	af00      	add	r7, sp, #0
 800a550:	6078      	str	r0, [r7, #4]
 800a552:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800a554:	683b      	ldr	r3, [r7, #0]
 800a556:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	781a      	ldrb	r2, [r3, #0]
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	3301      	adds	r3, #1
 800a564:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	781a      	ldrb	r2, [r3, #0]
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	3301      	adds	r3, #1
 800a572:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800a574:	68f8      	ldr	r0, [r7, #12]
 800a576:	f7ff fa17 	bl	80099a8 <SWAPBYTE>
 800a57a:	4603      	mov	r3, r0
 800a57c:	461a      	mov	r2, r3
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	3301      	adds	r3, #1
 800a586:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	3301      	adds	r3, #1
 800a58c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800a58e:	68f8      	ldr	r0, [r7, #12]
 800a590:	f7ff fa0a 	bl	80099a8 <SWAPBYTE>
 800a594:	4603      	mov	r3, r0
 800a596:	461a      	mov	r2, r3
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	3301      	adds	r3, #1
 800a5a0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	3301      	adds	r3, #1
 800a5a6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800a5a8:	68f8      	ldr	r0, [r7, #12]
 800a5aa:	f7ff f9fd 	bl	80099a8 <SWAPBYTE>
 800a5ae:	4603      	mov	r3, r0
 800a5b0:	461a      	mov	r2, r3
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	80da      	strh	r2, [r3, #6]
}
 800a5b6:	bf00      	nop
 800a5b8:	3710      	adds	r7, #16
 800a5ba:	46bd      	mov	sp, r7
 800a5bc:	bd80      	pop	{r7, pc}

0800a5be <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a5be:	b580      	push	{r7, lr}
 800a5c0:	b082      	sub	sp, #8
 800a5c2:	af00      	add	r7, sp, #0
 800a5c4:	6078      	str	r0, [r7, #4]
 800a5c6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a5c8:	2180      	movs	r1, #128	; 0x80
 800a5ca:	6878      	ldr	r0, [r7, #4]
 800a5cc:	f000 fdc8 	bl	800b160 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a5d0:	2100      	movs	r1, #0
 800a5d2:	6878      	ldr	r0, [r7, #4]
 800a5d4:	f000 fdc4 	bl	800b160 <USBD_LL_StallEP>
}
 800a5d8:	bf00      	nop
 800a5da:	3708      	adds	r7, #8
 800a5dc:	46bd      	mov	sp, r7
 800a5de:	bd80      	pop	{r7, pc}

0800a5e0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a5e0:	b580      	push	{r7, lr}
 800a5e2:	b086      	sub	sp, #24
 800a5e4:	af00      	add	r7, sp, #0
 800a5e6:	60f8      	str	r0, [r7, #12]
 800a5e8:	60b9      	str	r1, [r7, #8]
 800a5ea:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a5ec:	2300      	movs	r3, #0
 800a5ee:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d036      	beq.n	800a664 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800a5fa:	6938      	ldr	r0, [r7, #16]
 800a5fc:	f000 f836 	bl	800a66c <USBD_GetLen>
 800a600:	4603      	mov	r3, r0
 800a602:	3301      	adds	r3, #1
 800a604:	b29b      	uxth	r3, r3
 800a606:	005b      	lsls	r3, r3, #1
 800a608:	b29a      	uxth	r2, r3
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800a60e:	7dfb      	ldrb	r3, [r7, #23]
 800a610:	68ba      	ldr	r2, [r7, #8]
 800a612:	4413      	add	r3, r2
 800a614:	687a      	ldr	r2, [r7, #4]
 800a616:	7812      	ldrb	r2, [r2, #0]
 800a618:	701a      	strb	r2, [r3, #0]
  idx++;
 800a61a:	7dfb      	ldrb	r3, [r7, #23]
 800a61c:	3301      	adds	r3, #1
 800a61e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800a620:	7dfb      	ldrb	r3, [r7, #23]
 800a622:	68ba      	ldr	r2, [r7, #8]
 800a624:	4413      	add	r3, r2
 800a626:	2203      	movs	r2, #3
 800a628:	701a      	strb	r2, [r3, #0]
  idx++;
 800a62a:	7dfb      	ldrb	r3, [r7, #23]
 800a62c:	3301      	adds	r3, #1
 800a62e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800a630:	e013      	b.n	800a65a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800a632:	7dfb      	ldrb	r3, [r7, #23]
 800a634:	68ba      	ldr	r2, [r7, #8]
 800a636:	4413      	add	r3, r2
 800a638:	693a      	ldr	r2, [r7, #16]
 800a63a:	7812      	ldrb	r2, [r2, #0]
 800a63c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800a63e:	693b      	ldr	r3, [r7, #16]
 800a640:	3301      	adds	r3, #1
 800a642:	613b      	str	r3, [r7, #16]
    idx++;
 800a644:	7dfb      	ldrb	r3, [r7, #23]
 800a646:	3301      	adds	r3, #1
 800a648:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800a64a:	7dfb      	ldrb	r3, [r7, #23]
 800a64c:	68ba      	ldr	r2, [r7, #8]
 800a64e:	4413      	add	r3, r2
 800a650:	2200      	movs	r2, #0
 800a652:	701a      	strb	r2, [r3, #0]
    idx++;
 800a654:	7dfb      	ldrb	r3, [r7, #23]
 800a656:	3301      	adds	r3, #1
 800a658:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800a65a:	693b      	ldr	r3, [r7, #16]
 800a65c:	781b      	ldrb	r3, [r3, #0]
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d1e7      	bne.n	800a632 <USBD_GetString+0x52>
 800a662:	e000      	b.n	800a666 <USBD_GetString+0x86>
    return;
 800a664:	bf00      	nop
  }
}
 800a666:	3718      	adds	r7, #24
 800a668:	46bd      	mov	sp, r7
 800a66a:	bd80      	pop	{r7, pc}

0800a66c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a66c:	b480      	push	{r7}
 800a66e:	b085      	sub	sp, #20
 800a670:	af00      	add	r7, sp, #0
 800a672:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a674:	2300      	movs	r3, #0
 800a676:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800a67c:	e005      	b.n	800a68a <USBD_GetLen+0x1e>
  {
    len++;
 800a67e:	7bfb      	ldrb	r3, [r7, #15]
 800a680:	3301      	adds	r3, #1
 800a682:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800a684:	68bb      	ldr	r3, [r7, #8]
 800a686:	3301      	adds	r3, #1
 800a688:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800a68a:	68bb      	ldr	r3, [r7, #8]
 800a68c:	781b      	ldrb	r3, [r3, #0]
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d1f5      	bne.n	800a67e <USBD_GetLen+0x12>
  }

  return len;
 800a692:	7bfb      	ldrb	r3, [r7, #15]
}
 800a694:	4618      	mov	r0, r3
 800a696:	3714      	adds	r7, #20
 800a698:	46bd      	mov	sp, r7
 800a69a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a69e:	4770      	bx	lr

0800a6a0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a6a0:	b580      	push	{r7, lr}
 800a6a2:	b084      	sub	sp, #16
 800a6a4:	af00      	add	r7, sp, #0
 800a6a6:	60f8      	str	r0, [r7, #12]
 800a6a8:	60b9      	str	r1, [r7, #8]
 800a6aa:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	2202      	movs	r2, #2
 800a6b0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	687a      	ldr	r2, [r7, #4]
 800a6b8:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	687a      	ldr	r2, [r7, #4]
 800a6be:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	68ba      	ldr	r2, [r7, #8]
 800a6c4:	2100      	movs	r1, #0
 800a6c6:	68f8      	ldr	r0, [r7, #12]
 800a6c8:	f000 fdd3 	bl	800b272 <USBD_LL_Transmit>

  return USBD_OK;
 800a6cc:	2300      	movs	r3, #0
}
 800a6ce:	4618      	mov	r0, r3
 800a6d0:	3710      	adds	r7, #16
 800a6d2:	46bd      	mov	sp, r7
 800a6d4:	bd80      	pop	{r7, pc}

0800a6d6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a6d6:	b580      	push	{r7, lr}
 800a6d8:	b084      	sub	sp, #16
 800a6da:	af00      	add	r7, sp, #0
 800a6dc:	60f8      	str	r0, [r7, #12]
 800a6de:	60b9      	str	r1, [r7, #8]
 800a6e0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	68ba      	ldr	r2, [r7, #8]
 800a6e6:	2100      	movs	r1, #0
 800a6e8:	68f8      	ldr	r0, [r7, #12]
 800a6ea:	f000 fdc2 	bl	800b272 <USBD_LL_Transmit>

  return USBD_OK;
 800a6ee:	2300      	movs	r3, #0
}
 800a6f0:	4618      	mov	r0, r3
 800a6f2:	3710      	adds	r7, #16
 800a6f4:	46bd      	mov	sp, r7
 800a6f6:	bd80      	pop	{r7, pc}

0800a6f8 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800a6f8:	b580      	push	{r7, lr}
 800a6fa:	b084      	sub	sp, #16
 800a6fc:	af00      	add	r7, sp, #0
 800a6fe:	60f8      	str	r0, [r7, #12]
 800a700:	60b9      	str	r1, [r7, #8]
 800a702:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	2203      	movs	r2, #3
 800a708:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	687a      	ldr	r2, [r7, #4]
 800a710:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	687a      	ldr	r2, [r7, #4]
 800a718:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	68ba      	ldr	r2, [r7, #8]
 800a720:	2100      	movs	r1, #0
 800a722:	68f8      	ldr	r0, [r7, #12]
 800a724:	f000 fdc6 	bl	800b2b4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a728:	2300      	movs	r3, #0
}
 800a72a:	4618      	mov	r0, r3
 800a72c:	3710      	adds	r7, #16
 800a72e:	46bd      	mov	sp, r7
 800a730:	bd80      	pop	{r7, pc}

0800a732 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a732:	b580      	push	{r7, lr}
 800a734:	b084      	sub	sp, #16
 800a736:	af00      	add	r7, sp, #0
 800a738:	60f8      	str	r0, [r7, #12]
 800a73a:	60b9      	str	r1, [r7, #8]
 800a73c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	68ba      	ldr	r2, [r7, #8]
 800a742:	2100      	movs	r1, #0
 800a744:	68f8      	ldr	r0, [r7, #12]
 800a746:	f000 fdb5 	bl	800b2b4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a74a:	2300      	movs	r3, #0
}
 800a74c:	4618      	mov	r0, r3
 800a74e:	3710      	adds	r7, #16
 800a750:	46bd      	mov	sp, r7
 800a752:	bd80      	pop	{r7, pc}

0800a754 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a754:	b580      	push	{r7, lr}
 800a756:	b082      	sub	sp, #8
 800a758:	af00      	add	r7, sp, #0
 800a75a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	2204      	movs	r2, #4
 800a760:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a764:	2300      	movs	r3, #0
 800a766:	2200      	movs	r2, #0
 800a768:	2100      	movs	r1, #0
 800a76a:	6878      	ldr	r0, [r7, #4]
 800a76c:	f000 fd81 	bl	800b272 <USBD_LL_Transmit>

  return USBD_OK;
 800a770:	2300      	movs	r3, #0
}
 800a772:	4618      	mov	r0, r3
 800a774:	3708      	adds	r7, #8
 800a776:	46bd      	mov	sp, r7
 800a778:	bd80      	pop	{r7, pc}

0800a77a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a77a:	b580      	push	{r7, lr}
 800a77c:	b082      	sub	sp, #8
 800a77e:	af00      	add	r7, sp, #0
 800a780:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	2205      	movs	r2, #5
 800a786:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a78a:	2300      	movs	r3, #0
 800a78c:	2200      	movs	r2, #0
 800a78e:	2100      	movs	r1, #0
 800a790:	6878      	ldr	r0, [r7, #4]
 800a792:	f000 fd8f 	bl	800b2b4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a796:	2300      	movs	r3, #0
}
 800a798:	4618      	mov	r0, r3
 800a79a:	3708      	adds	r7, #8
 800a79c:	46bd      	mov	sp, r7
 800a79e:	bd80      	pop	{r7, pc}

0800a7a0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a7a0:	b580      	push	{r7, lr}
 800a7a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a7a4:	2200      	movs	r2, #0
 800a7a6:	4912      	ldr	r1, [pc, #72]	; (800a7f0 <MX_USB_DEVICE_Init+0x50>)
 800a7a8:	4812      	ldr	r0, [pc, #72]	; (800a7f4 <MX_USB_DEVICE_Init+0x54>)
 800a7aa:	f7fe fcdd 	bl	8009168 <USBD_Init>
 800a7ae:	4603      	mov	r3, r0
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d001      	beq.n	800a7b8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a7b4:	f7f6 fff4 	bl	80017a0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a7b8:	490f      	ldr	r1, [pc, #60]	; (800a7f8 <MX_USB_DEVICE_Init+0x58>)
 800a7ba:	480e      	ldr	r0, [pc, #56]	; (800a7f4 <MX_USB_DEVICE_Init+0x54>)
 800a7bc:	f7fe fd04 	bl	80091c8 <USBD_RegisterClass>
 800a7c0:	4603      	mov	r3, r0
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d001      	beq.n	800a7ca <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a7c6:	f7f6 ffeb 	bl	80017a0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a7ca:	490c      	ldr	r1, [pc, #48]	; (800a7fc <MX_USB_DEVICE_Init+0x5c>)
 800a7cc:	4809      	ldr	r0, [pc, #36]	; (800a7f4 <MX_USB_DEVICE_Init+0x54>)
 800a7ce:	f7fe fbfb 	bl	8008fc8 <USBD_CDC_RegisterInterface>
 800a7d2:	4603      	mov	r3, r0
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d001      	beq.n	800a7dc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a7d8:	f7f6 ffe2 	bl	80017a0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a7dc:	4805      	ldr	r0, [pc, #20]	; (800a7f4 <MX_USB_DEVICE_Init+0x54>)
 800a7de:	f7fe fd29 	bl	8009234 <USBD_Start>
 800a7e2:	4603      	mov	r3, r0
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d001      	beq.n	800a7ec <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a7e8:	f7f6 ffda 	bl	80017a0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a7ec:	bf00      	nop
 800a7ee:	bd80      	pop	{r7, pc}
 800a7f0:	200000ac 	.word	0x200000ac
 800a7f4:	200007dc 	.word	0x200007dc
 800a7f8:	20000018 	.word	0x20000018
 800a7fc:	20000098 	.word	0x20000098

0800a800 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a800:	b580      	push	{r7, lr}
 800a802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a804:	2200      	movs	r2, #0
 800a806:	4905      	ldr	r1, [pc, #20]	; (800a81c <CDC_Init_FS+0x1c>)
 800a808:	4805      	ldr	r0, [pc, #20]	; (800a820 <CDC_Init_FS+0x20>)
 800a80a:	f7fe fbf7 	bl	8008ffc <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a80e:	4905      	ldr	r1, [pc, #20]	; (800a824 <CDC_Init_FS+0x24>)
 800a810:	4803      	ldr	r0, [pc, #12]	; (800a820 <CDC_Init_FS+0x20>)
 800a812:	f7fe fc15 	bl	8009040 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a816:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a818:	4618      	mov	r0, r3
 800a81a:	bd80      	pop	{r7, pc}
 800a81c:	200012f8 	.word	0x200012f8
 800a820:	200007dc 	.word	0x200007dc
 800a824:	20000af8 	.word	0x20000af8

0800a828 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a828:	b480      	push	{r7}
 800a82a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a82c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a82e:	4618      	mov	r0, r3
 800a830:	46bd      	mov	sp, r7
 800a832:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a836:	4770      	bx	lr

0800a838 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a838:	b480      	push	{r7}
 800a83a:	b083      	sub	sp, #12
 800a83c:	af00      	add	r7, sp, #0
 800a83e:	4603      	mov	r3, r0
 800a840:	6039      	str	r1, [r7, #0]
 800a842:	71fb      	strb	r3, [r7, #7]
 800a844:	4613      	mov	r3, r2
 800a846:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a848:	79fb      	ldrb	r3, [r7, #7]
 800a84a:	2b23      	cmp	r3, #35	; 0x23
 800a84c:	f200 808c 	bhi.w	800a968 <CDC_Control_FS+0x130>
 800a850:	a201      	add	r2, pc, #4	; (adr r2, 800a858 <CDC_Control_FS+0x20>)
 800a852:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a856:	bf00      	nop
 800a858:	0800a969 	.word	0x0800a969
 800a85c:	0800a969 	.word	0x0800a969
 800a860:	0800a969 	.word	0x0800a969
 800a864:	0800a969 	.word	0x0800a969
 800a868:	0800a969 	.word	0x0800a969
 800a86c:	0800a969 	.word	0x0800a969
 800a870:	0800a969 	.word	0x0800a969
 800a874:	0800a969 	.word	0x0800a969
 800a878:	0800a969 	.word	0x0800a969
 800a87c:	0800a969 	.word	0x0800a969
 800a880:	0800a969 	.word	0x0800a969
 800a884:	0800a969 	.word	0x0800a969
 800a888:	0800a969 	.word	0x0800a969
 800a88c:	0800a969 	.word	0x0800a969
 800a890:	0800a969 	.word	0x0800a969
 800a894:	0800a969 	.word	0x0800a969
 800a898:	0800a969 	.word	0x0800a969
 800a89c:	0800a969 	.word	0x0800a969
 800a8a0:	0800a969 	.word	0x0800a969
 800a8a4:	0800a969 	.word	0x0800a969
 800a8a8:	0800a969 	.word	0x0800a969
 800a8ac:	0800a969 	.word	0x0800a969
 800a8b0:	0800a969 	.word	0x0800a969
 800a8b4:	0800a969 	.word	0x0800a969
 800a8b8:	0800a969 	.word	0x0800a969
 800a8bc:	0800a969 	.word	0x0800a969
 800a8c0:	0800a969 	.word	0x0800a969
 800a8c4:	0800a969 	.word	0x0800a969
 800a8c8:	0800a969 	.word	0x0800a969
 800a8cc:	0800a969 	.word	0x0800a969
 800a8d0:	0800a969 	.word	0x0800a969
 800a8d4:	0800a969 	.word	0x0800a969
 800a8d8:	0800a8e9 	.word	0x0800a8e9
 800a8dc:	0800a923 	.word	0x0800a923
 800a8e0:	0800a969 	.word	0x0800a969
 800a8e4:	0800a969 	.word	0x0800a969
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
        	buf[0]=pbuf[0];
 800a8e8:	683b      	ldr	r3, [r7, #0]
 800a8ea:	781a      	ldrb	r2, [r3, #0]
 800a8ec:	4b22      	ldr	r3, [pc, #136]	; (800a978 <CDC_Control_FS+0x140>)
 800a8ee:	701a      	strb	r2, [r3, #0]
        	buf[1]=pbuf[1];
 800a8f0:	683b      	ldr	r3, [r7, #0]
 800a8f2:	785a      	ldrb	r2, [r3, #1]
 800a8f4:	4b20      	ldr	r3, [pc, #128]	; (800a978 <CDC_Control_FS+0x140>)
 800a8f6:	705a      	strb	r2, [r3, #1]
    	    buf[2]=pbuf[2];
 800a8f8:	683b      	ldr	r3, [r7, #0]
 800a8fa:	789a      	ldrb	r2, [r3, #2]
 800a8fc:	4b1e      	ldr	r3, [pc, #120]	; (800a978 <CDC_Control_FS+0x140>)
 800a8fe:	709a      	strb	r2, [r3, #2]
    	    buf[3]=pbuf[3];
 800a900:	683b      	ldr	r3, [r7, #0]
 800a902:	78da      	ldrb	r2, [r3, #3]
 800a904:	4b1c      	ldr	r3, [pc, #112]	; (800a978 <CDC_Control_FS+0x140>)
 800a906:	70da      	strb	r2, [r3, #3]
    	    buf[4]=pbuf[4];
 800a908:	683b      	ldr	r3, [r7, #0]
 800a90a:	791a      	ldrb	r2, [r3, #4]
 800a90c:	4b1a      	ldr	r3, [pc, #104]	; (800a978 <CDC_Control_FS+0x140>)
 800a90e:	711a      	strb	r2, [r3, #4]
    	    buf[5]=pbuf[5];
 800a910:	683b      	ldr	r3, [r7, #0]
 800a912:	795a      	ldrb	r2, [r3, #5]
 800a914:	4b18      	ldr	r3, [pc, #96]	; (800a978 <CDC_Control_FS+0x140>)
 800a916:	715a      	strb	r2, [r3, #5]
    	    buf[6]=pbuf[6];
 800a918:	683b      	ldr	r3, [r7, #0]
 800a91a:	799a      	ldrb	r2, [r3, #6]
 800a91c:	4b16      	ldr	r3, [pc, #88]	; (800a978 <CDC_Control_FS+0x140>)
 800a91e:	719a      	strb	r2, [r3, #6]
        break;
 800a920:	e023      	b.n	800a96a <CDC_Control_FS+0x132>

        case CDC_GET_LINE_CODING:
        	pbuf[0]=buf[0];
 800a922:	4b15      	ldr	r3, [pc, #84]	; (800a978 <CDC_Control_FS+0x140>)
 800a924:	781a      	ldrb	r2, [r3, #0]
 800a926:	683b      	ldr	r3, [r7, #0]
 800a928:	701a      	strb	r2, [r3, #0]
        	pbuf[1]=buf[1];
 800a92a:	683b      	ldr	r3, [r7, #0]
 800a92c:	3301      	adds	r3, #1
 800a92e:	4a12      	ldr	r2, [pc, #72]	; (800a978 <CDC_Control_FS+0x140>)
 800a930:	7852      	ldrb	r2, [r2, #1]
 800a932:	701a      	strb	r2, [r3, #0]
        	pbuf[2]=buf[2];
 800a934:	683b      	ldr	r3, [r7, #0]
 800a936:	3302      	adds	r3, #2
 800a938:	4a0f      	ldr	r2, [pc, #60]	; (800a978 <CDC_Control_FS+0x140>)
 800a93a:	7892      	ldrb	r2, [r2, #2]
 800a93c:	701a      	strb	r2, [r3, #0]
        	pbuf[3]=buf[3];
 800a93e:	683b      	ldr	r3, [r7, #0]
 800a940:	3303      	adds	r3, #3
 800a942:	4a0d      	ldr	r2, [pc, #52]	; (800a978 <CDC_Control_FS+0x140>)
 800a944:	78d2      	ldrb	r2, [r2, #3]
 800a946:	701a      	strb	r2, [r3, #0]
        	pbuf[4]=buf[4];
 800a948:	683b      	ldr	r3, [r7, #0]
 800a94a:	3304      	adds	r3, #4
 800a94c:	4a0a      	ldr	r2, [pc, #40]	; (800a978 <CDC_Control_FS+0x140>)
 800a94e:	7912      	ldrb	r2, [r2, #4]
 800a950:	701a      	strb	r2, [r3, #0]
        	pbuf[5]=buf[5];
 800a952:	683b      	ldr	r3, [r7, #0]
 800a954:	3305      	adds	r3, #5
 800a956:	4a08      	ldr	r2, [pc, #32]	; (800a978 <CDC_Control_FS+0x140>)
 800a958:	7952      	ldrb	r2, [r2, #5]
 800a95a:	701a      	strb	r2, [r3, #0]
        	pbuf[6]=buf[6];
 800a95c:	683b      	ldr	r3, [r7, #0]
 800a95e:	3306      	adds	r3, #6
 800a960:	4a05      	ldr	r2, [pc, #20]	; (800a978 <CDC_Control_FS+0x140>)
 800a962:	7992      	ldrb	r2, [r2, #6]
 800a964:	701a      	strb	r2, [r3, #0]

        break;
 800a966:	e000      	b.n	800a96a <CDC_Control_FS+0x132>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a968:	bf00      	nop
  }

  return (USBD_OK);
 800a96a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a96c:	4618      	mov	r0, r3
 800a96e:	370c      	adds	r7, #12
 800a970:	46bd      	mov	sp, r7
 800a972:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a976:	4770      	bx	lr
 800a978:	20000ab8 	.word	0x20000ab8

0800a97c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a97c:	b580      	push	{r7, lr}
 800a97e:	b082      	sub	sp, #8
 800a980:	af00      	add	r7, sp, #0
 800a982:	6078      	str	r0, [r7, #4]
 800a984:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a986:	6879      	ldr	r1, [r7, #4]
 800a988:	4834      	ldr	r0, [pc, #208]	; (800aa5c <CDC_Receive_FS+0xe0>)
 800a98a:	f7fe fb59 	bl	8009040 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a98e:	4833      	ldr	r0, [pc, #204]	; (800aa5c <CDC_Receive_FS+0xe0>)
 800a990:	f7fe fbb4 	bl	80090fc <USBD_CDC_ReceivePacket>

//  memset (USB_RX_Buf, '\0', 18);  // clear the buffer
  RX_TempBuf[rxtempcounter] = Buf[rxtempcounter];
 800a994:	4b32      	ldr	r3, [pc, #200]	; (800aa60 <CDC_Receive_FS+0xe4>)
 800a996:	781b      	ldrb	r3, [r3, #0]
 800a998:	461a      	mov	r2, r3
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	4413      	add	r3, r2
 800a99e:	4a30      	ldr	r2, [pc, #192]	; (800aa60 <CDC_Receive_FS+0xe4>)
 800a9a0:	7812      	ldrb	r2, [r2, #0]
 800a9a2:	7819      	ldrb	r1, [r3, #0]
 800a9a4:	4b2f      	ldr	r3, [pc, #188]	; (800aa64 <CDC_Receive_FS+0xe8>)
 800a9a6:	5499      	strb	r1, [r3, r2]
    rxtempcounter++;
 800a9a8:	4b2d      	ldr	r3, [pc, #180]	; (800aa60 <CDC_Receive_FS+0xe4>)
 800a9aa:	781b      	ldrb	r3, [r3, #0]
 800a9ac:	3301      	adds	r3, #1
 800a9ae:	b2da      	uxtb	r2, r3
 800a9b0:	4b2b      	ldr	r3, [pc, #172]	; (800aa60 <CDC_Receive_FS+0xe4>)
 800a9b2:	701a      	strb	r2, [r3, #0]
  if(rxtempcounter == 18)
 800a9b4:	4b2a      	ldr	r3, [pc, #168]	; (800aa60 <CDC_Receive_FS+0xe4>)
 800a9b6:	781b      	ldrb	r3, [r3, #0]
 800a9b8:	2b12      	cmp	r3, #18
 800a9ba:	d14a      	bne.n	800aa52 <CDC_Receive_FS+0xd6>
//
//		desiredPositionFloatNum3.bytes[0] = USB_RX_Buf[13];
//		desiredPositionFloatNum3.bytes[1] = USB_RX_Buf[14];
//		desiredPositionFloatNum3.bytes[2] = USB_RX_Buf[15];
//		desiredPositionFloatNum3.bytes[3] = USB_RX_Buf[16];
		USB_RX_Buf[0] = RX_TempBuf[0];
 800a9bc:	4b29      	ldr	r3, [pc, #164]	; (800aa64 <CDC_Receive_FS+0xe8>)
 800a9be:	781a      	ldrb	r2, [r3, #0]
 800a9c0:	4b29      	ldr	r3, [pc, #164]	; (800aa68 <CDC_Receive_FS+0xec>)
 800a9c2:	701a      	strb	r2, [r3, #0]
		USB_RX_Buf[1] = RX_TempBuf[1];
 800a9c4:	4b27      	ldr	r3, [pc, #156]	; (800aa64 <CDC_Receive_FS+0xe8>)
 800a9c6:	785a      	ldrb	r2, [r3, #1]
 800a9c8:	4b27      	ldr	r3, [pc, #156]	; (800aa68 <CDC_Receive_FS+0xec>)
 800a9ca:	705a      	strb	r2, [r3, #1]
		USB_RX_Buf[2] = RX_TempBuf[2];
 800a9cc:	4b25      	ldr	r3, [pc, #148]	; (800aa64 <CDC_Receive_FS+0xe8>)
 800a9ce:	789a      	ldrb	r2, [r3, #2]
 800a9d0:	4b25      	ldr	r3, [pc, #148]	; (800aa68 <CDC_Receive_FS+0xec>)
 800a9d2:	709a      	strb	r2, [r3, #2]
		USB_RX_Buf[3] = RX_TempBuf[3];
 800a9d4:	4b23      	ldr	r3, [pc, #140]	; (800aa64 <CDC_Receive_FS+0xe8>)
 800a9d6:	78da      	ldrb	r2, [r3, #3]
 800a9d8:	4b23      	ldr	r3, [pc, #140]	; (800aa68 <CDC_Receive_FS+0xec>)
 800a9da:	70da      	strb	r2, [r3, #3]
		USB_RX_Buf[4] = RX_TempBuf[4];
 800a9dc:	4b21      	ldr	r3, [pc, #132]	; (800aa64 <CDC_Receive_FS+0xe8>)
 800a9de:	791a      	ldrb	r2, [r3, #4]
 800a9e0:	4b21      	ldr	r3, [pc, #132]	; (800aa68 <CDC_Receive_FS+0xec>)
 800a9e2:	711a      	strb	r2, [r3, #4]
		USB_RX_Buf[5] = RX_TempBuf[5];
 800a9e4:	4b1f      	ldr	r3, [pc, #124]	; (800aa64 <CDC_Receive_FS+0xe8>)
 800a9e6:	795a      	ldrb	r2, [r3, #5]
 800a9e8:	4b1f      	ldr	r3, [pc, #124]	; (800aa68 <CDC_Receive_FS+0xec>)
 800a9ea:	715a      	strb	r2, [r3, #5]
		USB_RX_Buf[6] = RX_TempBuf[6];
 800a9ec:	4b1d      	ldr	r3, [pc, #116]	; (800aa64 <CDC_Receive_FS+0xe8>)
 800a9ee:	799a      	ldrb	r2, [r3, #6]
 800a9f0:	4b1d      	ldr	r3, [pc, #116]	; (800aa68 <CDC_Receive_FS+0xec>)
 800a9f2:	719a      	strb	r2, [r3, #6]
		USB_RX_Buf[7] = RX_TempBuf[7];
 800a9f4:	4b1b      	ldr	r3, [pc, #108]	; (800aa64 <CDC_Receive_FS+0xe8>)
 800a9f6:	79da      	ldrb	r2, [r3, #7]
 800a9f8:	4b1b      	ldr	r3, [pc, #108]	; (800aa68 <CDC_Receive_FS+0xec>)
 800a9fa:	71da      	strb	r2, [r3, #7]
		USB_RX_Buf[8] = RX_TempBuf[8];
 800a9fc:	4b19      	ldr	r3, [pc, #100]	; (800aa64 <CDC_Receive_FS+0xe8>)
 800a9fe:	7a1a      	ldrb	r2, [r3, #8]
 800aa00:	4b19      	ldr	r3, [pc, #100]	; (800aa68 <CDC_Receive_FS+0xec>)
 800aa02:	721a      	strb	r2, [r3, #8]
		USB_RX_Buf[9] = RX_TempBuf[9];
 800aa04:	4b17      	ldr	r3, [pc, #92]	; (800aa64 <CDC_Receive_FS+0xe8>)
 800aa06:	7a5a      	ldrb	r2, [r3, #9]
 800aa08:	4b17      	ldr	r3, [pc, #92]	; (800aa68 <CDC_Receive_FS+0xec>)
 800aa0a:	725a      	strb	r2, [r3, #9]
		USB_RX_Buf[10] = RX_TempBuf[10];
 800aa0c:	4b15      	ldr	r3, [pc, #84]	; (800aa64 <CDC_Receive_FS+0xe8>)
 800aa0e:	7a9a      	ldrb	r2, [r3, #10]
 800aa10:	4b15      	ldr	r3, [pc, #84]	; (800aa68 <CDC_Receive_FS+0xec>)
 800aa12:	729a      	strb	r2, [r3, #10]
		USB_RX_Buf[11] = RX_TempBuf[11];
 800aa14:	4b13      	ldr	r3, [pc, #76]	; (800aa64 <CDC_Receive_FS+0xe8>)
 800aa16:	7ada      	ldrb	r2, [r3, #11]
 800aa18:	4b13      	ldr	r3, [pc, #76]	; (800aa68 <CDC_Receive_FS+0xec>)
 800aa1a:	72da      	strb	r2, [r3, #11]
		USB_RX_Buf[12] = RX_TempBuf[12];
 800aa1c:	4b11      	ldr	r3, [pc, #68]	; (800aa64 <CDC_Receive_FS+0xe8>)
 800aa1e:	7b1a      	ldrb	r2, [r3, #12]
 800aa20:	4b11      	ldr	r3, [pc, #68]	; (800aa68 <CDC_Receive_FS+0xec>)
 800aa22:	731a      	strb	r2, [r3, #12]
		USB_RX_Buf[13] = RX_TempBuf[13];
 800aa24:	4b0f      	ldr	r3, [pc, #60]	; (800aa64 <CDC_Receive_FS+0xe8>)
 800aa26:	7b5a      	ldrb	r2, [r3, #13]
 800aa28:	4b0f      	ldr	r3, [pc, #60]	; (800aa68 <CDC_Receive_FS+0xec>)
 800aa2a:	735a      	strb	r2, [r3, #13]
		USB_RX_Buf[14] = RX_TempBuf[14];
 800aa2c:	4b0d      	ldr	r3, [pc, #52]	; (800aa64 <CDC_Receive_FS+0xe8>)
 800aa2e:	7b9a      	ldrb	r2, [r3, #14]
 800aa30:	4b0d      	ldr	r3, [pc, #52]	; (800aa68 <CDC_Receive_FS+0xec>)
 800aa32:	739a      	strb	r2, [r3, #14]
		USB_RX_Buf[15] = RX_TempBuf[15];
 800aa34:	4b0b      	ldr	r3, [pc, #44]	; (800aa64 <CDC_Receive_FS+0xe8>)
 800aa36:	7bda      	ldrb	r2, [r3, #15]
 800aa38:	4b0b      	ldr	r3, [pc, #44]	; (800aa68 <CDC_Receive_FS+0xec>)
 800aa3a:	73da      	strb	r2, [r3, #15]
		USB_RX_Buf[16] = RX_TempBuf[16];
 800aa3c:	4b09      	ldr	r3, [pc, #36]	; (800aa64 <CDC_Receive_FS+0xe8>)
 800aa3e:	7c1a      	ldrb	r2, [r3, #16]
 800aa40:	4b09      	ldr	r3, [pc, #36]	; (800aa68 <CDC_Receive_FS+0xec>)
 800aa42:	741a      	strb	r2, [r3, #16]
		USB_RX_Buf[17] = RX_TempBuf[17];
 800aa44:	4b07      	ldr	r3, [pc, #28]	; (800aa64 <CDC_Receive_FS+0xe8>)
 800aa46:	7c5a      	ldrb	r2, [r3, #17]
 800aa48:	4b07      	ldr	r3, [pc, #28]	; (800aa68 <CDC_Receive_FS+0xec>)
 800aa4a:	745a      	strb	r2, [r3, #17]

		rxtempcounter = 0;
 800aa4c:	4b04      	ldr	r3, [pc, #16]	; (800aa60 <CDC_Receive_FS+0xe4>)
 800aa4e:	2200      	movs	r2, #0
 800aa50:	701a      	strb	r2, [r3, #0]
  }
  return (USBD_OK);
 800aa52:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800aa54:	4618      	mov	r0, r3
 800aa56:	3708      	adds	r7, #8
 800aa58:	46bd      	mov	sp, r7
 800aa5a:	bd80      	pop	{r7, pc}
 800aa5c:	200007dc 	.word	0x200007dc
 800aa60:	20000ae6 	.word	0x20000ae6
 800aa64:	20000ad4 	.word	0x20000ad4
 800aa68:	20000ac0 	.word	0x20000ac0

0800aa6c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800aa6c:	b580      	push	{r7, lr}
 800aa6e:	b084      	sub	sp, #16
 800aa70:	af00      	add	r7, sp, #0
 800aa72:	6078      	str	r0, [r7, #4]
 800aa74:	460b      	mov	r3, r1
 800aa76:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800aa78:	2300      	movs	r3, #0
 800aa7a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800aa7c:	4b0d      	ldr	r3, [pc, #52]	; (800aab4 <CDC_Transmit_FS+0x48>)
 800aa7e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800aa82:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800aa84:	68bb      	ldr	r3, [r7, #8]
 800aa86:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d001      	beq.n	800aa92 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800aa8e:	2301      	movs	r3, #1
 800aa90:	e00b      	b.n	800aaaa <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800aa92:	887b      	ldrh	r3, [r7, #2]
 800aa94:	461a      	mov	r2, r3
 800aa96:	6879      	ldr	r1, [r7, #4]
 800aa98:	4806      	ldr	r0, [pc, #24]	; (800aab4 <CDC_Transmit_FS+0x48>)
 800aa9a:	f7fe faaf 	bl	8008ffc <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800aa9e:	4805      	ldr	r0, [pc, #20]	; (800aab4 <CDC_Transmit_FS+0x48>)
 800aaa0:	f7fe faec 	bl	800907c <USBD_CDC_TransmitPacket>
 800aaa4:	4603      	mov	r3, r0
 800aaa6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800aaa8:	7bfb      	ldrb	r3, [r7, #15]
}
 800aaaa:	4618      	mov	r0, r3
 800aaac:	3710      	adds	r7, #16
 800aaae:	46bd      	mov	sp, r7
 800aab0:	bd80      	pop	{r7, pc}
 800aab2:	bf00      	nop
 800aab4:	200007dc 	.word	0x200007dc

0800aab8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800aab8:	b480      	push	{r7}
 800aaba:	b087      	sub	sp, #28
 800aabc:	af00      	add	r7, sp, #0
 800aabe:	60f8      	str	r0, [r7, #12]
 800aac0:	60b9      	str	r1, [r7, #8]
 800aac2:	4613      	mov	r3, r2
 800aac4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800aac6:	2300      	movs	r3, #0
 800aac8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800aaca:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800aace:	4618      	mov	r0, r3
 800aad0:	371c      	adds	r7, #28
 800aad2:	46bd      	mov	sp, r7
 800aad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aad8:	4770      	bx	lr
	...

0800aadc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aadc:	b480      	push	{r7}
 800aade:	b083      	sub	sp, #12
 800aae0:	af00      	add	r7, sp, #0
 800aae2:	4603      	mov	r3, r0
 800aae4:	6039      	str	r1, [r7, #0]
 800aae6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800aae8:	683b      	ldr	r3, [r7, #0]
 800aaea:	2212      	movs	r2, #18
 800aaec:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800aaee:	4b03      	ldr	r3, [pc, #12]	; (800aafc <USBD_FS_DeviceDescriptor+0x20>)
}
 800aaf0:	4618      	mov	r0, r3
 800aaf2:	370c      	adds	r7, #12
 800aaf4:	46bd      	mov	sp, r7
 800aaf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aafa:	4770      	bx	lr
 800aafc:	200000cc 	.word	0x200000cc

0800ab00 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ab00:	b480      	push	{r7}
 800ab02:	b083      	sub	sp, #12
 800ab04:	af00      	add	r7, sp, #0
 800ab06:	4603      	mov	r3, r0
 800ab08:	6039      	str	r1, [r7, #0]
 800ab0a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800ab0c:	683b      	ldr	r3, [r7, #0]
 800ab0e:	2204      	movs	r2, #4
 800ab10:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800ab12:	4b03      	ldr	r3, [pc, #12]	; (800ab20 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800ab14:	4618      	mov	r0, r3
 800ab16:	370c      	adds	r7, #12
 800ab18:	46bd      	mov	sp, r7
 800ab1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab1e:	4770      	bx	lr
 800ab20:	200000ec 	.word	0x200000ec

0800ab24 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ab24:	b580      	push	{r7, lr}
 800ab26:	b082      	sub	sp, #8
 800ab28:	af00      	add	r7, sp, #0
 800ab2a:	4603      	mov	r3, r0
 800ab2c:	6039      	str	r1, [r7, #0]
 800ab2e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ab30:	79fb      	ldrb	r3, [r7, #7]
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	d105      	bne.n	800ab42 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ab36:	683a      	ldr	r2, [r7, #0]
 800ab38:	4907      	ldr	r1, [pc, #28]	; (800ab58 <USBD_FS_ProductStrDescriptor+0x34>)
 800ab3a:	4808      	ldr	r0, [pc, #32]	; (800ab5c <USBD_FS_ProductStrDescriptor+0x38>)
 800ab3c:	f7ff fd50 	bl	800a5e0 <USBD_GetString>
 800ab40:	e004      	b.n	800ab4c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ab42:	683a      	ldr	r2, [r7, #0]
 800ab44:	4904      	ldr	r1, [pc, #16]	; (800ab58 <USBD_FS_ProductStrDescriptor+0x34>)
 800ab46:	4805      	ldr	r0, [pc, #20]	; (800ab5c <USBD_FS_ProductStrDescriptor+0x38>)
 800ab48:	f7ff fd4a 	bl	800a5e0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ab4c:	4b02      	ldr	r3, [pc, #8]	; (800ab58 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800ab4e:	4618      	mov	r0, r3
 800ab50:	3708      	adds	r7, #8
 800ab52:	46bd      	mov	sp, r7
 800ab54:	bd80      	pop	{r7, pc}
 800ab56:	bf00      	nop
 800ab58:	20001af8 	.word	0x20001af8
 800ab5c:	0800fc9c 	.word	0x0800fc9c

0800ab60 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ab60:	b580      	push	{r7, lr}
 800ab62:	b082      	sub	sp, #8
 800ab64:	af00      	add	r7, sp, #0
 800ab66:	4603      	mov	r3, r0
 800ab68:	6039      	str	r1, [r7, #0]
 800ab6a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800ab6c:	683a      	ldr	r2, [r7, #0]
 800ab6e:	4904      	ldr	r1, [pc, #16]	; (800ab80 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800ab70:	4804      	ldr	r0, [pc, #16]	; (800ab84 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800ab72:	f7ff fd35 	bl	800a5e0 <USBD_GetString>
  return USBD_StrDesc;
 800ab76:	4b02      	ldr	r3, [pc, #8]	; (800ab80 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800ab78:	4618      	mov	r0, r3
 800ab7a:	3708      	adds	r7, #8
 800ab7c:	46bd      	mov	sp, r7
 800ab7e:	bd80      	pop	{r7, pc}
 800ab80:	20001af8 	.word	0x20001af8
 800ab84:	0800fcb4 	.word	0x0800fcb4

0800ab88 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ab88:	b580      	push	{r7, lr}
 800ab8a:	b082      	sub	sp, #8
 800ab8c:	af00      	add	r7, sp, #0
 800ab8e:	4603      	mov	r3, r0
 800ab90:	6039      	str	r1, [r7, #0]
 800ab92:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800ab94:	683b      	ldr	r3, [r7, #0]
 800ab96:	221a      	movs	r2, #26
 800ab98:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800ab9a:	f000 f855 	bl	800ac48 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800ab9e:	4b02      	ldr	r3, [pc, #8]	; (800aba8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800aba0:	4618      	mov	r0, r3
 800aba2:	3708      	adds	r7, #8
 800aba4:	46bd      	mov	sp, r7
 800aba6:	bd80      	pop	{r7, pc}
 800aba8:	200000f0 	.word	0x200000f0

0800abac <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800abac:	b580      	push	{r7, lr}
 800abae:	b082      	sub	sp, #8
 800abb0:	af00      	add	r7, sp, #0
 800abb2:	4603      	mov	r3, r0
 800abb4:	6039      	str	r1, [r7, #0]
 800abb6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800abb8:	79fb      	ldrb	r3, [r7, #7]
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d105      	bne.n	800abca <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800abbe:	683a      	ldr	r2, [r7, #0]
 800abc0:	4907      	ldr	r1, [pc, #28]	; (800abe0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800abc2:	4808      	ldr	r0, [pc, #32]	; (800abe4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800abc4:	f7ff fd0c 	bl	800a5e0 <USBD_GetString>
 800abc8:	e004      	b.n	800abd4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800abca:	683a      	ldr	r2, [r7, #0]
 800abcc:	4904      	ldr	r1, [pc, #16]	; (800abe0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800abce:	4805      	ldr	r0, [pc, #20]	; (800abe4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800abd0:	f7ff fd06 	bl	800a5e0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800abd4:	4b02      	ldr	r3, [pc, #8]	; (800abe0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800abd6:	4618      	mov	r0, r3
 800abd8:	3708      	adds	r7, #8
 800abda:	46bd      	mov	sp, r7
 800abdc:	bd80      	pop	{r7, pc}
 800abde:	bf00      	nop
 800abe0:	20001af8 	.word	0x20001af8
 800abe4:	0800fcc8 	.word	0x0800fcc8

0800abe8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800abe8:	b580      	push	{r7, lr}
 800abea:	b082      	sub	sp, #8
 800abec:	af00      	add	r7, sp, #0
 800abee:	4603      	mov	r3, r0
 800abf0:	6039      	str	r1, [r7, #0]
 800abf2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800abf4:	79fb      	ldrb	r3, [r7, #7]
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d105      	bne.n	800ac06 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800abfa:	683a      	ldr	r2, [r7, #0]
 800abfc:	4907      	ldr	r1, [pc, #28]	; (800ac1c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800abfe:	4808      	ldr	r0, [pc, #32]	; (800ac20 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ac00:	f7ff fcee 	bl	800a5e0 <USBD_GetString>
 800ac04:	e004      	b.n	800ac10 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ac06:	683a      	ldr	r2, [r7, #0]
 800ac08:	4904      	ldr	r1, [pc, #16]	; (800ac1c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ac0a:	4805      	ldr	r0, [pc, #20]	; (800ac20 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ac0c:	f7ff fce8 	bl	800a5e0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ac10:	4b02      	ldr	r3, [pc, #8]	; (800ac1c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800ac12:	4618      	mov	r0, r3
 800ac14:	3708      	adds	r7, #8
 800ac16:	46bd      	mov	sp, r7
 800ac18:	bd80      	pop	{r7, pc}
 800ac1a:	bf00      	nop
 800ac1c:	20001af8 	.word	0x20001af8
 800ac20:	0800fcd4 	.word	0x0800fcd4

0800ac24 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ac24:	b480      	push	{r7}
 800ac26:	b083      	sub	sp, #12
 800ac28:	af00      	add	r7, sp, #0
 800ac2a:	4603      	mov	r3, r0
 800ac2c:	6039      	str	r1, [r7, #0]
 800ac2e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800ac30:	683b      	ldr	r3, [r7, #0]
 800ac32:	220c      	movs	r2, #12
 800ac34:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800ac36:	4b03      	ldr	r3, [pc, #12]	; (800ac44 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800ac38:	4618      	mov	r0, r3
 800ac3a:	370c      	adds	r7, #12
 800ac3c:	46bd      	mov	sp, r7
 800ac3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac42:	4770      	bx	lr
 800ac44:	200000e0 	.word	0x200000e0

0800ac48 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800ac48:	b580      	push	{r7, lr}
 800ac4a:	b084      	sub	sp, #16
 800ac4c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800ac4e:	4b0f      	ldr	r3, [pc, #60]	; (800ac8c <Get_SerialNum+0x44>)
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800ac54:	4b0e      	ldr	r3, [pc, #56]	; (800ac90 <Get_SerialNum+0x48>)
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800ac5a:	4b0e      	ldr	r3, [pc, #56]	; (800ac94 <Get_SerialNum+0x4c>)
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800ac60:	68fa      	ldr	r2, [r7, #12]
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	4413      	add	r3, r2
 800ac66:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d009      	beq.n	800ac82 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800ac6e:	2208      	movs	r2, #8
 800ac70:	4909      	ldr	r1, [pc, #36]	; (800ac98 <Get_SerialNum+0x50>)
 800ac72:	68f8      	ldr	r0, [r7, #12]
 800ac74:	f000 f814 	bl	800aca0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800ac78:	2204      	movs	r2, #4
 800ac7a:	4908      	ldr	r1, [pc, #32]	; (800ac9c <Get_SerialNum+0x54>)
 800ac7c:	68b8      	ldr	r0, [r7, #8]
 800ac7e:	f000 f80f 	bl	800aca0 <IntToUnicode>
  }
}
 800ac82:	bf00      	nop
 800ac84:	3710      	adds	r7, #16
 800ac86:	46bd      	mov	sp, r7
 800ac88:	bd80      	pop	{r7, pc}
 800ac8a:	bf00      	nop
 800ac8c:	1ff0f420 	.word	0x1ff0f420
 800ac90:	1ff0f424 	.word	0x1ff0f424
 800ac94:	1ff0f428 	.word	0x1ff0f428
 800ac98:	200000f2 	.word	0x200000f2
 800ac9c:	20000102 	.word	0x20000102

0800aca0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800aca0:	b480      	push	{r7}
 800aca2:	b087      	sub	sp, #28
 800aca4:	af00      	add	r7, sp, #0
 800aca6:	60f8      	str	r0, [r7, #12]
 800aca8:	60b9      	str	r1, [r7, #8]
 800acaa:	4613      	mov	r3, r2
 800acac:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800acae:	2300      	movs	r3, #0
 800acb0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800acb2:	2300      	movs	r3, #0
 800acb4:	75fb      	strb	r3, [r7, #23]
 800acb6:	e027      	b.n	800ad08 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	0f1b      	lsrs	r3, r3, #28
 800acbc:	2b09      	cmp	r3, #9
 800acbe:	d80b      	bhi.n	800acd8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	0f1b      	lsrs	r3, r3, #28
 800acc4:	b2da      	uxtb	r2, r3
 800acc6:	7dfb      	ldrb	r3, [r7, #23]
 800acc8:	005b      	lsls	r3, r3, #1
 800acca:	4619      	mov	r1, r3
 800accc:	68bb      	ldr	r3, [r7, #8]
 800acce:	440b      	add	r3, r1
 800acd0:	3230      	adds	r2, #48	; 0x30
 800acd2:	b2d2      	uxtb	r2, r2
 800acd4:	701a      	strb	r2, [r3, #0]
 800acd6:	e00a      	b.n	800acee <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	0f1b      	lsrs	r3, r3, #28
 800acdc:	b2da      	uxtb	r2, r3
 800acde:	7dfb      	ldrb	r3, [r7, #23]
 800ace0:	005b      	lsls	r3, r3, #1
 800ace2:	4619      	mov	r1, r3
 800ace4:	68bb      	ldr	r3, [r7, #8]
 800ace6:	440b      	add	r3, r1
 800ace8:	3237      	adds	r2, #55	; 0x37
 800acea:	b2d2      	uxtb	r2, r2
 800acec:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	011b      	lsls	r3, r3, #4
 800acf2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800acf4:	7dfb      	ldrb	r3, [r7, #23]
 800acf6:	005b      	lsls	r3, r3, #1
 800acf8:	3301      	adds	r3, #1
 800acfa:	68ba      	ldr	r2, [r7, #8]
 800acfc:	4413      	add	r3, r2
 800acfe:	2200      	movs	r2, #0
 800ad00:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800ad02:	7dfb      	ldrb	r3, [r7, #23]
 800ad04:	3301      	adds	r3, #1
 800ad06:	75fb      	strb	r3, [r7, #23]
 800ad08:	7dfa      	ldrb	r2, [r7, #23]
 800ad0a:	79fb      	ldrb	r3, [r7, #7]
 800ad0c:	429a      	cmp	r2, r3
 800ad0e:	d3d3      	bcc.n	800acb8 <IntToUnicode+0x18>
  }
}
 800ad10:	bf00      	nop
 800ad12:	bf00      	nop
 800ad14:	371c      	adds	r7, #28
 800ad16:	46bd      	mov	sp, r7
 800ad18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad1c:	4770      	bx	lr
	...

0800ad20 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800ad20:	b580      	push	{r7, lr}
 800ad22:	b0ac      	sub	sp, #176	; 0xb0
 800ad24:	af00      	add	r7, sp, #0
 800ad26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ad28:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800ad2c:	2200      	movs	r2, #0
 800ad2e:	601a      	str	r2, [r3, #0]
 800ad30:	605a      	str	r2, [r3, #4]
 800ad32:	609a      	str	r2, [r3, #8]
 800ad34:	60da      	str	r2, [r3, #12]
 800ad36:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800ad38:	f107 0318 	add.w	r3, r7, #24
 800ad3c:	2284      	movs	r2, #132	; 0x84
 800ad3e:	2100      	movs	r1, #0
 800ad40:	4618      	mov	r0, r3
 800ad42:	f001 fbc2 	bl	800c4ca <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ad4e:	d161      	bne.n	800ae14 <HAL_PCD_MspInit+0xf4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800ad50:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800ad54:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800ad56:	2300      	movs	r3, #0
 800ad58:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800ad5c:	f107 0318 	add.w	r3, r7, #24
 800ad60:	4618      	mov	r0, r3
 800ad62:	f7f9 ff37 	bl	8004bd4 <HAL_RCCEx_PeriphCLKConfig>
 800ad66:	4603      	mov	r3, r0
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d001      	beq.n	800ad70 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 800ad6c:	f7f6 fd18 	bl	80017a0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ad70:	4b2a      	ldr	r3, [pc, #168]	; (800ae1c <HAL_PCD_MspInit+0xfc>)
 800ad72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad74:	4a29      	ldr	r2, [pc, #164]	; (800ae1c <HAL_PCD_MspInit+0xfc>)
 800ad76:	f043 0301 	orr.w	r3, r3, #1
 800ad7a:	6313      	str	r3, [r2, #48]	; 0x30
 800ad7c:	4b27      	ldr	r3, [pc, #156]	; (800ae1c <HAL_PCD_MspInit+0xfc>)
 800ad7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad80:	f003 0301 	and.w	r3, r3, #1
 800ad84:	617b      	str	r3, [r7, #20]
 800ad86:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800ad88:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800ad8c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ad90:	2302      	movs	r3, #2
 800ad92:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ad96:	2300      	movs	r3, #0
 800ad98:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ad9c:	2303      	movs	r3, #3
 800ad9e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800ada2:	230a      	movs	r3, #10
 800ada4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ada8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800adac:	4619      	mov	r1, r3
 800adae:	481c      	ldr	r0, [pc, #112]	; (800ae20 <HAL_PCD_MspInit+0x100>)
 800adb0:	f7f7 fdb8 	bl	8002924 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800adb4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800adb8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800adbc:	2300      	movs	r3, #0
 800adbe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800adc2:	2300      	movs	r3, #0
 800adc4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800adc8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800adcc:	4619      	mov	r1, r3
 800adce:	4814      	ldr	r0, [pc, #80]	; (800ae20 <HAL_PCD_MspInit+0x100>)
 800add0:	f7f7 fda8 	bl	8002924 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800add4:	4b11      	ldr	r3, [pc, #68]	; (800ae1c <HAL_PCD_MspInit+0xfc>)
 800add6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800add8:	4a10      	ldr	r2, [pc, #64]	; (800ae1c <HAL_PCD_MspInit+0xfc>)
 800adda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800adde:	6353      	str	r3, [r2, #52]	; 0x34
 800ade0:	4b0e      	ldr	r3, [pc, #56]	; (800ae1c <HAL_PCD_MspInit+0xfc>)
 800ade2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ade4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ade8:	613b      	str	r3, [r7, #16]
 800adea:	693b      	ldr	r3, [r7, #16]
 800adec:	4b0b      	ldr	r3, [pc, #44]	; (800ae1c <HAL_PCD_MspInit+0xfc>)
 800adee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800adf0:	4a0a      	ldr	r2, [pc, #40]	; (800ae1c <HAL_PCD_MspInit+0xfc>)
 800adf2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800adf6:	6453      	str	r3, [r2, #68]	; 0x44
 800adf8:	4b08      	ldr	r3, [pc, #32]	; (800ae1c <HAL_PCD_MspInit+0xfc>)
 800adfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800adfc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ae00:	60fb      	str	r3, [r7, #12]
 800ae02:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800ae04:	2200      	movs	r2, #0
 800ae06:	2100      	movs	r1, #0
 800ae08:	2043      	movs	r0, #67	; 0x43
 800ae0a:	f7f7 f99c 	bl	8002146 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800ae0e:	2043      	movs	r0, #67	; 0x43
 800ae10:	f7f7 f9b5 	bl	800217e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800ae14:	bf00      	nop
 800ae16:	37b0      	adds	r7, #176	; 0xb0
 800ae18:	46bd      	mov	sp, r7
 800ae1a:	bd80      	pop	{r7, pc}
 800ae1c:	40023800 	.word	0x40023800
 800ae20:	40020000 	.word	0x40020000

0800ae24 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ae24:	b580      	push	{r7, lr}
 800ae26:	b082      	sub	sp, #8
 800ae28:	af00      	add	r7, sp, #0
 800ae2a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800ae38:	4619      	mov	r1, r3
 800ae3a:	4610      	mov	r0, r2
 800ae3c:	f7fe fa47 	bl	80092ce <USBD_LL_SetupStage>
}
 800ae40:	bf00      	nop
 800ae42:	3708      	adds	r7, #8
 800ae44:	46bd      	mov	sp, r7
 800ae46:	bd80      	pop	{r7, pc}

0800ae48 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ae48:	b580      	push	{r7, lr}
 800ae4a:	b082      	sub	sp, #8
 800ae4c:	af00      	add	r7, sp, #0
 800ae4e:	6078      	str	r0, [r7, #4]
 800ae50:	460b      	mov	r3, r1
 800ae52:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
 800ae5a:	78fa      	ldrb	r2, [r7, #3]
 800ae5c:	6879      	ldr	r1, [r7, #4]
 800ae5e:	4613      	mov	r3, r2
 800ae60:	00db      	lsls	r3, r3, #3
 800ae62:	4413      	add	r3, r2
 800ae64:	009b      	lsls	r3, r3, #2
 800ae66:	440b      	add	r3, r1
 800ae68:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800ae6c:	681a      	ldr	r2, [r3, #0]
 800ae6e:	78fb      	ldrb	r3, [r7, #3]
 800ae70:	4619      	mov	r1, r3
 800ae72:	f7fe fa81 	bl	8009378 <USBD_LL_DataOutStage>
}
 800ae76:	bf00      	nop
 800ae78:	3708      	adds	r7, #8
 800ae7a:	46bd      	mov	sp, r7
 800ae7c:	bd80      	pop	{r7, pc}

0800ae7e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ae7e:	b580      	push	{r7, lr}
 800ae80:	b082      	sub	sp, #8
 800ae82:	af00      	add	r7, sp, #0
 800ae84:	6078      	str	r0, [r7, #4]
 800ae86:	460b      	mov	r3, r1
 800ae88:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
 800ae90:	78fa      	ldrb	r2, [r7, #3]
 800ae92:	6879      	ldr	r1, [r7, #4]
 800ae94:	4613      	mov	r3, r2
 800ae96:	00db      	lsls	r3, r3, #3
 800ae98:	4413      	add	r3, r2
 800ae9a:	009b      	lsls	r3, r3, #2
 800ae9c:	440b      	add	r3, r1
 800ae9e:	334c      	adds	r3, #76	; 0x4c
 800aea0:	681a      	ldr	r2, [r3, #0]
 800aea2:	78fb      	ldrb	r3, [r7, #3]
 800aea4:	4619      	mov	r1, r3
 800aea6:	f7fe fb1a 	bl	80094de <USBD_LL_DataInStage>
}
 800aeaa:	bf00      	nop
 800aeac:	3708      	adds	r7, #8
 800aeae:	46bd      	mov	sp, r7
 800aeb0:	bd80      	pop	{r7, pc}

0800aeb2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aeb2:	b580      	push	{r7, lr}
 800aeb4:	b082      	sub	sp, #8
 800aeb6:	af00      	add	r7, sp, #0
 800aeb8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800aec0:	4618      	mov	r0, r3
 800aec2:	f7fe fc4e 	bl	8009762 <USBD_LL_SOF>
}
 800aec6:	bf00      	nop
 800aec8:	3708      	adds	r7, #8
 800aeca:	46bd      	mov	sp, r7
 800aecc:	bd80      	pop	{r7, pc}

0800aece <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aece:	b580      	push	{r7, lr}
 800aed0:	b084      	sub	sp, #16
 800aed2:	af00      	add	r7, sp, #0
 800aed4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800aed6:	2301      	movs	r3, #1
 800aed8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	68db      	ldr	r3, [r3, #12]
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d102      	bne.n	800aee8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800aee2:	2300      	movs	r3, #0
 800aee4:	73fb      	strb	r3, [r7, #15]
 800aee6:	e008      	b.n	800aefa <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	68db      	ldr	r3, [r3, #12]
 800aeec:	2b02      	cmp	r3, #2
 800aeee:	d102      	bne.n	800aef6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800aef0:	2301      	movs	r3, #1
 800aef2:	73fb      	strb	r3, [r7, #15]
 800aef4:	e001      	b.n	800aefa <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800aef6:	f7f6 fc53 	bl	80017a0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800af00:	7bfa      	ldrb	r2, [r7, #15]
 800af02:	4611      	mov	r1, r2
 800af04:	4618      	mov	r0, r3
 800af06:	f7fe fbee 	bl	80096e6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800af10:	4618      	mov	r0, r3
 800af12:	f7fe fb96 	bl	8009642 <USBD_LL_Reset>
}
 800af16:	bf00      	nop
 800af18:	3710      	adds	r7, #16
 800af1a:	46bd      	mov	sp, r7
 800af1c:	bd80      	pop	{r7, pc}
	...

0800af20 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800af20:	b580      	push	{r7, lr}
 800af22:	b082      	sub	sp, #8
 800af24:	af00      	add	r7, sp, #0
 800af26:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800af2e:	4618      	mov	r0, r3
 800af30:	f7fe fbe9 	bl	8009706 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	687a      	ldr	r2, [r7, #4]
 800af40:	6812      	ldr	r2, [r2, #0]
 800af42:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800af46:	f043 0301 	orr.w	r3, r3, #1
 800af4a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	6a1b      	ldr	r3, [r3, #32]
 800af50:	2b00      	cmp	r3, #0
 800af52:	d005      	beq.n	800af60 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800af54:	4b04      	ldr	r3, [pc, #16]	; (800af68 <HAL_PCD_SuspendCallback+0x48>)
 800af56:	691b      	ldr	r3, [r3, #16]
 800af58:	4a03      	ldr	r2, [pc, #12]	; (800af68 <HAL_PCD_SuspendCallback+0x48>)
 800af5a:	f043 0306 	orr.w	r3, r3, #6
 800af5e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800af60:	bf00      	nop
 800af62:	3708      	adds	r7, #8
 800af64:	46bd      	mov	sp, r7
 800af66:	bd80      	pop	{r7, pc}
 800af68:	e000ed00 	.word	0xe000ed00

0800af6c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800af6c:	b580      	push	{r7, lr}
 800af6e:	b082      	sub	sp, #8
 800af70:	af00      	add	r7, sp, #0
 800af72:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800af7a:	4618      	mov	r0, r3
 800af7c:	f7fe fbd9 	bl	8009732 <USBD_LL_Resume>
}
 800af80:	bf00      	nop
 800af82:	3708      	adds	r7, #8
 800af84:	46bd      	mov	sp, r7
 800af86:	bd80      	pop	{r7, pc}

0800af88 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800af88:	b580      	push	{r7, lr}
 800af8a:	b082      	sub	sp, #8
 800af8c:	af00      	add	r7, sp, #0
 800af8e:	6078      	str	r0, [r7, #4]
 800af90:	460b      	mov	r3, r1
 800af92:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800af9a:	78fa      	ldrb	r2, [r7, #3]
 800af9c:	4611      	mov	r1, r2
 800af9e:	4618      	mov	r0, r3
 800afa0:	f7fe fc31 	bl	8009806 <USBD_LL_IsoOUTIncomplete>
}
 800afa4:	bf00      	nop
 800afa6:	3708      	adds	r7, #8
 800afa8:	46bd      	mov	sp, r7
 800afaa:	bd80      	pop	{r7, pc}

0800afac <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800afac:	b580      	push	{r7, lr}
 800afae:	b082      	sub	sp, #8
 800afb0:	af00      	add	r7, sp, #0
 800afb2:	6078      	str	r0, [r7, #4]
 800afb4:	460b      	mov	r3, r1
 800afb6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800afbe:	78fa      	ldrb	r2, [r7, #3]
 800afc0:	4611      	mov	r1, r2
 800afc2:	4618      	mov	r0, r3
 800afc4:	f7fe fbed 	bl	80097a2 <USBD_LL_IsoINIncomplete>
}
 800afc8:	bf00      	nop
 800afca:	3708      	adds	r7, #8
 800afcc:	46bd      	mov	sp, r7
 800afce:	bd80      	pop	{r7, pc}

0800afd0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800afd0:	b580      	push	{r7, lr}
 800afd2:	b082      	sub	sp, #8
 800afd4:	af00      	add	r7, sp, #0
 800afd6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800afde:	4618      	mov	r0, r3
 800afe0:	f7fe fc43 	bl	800986a <USBD_LL_DevConnected>
}
 800afe4:	bf00      	nop
 800afe6:	3708      	adds	r7, #8
 800afe8:	46bd      	mov	sp, r7
 800afea:	bd80      	pop	{r7, pc}

0800afec <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800afec:	b580      	push	{r7, lr}
 800afee:	b082      	sub	sp, #8
 800aff0:	af00      	add	r7, sp, #0
 800aff2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800affa:	4618      	mov	r0, r3
 800affc:	f7fe fc40 	bl	8009880 <USBD_LL_DevDisconnected>
}
 800b000:	bf00      	nop
 800b002:	3708      	adds	r7, #8
 800b004:	46bd      	mov	sp, r7
 800b006:	bd80      	pop	{r7, pc}

0800b008 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800b008:	b580      	push	{r7, lr}
 800b00a:	b082      	sub	sp, #8
 800b00c:	af00      	add	r7, sp, #0
 800b00e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	781b      	ldrb	r3, [r3, #0]
 800b014:	2b00      	cmp	r3, #0
 800b016:	d13c      	bne.n	800b092 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800b018:	4a20      	ldr	r2, [pc, #128]	; (800b09c <USBD_LL_Init+0x94>)
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
  pdev->pData = &hpcd_USB_OTG_FS;
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	4a1e      	ldr	r2, [pc, #120]	; (800b09c <USBD_LL_Init+0x94>)
 800b024:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800b028:	4b1c      	ldr	r3, [pc, #112]	; (800b09c <USBD_LL_Init+0x94>)
 800b02a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800b02e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800b030:	4b1a      	ldr	r3, [pc, #104]	; (800b09c <USBD_LL_Init+0x94>)
 800b032:	2206      	movs	r2, #6
 800b034:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800b036:	4b19      	ldr	r3, [pc, #100]	; (800b09c <USBD_LL_Init+0x94>)
 800b038:	2202      	movs	r2, #2
 800b03a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800b03c:	4b17      	ldr	r3, [pc, #92]	; (800b09c <USBD_LL_Init+0x94>)
 800b03e:	2200      	movs	r2, #0
 800b040:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800b042:	4b16      	ldr	r3, [pc, #88]	; (800b09c <USBD_LL_Init+0x94>)
 800b044:	2202      	movs	r2, #2
 800b046:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800b048:	4b14      	ldr	r3, [pc, #80]	; (800b09c <USBD_LL_Init+0x94>)
 800b04a:	2200      	movs	r2, #0
 800b04c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800b04e:	4b13      	ldr	r3, [pc, #76]	; (800b09c <USBD_LL_Init+0x94>)
 800b050:	2200      	movs	r2, #0
 800b052:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800b054:	4b11      	ldr	r3, [pc, #68]	; (800b09c <USBD_LL_Init+0x94>)
 800b056:	2200      	movs	r2, #0
 800b058:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800b05a:	4b10      	ldr	r3, [pc, #64]	; (800b09c <USBD_LL_Init+0x94>)
 800b05c:	2200      	movs	r2, #0
 800b05e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800b060:	4b0e      	ldr	r3, [pc, #56]	; (800b09c <USBD_LL_Init+0x94>)
 800b062:	2200      	movs	r2, #0
 800b064:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800b066:	480d      	ldr	r0, [pc, #52]	; (800b09c <USBD_LL_Init+0x94>)
 800b068:	f7f7 fe21 	bl	8002cae <HAL_PCD_Init>
 800b06c:	4603      	mov	r3, r0
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d001      	beq.n	800b076 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800b072:	f7f6 fb95 	bl	80017a0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800b076:	2180      	movs	r1, #128	; 0x80
 800b078:	4808      	ldr	r0, [pc, #32]	; (800b09c <USBD_LL_Init+0x94>)
 800b07a:	f7f9 f89c 	bl	80041b6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800b07e:	2240      	movs	r2, #64	; 0x40
 800b080:	2100      	movs	r1, #0
 800b082:	4806      	ldr	r0, [pc, #24]	; (800b09c <USBD_LL_Init+0x94>)
 800b084:	f7f9 f850 	bl	8004128 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800b088:	2280      	movs	r2, #128	; 0x80
 800b08a:	2101      	movs	r1, #1
 800b08c:	4803      	ldr	r0, [pc, #12]	; (800b09c <USBD_LL_Init+0x94>)
 800b08e:	f7f9 f84b 	bl	8004128 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800b092:	2300      	movs	r3, #0
}
 800b094:	4618      	mov	r0, r3
 800b096:	3708      	adds	r7, #8
 800b098:	46bd      	mov	sp, r7
 800b09a:	bd80      	pop	{r7, pc}
 800b09c:	20001cf8 	.word	0x20001cf8

0800b0a0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b0a0:	b580      	push	{r7, lr}
 800b0a2:	b084      	sub	sp, #16
 800b0a4:	af00      	add	r7, sp, #0
 800b0a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b0a8:	2300      	movs	r3, #0
 800b0aa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b0ac:	2300      	movs	r3, #0
 800b0ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b0b6:	4618      	mov	r0, r3
 800b0b8:	f7f7 ff1d 	bl	8002ef6 <HAL_PCD_Start>
 800b0bc:	4603      	mov	r3, r0
 800b0be:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b0c0:	7bfb      	ldrb	r3, [r7, #15]
 800b0c2:	4618      	mov	r0, r3
 800b0c4:	f000 f97e 	bl	800b3c4 <USBD_Get_USB_Status>
 800b0c8:	4603      	mov	r3, r0
 800b0ca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b0cc:	7bbb      	ldrb	r3, [r7, #14]
}
 800b0ce:	4618      	mov	r0, r3
 800b0d0:	3710      	adds	r7, #16
 800b0d2:	46bd      	mov	sp, r7
 800b0d4:	bd80      	pop	{r7, pc}

0800b0d6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b0d6:	b580      	push	{r7, lr}
 800b0d8:	b084      	sub	sp, #16
 800b0da:	af00      	add	r7, sp, #0
 800b0dc:	6078      	str	r0, [r7, #4]
 800b0de:	4608      	mov	r0, r1
 800b0e0:	4611      	mov	r1, r2
 800b0e2:	461a      	mov	r2, r3
 800b0e4:	4603      	mov	r3, r0
 800b0e6:	70fb      	strb	r3, [r7, #3]
 800b0e8:	460b      	mov	r3, r1
 800b0ea:	70bb      	strb	r3, [r7, #2]
 800b0ec:	4613      	mov	r3, r2
 800b0ee:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b0f0:	2300      	movs	r3, #0
 800b0f2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b0f4:	2300      	movs	r3, #0
 800b0f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b0fe:	78bb      	ldrb	r3, [r7, #2]
 800b100:	883a      	ldrh	r2, [r7, #0]
 800b102:	78f9      	ldrb	r1, [r7, #3]
 800b104:	f7f8 fc0a 	bl	800391c <HAL_PCD_EP_Open>
 800b108:	4603      	mov	r3, r0
 800b10a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b10c:	7bfb      	ldrb	r3, [r7, #15]
 800b10e:	4618      	mov	r0, r3
 800b110:	f000 f958 	bl	800b3c4 <USBD_Get_USB_Status>
 800b114:	4603      	mov	r3, r0
 800b116:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b118:	7bbb      	ldrb	r3, [r7, #14]
}
 800b11a:	4618      	mov	r0, r3
 800b11c:	3710      	adds	r7, #16
 800b11e:	46bd      	mov	sp, r7
 800b120:	bd80      	pop	{r7, pc}

0800b122 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b122:	b580      	push	{r7, lr}
 800b124:	b084      	sub	sp, #16
 800b126:	af00      	add	r7, sp, #0
 800b128:	6078      	str	r0, [r7, #4]
 800b12a:	460b      	mov	r3, r1
 800b12c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b12e:	2300      	movs	r3, #0
 800b130:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b132:	2300      	movs	r3, #0
 800b134:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b13c:	78fa      	ldrb	r2, [r7, #3]
 800b13e:	4611      	mov	r1, r2
 800b140:	4618      	mov	r0, r3
 800b142:	f7f8 fc53 	bl	80039ec <HAL_PCD_EP_Close>
 800b146:	4603      	mov	r3, r0
 800b148:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b14a:	7bfb      	ldrb	r3, [r7, #15]
 800b14c:	4618      	mov	r0, r3
 800b14e:	f000 f939 	bl	800b3c4 <USBD_Get_USB_Status>
 800b152:	4603      	mov	r3, r0
 800b154:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b156:	7bbb      	ldrb	r3, [r7, #14]
}
 800b158:	4618      	mov	r0, r3
 800b15a:	3710      	adds	r7, #16
 800b15c:	46bd      	mov	sp, r7
 800b15e:	bd80      	pop	{r7, pc}

0800b160 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b160:	b580      	push	{r7, lr}
 800b162:	b084      	sub	sp, #16
 800b164:	af00      	add	r7, sp, #0
 800b166:	6078      	str	r0, [r7, #4]
 800b168:	460b      	mov	r3, r1
 800b16a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b16c:	2300      	movs	r3, #0
 800b16e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b170:	2300      	movs	r3, #0
 800b172:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b17a:	78fa      	ldrb	r2, [r7, #3]
 800b17c:	4611      	mov	r1, r2
 800b17e:	4618      	mov	r0, r3
 800b180:	f7f8 fd2b 	bl	8003bda <HAL_PCD_EP_SetStall>
 800b184:	4603      	mov	r3, r0
 800b186:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b188:	7bfb      	ldrb	r3, [r7, #15]
 800b18a:	4618      	mov	r0, r3
 800b18c:	f000 f91a 	bl	800b3c4 <USBD_Get_USB_Status>
 800b190:	4603      	mov	r3, r0
 800b192:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b194:	7bbb      	ldrb	r3, [r7, #14]
}
 800b196:	4618      	mov	r0, r3
 800b198:	3710      	adds	r7, #16
 800b19a:	46bd      	mov	sp, r7
 800b19c:	bd80      	pop	{r7, pc}

0800b19e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b19e:	b580      	push	{r7, lr}
 800b1a0:	b084      	sub	sp, #16
 800b1a2:	af00      	add	r7, sp, #0
 800b1a4:	6078      	str	r0, [r7, #4]
 800b1a6:	460b      	mov	r3, r1
 800b1a8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b1aa:	2300      	movs	r3, #0
 800b1ac:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b1ae:	2300      	movs	r3, #0
 800b1b0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b1b8:	78fa      	ldrb	r2, [r7, #3]
 800b1ba:	4611      	mov	r1, r2
 800b1bc:	4618      	mov	r0, r3
 800b1be:	f7f8 fd70 	bl	8003ca2 <HAL_PCD_EP_ClrStall>
 800b1c2:	4603      	mov	r3, r0
 800b1c4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b1c6:	7bfb      	ldrb	r3, [r7, #15]
 800b1c8:	4618      	mov	r0, r3
 800b1ca:	f000 f8fb 	bl	800b3c4 <USBD_Get_USB_Status>
 800b1ce:	4603      	mov	r3, r0
 800b1d0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b1d2:	7bbb      	ldrb	r3, [r7, #14]
}
 800b1d4:	4618      	mov	r0, r3
 800b1d6:	3710      	adds	r7, #16
 800b1d8:	46bd      	mov	sp, r7
 800b1da:	bd80      	pop	{r7, pc}

0800b1dc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b1dc:	b480      	push	{r7}
 800b1de:	b085      	sub	sp, #20
 800b1e0:	af00      	add	r7, sp, #0
 800b1e2:	6078      	str	r0, [r7, #4]
 800b1e4:	460b      	mov	r3, r1
 800b1e6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b1ee:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800b1f0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	da0b      	bge.n	800b210 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b1f8:	78fb      	ldrb	r3, [r7, #3]
 800b1fa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b1fe:	68f9      	ldr	r1, [r7, #12]
 800b200:	4613      	mov	r3, r2
 800b202:	00db      	lsls	r3, r3, #3
 800b204:	4413      	add	r3, r2
 800b206:	009b      	lsls	r3, r3, #2
 800b208:	440b      	add	r3, r1
 800b20a:	333e      	adds	r3, #62	; 0x3e
 800b20c:	781b      	ldrb	r3, [r3, #0]
 800b20e:	e00b      	b.n	800b228 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b210:	78fb      	ldrb	r3, [r7, #3]
 800b212:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b216:	68f9      	ldr	r1, [r7, #12]
 800b218:	4613      	mov	r3, r2
 800b21a:	00db      	lsls	r3, r3, #3
 800b21c:	4413      	add	r3, r2
 800b21e:	009b      	lsls	r3, r3, #2
 800b220:	440b      	add	r3, r1
 800b222:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800b226:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b228:	4618      	mov	r0, r3
 800b22a:	3714      	adds	r7, #20
 800b22c:	46bd      	mov	sp, r7
 800b22e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b232:	4770      	bx	lr

0800b234 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b234:	b580      	push	{r7, lr}
 800b236:	b084      	sub	sp, #16
 800b238:	af00      	add	r7, sp, #0
 800b23a:	6078      	str	r0, [r7, #4]
 800b23c:	460b      	mov	r3, r1
 800b23e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b240:	2300      	movs	r3, #0
 800b242:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b244:	2300      	movs	r3, #0
 800b246:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b24e:	78fa      	ldrb	r2, [r7, #3]
 800b250:	4611      	mov	r1, r2
 800b252:	4618      	mov	r0, r3
 800b254:	f7f8 fb3d 	bl	80038d2 <HAL_PCD_SetAddress>
 800b258:	4603      	mov	r3, r0
 800b25a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b25c:	7bfb      	ldrb	r3, [r7, #15]
 800b25e:	4618      	mov	r0, r3
 800b260:	f000 f8b0 	bl	800b3c4 <USBD_Get_USB_Status>
 800b264:	4603      	mov	r3, r0
 800b266:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b268:	7bbb      	ldrb	r3, [r7, #14]
}
 800b26a:	4618      	mov	r0, r3
 800b26c:	3710      	adds	r7, #16
 800b26e:	46bd      	mov	sp, r7
 800b270:	bd80      	pop	{r7, pc}

0800b272 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b272:	b580      	push	{r7, lr}
 800b274:	b086      	sub	sp, #24
 800b276:	af00      	add	r7, sp, #0
 800b278:	60f8      	str	r0, [r7, #12]
 800b27a:	607a      	str	r2, [r7, #4]
 800b27c:	603b      	str	r3, [r7, #0]
 800b27e:	460b      	mov	r3, r1
 800b280:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b282:	2300      	movs	r3, #0
 800b284:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b286:	2300      	movs	r3, #0
 800b288:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b28a:	68fb      	ldr	r3, [r7, #12]
 800b28c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b290:	7af9      	ldrb	r1, [r7, #11]
 800b292:	683b      	ldr	r3, [r7, #0]
 800b294:	687a      	ldr	r2, [r7, #4]
 800b296:	f7f8 fc56 	bl	8003b46 <HAL_PCD_EP_Transmit>
 800b29a:	4603      	mov	r3, r0
 800b29c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b29e:	7dfb      	ldrb	r3, [r7, #23]
 800b2a0:	4618      	mov	r0, r3
 800b2a2:	f000 f88f 	bl	800b3c4 <USBD_Get_USB_Status>
 800b2a6:	4603      	mov	r3, r0
 800b2a8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b2aa:	7dbb      	ldrb	r3, [r7, #22]
}
 800b2ac:	4618      	mov	r0, r3
 800b2ae:	3718      	adds	r7, #24
 800b2b0:	46bd      	mov	sp, r7
 800b2b2:	bd80      	pop	{r7, pc}

0800b2b4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b2b4:	b580      	push	{r7, lr}
 800b2b6:	b086      	sub	sp, #24
 800b2b8:	af00      	add	r7, sp, #0
 800b2ba:	60f8      	str	r0, [r7, #12]
 800b2bc:	607a      	str	r2, [r7, #4]
 800b2be:	603b      	str	r3, [r7, #0]
 800b2c0:	460b      	mov	r3, r1
 800b2c2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b2c4:	2300      	movs	r3, #0
 800b2c6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b2c8:	2300      	movs	r3, #0
 800b2ca:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b2cc:	68fb      	ldr	r3, [r7, #12]
 800b2ce:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b2d2:	7af9      	ldrb	r1, [r7, #11]
 800b2d4:	683b      	ldr	r3, [r7, #0]
 800b2d6:	687a      	ldr	r2, [r7, #4]
 800b2d8:	f7f8 fbd2 	bl	8003a80 <HAL_PCD_EP_Receive>
 800b2dc:	4603      	mov	r3, r0
 800b2de:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b2e0:	7dfb      	ldrb	r3, [r7, #23]
 800b2e2:	4618      	mov	r0, r3
 800b2e4:	f000 f86e 	bl	800b3c4 <USBD_Get_USB_Status>
 800b2e8:	4603      	mov	r3, r0
 800b2ea:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b2ec:	7dbb      	ldrb	r3, [r7, #22]
}
 800b2ee:	4618      	mov	r0, r3
 800b2f0:	3718      	adds	r7, #24
 800b2f2:	46bd      	mov	sp, r7
 800b2f4:	bd80      	pop	{r7, pc}

0800b2f6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b2f6:	b580      	push	{r7, lr}
 800b2f8:	b082      	sub	sp, #8
 800b2fa:	af00      	add	r7, sp, #0
 800b2fc:	6078      	str	r0, [r7, #4]
 800b2fe:	460b      	mov	r3, r1
 800b300:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b308:	78fa      	ldrb	r2, [r7, #3]
 800b30a:	4611      	mov	r1, r2
 800b30c:	4618      	mov	r0, r3
 800b30e:	f7f8 fc02 	bl	8003b16 <HAL_PCD_EP_GetRxCount>
 800b312:	4603      	mov	r3, r0
}
 800b314:	4618      	mov	r0, r3
 800b316:	3708      	adds	r7, #8
 800b318:	46bd      	mov	sp, r7
 800b31a:	bd80      	pop	{r7, pc}

0800b31c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800b31c:	b580      	push	{r7, lr}
 800b31e:	b082      	sub	sp, #8
 800b320:	af00      	add	r7, sp, #0
 800b322:	6078      	str	r0, [r7, #4]
 800b324:	460b      	mov	r3, r1
 800b326:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800b328:	78fb      	ldrb	r3, [r7, #3]
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	d002      	beq.n	800b334 <HAL_PCDEx_LPM_Callback+0x18>
 800b32e:	2b01      	cmp	r3, #1
 800b330:	d01f      	beq.n	800b372 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800b332:	e03b      	b.n	800b3ac <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	6a1b      	ldr	r3, [r3, #32]
 800b338:	2b00      	cmp	r3, #0
 800b33a:	d007      	beq.n	800b34c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800b33c:	f000 f83c 	bl	800b3b8 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b340:	4b1c      	ldr	r3, [pc, #112]	; (800b3b4 <HAL_PCDEx_LPM_Callback+0x98>)
 800b342:	691b      	ldr	r3, [r3, #16]
 800b344:	4a1b      	ldr	r2, [pc, #108]	; (800b3b4 <HAL_PCDEx_LPM_Callback+0x98>)
 800b346:	f023 0306 	bic.w	r3, r3, #6
 800b34a:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	687a      	ldr	r2, [r7, #4]
 800b358:	6812      	ldr	r2, [r2, #0]
 800b35a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b35e:	f023 0301 	bic.w	r3, r3, #1
 800b362:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800b36a:	4618      	mov	r0, r3
 800b36c:	f7fe f9e1 	bl	8009732 <USBD_LL_Resume>
    break;
 800b370:	e01c      	b.n	800b3ac <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	687a      	ldr	r2, [r7, #4]
 800b37e:	6812      	ldr	r2, [r2, #0]
 800b380:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b384:	f043 0301 	orr.w	r3, r3, #1
 800b388:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800b390:	4618      	mov	r0, r3
 800b392:	f7fe f9b8 	bl	8009706 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	6a1b      	ldr	r3, [r3, #32]
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d005      	beq.n	800b3aa <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b39e:	4b05      	ldr	r3, [pc, #20]	; (800b3b4 <HAL_PCDEx_LPM_Callback+0x98>)
 800b3a0:	691b      	ldr	r3, [r3, #16]
 800b3a2:	4a04      	ldr	r2, [pc, #16]	; (800b3b4 <HAL_PCDEx_LPM_Callback+0x98>)
 800b3a4:	f043 0306 	orr.w	r3, r3, #6
 800b3a8:	6113      	str	r3, [r2, #16]
    break;
 800b3aa:	bf00      	nop
}
 800b3ac:	bf00      	nop
 800b3ae:	3708      	adds	r7, #8
 800b3b0:	46bd      	mov	sp, r7
 800b3b2:	bd80      	pop	{r7, pc}
 800b3b4:	e000ed00 	.word	0xe000ed00

0800b3b8 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800b3b8:	b580      	push	{r7, lr}
 800b3ba:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800b3bc:	f7f5 fe90 	bl	80010e0 <SystemClock_Config>
}
 800b3c0:	bf00      	nop
 800b3c2:	bd80      	pop	{r7, pc}

0800b3c4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b3c4:	b480      	push	{r7}
 800b3c6:	b085      	sub	sp, #20
 800b3c8:	af00      	add	r7, sp, #0
 800b3ca:	4603      	mov	r3, r0
 800b3cc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b3ce:	2300      	movs	r3, #0
 800b3d0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b3d2:	79fb      	ldrb	r3, [r7, #7]
 800b3d4:	2b03      	cmp	r3, #3
 800b3d6:	d817      	bhi.n	800b408 <USBD_Get_USB_Status+0x44>
 800b3d8:	a201      	add	r2, pc, #4	; (adr r2, 800b3e0 <USBD_Get_USB_Status+0x1c>)
 800b3da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3de:	bf00      	nop
 800b3e0:	0800b3f1 	.word	0x0800b3f1
 800b3e4:	0800b3f7 	.word	0x0800b3f7
 800b3e8:	0800b3fd 	.word	0x0800b3fd
 800b3ec:	0800b403 	.word	0x0800b403
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800b3f0:	2300      	movs	r3, #0
 800b3f2:	73fb      	strb	r3, [r7, #15]
    break;
 800b3f4:	e00b      	b.n	800b40e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b3f6:	2303      	movs	r3, #3
 800b3f8:	73fb      	strb	r3, [r7, #15]
    break;
 800b3fa:	e008      	b.n	800b40e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b3fc:	2301      	movs	r3, #1
 800b3fe:	73fb      	strb	r3, [r7, #15]
    break;
 800b400:	e005      	b.n	800b40e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b402:	2303      	movs	r3, #3
 800b404:	73fb      	strb	r3, [r7, #15]
    break;
 800b406:	e002      	b.n	800b40e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800b408:	2303      	movs	r3, #3
 800b40a:	73fb      	strb	r3, [r7, #15]
    break;
 800b40c:	bf00      	nop
  }
  return usb_status;
 800b40e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b410:	4618      	mov	r0, r3
 800b412:	3714      	adds	r7, #20
 800b414:	46bd      	mov	sp, r7
 800b416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b41a:	4770      	bx	lr

0800b41c <malloc>:
 800b41c:	4b02      	ldr	r3, [pc, #8]	; (800b428 <malloc+0xc>)
 800b41e:	4601      	mov	r1, r0
 800b420:	6818      	ldr	r0, [r3, #0]
 800b422:	f000 b82b 	b.w	800b47c <_malloc_r>
 800b426:	bf00      	nop
 800b428:	20000164 	.word	0x20000164

0800b42c <free>:
 800b42c:	4b02      	ldr	r3, [pc, #8]	; (800b438 <free+0xc>)
 800b42e:	4601      	mov	r1, r0
 800b430:	6818      	ldr	r0, [r3, #0]
 800b432:	f001 bf5b 	b.w	800d2ec <_free_r>
 800b436:	bf00      	nop
 800b438:	20000164 	.word	0x20000164

0800b43c <sbrk_aligned>:
 800b43c:	b570      	push	{r4, r5, r6, lr}
 800b43e:	4e0e      	ldr	r6, [pc, #56]	; (800b478 <sbrk_aligned+0x3c>)
 800b440:	460c      	mov	r4, r1
 800b442:	6831      	ldr	r1, [r6, #0]
 800b444:	4605      	mov	r5, r0
 800b446:	b911      	cbnz	r1, 800b44e <sbrk_aligned+0x12>
 800b448:	f001 f880 	bl	800c54c <_sbrk_r>
 800b44c:	6030      	str	r0, [r6, #0]
 800b44e:	4621      	mov	r1, r4
 800b450:	4628      	mov	r0, r5
 800b452:	f001 f87b 	bl	800c54c <_sbrk_r>
 800b456:	1c43      	adds	r3, r0, #1
 800b458:	d00a      	beq.n	800b470 <sbrk_aligned+0x34>
 800b45a:	1cc4      	adds	r4, r0, #3
 800b45c:	f024 0403 	bic.w	r4, r4, #3
 800b460:	42a0      	cmp	r0, r4
 800b462:	d007      	beq.n	800b474 <sbrk_aligned+0x38>
 800b464:	1a21      	subs	r1, r4, r0
 800b466:	4628      	mov	r0, r5
 800b468:	f001 f870 	bl	800c54c <_sbrk_r>
 800b46c:	3001      	adds	r0, #1
 800b46e:	d101      	bne.n	800b474 <sbrk_aligned+0x38>
 800b470:	f04f 34ff 	mov.w	r4, #4294967295
 800b474:	4620      	mov	r0, r4
 800b476:	bd70      	pop	{r4, r5, r6, pc}
 800b478:	20002204 	.word	0x20002204

0800b47c <_malloc_r>:
 800b47c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b480:	1ccd      	adds	r5, r1, #3
 800b482:	f025 0503 	bic.w	r5, r5, #3
 800b486:	3508      	adds	r5, #8
 800b488:	2d0c      	cmp	r5, #12
 800b48a:	bf38      	it	cc
 800b48c:	250c      	movcc	r5, #12
 800b48e:	2d00      	cmp	r5, #0
 800b490:	4607      	mov	r7, r0
 800b492:	db01      	blt.n	800b498 <_malloc_r+0x1c>
 800b494:	42a9      	cmp	r1, r5
 800b496:	d905      	bls.n	800b4a4 <_malloc_r+0x28>
 800b498:	230c      	movs	r3, #12
 800b49a:	603b      	str	r3, [r7, #0]
 800b49c:	2600      	movs	r6, #0
 800b49e:	4630      	mov	r0, r6
 800b4a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b4a4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800b578 <_malloc_r+0xfc>
 800b4a8:	f000 f868 	bl	800b57c <__malloc_lock>
 800b4ac:	f8d8 3000 	ldr.w	r3, [r8]
 800b4b0:	461c      	mov	r4, r3
 800b4b2:	bb5c      	cbnz	r4, 800b50c <_malloc_r+0x90>
 800b4b4:	4629      	mov	r1, r5
 800b4b6:	4638      	mov	r0, r7
 800b4b8:	f7ff ffc0 	bl	800b43c <sbrk_aligned>
 800b4bc:	1c43      	adds	r3, r0, #1
 800b4be:	4604      	mov	r4, r0
 800b4c0:	d155      	bne.n	800b56e <_malloc_r+0xf2>
 800b4c2:	f8d8 4000 	ldr.w	r4, [r8]
 800b4c6:	4626      	mov	r6, r4
 800b4c8:	2e00      	cmp	r6, #0
 800b4ca:	d145      	bne.n	800b558 <_malloc_r+0xdc>
 800b4cc:	2c00      	cmp	r4, #0
 800b4ce:	d048      	beq.n	800b562 <_malloc_r+0xe6>
 800b4d0:	6823      	ldr	r3, [r4, #0]
 800b4d2:	4631      	mov	r1, r6
 800b4d4:	4638      	mov	r0, r7
 800b4d6:	eb04 0903 	add.w	r9, r4, r3
 800b4da:	f001 f837 	bl	800c54c <_sbrk_r>
 800b4de:	4581      	cmp	r9, r0
 800b4e0:	d13f      	bne.n	800b562 <_malloc_r+0xe6>
 800b4e2:	6821      	ldr	r1, [r4, #0]
 800b4e4:	1a6d      	subs	r5, r5, r1
 800b4e6:	4629      	mov	r1, r5
 800b4e8:	4638      	mov	r0, r7
 800b4ea:	f7ff ffa7 	bl	800b43c <sbrk_aligned>
 800b4ee:	3001      	adds	r0, #1
 800b4f0:	d037      	beq.n	800b562 <_malloc_r+0xe6>
 800b4f2:	6823      	ldr	r3, [r4, #0]
 800b4f4:	442b      	add	r3, r5
 800b4f6:	6023      	str	r3, [r4, #0]
 800b4f8:	f8d8 3000 	ldr.w	r3, [r8]
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d038      	beq.n	800b572 <_malloc_r+0xf6>
 800b500:	685a      	ldr	r2, [r3, #4]
 800b502:	42a2      	cmp	r2, r4
 800b504:	d12b      	bne.n	800b55e <_malloc_r+0xe2>
 800b506:	2200      	movs	r2, #0
 800b508:	605a      	str	r2, [r3, #4]
 800b50a:	e00f      	b.n	800b52c <_malloc_r+0xb0>
 800b50c:	6822      	ldr	r2, [r4, #0]
 800b50e:	1b52      	subs	r2, r2, r5
 800b510:	d41f      	bmi.n	800b552 <_malloc_r+0xd6>
 800b512:	2a0b      	cmp	r2, #11
 800b514:	d917      	bls.n	800b546 <_malloc_r+0xca>
 800b516:	1961      	adds	r1, r4, r5
 800b518:	42a3      	cmp	r3, r4
 800b51a:	6025      	str	r5, [r4, #0]
 800b51c:	bf18      	it	ne
 800b51e:	6059      	strne	r1, [r3, #4]
 800b520:	6863      	ldr	r3, [r4, #4]
 800b522:	bf08      	it	eq
 800b524:	f8c8 1000 	streq.w	r1, [r8]
 800b528:	5162      	str	r2, [r4, r5]
 800b52a:	604b      	str	r3, [r1, #4]
 800b52c:	4638      	mov	r0, r7
 800b52e:	f104 060b 	add.w	r6, r4, #11
 800b532:	f000 f829 	bl	800b588 <__malloc_unlock>
 800b536:	f026 0607 	bic.w	r6, r6, #7
 800b53a:	1d23      	adds	r3, r4, #4
 800b53c:	1af2      	subs	r2, r6, r3
 800b53e:	d0ae      	beq.n	800b49e <_malloc_r+0x22>
 800b540:	1b9b      	subs	r3, r3, r6
 800b542:	50a3      	str	r3, [r4, r2]
 800b544:	e7ab      	b.n	800b49e <_malloc_r+0x22>
 800b546:	42a3      	cmp	r3, r4
 800b548:	6862      	ldr	r2, [r4, #4]
 800b54a:	d1dd      	bne.n	800b508 <_malloc_r+0x8c>
 800b54c:	f8c8 2000 	str.w	r2, [r8]
 800b550:	e7ec      	b.n	800b52c <_malloc_r+0xb0>
 800b552:	4623      	mov	r3, r4
 800b554:	6864      	ldr	r4, [r4, #4]
 800b556:	e7ac      	b.n	800b4b2 <_malloc_r+0x36>
 800b558:	4634      	mov	r4, r6
 800b55a:	6876      	ldr	r6, [r6, #4]
 800b55c:	e7b4      	b.n	800b4c8 <_malloc_r+0x4c>
 800b55e:	4613      	mov	r3, r2
 800b560:	e7cc      	b.n	800b4fc <_malloc_r+0x80>
 800b562:	230c      	movs	r3, #12
 800b564:	603b      	str	r3, [r7, #0]
 800b566:	4638      	mov	r0, r7
 800b568:	f000 f80e 	bl	800b588 <__malloc_unlock>
 800b56c:	e797      	b.n	800b49e <_malloc_r+0x22>
 800b56e:	6025      	str	r5, [r4, #0]
 800b570:	e7dc      	b.n	800b52c <_malloc_r+0xb0>
 800b572:	605b      	str	r3, [r3, #4]
 800b574:	deff      	udf	#255	; 0xff
 800b576:	bf00      	nop
 800b578:	20002200 	.word	0x20002200

0800b57c <__malloc_lock>:
 800b57c:	4801      	ldr	r0, [pc, #4]	; (800b584 <__malloc_lock+0x8>)
 800b57e:	f001 b832 	b.w	800c5e6 <__retarget_lock_acquire_recursive>
 800b582:	bf00      	nop
 800b584:	20002348 	.word	0x20002348

0800b588 <__malloc_unlock>:
 800b588:	4801      	ldr	r0, [pc, #4]	; (800b590 <__malloc_unlock+0x8>)
 800b58a:	f001 b82d 	b.w	800c5e8 <__retarget_lock_release_recursive>
 800b58e:	bf00      	nop
 800b590:	20002348 	.word	0x20002348

0800b594 <__cvt>:
 800b594:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b598:	ec55 4b10 	vmov	r4, r5, d0
 800b59c:	2d00      	cmp	r5, #0
 800b59e:	460e      	mov	r6, r1
 800b5a0:	4619      	mov	r1, r3
 800b5a2:	462b      	mov	r3, r5
 800b5a4:	bfbb      	ittet	lt
 800b5a6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800b5aa:	461d      	movlt	r5, r3
 800b5ac:	2300      	movge	r3, #0
 800b5ae:	232d      	movlt	r3, #45	; 0x2d
 800b5b0:	700b      	strb	r3, [r1, #0]
 800b5b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b5b4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800b5b8:	4691      	mov	r9, r2
 800b5ba:	f023 0820 	bic.w	r8, r3, #32
 800b5be:	bfbc      	itt	lt
 800b5c0:	4622      	movlt	r2, r4
 800b5c2:	4614      	movlt	r4, r2
 800b5c4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b5c8:	d005      	beq.n	800b5d6 <__cvt+0x42>
 800b5ca:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800b5ce:	d100      	bne.n	800b5d2 <__cvt+0x3e>
 800b5d0:	3601      	adds	r6, #1
 800b5d2:	2102      	movs	r1, #2
 800b5d4:	e000      	b.n	800b5d8 <__cvt+0x44>
 800b5d6:	2103      	movs	r1, #3
 800b5d8:	ab03      	add	r3, sp, #12
 800b5da:	9301      	str	r3, [sp, #4]
 800b5dc:	ab02      	add	r3, sp, #8
 800b5de:	9300      	str	r3, [sp, #0]
 800b5e0:	ec45 4b10 	vmov	d0, r4, r5
 800b5e4:	4653      	mov	r3, sl
 800b5e6:	4632      	mov	r2, r6
 800b5e8:	f001 f88e 	bl	800c708 <_dtoa_r>
 800b5ec:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800b5f0:	4607      	mov	r7, r0
 800b5f2:	d102      	bne.n	800b5fa <__cvt+0x66>
 800b5f4:	f019 0f01 	tst.w	r9, #1
 800b5f8:	d022      	beq.n	800b640 <__cvt+0xac>
 800b5fa:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b5fe:	eb07 0906 	add.w	r9, r7, r6
 800b602:	d110      	bne.n	800b626 <__cvt+0x92>
 800b604:	783b      	ldrb	r3, [r7, #0]
 800b606:	2b30      	cmp	r3, #48	; 0x30
 800b608:	d10a      	bne.n	800b620 <__cvt+0x8c>
 800b60a:	2200      	movs	r2, #0
 800b60c:	2300      	movs	r3, #0
 800b60e:	4620      	mov	r0, r4
 800b610:	4629      	mov	r1, r5
 800b612:	f7f5 fa79 	bl	8000b08 <__aeabi_dcmpeq>
 800b616:	b918      	cbnz	r0, 800b620 <__cvt+0x8c>
 800b618:	f1c6 0601 	rsb	r6, r6, #1
 800b61c:	f8ca 6000 	str.w	r6, [sl]
 800b620:	f8da 3000 	ldr.w	r3, [sl]
 800b624:	4499      	add	r9, r3
 800b626:	2200      	movs	r2, #0
 800b628:	2300      	movs	r3, #0
 800b62a:	4620      	mov	r0, r4
 800b62c:	4629      	mov	r1, r5
 800b62e:	f7f5 fa6b 	bl	8000b08 <__aeabi_dcmpeq>
 800b632:	b108      	cbz	r0, 800b638 <__cvt+0xa4>
 800b634:	f8cd 900c 	str.w	r9, [sp, #12]
 800b638:	2230      	movs	r2, #48	; 0x30
 800b63a:	9b03      	ldr	r3, [sp, #12]
 800b63c:	454b      	cmp	r3, r9
 800b63e:	d307      	bcc.n	800b650 <__cvt+0xbc>
 800b640:	9b03      	ldr	r3, [sp, #12]
 800b642:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b644:	1bdb      	subs	r3, r3, r7
 800b646:	4638      	mov	r0, r7
 800b648:	6013      	str	r3, [r2, #0]
 800b64a:	b004      	add	sp, #16
 800b64c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b650:	1c59      	adds	r1, r3, #1
 800b652:	9103      	str	r1, [sp, #12]
 800b654:	701a      	strb	r2, [r3, #0]
 800b656:	e7f0      	b.n	800b63a <__cvt+0xa6>

0800b658 <__exponent>:
 800b658:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b65a:	4603      	mov	r3, r0
 800b65c:	2900      	cmp	r1, #0
 800b65e:	bfb8      	it	lt
 800b660:	4249      	neglt	r1, r1
 800b662:	f803 2b02 	strb.w	r2, [r3], #2
 800b666:	bfb4      	ite	lt
 800b668:	222d      	movlt	r2, #45	; 0x2d
 800b66a:	222b      	movge	r2, #43	; 0x2b
 800b66c:	2909      	cmp	r1, #9
 800b66e:	7042      	strb	r2, [r0, #1]
 800b670:	dd2a      	ble.n	800b6c8 <__exponent+0x70>
 800b672:	f10d 0207 	add.w	r2, sp, #7
 800b676:	4617      	mov	r7, r2
 800b678:	260a      	movs	r6, #10
 800b67a:	4694      	mov	ip, r2
 800b67c:	fb91 f5f6 	sdiv	r5, r1, r6
 800b680:	fb06 1415 	mls	r4, r6, r5, r1
 800b684:	3430      	adds	r4, #48	; 0x30
 800b686:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800b68a:	460c      	mov	r4, r1
 800b68c:	2c63      	cmp	r4, #99	; 0x63
 800b68e:	f102 32ff 	add.w	r2, r2, #4294967295
 800b692:	4629      	mov	r1, r5
 800b694:	dcf1      	bgt.n	800b67a <__exponent+0x22>
 800b696:	3130      	adds	r1, #48	; 0x30
 800b698:	f1ac 0402 	sub.w	r4, ip, #2
 800b69c:	f802 1c01 	strb.w	r1, [r2, #-1]
 800b6a0:	1c41      	adds	r1, r0, #1
 800b6a2:	4622      	mov	r2, r4
 800b6a4:	42ba      	cmp	r2, r7
 800b6a6:	d30a      	bcc.n	800b6be <__exponent+0x66>
 800b6a8:	f10d 0209 	add.w	r2, sp, #9
 800b6ac:	eba2 020c 	sub.w	r2, r2, ip
 800b6b0:	42bc      	cmp	r4, r7
 800b6b2:	bf88      	it	hi
 800b6b4:	2200      	movhi	r2, #0
 800b6b6:	4413      	add	r3, r2
 800b6b8:	1a18      	subs	r0, r3, r0
 800b6ba:	b003      	add	sp, #12
 800b6bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b6be:	f812 5b01 	ldrb.w	r5, [r2], #1
 800b6c2:	f801 5f01 	strb.w	r5, [r1, #1]!
 800b6c6:	e7ed      	b.n	800b6a4 <__exponent+0x4c>
 800b6c8:	2330      	movs	r3, #48	; 0x30
 800b6ca:	3130      	adds	r1, #48	; 0x30
 800b6cc:	7083      	strb	r3, [r0, #2]
 800b6ce:	70c1      	strb	r1, [r0, #3]
 800b6d0:	1d03      	adds	r3, r0, #4
 800b6d2:	e7f1      	b.n	800b6b8 <__exponent+0x60>

0800b6d4 <_printf_float>:
 800b6d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6d8:	ed2d 8b02 	vpush	{d8}
 800b6dc:	b08d      	sub	sp, #52	; 0x34
 800b6de:	460c      	mov	r4, r1
 800b6e0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800b6e4:	4616      	mov	r6, r2
 800b6e6:	461f      	mov	r7, r3
 800b6e8:	4605      	mov	r5, r0
 800b6ea:	f000 fef7 	bl	800c4dc <_localeconv_r>
 800b6ee:	f8d0 a000 	ldr.w	sl, [r0]
 800b6f2:	4650      	mov	r0, sl
 800b6f4:	f7f4 fddc 	bl	80002b0 <strlen>
 800b6f8:	2300      	movs	r3, #0
 800b6fa:	930a      	str	r3, [sp, #40]	; 0x28
 800b6fc:	6823      	ldr	r3, [r4, #0]
 800b6fe:	9305      	str	r3, [sp, #20]
 800b700:	f8d8 3000 	ldr.w	r3, [r8]
 800b704:	f894 b018 	ldrb.w	fp, [r4, #24]
 800b708:	3307      	adds	r3, #7
 800b70a:	f023 0307 	bic.w	r3, r3, #7
 800b70e:	f103 0208 	add.w	r2, r3, #8
 800b712:	f8c8 2000 	str.w	r2, [r8]
 800b716:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b71a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b71e:	9307      	str	r3, [sp, #28]
 800b720:	f8cd 8018 	str.w	r8, [sp, #24]
 800b724:	ee08 0a10 	vmov	s16, r0
 800b728:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800b72c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b730:	4b9e      	ldr	r3, [pc, #632]	; (800b9ac <_printf_float+0x2d8>)
 800b732:	f04f 32ff 	mov.w	r2, #4294967295
 800b736:	f7f5 fa19 	bl	8000b6c <__aeabi_dcmpun>
 800b73a:	bb88      	cbnz	r0, 800b7a0 <_printf_float+0xcc>
 800b73c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b740:	4b9a      	ldr	r3, [pc, #616]	; (800b9ac <_printf_float+0x2d8>)
 800b742:	f04f 32ff 	mov.w	r2, #4294967295
 800b746:	f7f5 f9f3 	bl	8000b30 <__aeabi_dcmple>
 800b74a:	bb48      	cbnz	r0, 800b7a0 <_printf_float+0xcc>
 800b74c:	2200      	movs	r2, #0
 800b74e:	2300      	movs	r3, #0
 800b750:	4640      	mov	r0, r8
 800b752:	4649      	mov	r1, r9
 800b754:	f7f5 f9e2 	bl	8000b1c <__aeabi_dcmplt>
 800b758:	b110      	cbz	r0, 800b760 <_printf_float+0x8c>
 800b75a:	232d      	movs	r3, #45	; 0x2d
 800b75c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b760:	4a93      	ldr	r2, [pc, #588]	; (800b9b0 <_printf_float+0x2dc>)
 800b762:	4b94      	ldr	r3, [pc, #592]	; (800b9b4 <_printf_float+0x2e0>)
 800b764:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800b768:	bf94      	ite	ls
 800b76a:	4690      	movls	r8, r2
 800b76c:	4698      	movhi	r8, r3
 800b76e:	2303      	movs	r3, #3
 800b770:	6123      	str	r3, [r4, #16]
 800b772:	9b05      	ldr	r3, [sp, #20]
 800b774:	f023 0304 	bic.w	r3, r3, #4
 800b778:	6023      	str	r3, [r4, #0]
 800b77a:	f04f 0900 	mov.w	r9, #0
 800b77e:	9700      	str	r7, [sp, #0]
 800b780:	4633      	mov	r3, r6
 800b782:	aa0b      	add	r2, sp, #44	; 0x2c
 800b784:	4621      	mov	r1, r4
 800b786:	4628      	mov	r0, r5
 800b788:	f000 f9da 	bl	800bb40 <_printf_common>
 800b78c:	3001      	adds	r0, #1
 800b78e:	f040 8090 	bne.w	800b8b2 <_printf_float+0x1de>
 800b792:	f04f 30ff 	mov.w	r0, #4294967295
 800b796:	b00d      	add	sp, #52	; 0x34
 800b798:	ecbd 8b02 	vpop	{d8}
 800b79c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7a0:	4642      	mov	r2, r8
 800b7a2:	464b      	mov	r3, r9
 800b7a4:	4640      	mov	r0, r8
 800b7a6:	4649      	mov	r1, r9
 800b7a8:	f7f5 f9e0 	bl	8000b6c <__aeabi_dcmpun>
 800b7ac:	b140      	cbz	r0, 800b7c0 <_printf_float+0xec>
 800b7ae:	464b      	mov	r3, r9
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	bfbc      	itt	lt
 800b7b4:	232d      	movlt	r3, #45	; 0x2d
 800b7b6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800b7ba:	4a7f      	ldr	r2, [pc, #508]	; (800b9b8 <_printf_float+0x2e4>)
 800b7bc:	4b7f      	ldr	r3, [pc, #508]	; (800b9bc <_printf_float+0x2e8>)
 800b7be:	e7d1      	b.n	800b764 <_printf_float+0x90>
 800b7c0:	6863      	ldr	r3, [r4, #4]
 800b7c2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800b7c6:	9206      	str	r2, [sp, #24]
 800b7c8:	1c5a      	adds	r2, r3, #1
 800b7ca:	d13f      	bne.n	800b84c <_printf_float+0x178>
 800b7cc:	2306      	movs	r3, #6
 800b7ce:	6063      	str	r3, [r4, #4]
 800b7d0:	9b05      	ldr	r3, [sp, #20]
 800b7d2:	6861      	ldr	r1, [r4, #4]
 800b7d4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800b7d8:	2300      	movs	r3, #0
 800b7da:	9303      	str	r3, [sp, #12]
 800b7dc:	ab0a      	add	r3, sp, #40	; 0x28
 800b7de:	e9cd b301 	strd	fp, r3, [sp, #4]
 800b7e2:	ab09      	add	r3, sp, #36	; 0x24
 800b7e4:	ec49 8b10 	vmov	d0, r8, r9
 800b7e8:	9300      	str	r3, [sp, #0]
 800b7ea:	6022      	str	r2, [r4, #0]
 800b7ec:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800b7f0:	4628      	mov	r0, r5
 800b7f2:	f7ff fecf 	bl	800b594 <__cvt>
 800b7f6:	9b06      	ldr	r3, [sp, #24]
 800b7f8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b7fa:	2b47      	cmp	r3, #71	; 0x47
 800b7fc:	4680      	mov	r8, r0
 800b7fe:	d108      	bne.n	800b812 <_printf_float+0x13e>
 800b800:	1cc8      	adds	r0, r1, #3
 800b802:	db02      	blt.n	800b80a <_printf_float+0x136>
 800b804:	6863      	ldr	r3, [r4, #4]
 800b806:	4299      	cmp	r1, r3
 800b808:	dd41      	ble.n	800b88e <_printf_float+0x1ba>
 800b80a:	f1ab 0302 	sub.w	r3, fp, #2
 800b80e:	fa5f fb83 	uxtb.w	fp, r3
 800b812:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b816:	d820      	bhi.n	800b85a <_printf_float+0x186>
 800b818:	3901      	subs	r1, #1
 800b81a:	465a      	mov	r2, fp
 800b81c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800b820:	9109      	str	r1, [sp, #36]	; 0x24
 800b822:	f7ff ff19 	bl	800b658 <__exponent>
 800b826:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b828:	1813      	adds	r3, r2, r0
 800b82a:	2a01      	cmp	r2, #1
 800b82c:	4681      	mov	r9, r0
 800b82e:	6123      	str	r3, [r4, #16]
 800b830:	dc02      	bgt.n	800b838 <_printf_float+0x164>
 800b832:	6822      	ldr	r2, [r4, #0]
 800b834:	07d2      	lsls	r2, r2, #31
 800b836:	d501      	bpl.n	800b83c <_printf_float+0x168>
 800b838:	3301      	adds	r3, #1
 800b83a:	6123      	str	r3, [r4, #16]
 800b83c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800b840:	2b00      	cmp	r3, #0
 800b842:	d09c      	beq.n	800b77e <_printf_float+0xaa>
 800b844:	232d      	movs	r3, #45	; 0x2d
 800b846:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b84a:	e798      	b.n	800b77e <_printf_float+0xaa>
 800b84c:	9a06      	ldr	r2, [sp, #24]
 800b84e:	2a47      	cmp	r2, #71	; 0x47
 800b850:	d1be      	bne.n	800b7d0 <_printf_float+0xfc>
 800b852:	2b00      	cmp	r3, #0
 800b854:	d1bc      	bne.n	800b7d0 <_printf_float+0xfc>
 800b856:	2301      	movs	r3, #1
 800b858:	e7b9      	b.n	800b7ce <_printf_float+0xfa>
 800b85a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800b85e:	d118      	bne.n	800b892 <_printf_float+0x1be>
 800b860:	2900      	cmp	r1, #0
 800b862:	6863      	ldr	r3, [r4, #4]
 800b864:	dd0b      	ble.n	800b87e <_printf_float+0x1aa>
 800b866:	6121      	str	r1, [r4, #16]
 800b868:	b913      	cbnz	r3, 800b870 <_printf_float+0x19c>
 800b86a:	6822      	ldr	r2, [r4, #0]
 800b86c:	07d0      	lsls	r0, r2, #31
 800b86e:	d502      	bpl.n	800b876 <_printf_float+0x1a2>
 800b870:	3301      	adds	r3, #1
 800b872:	440b      	add	r3, r1
 800b874:	6123      	str	r3, [r4, #16]
 800b876:	65a1      	str	r1, [r4, #88]	; 0x58
 800b878:	f04f 0900 	mov.w	r9, #0
 800b87c:	e7de      	b.n	800b83c <_printf_float+0x168>
 800b87e:	b913      	cbnz	r3, 800b886 <_printf_float+0x1b2>
 800b880:	6822      	ldr	r2, [r4, #0]
 800b882:	07d2      	lsls	r2, r2, #31
 800b884:	d501      	bpl.n	800b88a <_printf_float+0x1b6>
 800b886:	3302      	adds	r3, #2
 800b888:	e7f4      	b.n	800b874 <_printf_float+0x1a0>
 800b88a:	2301      	movs	r3, #1
 800b88c:	e7f2      	b.n	800b874 <_printf_float+0x1a0>
 800b88e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800b892:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b894:	4299      	cmp	r1, r3
 800b896:	db05      	blt.n	800b8a4 <_printf_float+0x1d0>
 800b898:	6823      	ldr	r3, [r4, #0]
 800b89a:	6121      	str	r1, [r4, #16]
 800b89c:	07d8      	lsls	r0, r3, #31
 800b89e:	d5ea      	bpl.n	800b876 <_printf_float+0x1a2>
 800b8a0:	1c4b      	adds	r3, r1, #1
 800b8a2:	e7e7      	b.n	800b874 <_printf_float+0x1a0>
 800b8a4:	2900      	cmp	r1, #0
 800b8a6:	bfd4      	ite	le
 800b8a8:	f1c1 0202 	rsble	r2, r1, #2
 800b8ac:	2201      	movgt	r2, #1
 800b8ae:	4413      	add	r3, r2
 800b8b0:	e7e0      	b.n	800b874 <_printf_float+0x1a0>
 800b8b2:	6823      	ldr	r3, [r4, #0]
 800b8b4:	055a      	lsls	r2, r3, #21
 800b8b6:	d407      	bmi.n	800b8c8 <_printf_float+0x1f4>
 800b8b8:	6923      	ldr	r3, [r4, #16]
 800b8ba:	4642      	mov	r2, r8
 800b8bc:	4631      	mov	r1, r6
 800b8be:	4628      	mov	r0, r5
 800b8c0:	47b8      	blx	r7
 800b8c2:	3001      	adds	r0, #1
 800b8c4:	d12c      	bne.n	800b920 <_printf_float+0x24c>
 800b8c6:	e764      	b.n	800b792 <_printf_float+0xbe>
 800b8c8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b8cc:	f240 80e0 	bls.w	800ba90 <_printf_float+0x3bc>
 800b8d0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b8d4:	2200      	movs	r2, #0
 800b8d6:	2300      	movs	r3, #0
 800b8d8:	f7f5 f916 	bl	8000b08 <__aeabi_dcmpeq>
 800b8dc:	2800      	cmp	r0, #0
 800b8de:	d034      	beq.n	800b94a <_printf_float+0x276>
 800b8e0:	4a37      	ldr	r2, [pc, #220]	; (800b9c0 <_printf_float+0x2ec>)
 800b8e2:	2301      	movs	r3, #1
 800b8e4:	4631      	mov	r1, r6
 800b8e6:	4628      	mov	r0, r5
 800b8e8:	47b8      	blx	r7
 800b8ea:	3001      	adds	r0, #1
 800b8ec:	f43f af51 	beq.w	800b792 <_printf_float+0xbe>
 800b8f0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b8f4:	429a      	cmp	r2, r3
 800b8f6:	db02      	blt.n	800b8fe <_printf_float+0x22a>
 800b8f8:	6823      	ldr	r3, [r4, #0]
 800b8fa:	07d8      	lsls	r0, r3, #31
 800b8fc:	d510      	bpl.n	800b920 <_printf_float+0x24c>
 800b8fe:	ee18 3a10 	vmov	r3, s16
 800b902:	4652      	mov	r2, sl
 800b904:	4631      	mov	r1, r6
 800b906:	4628      	mov	r0, r5
 800b908:	47b8      	blx	r7
 800b90a:	3001      	adds	r0, #1
 800b90c:	f43f af41 	beq.w	800b792 <_printf_float+0xbe>
 800b910:	f04f 0800 	mov.w	r8, #0
 800b914:	f104 091a 	add.w	r9, r4, #26
 800b918:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b91a:	3b01      	subs	r3, #1
 800b91c:	4543      	cmp	r3, r8
 800b91e:	dc09      	bgt.n	800b934 <_printf_float+0x260>
 800b920:	6823      	ldr	r3, [r4, #0]
 800b922:	079b      	lsls	r3, r3, #30
 800b924:	f100 8107 	bmi.w	800bb36 <_printf_float+0x462>
 800b928:	68e0      	ldr	r0, [r4, #12]
 800b92a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b92c:	4298      	cmp	r0, r3
 800b92e:	bfb8      	it	lt
 800b930:	4618      	movlt	r0, r3
 800b932:	e730      	b.n	800b796 <_printf_float+0xc2>
 800b934:	2301      	movs	r3, #1
 800b936:	464a      	mov	r2, r9
 800b938:	4631      	mov	r1, r6
 800b93a:	4628      	mov	r0, r5
 800b93c:	47b8      	blx	r7
 800b93e:	3001      	adds	r0, #1
 800b940:	f43f af27 	beq.w	800b792 <_printf_float+0xbe>
 800b944:	f108 0801 	add.w	r8, r8, #1
 800b948:	e7e6      	b.n	800b918 <_printf_float+0x244>
 800b94a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	dc39      	bgt.n	800b9c4 <_printf_float+0x2f0>
 800b950:	4a1b      	ldr	r2, [pc, #108]	; (800b9c0 <_printf_float+0x2ec>)
 800b952:	2301      	movs	r3, #1
 800b954:	4631      	mov	r1, r6
 800b956:	4628      	mov	r0, r5
 800b958:	47b8      	blx	r7
 800b95a:	3001      	adds	r0, #1
 800b95c:	f43f af19 	beq.w	800b792 <_printf_float+0xbe>
 800b960:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800b964:	4313      	orrs	r3, r2
 800b966:	d102      	bne.n	800b96e <_printf_float+0x29a>
 800b968:	6823      	ldr	r3, [r4, #0]
 800b96a:	07d9      	lsls	r1, r3, #31
 800b96c:	d5d8      	bpl.n	800b920 <_printf_float+0x24c>
 800b96e:	ee18 3a10 	vmov	r3, s16
 800b972:	4652      	mov	r2, sl
 800b974:	4631      	mov	r1, r6
 800b976:	4628      	mov	r0, r5
 800b978:	47b8      	blx	r7
 800b97a:	3001      	adds	r0, #1
 800b97c:	f43f af09 	beq.w	800b792 <_printf_float+0xbe>
 800b980:	f04f 0900 	mov.w	r9, #0
 800b984:	f104 0a1a 	add.w	sl, r4, #26
 800b988:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b98a:	425b      	negs	r3, r3
 800b98c:	454b      	cmp	r3, r9
 800b98e:	dc01      	bgt.n	800b994 <_printf_float+0x2c0>
 800b990:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b992:	e792      	b.n	800b8ba <_printf_float+0x1e6>
 800b994:	2301      	movs	r3, #1
 800b996:	4652      	mov	r2, sl
 800b998:	4631      	mov	r1, r6
 800b99a:	4628      	mov	r0, r5
 800b99c:	47b8      	blx	r7
 800b99e:	3001      	adds	r0, #1
 800b9a0:	f43f aef7 	beq.w	800b792 <_printf_float+0xbe>
 800b9a4:	f109 0901 	add.w	r9, r9, #1
 800b9a8:	e7ee      	b.n	800b988 <_printf_float+0x2b4>
 800b9aa:	bf00      	nop
 800b9ac:	7fefffff 	.word	0x7fefffff
 800b9b0:	0800fcfc 	.word	0x0800fcfc
 800b9b4:	0800fd00 	.word	0x0800fd00
 800b9b8:	0800fd04 	.word	0x0800fd04
 800b9bc:	0800fd08 	.word	0x0800fd08
 800b9c0:	0800fd0c 	.word	0x0800fd0c
 800b9c4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b9c6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b9c8:	429a      	cmp	r2, r3
 800b9ca:	bfa8      	it	ge
 800b9cc:	461a      	movge	r2, r3
 800b9ce:	2a00      	cmp	r2, #0
 800b9d0:	4691      	mov	r9, r2
 800b9d2:	dc37      	bgt.n	800ba44 <_printf_float+0x370>
 800b9d4:	f04f 0b00 	mov.w	fp, #0
 800b9d8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b9dc:	f104 021a 	add.w	r2, r4, #26
 800b9e0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b9e2:	9305      	str	r3, [sp, #20]
 800b9e4:	eba3 0309 	sub.w	r3, r3, r9
 800b9e8:	455b      	cmp	r3, fp
 800b9ea:	dc33      	bgt.n	800ba54 <_printf_float+0x380>
 800b9ec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b9f0:	429a      	cmp	r2, r3
 800b9f2:	db3b      	blt.n	800ba6c <_printf_float+0x398>
 800b9f4:	6823      	ldr	r3, [r4, #0]
 800b9f6:	07da      	lsls	r2, r3, #31
 800b9f8:	d438      	bmi.n	800ba6c <_printf_float+0x398>
 800b9fa:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800b9fe:	eba2 0903 	sub.w	r9, r2, r3
 800ba02:	9b05      	ldr	r3, [sp, #20]
 800ba04:	1ad2      	subs	r2, r2, r3
 800ba06:	4591      	cmp	r9, r2
 800ba08:	bfa8      	it	ge
 800ba0a:	4691      	movge	r9, r2
 800ba0c:	f1b9 0f00 	cmp.w	r9, #0
 800ba10:	dc35      	bgt.n	800ba7e <_printf_float+0x3aa>
 800ba12:	f04f 0800 	mov.w	r8, #0
 800ba16:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ba1a:	f104 0a1a 	add.w	sl, r4, #26
 800ba1e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ba22:	1a9b      	subs	r3, r3, r2
 800ba24:	eba3 0309 	sub.w	r3, r3, r9
 800ba28:	4543      	cmp	r3, r8
 800ba2a:	f77f af79 	ble.w	800b920 <_printf_float+0x24c>
 800ba2e:	2301      	movs	r3, #1
 800ba30:	4652      	mov	r2, sl
 800ba32:	4631      	mov	r1, r6
 800ba34:	4628      	mov	r0, r5
 800ba36:	47b8      	blx	r7
 800ba38:	3001      	adds	r0, #1
 800ba3a:	f43f aeaa 	beq.w	800b792 <_printf_float+0xbe>
 800ba3e:	f108 0801 	add.w	r8, r8, #1
 800ba42:	e7ec      	b.n	800ba1e <_printf_float+0x34a>
 800ba44:	4613      	mov	r3, r2
 800ba46:	4631      	mov	r1, r6
 800ba48:	4642      	mov	r2, r8
 800ba4a:	4628      	mov	r0, r5
 800ba4c:	47b8      	blx	r7
 800ba4e:	3001      	adds	r0, #1
 800ba50:	d1c0      	bne.n	800b9d4 <_printf_float+0x300>
 800ba52:	e69e      	b.n	800b792 <_printf_float+0xbe>
 800ba54:	2301      	movs	r3, #1
 800ba56:	4631      	mov	r1, r6
 800ba58:	4628      	mov	r0, r5
 800ba5a:	9205      	str	r2, [sp, #20]
 800ba5c:	47b8      	blx	r7
 800ba5e:	3001      	adds	r0, #1
 800ba60:	f43f ae97 	beq.w	800b792 <_printf_float+0xbe>
 800ba64:	9a05      	ldr	r2, [sp, #20]
 800ba66:	f10b 0b01 	add.w	fp, fp, #1
 800ba6a:	e7b9      	b.n	800b9e0 <_printf_float+0x30c>
 800ba6c:	ee18 3a10 	vmov	r3, s16
 800ba70:	4652      	mov	r2, sl
 800ba72:	4631      	mov	r1, r6
 800ba74:	4628      	mov	r0, r5
 800ba76:	47b8      	blx	r7
 800ba78:	3001      	adds	r0, #1
 800ba7a:	d1be      	bne.n	800b9fa <_printf_float+0x326>
 800ba7c:	e689      	b.n	800b792 <_printf_float+0xbe>
 800ba7e:	9a05      	ldr	r2, [sp, #20]
 800ba80:	464b      	mov	r3, r9
 800ba82:	4442      	add	r2, r8
 800ba84:	4631      	mov	r1, r6
 800ba86:	4628      	mov	r0, r5
 800ba88:	47b8      	blx	r7
 800ba8a:	3001      	adds	r0, #1
 800ba8c:	d1c1      	bne.n	800ba12 <_printf_float+0x33e>
 800ba8e:	e680      	b.n	800b792 <_printf_float+0xbe>
 800ba90:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ba92:	2a01      	cmp	r2, #1
 800ba94:	dc01      	bgt.n	800ba9a <_printf_float+0x3c6>
 800ba96:	07db      	lsls	r3, r3, #31
 800ba98:	d53a      	bpl.n	800bb10 <_printf_float+0x43c>
 800ba9a:	2301      	movs	r3, #1
 800ba9c:	4642      	mov	r2, r8
 800ba9e:	4631      	mov	r1, r6
 800baa0:	4628      	mov	r0, r5
 800baa2:	47b8      	blx	r7
 800baa4:	3001      	adds	r0, #1
 800baa6:	f43f ae74 	beq.w	800b792 <_printf_float+0xbe>
 800baaa:	ee18 3a10 	vmov	r3, s16
 800baae:	4652      	mov	r2, sl
 800bab0:	4631      	mov	r1, r6
 800bab2:	4628      	mov	r0, r5
 800bab4:	47b8      	blx	r7
 800bab6:	3001      	adds	r0, #1
 800bab8:	f43f ae6b 	beq.w	800b792 <_printf_float+0xbe>
 800babc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800bac0:	2200      	movs	r2, #0
 800bac2:	2300      	movs	r3, #0
 800bac4:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800bac8:	f7f5 f81e 	bl	8000b08 <__aeabi_dcmpeq>
 800bacc:	b9d8      	cbnz	r0, 800bb06 <_printf_float+0x432>
 800bace:	f10a 33ff 	add.w	r3, sl, #4294967295
 800bad2:	f108 0201 	add.w	r2, r8, #1
 800bad6:	4631      	mov	r1, r6
 800bad8:	4628      	mov	r0, r5
 800bada:	47b8      	blx	r7
 800badc:	3001      	adds	r0, #1
 800bade:	d10e      	bne.n	800bafe <_printf_float+0x42a>
 800bae0:	e657      	b.n	800b792 <_printf_float+0xbe>
 800bae2:	2301      	movs	r3, #1
 800bae4:	4652      	mov	r2, sl
 800bae6:	4631      	mov	r1, r6
 800bae8:	4628      	mov	r0, r5
 800baea:	47b8      	blx	r7
 800baec:	3001      	adds	r0, #1
 800baee:	f43f ae50 	beq.w	800b792 <_printf_float+0xbe>
 800baf2:	f108 0801 	add.w	r8, r8, #1
 800baf6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800baf8:	3b01      	subs	r3, #1
 800bafa:	4543      	cmp	r3, r8
 800bafc:	dcf1      	bgt.n	800bae2 <_printf_float+0x40e>
 800bafe:	464b      	mov	r3, r9
 800bb00:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800bb04:	e6da      	b.n	800b8bc <_printf_float+0x1e8>
 800bb06:	f04f 0800 	mov.w	r8, #0
 800bb0a:	f104 0a1a 	add.w	sl, r4, #26
 800bb0e:	e7f2      	b.n	800baf6 <_printf_float+0x422>
 800bb10:	2301      	movs	r3, #1
 800bb12:	4642      	mov	r2, r8
 800bb14:	e7df      	b.n	800bad6 <_printf_float+0x402>
 800bb16:	2301      	movs	r3, #1
 800bb18:	464a      	mov	r2, r9
 800bb1a:	4631      	mov	r1, r6
 800bb1c:	4628      	mov	r0, r5
 800bb1e:	47b8      	blx	r7
 800bb20:	3001      	adds	r0, #1
 800bb22:	f43f ae36 	beq.w	800b792 <_printf_float+0xbe>
 800bb26:	f108 0801 	add.w	r8, r8, #1
 800bb2a:	68e3      	ldr	r3, [r4, #12]
 800bb2c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800bb2e:	1a5b      	subs	r3, r3, r1
 800bb30:	4543      	cmp	r3, r8
 800bb32:	dcf0      	bgt.n	800bb16 <_printf_float+0x442>
 800bb34:	e6f8      	b.n	800b928 <_printf_float+0x254>
 800bb36:	f04f 0800 	mov.w	r8, #0
 800bb3a:	f104 0919 	add.w	r9, r4, #25
 800bb3e:	e7f4      	b.n	800bb2a <_printf_float+0x456>

0800bb40 <_printf_common>:
 800bb40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bb44:	4616      	mov	r6, r2
 800bb46:	4699      	mov	r9, r3
 800bb48:	688a      	ldr	r2, [r1, #8]
 800bb4a:	690b      	ldr	r3, [r1, #16]
 800bb4c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bb50:	4293      	cmp	r3, r2
 800bb52:	bfb8      	it	lt
 800bb54:	4613      	movlt	r3, r2
 800bb56:	6033      	str	r3, [r6, #0]
 800bb58:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800bb5c:	4607      	mov	r7, r0
 800bb5e:	460c      	mov	r4, r1
 800bb60:	b10a      	cbz	r2, 800bb66 <_printf_common+0x26>
 800bb62:	3301      	adds	r3, #1
 800bb64:	6033      	str	r3, [r6, #0]
 800bb66:	6823      	ldr	r3, [r4, #0]
 800bb68:	0699      	lsls	r1, r3, #26
 800bb6a:	bf42      	ittt	mi
 800bb6c:	6833      	ldrmi	r3, [r6, #0]
 800bb6e:	3302      	addmi	r3, #2
 800bb70:	6033      	strmi	r3, [r6, #0]
 800bb72:	6825      	ldr	r5, [r4, #0]
 800bb74:	f015 0506 	ands.w	r5, r5, #6
 800bb78:	d106      	bne.n	800bb88 <_printf_common+0x48>
 800bb7a:	f104 0a19 	add.w	sl, r4, #25
 800bb7e:	68e3      	ldr	r3, [r4, #12]
 800bb80:	6832      	ldr	r2, [r6, #0]
 800bb82:	1a9b      	subs	r3, r3, r2
 800bb84:	42ab      	cmp	r3, r5
 800bb86:	dc26      	bgt.n	800bbd6 <_printf_common+0x96>
 800bb88:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800bb8c:	1e13      	subs	r3, r2, #0
 800bb8e:	6822      	ldr	r2, [r4, #0]
 800bb90:	bf18      	it	ne
 800bb92:	2301      	movne	r3, #1
 800bb94:	0692      	lsls	r2, r2, #26
 800bb96:	d42b      	bmi.n	800bbf0 <_printf_common+0xb0>
 800bb98:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bb9c:	4649      	mov	r1, r9
 800bb9e:	4638      	mov	r0, r7
 800bba0:	47c0      	blx	r8
 800bba2:	3001      	adds	r0, #1
 800bba4:	d01e      	beq.n	800bbe4 <_printf_common+0xa4>
 800bba6:	6823      	ldr	r3, [r4, #0]
 800bba8:	6922      	ldr	r2, [r4, #16]
 800bbaa:	f003 0306 	and.w	r3, r3, #6
 800bbae:	2b04      	cmp	r3, #4
 800bbb0:	bf02      	ittt	eq
 800bbb2:	68e5      	ldreq	r5, [r4, #12]
 800bbb4:	6833      	ldreq	r3, [r6, #0]
 800bbb6:	1aed      	subeq	r5, r5, r3
 800bbb8:	68a3      	ldr	r3, [r4, #8]
 800bbba:	bf0c      	ite	eq
 800bbbc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bbc0:	2500      	movne	r5, #0
 800bbc2:	4293      	cmp	r3, r2
 800bbc4:	bfc4      	itt	gt
 800bbc6:	1a9b      	subgt	r3, r3, r2
 800bbc8:	18ed      	addgt	r5, r5, r3
 800bbca:	2600      	movs	r6, #0
 800bbcc:	341a      	adds	r4, #26
 800bbce:	42b5      	cmp	r5, r6
 800bbd0:	d11a      	bne.n	800bc08 <_printf_common+0xc8>
 800bbd2:	2000      	movs	r0, #0
 800bbd4:	e008      	b.n	800bbe8 <_printf_common+0xa8>
 800bbd6:	2301      	movs	r3, #1
 800bbd8:	4652      	mov	r2, sl
 800bbda:	4649      	mov	r1, r9
 800bbdc:	4638      	mov	r0, r7
 800bbde:	47c0      	blx	r8
 800bbe0:	3001      	adds	r0, #1
 800bbe2:	d103      	bne.n	800bbec <_printf_common+0xac>
 800bbe4:	f04f 30ff 	mov.w	r0, #4294967295
 800bbe8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bbec:	3501      	adds	r5, #1
 800bbee:	e7c6      	b.n	800bb7e <_printf_common+0x3e>
 800bbf0:	18e1      	adds	r1, r4, r3
 800bbf2:	1c5a      	adds	r2, r3, #1
 800bbf4:	2030      	movs	r0, #48	; 0x30
 800bbf6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bbfa:	4422      	add	r2, r4
 800bbfc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bc00:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bc04:	3302      	adds	r3, #2
 800bc06:	e7c7      	b.n	800bb98 <_printf_common+0x58>
 800bc08:	2301      	movs	r3, #1
 800bc0a:	4622      	mov	r2, r4
 800bc0c:	4649      	mov	r1, r9
 800bc0e:	4638      	mov	r0, r7
 800bc10:	47c0      	blx	r8
 800bc12:	3001      	adds	r0, #1
 800bc14:	d0e6      	beq.n	800bbe4 <_printf_common+0xa4>
 800bc16:	3601      	adds	r6, #1
 800bc18:	e7d9      	b.n	800bbce <_printf_common+0x8e>
	...

0800bc1c <_printf_i>:
 800bc1c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bc20:	7e0f      	ldrb	r7, [r1, #24]
 800bc22:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800bc24:	2f78      	cmp	r7, #120	; 0x78
 800bc26:	4691      	mov	r9, r2
 800bc28:	4680      	mov	r8, r0
 800bc2a:	460c      	mov	r4, r1
 800bc2c:	469a      	mov	sl, r3
 800bc2e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800bc32:	d807      	bhi.n	800bc44 <_printf_i+0x28>
 800bc34:	2f62      	cmp	r7, #98	; 0x62
 800bc36:	d80a      	bhi.n	800bc4e <_printf_i+0x32>
 800bc38:	2f00      	cmp	r7, #0
 800bc3a:	f000 80d4 	beq.w	800bde6 <_printf_i+0x1ca>
 800bc3e:	2f58      	cmp	r7, #88	; 0x58
 800bc40:	f000 80c0 	beq.w	800bdc4 <_printf_i+0x1a8>
 800bc44:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bc48:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800bc4c:	e03a      	b.n	800bcc4 <_printf_i+0xa8>
 800bc4e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800bc52:	2b15      	cmp	r3, #21
 800bc54:	d8f6      	bhi.n	800bc44 <_printf_i+0x28>
 800bc56:	a101      	add	r1, pc, #4	; (adr r1, 800bc5c <_printf_i+0x40>)
 800bc58:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bc5c:	0800bcb5 	.word	0x0800bcb5
 800bc60:	0800bcc9 	.word	0x0800bcc9
 800bc64:	0800bc45 	.word	0x0800bc45
 800bc68:	0800bc45 	.word	0x0800bc45
 800bc6c:	0800bc45 	.word	0x0800bc45
 800bc70:	0800bc45 	.word	0x0800bc45
 800bc74:	0800bcc9 	.word	0x0800bcc9
 800bc78:	0800bc45 	.word	0x0800bc45
 800bc7c:	0800bc45 	.word	0x0800bc45
 800bc80:	0800bc45 	.word	0x0800bc45
 800bc84:	0800bc45 	.word	0x0800bc45
 800bc88:	0800bdcd 	.word	0x0800bdcd
 800bc8c:	0800bcf5 	.word	0x0800bcf5
 800bc90:	0800bd87 	.word	0x0800bd87
 800bc94:	0800bc45 	.word	0x0800bc45
 800bc98:	0800bc45 	.word	0x0800bc45
 800bc9c:	0800bdef 	.word	0x0800bdef
 800bca0:	0800bc45 	.word	0x0800bc45
 800bca4:	0800bcf5 	.word	0x0800bcf5
 800bca8:	0800bc45 	.word	0x0800bc45
 800bcac:	0800bc45 	.word	0x0800bc45
 800bcb0:	0800bd8f 	.word	0x0800bd8f
 800bcb4:	682b      	ldr	r3, [r5, #0]
 800bcb6:	1d1a      	adds	r2, r3, #4
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	602a      	str	r2, [r5, #0]
 800bcbc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bcc0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bcc4:	2301      	movs	r3, #1
 800bcc6:	e09f      	b.n	800be08 <_printf_i+0x1ec>
 800bcc8:	6820      	ldr	r0, [r4, #0]
 800bcca:	682b      	ldr	r3, [r5, #0]
 800bccc:	0607      	lsls	r7, r0, #24
 800bcce:	f103 0104 	add.w	r1, r3, #4
 800bcd2:	6029      	str	r1, [r5, #0]
 800bcd4:	d501      	bpl.n	800bcda <_printf_i+0xbe>
 800bcd6:	681e      	ldr	r6, [r3, #0]
 800bcd8:	e003      	b.n	800bce2 <_printf_i+0xc6>
 800bcda:	0646      	lsls	r6, r0, #25
 800bcdc:	d5fb      	bpl.n	800bcd6 <_printf_i+0xba>
 800bcde:	f9b3 6000 	ldrsh.w	r6, [r3]
 800bce2:	2e00      	cmp	r6, #0
 800bce4:	da03      	bge.n	800bcee <_printf_i+0xd2>
 800bce6:	232d      	movs	r3, #45	; 0x2d
 800bce8:	4276      	negs	r6, r6
 800bcea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bcee:	485a      	ldr	r0, [pc, #360]	; (800be58 <_printf_i+0x23c>)
 800bcf0:	230a      	movs	r3, #10
 800bcf2:	e012      	b.n	800bd1a <_printf_i+0xfe>
 800bcf4:	682b      	ldr	r3, [r5, #0]
 800bcf6:	6820      	ldr	r0, [r4, #0]
 800bcf8:	1d19      	adds	r1, r3, #4
 800bcfa:	6029      	str	r1, [r5, #0]
 800bcfc:	0605      	lsls	r5, r0, #24
 800bcfe:	d501      	bpl.n	800bd04 <_printf_i+0xe8>
 800bd00:	681e      	ldr	r6, [r3, #0]
 800bd02:	e002      	b.n	800bd0a <_printf_i+0xee>
 800bd04:	0641      	lsls	r1, r0, #25
 800bd06:	d5fb      	bpl.n	800bd00 <_printf_i+0xe4>
 800bd08:	881e      	ldrh	r6, [r3, #0]
 800bd0a:	4853      	ldr	r0, [pc, #332]	; (800be58 <_printf_i+0x23c>)
 800bd0c:	2f6f      	cmp	r7, #111	; 0x6f
 800bd0e:	bf0c      	ite	eq
 800bd10:	2308      	moveq	r3, #8
 800bd12:	230a      	movne	r3, #10
 800bd14:	2100      	movs	r1, #0
 800bd16:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800bd1a:	6865      	ldr	r5, [r4, #4]
 800bd1c:	60a5      	str	r5, [r4, #8]
 800bd1e:	2d00      	cmp	r5, #0
 800bd20:	bfa2      	ittt	ge
 800bd22:	6821      	ldrge	r1, [r4, #0]
 800bd24:	f021 0104 	bicge.w	r1, r1, #4
 800bd28:	6021      	strge	r1, [r4, #0]
 800bd2a:	b90e      	cbnz	r6, 800bd30 <_printf_i+0x114>
 800bd2c:	2d00      	cmp	r5, #0
 800bd2e:	d04b      	beq.n	800bdc8 <_printf_i+0x1ac>
 800bd30:	4615      	mov	r5, r2
 800bd32:	fbb6 f1f3 	udiv	r1, r6, r3
 800bd36:	fb03 6711 	mls	r7, r3, r1, r6
 800bd3a:	5dc7      	ldrb	r7, [r0, r7]
 800bd3c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800bd40:	4637      	mov	r7, r6
 800bd42:	42bb      	cmp	r3, r7
 800bd44:	460e      	mov	r6, r1
 800bd46:	d9f4      	bls.n	800bd32 <_printf_i+0x116>
 800bd48:	2b08      	cmp	r3, #8
 800bd4a:	d10b      	bne.n	800bd64 <_printf_i+0x148>
 800bd4c:	6823      	ldr	r3, [r4, #0]
 800bd4e:	07de      	lsls	r6, r3, #31
 800bd50:	d508      	bpl.n	800bd64 <_printf_i+0x148>
 800bd52:	6923      	ldr	r3, [r4, #16]
 800bd54:	6861      	ldr	r1, [r4, #4]
 800bd56:	4299      	cmp	r1, r3
 800bd58:	bfde      	ittt	le
 800bd5a:	2330      	movle	r3, #48	; 0x30
 800bd5c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800bd60:	f105 35ff 	addle.w	r5, r5, #4294967295
 800bd64:	1b52      	subs	r2, r2, r5
 800bd66:	6122      	str	r2, [r4, #16]
 800bd68:	f8cd a000 	str.w	sl, [sp]
 800bd6c:	464b      	mov	r3, r9
 800bd6e:	aa03      	add	r2, sp, #12
 800bd70:	4621      	mov	r1, r4
 800bd72:	4640      	mov	r0, r8
 800bd74:	f7ff fee4 	bl	800bb40 <_printf_common>
 800bd78:	3001      	adds	r0, #1
 800bd7a:	d14a      	bne.n	800be12 <_printf_i+0x1f6>
 800bd7c:	f04f 30ff 	mov.w	r0, #4294967295
 800bd80:	b004      	add	sp, #16
 800bd82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd86:	6823      	ldr	r3, [r4, #0]
 800bd88:	f043 0320 	orr.w	r3, r3, #32
 800bd8c:	6023      	str	r3, [r4, #0]
 800bd8e:	4833      	ldr	r0, [pc, #204]	; (800be5c <_printf_i+0x240>)
 800bd90:	2778      	movs	r7, #120	; 0x78
 800bd92:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800bd96:	6823      	ldr	r3, [r4, #0]
 800bd98:	6829      	ldr	r1, [r5, #0]
 800bd9a:	061f      	lsls	r7, r3, #24
 800bd9c:	f851 6b04 	ldr.w	r6, [r1], #4
 800bda0:	d402      	bmi.n	800bda8 <_printf_i+0x18c>
 800bda2:	065f      	lsls	r7, r3, #25
 800bda4:	bf48      	it	mi
 800bda6:	b2b6      	uxthmi	r6, r6
 800bda8:	07df      	lsls	r7, r3, #31
 800bdaa:	bf48      	it	mi
 800bdac:	f043 0320 	orrmi.w	r3, r3, #32
 800bdb0:	6029      	str	r1, [r5, #0]
 800bdb2:	bf48      	it	mi
 800bdb4:	6023      	strmi	r3, [r4, #0]
 800bdb6:	b91e      	cbnz	r6, 800bdc0 <_printf_i+0x1a4>
 800bdb8:	6823      	ldr	r3, [r4, #0]
 800bdba:	f023 0320 	bic.w	r3, r3, #32
 800bdbe:	6023      	str	r3, [r4, #0]
 800bdc0:	2310      	movs	r3, #16
 800bdc2:	e7a7      	b.n	800bd14 <_printf_i+0xf8>
 800bdc4:	4824      	ldr	r0, [pc, #144]	; (800be58 <_printf_i+0x23c>)
 800bdc6:	e7e4      	b.n	800bd92 <_printf_i+0x176>
 800bdc8:	4615      	mov	r5, r2
 800bdca:	e7bd      	b.n	800bd48 <_printf_i+0x12c>
 800bdcc:	682b      	ldr	r3, [r5, #0]
 800bdce:	6826      	ldr	r6, [r4, #0]
 800bdd0:	6961      	ldr	r1, [r4, #20]
 800bdd2:	1d18      	adds	r0, r3, #4
 800bdd4:	6028      	str	r0, [r5, #0]
 800bdd6:	0635      	lsls	r5, r6, #24
 800bdd8:	681b      	ldr	r3, [r3, #0]
 800bdda:	d501      	bpl.n	800bde0 <_printf_i+0x1c4>
 800bddc:	6019      	str	r1, [r3, #0]
 800bdde:	e002      	b.n	800bde6 <_printf_i+0x1ca>
 800bde0:	0670      	lsls	r0, r6, #25
 800bde2:	d5fb      	bpl.n	800bddc <_printf_i+0x1c0>
 800bde4:	8019      	strh	r1, [r3, #0]
 800bde6:	2300      	movs	r3, #0
 800bde8:	6123      	str	r3, [r4, #16]
 800bdea:	4615      	mov	r5, r2
 800bdec:	e7bc      	b.n	800bd68 <_printf_i+0x14c>
 800bdee:	682b      	ldr	r3, [r5, #0]
 800bdf0:	1d1a      	adds	r2, r3, #4
 800bdf2:	602a      	str	r2, [r5, #0]
 800bdf4:	681d      	ldr	r5, [r3, #0]
 800bdf6:	6862      	ldr	r2, [r4, #4]
 800bdf8:	2100      	movs	r1, #0
 800bdfa:	4628      	mov	r0, r5
 800bdfc:	f7f4 fa08 	bl	8000210 <memchr>
 800be00:	b108      	cbz	r0, 800be06 <_printf_i+0x1ea>
 800be02:	1b40      	subs	r0, r0, r5
 800be04:	6060      	str	r0, [r4, #4]
 800be06:	6863      	ldr	r3, [r4, #4]
 800be08:	6123      	str	r3, [r4, #16]
 800be0a:	2300      	movs	r3, #0
 800be0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800be10:	e7aa      	b.n	800bd68 <_printf_i+0x14c>
 800be12:	6923      	ldr	r3, [r4, #16]
 800be14:	462a      	mov	r2, r5
 800be16:	4649      	mov	r1, r9
 800be18:	4640      	mov	r0, r8
 800be1a:	47d0      	blx	sl
 800be1c:	3001      	adds	r0, #1
 800be1e:	d0ad      	beq.n	800bd7c <_printf_i+0x160>
 800be20:	6823      	ldr	r3, [r4, #0]
 800be22:	079b      	lsls	r3, r3, #30
 800be24:	d413      	bmi.n	800be4e <_printf_i+0x232>
 800be26:	68e0      	ldr	r0, [r4, #12]
 800be28:	9b03      	ldr	r3, [sp, #12]
 800be2a:	4298      	cmp	r0, r3
 800be2c:	bfb8      	it	lt
 800be2e:	4618      	movlt	r0, r3
 800be30:	e7a6      	b.n	800bd80 <_printf_i+0x164>
 800be32:	2301      	movs	r3, #1
 800be34:	4632      	mov	r2, r6
 800be36:	4649      	mov	r1, r9
 800be38:	4640      	mov	r0, r8
 800be3a:	47d0      	blx	sl
 800be3c:	3001      	adds	r0, #1
 800be3e:	d09d      	beq.n	800bd7c <_printf_i+0x160>
 800be40:	3501      	adds	r5, #1
 800be42:	68e3      	ldr	r3, [r4, #12]
 800be44:	9903      	ldr	r1, [sp, #12]
 800be46:	1a5b      	subs	r3, r3, r1
 800be48:	42ab      	cmp	r3, r5
 800be4a:	dcf2      	bgt.n	800be32 <_printf_i+0x216>
 800be4c:	e7eb      	b.n	800be26 <_printf_i+0x20a>
 800be4e:	2500      	movs	r5, #0
 800be50:	f104 0619 	add.w	r6, r4, #25
 800be54:	e7f5      	b.n	800be42 <_printf_i+0x226>
 800be56:	bf00      	nop
 800be58:	0800fd0e 	.word	0x0800fd0e
 800be5c:	0800fd1f 	.word	0x0800fd1f

0800be60 <_scanf_float>:
 800be60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be64:	b087      	sub	sp, #28
 800be66:	4617      	mov	r7, r2
 800be68:	9303      	str	r3, [sp, #12]
 800be6a:	688b      	ldr	r3, [r1, #8]
 800be6c:	1e5a      	subs	r2, r3, #1
 800be6e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800be72:	bf83      	ittte	hi
 800be74:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800be78:	195b      	addhi	r3, r3, r5
 800be7a:	9302      	strhi	r3, [sp, #8]
 800be7c:	2300      	movls	r3, #0
 800be7e:	bf86      	itte	hi
 800be80:	f240 135d 	movwhi	r3, #349	; 0x15d
 800be84:	608b      	strhi	r3, [r1, #8]
 800be86:	9302      	strls	r3, [sp, #8]
 800be88:	680b      	ldr	r3, [r1, #0]
 800be8a:	468b      	mov	fp, r1
 800be8c:	2500      	movs	r5, #0
 800be8e:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800be92:	f84b 3b1c 	str.w	r3, [fp], #28
 800be96:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800be9a:	4680      	mov	r8, r0
 800be9c:	460c      	mov	r4, r1
 800be9e:	465e      	mov	r6, fp
 800bea0:	46aa      	mov	sl, r5
 800bea2:	46a9      	mov	r9, r5
 800bea4:	9501      	str	r5, [sp, #4]
 800bea6:	68a2      	ldr	r2, [r4, #8]
 800bea8:	b152      	cbz	r2, 800bec0 <_scanf_float+0x60>
 800beaa:	683b      	ldr	r3, [r7, #0]
 800beac:	781b      	ldrb	r3, [r3, #0]
 800beae:	2b4e      	cmp	r3, #78	; 0x4e
 800beb0:	d864      	bhi.n	800bf7c <_scanf_float+0x11c>
 800beb2:	2b40      	cmp	r3, #64	; 0x40
 800beb4:	d83c      	bhi.n	800bf30 <_scanf_float+0xd0>
 800beb6:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800beba:	b2c8      	uxtb	r0, r1
 800bebc:	280e      	cmp	r0, #14
 800bebe:	d93a      	bls.n	800bf36 <_scanf_float+0xd6>
 800bec0:	f1b9 0f00 	cmp.w	r9, #0
 800bec4:	d003      	beq.n	800bece <_scanf_float+0x6e>
 800bec6:	6823      	ldr	r3, [r4, #0]
 800bec8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800becc:	6023      	str	r3, [r4, #0]
 800bece:	f10a 3aff 	add.w	sl, sl, #4294967295
 800bed2:	f1ba 0f01 	cmp.w	sl, #1
 800bed6:	f200 8113 	bhi.w	800c100 <_scanf_float+0x2a0>
 800beda:	455e      	cmp	r6, fp
 800bedc:	f200 8105 	bhi.w	800c0ea <_scanf_float+0x28a>
 800bee0:	2501      	movs	r5, #1
 800bee2:	4628      	mov	r0, r5
 800bee4:	b007      	add	sp, #28
 800bee6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800beea:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800beee:	2a0d      	cmp	r2, #13
 800bef0:	d8e6      	bhi.n	800bec0 <_scanf_float+0x60>
 800bef2:	a101      	add	r1, pc, #4	; (adr r1, 800bef8 <_scanf_float+0x98>)
 800bef4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800bef8:	0800c037 	.word	0x0800c037
 800befc:	0800bec1 	.word	0x0800bec1
 800bf00:	0800bec1 	.word	0x0800bec1
 800bf04:	0800bec1 	.word	0x0800bec1
 800bf08:	0800c097 	.word	0x0800c097
 800bf0c:	0800c06f 	.word	0x0800c06f
 800bf10:	0800bec1 	.word	0x0800bec1
 800bf14:	0800bec1 	.word	0x0800bec1
 800bf18:	0800c045 	.word	0x0800c045
 800bf1c:	0800bec1 	.word	0x0800bec1
 800bf20:	0800bec1 	.word	0x0800bec1
 800bf24:	0800bec1 	.word	0x0800bec1
 800bf28:	0800bec1 	.word	0x0800bec1
 800bf2c:	0800bffd 	.word	0x0800bffd
 800bf30:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800bf34:	e7db      	b.n	800beee <_scanf_float+0x8e>
 800bf36:	290e      	cmp	r1, #14
 800bf38:	d8c2      	bhi.n	800bec0 <_scanf_float+0x60>
 800bf3a:	a001      	add	r0, pc, #4	; (adr r0, 800bf40 <_scanf_float+0xe0>)
 800bf3c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800bf40:	0800bfef 	.word	0x0800bfef
 800bf44:	0800bec1 	.word	0x0800bec1
 800bf48:	0800bfef 	.word	0x0800bfef
 800bf4c:	0800c083 	.word	0x0800c083
 800bf50:	0800bec1 	.word	0x0800bec1
 800bf54:	0800bf9d 	.word	0x0800bf9d
 800bf58:	0800bfd9 	.word	0x0800bfd9
 800bf5c:	0800bfd9 	.word	0x0800bfd9
 800bf60:	0800bfd9 	.word	0x0800bfd9
 800bf64:	0800bfd9 	.word	0x0800bfd9
 800bf68:	0800bfd9 	.word	0x0800bfd9
 800bf6c:	0800bfd9 	.word	0x0800bfd9
 800bf70:	0800bfd9 	.word	0x0800bfd9
 800bf74:	0800bfd9 	.word	0x0800bfd9
 800bf78:	0800bfd9 	.word	0x0800bfd9
 800bf7c:	2b6e      	cmp	r3, #110	; 0x6e
 800bf7e:	d809      	bhi.n	800bf94 <_scanf_float+0x134>
 800bf80:	2b60      	cmp	r3, #96	; 0x60
 800bf82:	d8b2      	bhi.n	800beea <_scanf_float+0x8a>
 800bf84:	2b54      	cmp	r3, #84	; 0x54
 800bf86:	d077      	beq.n	800c078 <_scanf_float+0x218>
 800bf88:	2b59      	cmp	r3, #89	; 0x59
 800bf8a:	d199      	bne.n	800bec0 <_scanf_float+0x60>
 800bf8c:	2d07      	cmp	r5, #7
 800bf8e:	d197      	bne.n	800bec0 <_scanf_float+0x60>
 800bf90:	2508      	movs	r5, #8
 800bf92:	e029      	b.n	800bfe8 <_scanf_float+0x188>
 800bf94:	2b74      	cmp	r3, #116	; 0x74
 800bf96:	d06f      	beq.n	800c078 <_scanf_float+0x218>
 800bf98:	2b79      	cmp	r3, #121	; 0x79
 800bf9a:	e7f6      	b.n	800bf8a <_scanf_float+0x12a>
 800bf9c:	6821      	ldr	r1, [r4, #0]
 800bf9e:	05c8      	lsls	r0, r1, #23
 800bfa0:	d51a      	bpl.n	800bfd8 <_scanf_float+0x178>
 800bfa2:	9b02      	ldr	r3, [sp, #8]
 800bfa4:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800bfa8:	6021      	str	r1, [r4, #0]
 800bfaa:	f109 0901 	add.w	r9, r9, #1
 800bfae:	b11b      	cbz	r3, 800bfb8 <_scanf_float+0x158>
 800bfb0:	3b01      	subs	r3, #1
 800bfb2:	3201      	adds	r2, #1
 800bfb4:	9302      	str	r3, [sp, #8]
 800bfb6:	60a2      	str	r2, [r4, #8]
 800bfb8:	68a3      	ldr	r3, [r4, #8]
 800bfba:	3b01      	subs	r3, #1
 800bfbc:	60a3      	str	r3, [r4, #8]
 800bfbe:	6923      	ldr	r3, [r4, #16]
 800bfc0:	3301      	adds	r3, #1
 800bfc2:	6123      	str	r3, [r4, #16]
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	3b01      	subs	r3, #1
 800bfc8:	2b00      	cmp	r3, #0
 800bfca:	607b      	str	r3, [r7, #4]
 800bfcc:	f340 8084 	ble.w	800c0d8 <_scanf_float+0x278>
 800bfd0:	683b      	ldr	r3, [r7, #0]
 800bfd2:	3301      	adds	r3, #1
 800bfd4:	603b      	str	r3, [r7, #0]
 800bfd6:	e766      	b.n	800bea6 <_scanf_float+0x46>
 800bfd8:	eb1a 0f05 	cmn.w	sl, r5
 800bfdc:	f47f af70 	bne.w	800bec0 <_scanf_float+0x60>
 800bfe0:	6822      	ldr	r2, [r4, #0]
 800bfe2:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800bfe6:	6022      	str	r2, [r4, #0]
 800bfe8:	f806 3b01 	strb.w	r3, [r6], #1
 800bfec:	e7e4      	b.n	800bfb8 <_scanf_float+0x158>
 800bfee:	6822      	ldr	r2, [r4, #0]
 800bff0:	0610      	lsls	r0, r2, #24
 800bff2:	f57f af65 	bpl.w	800bec0 <_scanf_float+0x60>
 800bff6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800bffa:	e7f4      	b.n	800bfe6 <_scanf_float+0x186>
 800bffc:	f1ba 0f00 	cmp.w	sl, #0
 800c000:	d10e      	bne.n	800c020 <_scanf_float+0x1c0>
 800c002:	f1b9 0f00 	cmp.w	r9, #0
 800c006:	d10e      	bne.n	800c026 <_scanf_float+0x1c6>
 800c008:	6822      	ldr	r2, [r4, #0]
 800c00a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800c00e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800c012:	d108      	bne.n	800c026 <_scanf_float+0x1c6>
 800c014:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800c018:	6022      	str	r2, [r4, #0]
 800c01a:	f04f 0a01 	mov.w	sl, #1
 800c01e:	e7e3      	b.n	800bfe8 <_scanf_float+0x188>
 800c020:	f1ba 0f02 	cmp.w	sl, #2
 800c024:	d055      	beq.n	800c0d2 <_scanf_float+0x272>
 800c026:	2d01      	cmp	r5, #1
 800c028:	d002      	beq.n	800c030 <_scanf_float+0x1d0>
 800c02a:	2d04      	cmp	r5, #4
 800c02c:	f47f af48 	bne.w	800bec0 <_scanf_float+0x60>
 800c030:	3501      	adds	r5, #1
 800c032:	b2ed      	uxtb	r5, r5
 800c034:	e7d8      	b.n	800bfe8 <_scanf_float+0x188>
 800c036:	f1ba 0f01 	cmp.w	sl, #1
 800c03a:	f47f af41 	bne.w	800bec0 <_scanf_float+0x60>
 800c03e:	f04f 0a02 	mov.w	sl, #2
 800c042:	e7d1      	b.n	800bfe8 <_scanf_float+0x188>
 800c044:	b97d      	cbnz	r5, 800c066 <_scanf_float+0x206>
 800c046:	f1b9 0f00 	cmp.w	r9, #0
 800c04a:	f47f af3c 	bne.w	800bec6 <_scanf_float+0x66>
 800c04e:	6822      	ldr	r2, [r4, #0]
 800c050:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800c054:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800c058:	f47f af39 	bne.w	800bece <_scanf_float+0x6e>
 800c05c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800c060:	6022      	str	r2, [r4, #0]
 800c062:	2501      	movs	r5, #1
 800c064:	e7c0      	b.n	800bfe8 <_scanf_float+0x188>
 800c066:	2d03      	cmp	r5, #3
 800c068:	d0e2      	beq.n	800c030 <_scanf_float+0x1d0>
 800c06a:	2d05      	cmp	r5, #5
 800c06c:	e7de      	b.n	800c02c <_scanf_float+0x1cc>
 800c06e:	2d02      	cmp	r5, #2
 800c070:	f47f af26 	bne.w	800bec0 <_scanf_float+0x60>
 800c074:	2503      	movs	r5, #3
 800c076:	e7b7      	b.n	800bfe8 <_scanf_float+0x188>
 800c078:	2d06      	cmp	r5, #6
 800c07a:	f47f af21 	bne.w	800bec0 <_scanf_float+0x60>
 800c07e:	2507      	movs	r5, #7
 800c080:	e7b2      	b.n	800bfe8 <_scanf_float+0x188>
 800c082:	6822      	ldr	r2, [r4, #0]
 800c084:	0591      	lsls	r1, r2, #22
 800c086:	f57f af1b 	bpl.w	800bec0 <_scanf_float+0x60>
 800c08a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800c08e:	6022      	str	r2, [r4, #0]
 800c090:	f8cd 9004 	str.w	r9, [sp, #4]
 800c094:	e7a8      	b.n	800bfe8 <_scanf_float+0x188>
 800c096:	6822      	ldr	r2, [r4, #0]
 800c098:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800c09c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800c0a0:	d006      	beq.n	800c0b0 <_scanf_float+0x250>
 800c0a2:	0550      	lsls	r0, r2, #21
 800c0a4:	f57f af0c 	bpl.w	800bec0 <_scanf_float+0x60>
 800c0a8:	f1b9 0f00 	cmp.w	r9, #0
 800c0ac:	f43f af0f 	beq.w	800bece <_scanf_float+0x6e>
 800c0b0:	0591      	lsls	r1, r2, #22
 800c0b2:	bf58      	it	pl
 800c0b4:	9901      	ldrpl	r1, [sp, #4]
 800c0b6:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800c0ba:	bf58      	it	pl
 800c0bc:	eba9 0101 	subpl.w	r1, r9, r1
 800c0c0:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800c0c4:	bf58      	it	pl
 800c0c6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800c0ca:	6022      	str	r2, [r4, #0]
 800c0cc:	f04f 0900 	mov.w	r9, #0
 800c0d0:	e78a      	b.n	800bfe8 <_scanf_float+0x188>
 800c0d2:	f04f 0a03 	mov.w	sl, #3
 800c0d6:	e787      	b.n	800bfe8 <_scanf_float+0x188>
 800c0d8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800c0dc:	4639      	mov	r1, r7
 800c0de:	4640      	mov	r0, r8
 800c0e0:	4798      	blx	r3
 800c0e2:	2800      	cmp	r0, #0
 800c0e4:	f43f aedf 	beq.w	800bea6 <_scanf_float+0x46>
 800c0e8:	e6ea      	b.n	800bec0 <_scanf_float+0x60>
 800c0ea:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c0ee:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c0f2:	463a      	mov	r2, r7
 800c0f4:	4640      	mov	r0, r8
 800c0f6:	4798      	blx	r3
 800c0f8:	6923      	ldr	r3, [r4, #16]
 800c0fa:	3b01      	subs	r3, #1
 800c0fc:	6123      	str	r3, [r4, #16]
 800c0fe:	e6ec      	b.n	800beda <_scanf_float+0x7a>
 800c100:	1e6b      	subs	r3, r5, #1
 800c102:	2b06      	cmp	r3, #6
 800c104:	d825      	bhi.n	800c152 <_scanf_float+0x2f2>
 800c106:	2d02      	cmp	r5, #2
 800c108:	d836      	bhi.n	800c178 <_scanf_float+0x318>
 800c10a:	455e      	cmp	r6, fp
 800c10c:	f67f aee8 	bls.w	800bee0 <_scanf_float+0x80>
 800c110:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c114:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c118:	463a      	mov	r2, r7
 800c11a:	4640      	mov	r0, r8
 800c11c:	4798      	blx	r3
 800c11e:	6923      	ldr	r3, [r4, #16]
 800c120:	3b01      	subs	r3, #1
 800c122:	6123      	str	r3, [r4, #16]
 800c124:	e7f1      	b.n	800c10a <_scanf_float+0x2aa>
 800c126:	9802      	ldr	r0, [sp, #8]
 800c128:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c12c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800c130:	9002      	str	r0, [sp, #8]
 800c132:	463a      	mov	r2, r7
 800c134:	4640      	mov	r0, r8
 800c136:	4798      	blx	r3
 800c138:	6923      	ldr	r3, [r4, #16]
 800c13a:	3b01      	subs	r3, #1
 800c13c:	6123      	str	r3, [r4, #16]
 800c13e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c142:	fa5f fa8a 	uxtb.w	sl, sl
 800c146:	f1ba 0f02 	cmp.w	sl, #2
 800c14a:	d1ec      	bne.n	800c126 <_scanf_float+0x2c6>
 800c14c:	3d03      	subs	r5, #3
 800c14e:	b2ed      	uxtb	r5, r5
 800c150:	1b76      	subs	r6, r6, r5
 800c152:	6823      	ldr	r3, [r4, #0]
 800c154:	05da      	lsls	r2, r3, #23
 800c156:	d52f      	bpl.n	800c1b8 <_scanf_float+0x358>
 800c158:	055b      	lsls	r3, r3, #21
 800c15a:	d510      	bpl.n	800c17e <_scanf_float+0x31e>
 800c15c:	455e      	cmp	r6, fp
 800c15e:	f67f aebf 	bls.w	800bee0 <_scanf_float+0x80>
 800c162:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c166:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c16a:	463a      	mov	r2, r7
 800c16c:	4640      	mov	r0, r8
 800c16e:	4798      	blx	r3
 800c170:	6923      	ldr	r3, [r4, #16]
 800c172:	3b01      	subs	r3, #1
 800c174:	6123      	str	r3, [r4, #16]
 800c176:	e7f1      	b.n	800c15c <_scanf_float+0x2fc>
 800c178:	46aa      	mov	sl, r5
 800c17a:	9602      	str	r6, [sp, #8]
 800c17c:	e7df      	b.n	800c13e <_scanf_float+0x2de>
 800c17e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800c182:	6923      	ldr	r3, [r4, #16]
 800c184:	2965      	cmp	r1, #101	; 0x65
 800c186:	f103 33ff 	add.w	r3, r3, #4294967295
 800c18a:	f106 35ff 	add.w	r5, r6, #4294967295
 800c18e:	6123      	str	r3, [r4, #16]
 800c190:	d00c      	beq.n	800c1ac <_scanf_float+0x34c>
 800c192:	2945      	cmp	r1, #69	; 0x45
 800c194:	d00a      	beq.n	800c1ac <_scanf_float+0x34c>
 800c196:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c19a:	463a      	mov	r2, r7
 800c19c:	4640      	mov	r0, r8
 800c19e:	4798      	blx	r3
 800c1a0:	6923      	ldr	r3, [r4, #16]
 800c1a2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800c1a6:	3b01      	subs	r3, #1
 800c1a8:	1eb5      	subs	r5, r6, #2
 800c1aa:	6123      	str	r3, [r4, #16]
 800c1ac:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c1b0:	463a      	mov	r2, r7
 800c1b2:	4640      	mov	r0, r8
 800c1b4:	4798      	blx	r3
 800c1b6:	462e      	mov	r6, r5
 800c1b8:	6825      	ldr	r5, [r4, #0]
 800c1ba:	f015 0510 	ands.w	r5, r5, #16
 800c1be:	d158      	bne.n	800c272 <_scanf_float+0x412>
 800c1c0:	7035      	strb	r5, [r6, #0]
 800c1c2:	6823      	ldr	r3, [r4, #0]
 800c1c4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800c1c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c1cc:	d11c      	bne.n	800c208 <_scanf_float+0x3a8>
 800c1ce:	9b01      	ldr	r3, [sp, #4]
 800c1d0:	454b      	cmp	r3, r9
 800c1d2:	eba3 0209 	sub.w	r2, r3, r9
 800c1d6:	d124      	bne.n	800c222 <_scanf_float+0x3c2>
 800c1d8:	2200      	movs	r2, #0
 800c1da:	4659      	mov	r1, fp
 800c1dc:	4640      	mov	r0, r8
 800c1de:	f002 fb8b 	bl	800e8f8 <_strtod_r>
 800c1e2:	9b03      	ldr	r3, [sp, #12]
 800c1e4:	6821      	ldr	r1, [r4, #0]
 800c1e6:	681b      	ldr	r3, [r3, #0]
 800c1e8:	f011 0f02 	tst.w	r1, #2
 800c1ec:	ec57 6b10 	vmov	r6, r7, d0
 800c1f0:	f103 0204 	add.w	r2, r3, #4
 800c1f4:	d020      	beq.n	800c238 <_scanf_float+0x3d8>
 800c1f6:	9903      	ldr	r1, [sp, #12]
 800c1f8:	600a      	str	r2, [r1, #0]
 800c1fa:	681b      	ldr	r3, [r3, #0]
 800c1fc:	e9c3 6700 	strd	r6, r7, [r3]
 800c200:	68e3      	ldr	r3, [r4, #12]
 800c202:	3301      	adds	r3, #1
 800c204:	60e3      	str	r3, [r4, #12]
 800c206:	e66c      	b.n	800bee2 <_scanf_float+0x82>
 800c208:	9b04      	ldr	r3, [sp, #16]
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	d0e4      	beq.n	800c1d8 <_scanf_float+0x378>
 800c20e:	9905      	ldr	r1, [sp, #20]
 800c210:	230a      	movs	r3, #10
 800c212:	462a      	mov	r2, r5
 800c214:	3101      	adds	r1, #1
 800c216:	4640      	mov	r0, r8
 800c218:	f002 fbf6 	bl	800ea08 <_strtol_r>
 800c21c:	9b04      	ldr	r3, [sp, #16]
 800c21e:	9e05      	ldr	r6, [sp, #20]
 800c220:	1ac2      	subs	r2, r0, r3
 800c222:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800c226:	429e      	cmp	r6, r3
 800c228:	bf28      	it	cs
 800c22a:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800c22e:	4912      	ldr	r1, [pc, #72]	; (800c278 <_scanf_float+0x418>)
 800c230:	4630      	mov	r0, r6
 800c232:	f000 f8e7 	bl	800c404 <siprintf>
 800c236:	e7cf      	b.n	800c1d8 <_scanf_float+0x378>
 800c238:	f011 0f04 	tst.w	r1, #4
 800c23c:	9903      	ldr	r1, [sp, #12]
 800c23e:	600a      	str	r2, [r1, #0]
 800c240:	d1db      	bne.n	800c1fa <_scanf_float+0x39a>
 800c242:	f8d3 8000 	ldr.w	r8, [r3]
 800c246:	ee10 2a10 	vmov	r2, s0
 800c24a:	ee10 0a10 	vmov	r0, s0
 800c24e:	463b      	mov	r3, r7
 800c250:	4639      	mov	r1, r7
 800c252:	f7f4 fc8b 	bl	8000b6c <__aeabi_dcmpun>
 800c256:	b128      	cbz	r0, 800c264 <_scanf_float+0x404>
 800c258:	4808      	ldr	r0, [pc, #32]	; (800c27c <_scanf_float+0x41c>)
 800c25a:	f000 f9c7 	bl	800c5ec <nanf>
 800c25e:	ed88 0a00 	vstr	s0, [r8]
 800c262:	e7cd      	b.n	800c200 <_scanf_float+0x3a0>
 800c264:	4630      	mov	r0, r6
 800c266:	4639      	mov	r1, r7
 800c268:	f7f4 fcde 	bl	8000c28 <__aeabi_d2f>
 800c26c:	f8c8 0000 	str.w	r0, [r8]
 800c270:	e7c6      	b.n	800c200 <_scanf_float+0x3a0>
 800c272:	2500      	movs	r5, #0
 800c274:	e635      	b.n	800bee2 <_scanf_float+0x82>
 800c276:	bf00      	nop
 800c278:	0800fd30 	.word	0x0800fd30
 800c27c:	080100c5 	.word	0x080100c5

0800c280 <std>:
 800c280:	2300      	movs	r3, #0
 800c282:	b510      	push	{r4, lr}
 800c284:	4604      	mov	r4, r0
 800c286:	e9c0 3300 	strd	r3, r3, [r0]
 800c28a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c28e:	6083      	str	r3, [r0, #8]
 800c290:	8181      	strh	r1, [r0, #12]
 800c292:	6643      	str	r3, [r0, #100]	; 0x64
 800c294:	81c2      	strh	r2, [r0, #14]
 800c296:	6183      	str	r3, [r0, #24]
 800c298:	4619      	mov	r1, r3
 800c29a:	2208      	movs	r2, #8
 800c29c:	305c      	adds	r0, #92	; 0x5c
 800c29e:	f000 f914 	bl	800c4ca <memset>
 800c2a2:	4b0d      	ldr	r3, [pc, #52]	; (800c2d8 <std+0x58>)
 800c2a4:	6263      	str	r3, [r4, #36]	; 0x24
 800c2a6:	4b0d      	ldr	r3, [pc, #52]	; (800c2dc <std+0x5c>)
 800c2a8:	62a3      	str	r3, [r4, #40]	; 0x28
 800c2aa:	4b0d      	ldr	r3, [pc, #52]	; (800c2e0 <std+0x60>)
 800c2ac:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c2ae:	4b0d      	ldr	r3, [pc, #52]	; (800c2e4 <std+0x64>)
 800c2b0:	6323      	str	r3, [r4, #48]	; 0x30
 800c2b2:	4b0d      	ldr	r3, [pc, #52]	; (800c2e8 <std+0x68>)
 800c2b4:	6224      	str	r4, [r4, #32]
 800c2b6:	429c      	cmp	r4, r3
 800c2b8:	d006      	beq.n	800c2c8 <std+0x48>
 800c2ba:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800c2be:	4294      	cmp	r4, r2
 800c2c0:	d002      	beq.n	800c2c8 <std+0x48>
 800c2c2:	33d0      	adds	r3, #208	; 0xd0
 800c2c4:	429c      	cmp	r4, r3
 800c2c6:	d105      	bne.n	800c2d4 <std+0x54>
 800c2c8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c2cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c2d0:	f000 b988 	b.w	800c5e4 <__retarget_lock_init_recursive>
 800c2d4:	bd10      	pop	{r4, pc}
 800c2d6:	bf00      	nop
 800c2d8:	0800c445 	.word	0x0800c445
 800c2dc:	0800c467 	.word	0x0800c467
 800c2e0:	0800c49f 	.word	0x0800c49f
 800c2e4:	0800c4c3 	.word	0x0800c4c3
 800c2e8:	20002208 	.word	0x20002208

0800c2ec <stdio_exit_handler>:
 800c2ec:	4a02      	ldr	r2, [pc, #8]	; (800c2f8 <stdio_exit_handler+0xc>)
 800c2ee:	4903      	ldr	r1, [pc, #12]	; (800c2fc <stdio_exit_handler+0x10>)
 800c2f0:	4803      	ldr	r0, [pc, #12]	; (800c300 <stdio_exit_handler+0x14>)
 800c2f2:	f000 b869 	b.w	800c3c8 <_fwalk_sglue>
 800c2f6:	bf00      	nop
 800c2f8:	2000010c 	.word	0x2000010c
 800c2fc:	0800edc9 	.word	0x0800edc9
 800c300:	20000118 	.word	0x20000118

0800c304 <cleanup_stdio>:
 800c304:	6841      	ldr	r1, [r0, #4]
 800c306:	4b0c      	ldr	r3, [pc, #48]	; (800c338 <cleanup_stdio+0x34>)
 800c308:	4299      	cmp	r1, r3
 800c30a:	b510      	push	{r4, lr}
 800c30c:	4604      	mov	r4, r0
 800c30e:	d001      	beq.n	800c314 <cleanup_stdio+0x10>
 800c310:	f002 fd5a 	bl	800edc8 <_fflush_r>
 800c314:	68a1      	ldr	r1, [r4, #8]
 800c316:	4b09      	ldr	r3, [pc, #36]	; (800c33c <cleanup_stdio+0x38>)
 800c318:	4299      	cmp	r1, r3
 800c31a:	d002      	beq.n	800c322 <cleanup_stdio+0x1e>
 800c31c:	4620      	mov	r0, r4
 800c31e:	f002 fd53 	bl	800edc8 <_fflush_r>
 800c322:	68e1      	ldr	r1, [r4, #12]
 800c324:	4b06      	ldr	r3, [pc, #24]	; (800c340 <cleanup_stdio+0x3c>)
 800c326:	4299      	cmp	r1, r3
 800c328:	d004      	beq.n	800c334 <cleanup_stdio+0x30>
 800c32a:	4620      	mov	r0, r4
 800c32c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c330:	f002 bd4a 	b.w	800edc8 <_fflush_r>
 800c334:	bd10      	pop	{r4, pc}
 800c336:	bf00      	nop
 800c338:	20002208 	.word	0x20002208
 800c33c:	20002270 	.word	0x20002270
 800c340:	200022d8 	.word	0x200022d8

0800c344 <global_stdio_init.part.0>:
 800c344:	b510      	push	{r4, lr}
 800c346:	4b0b      	ldr	r3, [pc, #44]	; (800c374 <global_stdio_init.part.0+0x30>)
 800c348:	4c0b      	ldr	r4, [pc, #44]	; (800c378 <global_stdio_init.part.0+0x34>)
 800c34a:	4a0c      	ldr	r2, [pc, #48]	; (800c37c <global_stdio_init.part.0+0x38>)
 800c34c:	601a      	str	r2, [r3, #0]
 800c34e:	4620      	mov	r0, r4
 800c350:	2200      	movs	r2, #0
 800c352:	2104      	movs	r1, #4
 800c354:	f7ff ff94 	bl	800c280 <std>
 800c358:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800c35c:	2201      	movs	r2, #1
 800c35e:	2109      	movs	r1, #9
 800c360:	f7ff ff8e 	bl	800c280 <std>
 800c364:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800c368:	2202      	movs	r2, #2
 800c36a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c36e:	2112      	movs	r1, #18
 800c370:	f7ff bf86 	b.w	800c280 <std>
 800c374:	20002340 	.word	0x20002340
 800c378:	20002208 	.word	0x20002208
 800c37c:	0800c2ed 	.word	0x0800c2ed

0800c380 <__sfp_lock_acquire>:
 800c380:	4801      	ldr	r0, [pc, #4]	; (800c388 <__sfp_lock_acquire+0x8>)
 800c382:	f000 b930 	b.w	800c5e6 <__retarget_lock_acquire_recursive>
 800c386:	bf00      	nop
 800c388:	20002349 	.word	0x20002349

0800c38c <__sfp_lock_release>:
 800c38c:	4801      	ldr	r0, [pc, #4]	; (800c394 <__sfp_lock_release+0x8>)
 800c38e:	f000 b92b 	b.w	800c5e8 <__retarget_lock_release_recursive>
 800c392:	bf00      	nop
 800c394:	20002349 	.word	0x20002349

0800c398 <__sinit>:
 800c398:	b510      	push	{r4, lr}
 800c39a:	4604      	mov	r4, r0
 800c39c:	f7ff fff0 	bl	800c380 <__sfp_lock_acquire>
 800c3a0:	6a23      	ldr	r3, [r4, #32]
 800c3a2:	b11b      	cbz	r3, 800c3ac <__sinit+0x14>
 800c3a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c3a8:	f7ff bff0 	b.w	800c38c <__sfp_lock_release>
 800c3ac:	4b04      	ldr	r3, [pc, #16]	; (800c3c0 <__sinit+0x28>)
 800c3ae:	6223      	str	r3, [r4, #32]
 800c3b0:	4b04      	ldr	r3, [pc, #16]	; (800c3c4 <__sinit+0x2c>)
 800c3b2:	681b      	ldr	r3, [r3, #0]
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	d1f5      	bne.n	800c3a4 <__sinit+0xc>
 800c3b8:	f7ff ffc4 	bl	800c344 <global_stdio_init.part.0>
 800c3bc:	e7f2      	b.n	800c3a4 <__sinit+0xc>
 800c3be:	bf00      	nop
 800c3c0:	0800c305 	.word	0x0800c305
 800c3c4:	20002340 	.word	0x20002340

0800c3c8 <_fwalk_sglue>:
 800c3c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c3cc:	4607      	mov	r7, r0
 800c3ce:	4688      	mov	r8, r1
 800c3d0:	4614      	mov	r4, r2
 800c3d2:	2600      	movs	r6, #0
 800c3d4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c3d8:	f1b9 0901 	subs.w	r9, r9, #1
 800c3dc:	d505      	bpl.n	800c3ea <_fwalk_sglue+0x22>
 800c3de:	6824      	ldr	r4, [r4, #0]
 800c3e0:	2c00      	cmp	r4, #0
 800c3e2:	d1f7      	bne.n	800c3d4 <_fwalk_sglue+0xc>
 800c3e4:	4630      	mov	r0, r6
 800c3e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c3ea:	89ab      	ldrh	r3, [r5, #12]
 800c3ec:	2b01      	cmp	r3, #1
 800c3ee:	d907      	bls.n	800c400 <_fwalk_sglue+0x38>
 800c3f0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c3f4:	3301      	adds	r3, #1
 800c3f6:	d003      	beq.n	800c400 <_fwalk_sglue+0x38>
 800c3f8:	4629      	mov	r1, r5
 800c3fa:	4638      	mov	r0, r7
 800c3fc:	47c0      	blx	r8
 800c3fe:	4306      	orrs	r6, r0
 800c400:	3568      	adds	r5, #104	; 0x68
 800c402:	e7e9      	b.n	800c3d8 <_fwalk_sglue+0x10>

0800c404 <siprintf>:
 800c404:	b40e      	push	{r1, r2, r3}
 800c406:	b500      	push	{lr}
 800c408:	b09c      	sub	sp, #112	; 0x70
 800c40a:	ab1d      	add	r3, sp, #116	; 0x74
 800c40c:	9002      	str	r0, [sp, #8]
 800c40e:	9006      	str	r0, [sp, #24]
 800c410:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c414:	4809      	ldr	r0, [pc, #36]	; (800c43c <siprintf+0x38>)
 800c416:	9107      	str	r1, [sp, #28]
 800c418:	9104      	str	r1, [sp, #16]
 800c41a:	4909      	ldr	r1, [pc, #36]	; (800c440 <siprintf+0x3c>)
 800c41c:	f853 2b04 	ldr.w	r2, [r3], #4
 800c420:	9105      	str	r1, [sp, #20]
 800c422:	6800      	ldr	r0, [r0, #0]
 800c424:	9301      	str	r3, [sp, #4]
 800c426:	a902      	add	r1, sp, #8
 800c428:	f002 fb4a 	bl	800eac0 <_svfiprintf_r>
 800c42c:	9b02      	ldr	r3, [sp, #8]
 800c42e:	2200      	movs	r2, #0
 800c430:	701a      	strb	r2, [r3, #0]
 800c432:	b01c      	add	sp, #112	; 0x70
 800c434:	f85d eb04 	ldr.w	lr, [sp], #4
 800c438:	b003      	add	sp, #12
 800c43a:	4770      	bx	lr
 800c43c:	20000164 	.word	0x20000164
 800c440:	ffff0208 	.word	0xffff0208

0800c444 <__sread>:
 800c444:	b510      	push	{r4, lr}
 800c446:	460c      	mov	r4, r1
 800c448:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c44c:	f000 f86c 	bl	800c528 <_read_r>
 800c450:	2800      	cmp	r0, #0
 800c452:	bfab      	itete	ge
 800c454:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c456:	89a3      	ldrhlt	r3, [r4, #12]
 800c458:	181b      	addge	r3, r3, r0
 800c45a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c45e:	bfac      	ite	ge
 800c460:	6563      	strge	r3, [r4, #84]	; 0x54
 800c462:	81a3      	strhlt	r3, [r4, #12]
 800c464:	bd10      	pop	{r4, pc}

0800c466 <__swrite>:
 800c466:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c46a:	461f      	mov	r7, r3
 800c46c:	898b      	ldrh	r3, [r1, #12]
 800c46e:	05db      	lsls	r3, r3, #23
 800c470:	4605      	mov	r5, r0
 800c472:	460c      	mov	r4, r1
 800c474:	4616      	mov	r6, r2
 800c476:	d505      	bpl.n	800c484 <__swrite+0x1e>
 800c478:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c47c:	2302      	movs	r3, #2
 800c47e:	2200      	movs	r2, #0
 800c480:	f000 f840 	bl	800c504 <_lseek_r>
 800c484:	89a3      	ldrh	r3, [r4, #12]
 800c486:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c48a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c48e:	81a3      	strh	r3, [r4, #12]
 800c490:	4632      	mov	r2, r6
 800c492:	463b      	mov	r3, r7
 800c494:	4628      	mov	r0, r5
 800c496:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c49a:	f000 b867 	b.w	800c56c <_write_r>

0800c49e <__sseek>:
 800c49e:	b510      	push	{r4, lr}
 800c4a0:	460c      	mov	r4, r1
 800c4a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c4a6:	f000 f82d 	bl	800c504 <_lseek_r>
 800c4aa:	1c43      	adds	r3, r0, #1
 800c4ac:	89a3      	ldrh	r3, [r4, #12]
 800c4ae:	bf15      	itete	ne
 800c4b0:	6560      	strne	r0, [r4, #84]	; 0x54
 800c4b2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c4b6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c4ba:	81a3      	strheq	r3, [r4, #12]
 800c4bc:	bf18      	it	ne
 800c4be:	81a3      	strhne	r3, [r4, #12]
 800c4c0:	bd10      	pop	{r4, pc}

0800c4c2 <__sclose>:
 800c4c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c4c6:	f000 b80d 	b.w	800c4e4 <_close_r>

0800c4ca <memset>:
 800c4ca:	4402      	add	r2, r0
 800c4cc:	4603      	mov	r3, r0
 800c4ce:	4293      	cmp	r3, r2
 800c4d0:	d100      	bne.n	800c4d4 <memset+0xa>
 800c4d2:	4770      	bx	lr
 800c4d4:	f803 1b01 	strb.w	r1, [r3], #1
 800c4d8:	e7f9      	b.n	800c4ce <memset+0x4>
	...

0800c4dc <_localeconv_r>:
 800c4dc:	4800      	ldr	r0, [pc, #0]	; (800c4e0 <_localeconv_r+0x4>)
 800c4de:	4770      	bx	lr
 800c4e0:	20000258 	.word	0x20000258

0800c4e4 <_close_r>:
 800c4e4:	b538      	push	{r3, r4, r5, lr}
 800c4e6:	4d06      	ldr	r5, [pc, #24]	; (800c500 <_close_r+0x1c>)
 800c4e8:	2300      	movs	r3, #0
 800c4ea:	4604      	mov	r4, r0
 800c4ec:	4608      	mov	r0, r1
 800c4ee:	602b      	str	r3, [r5, #0]
 800c4f0:	f7f5 fc27 	bl	8001d42 <_close>
 800c4f4:	1c43      	adds	r3, r0, #1
 800c4f6:	d102      	bne.n	800c4fe <_close_r+0x1a>
 800c4f8:	682b      	ldr	r3, [r5, #0]
 800c4fa:	b103      	cbz	r3, 800c4fe <_close_r+0x1a>
 800c4fc:	6023      	str	r3, [r4, #0]
 800c4fe:	bd38      	pop	{r3, r4, r5, pc}
 800c500:	20002344 	.word	0x20002344

0800c504 <_lseek_r>:
 800c504:	b538      	push	{r3, r4, r5, lr}
 800c506:	4d07      	ldr	r5, [pc, #28]	; (800c524 <_lseek_r+0x20>)
 800c508:	4604      	mov	r4, r0
 800c50a:	4608      	mov	r0, r1
 800c50c:	4611      	mov	r1, r2
 800c50e:	2200      	movs	r2, #0
 800c510:	602a      	str	r2, [r5, #0]
 800c512:	461a      	mov	r2, r3
 800c514:	f7f5 fc3c 	bl	8001d90 <_lseek>
 800c518:	1c43      	adds	r3, r0, #1
 800c51a:	d102      	bne.n	800c522 <_lseek_r+0x1e>
 800c51c:	682b      	ldr	r3, [r5, #0]
 800c51e:	b103      	cbz	r3, 800c522 <_lseek_r+0x1e>
 800c520:	6023      	str	r3, [r4, #0]
 800c522:	bd38      	pop	{r3, r4, r5, pc}
 800c524:	20002344 	.word	0x20002344

0800c528 <_read_r>:
 800c528:	b538      	push	{r3, r4, r5, lr}
 800c52a:	4d07      	ldr	r5, [pc, #28]	; (800c548 <_read_r+0x20>)
 800c52c:	4604      	mov	r4, r0
 800c52e:	4608      	mov	r0, r1
 800c530:	4611      	mov	r1, r2
 800c532:	2200      	movs	r2, #0
 800c534:	602a      	str	r2, [r5, #0]
 800c536:	461a      	mov	r2, r3
 800c538:	f7f5 fbca 	bl	8001cd0 <_read>
 800c53c:	1c43      	adds	r3, r0, #1
 800c53e:	d102      	bne.n	800c546 <_read_r+0x1e>
 800c540:	682b      	ldr	r3, [r5, #0]
 800c542:	b103      	cbz	r3, 800c546 <_read_r+0x1e>
 800c544:	6023      	str	r3, [r4, #0]
 800c546:	bd38      	pop	{r3, r4, r5, pc}
 800c548:	20002344 	.word	0x20002344

0800c54c <_sbrk_r>:
 800c54c:	b538      	push	{r3, r4, r5, lr}
 800c54e:	4d06      	ldr	r5, [pc, #24]	; (800c568 <_sbrk_r+0x1c>)
 800c550:	2300      	movs	r3, #0
 800c552:	4604      	mov	r4, r0
 800c554:	4608      	mov	r0, r1
 800c556:	602b      	str	r3, [r5, #0]
 800c558:	f7f5 fc28 	bl	8001dac <_sbrk>
 800c55c:	1c43      	adds	r3, r0, #1
 800c55e:	d102      	bne.n	800c566 <_sbrk_r+0x1a>
 800c560:	682b      	ldr	r3, [r5, #0]
 800c562:	b103      	cbz	r3, 800c566 <_sbrk_r+0x1a>
 800c564:	6023      	str	r3, [r4, #0]
 800c566:	bd38      	pop	{r3, r4, r5, pc}
 800c568:	20002344 	.word	0x20002344

0800c56c <_write_r>:
 800c56c:	b538      	push	{r3, r4, r5, lr}
 800c56e:	4d07      	ldr	r5, [pc, #28]	; (800c58c <_write_r+0x20>)
 800c570:	4604      	mov	r4, r0
 800c572:	4608      	mov	r0, r1
 800c574:	4611      	mov	r1, r2
 800c576:	2200      	movs	r2, #0
 800c578:	602a      	str	r2, [r5, #0]
 800c57a:	461a      	mov	r2, r3
 800c57c:	f7f5 fbc5 	bl	8001d0a <_write>
 800c580:	1c43      	adds	r3, r0, #1
 800c582:	d102      	bne.n	800c58a <_write_r+0x1e>
 800c584:	682b      	ldr	r3, [r5, #0]
 800c586:	b103      	cbz	r3, 800c58a <_write_r+0x1e>
 800c588:	6023      	str	r3, [r4, #0]
 800c58a:	bd38      	pop	{r3, r4, r5, pc}
 800c58c:	20002344 	.word	0x20002344

0800c590 <__errno>:
 800c590:	4b01      	ldr	r3, [pc, #4]	; (800c598 <__errno+0x8>)
 800c592:	6818      	ldr	r0, [r3, #0]
 800c594:	4770      	bx	lr
 800c596:	bf00      	nop
 800c598:	20000164 	.word	0x20000164

0800c59c <__libc_init_array>:
 800c59c:	b570      	push	{r4, r5, r6, lr}
 800c59e:	4d0d      	ldr	r5, [pc, #52]	; (800c5d4 <__libc_init_array+0x38>)
 800c5a0:	4c0d      	ldr	r4, [pc, #52]	; (800c5d8 <__libc_init_array+0x3c>)
 800c5a2:	1b64      	subs	r4, r4, r5
 800c5a4:	10a4      	asrs	r4, r4, #2
 800c5a6:	2600      	movs	r6, #0
 800c5a8:	42a6      	cmp	r6, r4
 800c5aa:	d109      	bne.n	800c5c0 <__libc_init_array+0x24>
 800c5ac:	4d0b      	ldr	r5, [pc, #44]	; (800c5dc <__libc_init_array+0x40>)
 800c5ae:	4c0c      	ldr	r4, [pc, #48]	; (800c5e0 <__libc_init_array+0x44>)
 800c5b0:	f003 fb12 	bl	800fbd8 <_init>
 800c5b4:	1b64      	subs	r4, r4, r5
 800c5b6:	10a4      	asrs	r4, r4, #2
 800c5b8:	2600      	movs	r6, #0
 800c5ba:	42a6      	cmp	r6, r4
 800c5bc:	d105      	bne.n	800c5ca <__libc_init_array+0x2e>
 800c5be:	bd70      	pop	{r4, r5, r6, pc}
 800c5c0:	f855 3b04 	ldr.w	r3, [r5], #4
 800c5c4:	4798      	blx	r3
 800c5c6:	3601      	adds	r6, #1
 800c5c8:	e7ee      	b.n	800c5a8 <__libc_init_array+0xc>
 800c5ca:	f855 3b04 	ldr.w	r3, [r5], #4
 800c5ce:	4798      	blx	r3
 800c5d0:	3601      	adds	r6, #1
 800c5d2:	e7f2      	b.n	800c5ba <__libc_init_array+0x1e>
 800c5d4:	08010130 	.word	0x08010130
 800c5d8:	08010130 	.word	0x08010130
 800c5dc:	08010130 	.word	0x08010130
 800c5e0:	08010134 	.word	0x08010134

0800c5e4 <__retarget_lock_init_recursive>:
 800c5e4:	4770      	bx	lr

0800c5e6 <__retarget_lock_acquire_recursive>:
 800c5e6:	4770      	bx	lr

0800c5e8 <__retarget_lock_release_recursive>:
 800c5e8:	4770      	bx	lr
	...

0800c5ec <nanf>:
 800c5ec:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800c5f4 <nanf+0x8>
 800c5f0:	4770      	bx	lr
 800c5f2:	bf00      	nop
 800c5f4:	7fc00000 	.word	0x7fc00000

0800c5f8 <quorem>:
 800c5f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5fc:	6903      	ldr	r3, [r0, #16]
 800c5fe:	690c      	ldr	r4, [r1, #16]
 800c600:	42a3      	cmp	r3, r4
 800c602:	4607      	mov	r7, r0
 800c604:	db7e      	blt.n	800c704 <quorem+0x10c>
 800c606:	3c01      	subs	r4, #1
 800c608:	f101 0814 	add.w	r8, r1, #20
 800c60c:	f100 0514 	add.w	r5, r0, #20
 800c610:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c614:	9301      	str	r3, [sp, #4]
 800c616:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c61a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c61e:	3301      	adds	r3, #1
 800c620:	429a      	cmp	r2, r3
 800c622:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800c626:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c62a:	fbb2 f6f3 	udiv	r6, r2, r3
 800c62e:	d331      	bcc.n	800c694 <quorem+0x9c>
 800c630:	f04f 0e00 	mov.w	lr, #0
 800c634:	4640      	mov	r0, r8
 800c636:	46ac      	mov	ip, r5
 800c638:	46f2      	mov	sl, lr
 800c63a:	f850 2b04 	ldr.w	r2, [r0], #4
 800c63e:	b293      	uxth	r3, r2
 800c640:	fb06 e303 	mla	r3, r6, r3, lr
 800c644:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c648:	0c1a      	lsrs	r2, r3, #16
 800c64a:	b29b      	uxth	r3, r3
 800c64c:	ebaa 0303 	sub.w	r3, sl, r3
 800c650:	f8dc a000 	ldr.w	sl, [ip]
 800c654:	fa13 f38a 	uxtah	r3, r3, sl
 800c658:	fb06 220e 	mla	r2, r6, lr, r2
 800c65c:	9300      	str	r3, [sp, #0]
 800c65e:	9b00      	ldr	r3, [sp, #0]
 800c660:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c664:	b292      	uxth	r2, r2
 800c666:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800c66a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c66e:	f8bd 3000 	ldrh.w	r3, [sp]
 800c672:	4581      	cmp	r9, r0
 800c674:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c678:	f84c 3b04 	str.w	r3, [ip], #4
 800c67c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800c680:	d2db      	bcs.n	800c63a <quorem+0x42>
 800c682:	f855 300b 	ldr.w	r3, [r5, fp]
 800c686:	b92b      	cbnz	r3, 800c694 <quorem+0x9c>
 800c688:	9b01      	ldr	r3, [sp, #4]
 800c68a:	3b04      	subs	r3, #4
 800c68c:	429d      	cmp	r5, r3
 800c68e:	461a      	mov	r2, r3
 800c690:	d32c      	bcc.n	800c6ec <quorem+0xf4>
 800c692:	613c      	str	r4, [r7, #16]
 800c694:	4638      	mov	r0, r7
 800c696:	f001 f93b 	bl	800d910 <__mcmp>
 800c69a:	2800      	cmp	r0, #0
 800c69c:	db22      	blt.n	800c6e4 <quorem+0xec>
 800c69e:	3601      	adds	r6, #1
 800c6a0:	4629      	mov	r1, r5
 800c6a2:	2000      	movs	r0, #0
 800c6a4:	f858 2b04 	ldr.w	r2, [r8], #4
 800c6a8:	f8d1 c000 	ldr.w	ip, [r1]
 800c6ac:	b293      	uxth	r3, r2
 800c6ae:	1ac3      	subs	r3, r0, r3
 800c6b0:	0c12      	lsrs	r2, r2, #16
 800c6b2:	fa13 f38c 	uxtah	r3, r3, ip
 800c6b6:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800c6ba:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c6be:	b29b      	uxth	r3, r3
 800c6c0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c6c4:	45c1      	cmp	r9, r8
 800c6c6:	f841 3b04 	str.w	r3, [r1], #4
 800c6ca:	ea4f 4022 	mov.w	r0, r2, asr #16
 800c6ce:	d2e9      	bcs.n	800c6a4 <quorem+0xac>
 800c6d0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c6d4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c6d8:	b922      	cbnz	r2, 800c6e4 <quorem+0xec>
 800c6da:	3b04      	subs	r3, #4
 800c6dc:	429d      	cmp	r5, r3
 800c6de:	461a      	mov	r2, r3
 800c6e0:	d30a      	bcc.n	800c6f8 <quorem+0x100>
 800c6e2:	613c      	str	r4, [r7, #16]
 800c6e4:	4630      	mov	r0, r6
 800c6e6:	b003      	add	sp, #12
 800c6e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c6ec:	6812      	ldr	r2, [r2, #0]
 800c6ee:	3b04      	subs	r3, #4
 800c6f0:	2a00      	cmp	r2, #0
 800c6f2:	d1ce      	bne.n	800c692 <quorem+0x9a>
 800c6f4:	3c01      	subs	r4, #1
 800c6f6:	e7c9      	b.n	800c68c <quorem+0x94>
 800c6f8:	6812      	ldr	r2, [r2, #0]
 800c6fa:	3b04      	subs	r3, #4
 800c6fc:	2a00      	cmp	r2, #0
 800c6fe:	d1f0      	bne.n	800c6e2 <quorem+0xea>
 800c700:	3c01      	subs	r4, #1
 800c702:	e7eb      	b.n	800c6dc <quorem+0xe4>
 800c704:	2000      	movs	r0, #0
 800c706:	e7ee      	b.n	800c6e6 <quorem+0xee>

0800c708 <_dtoa_r>:
 800c708:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c70c:	ed2d 8b04 	vpush	{d8-d9}
 800c710:	69c5      	ldr	r5, [r0, #28]
 800c712:	b093      	sub	sp, #76	; 0x4c
 800c714:	ed8d 0b02 	vstr	d0, [sp, #8]
 800c718:	ec57 6b10 	vmov	r6, r7, d0
 800c71c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800c720:	9107      	str	r1, [sp, #28]
 800c722:	4604      	mov	r4, r0
 800c724:	920a      	str	r2, [sp, #40]	; 0x28
 800c726:	930d      	str	r3, [sp, #52]	; 0x34
 800c728:	b975      	cbnz	r5, 800c748 <_dtoa_r+0x40>
 800c72a:	2010      	movs	r0, #16
 800c72c:	f7fe fe76 	bl	800b41c <malloc>
 800c730:	4602      	mov	r2, r0
 800c732:	61e0      	str	r0, [r4, #28]
 800c734:	b920      	cbnz	r0, 800c740 <_dtoa_r+0x38>
 800c736:	4bae      	ldr	r3, [pc, #696]	; (800c9f0 <_dtoa_r+0x2e8>)
 800c738:	21ef      	movs	r1, #239	; 0xef
 800c73a:	48ae      	ldr	r0, [pc, #696]	; (800c9f4 <_dtoa_r+0x2ec>)
 800c73c:	f002 fbb0 	bl	800eea0 <__assert_func>
 800c740:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c744:	6005      	str	r5, [r0, #0]
 800c746:	60c5      	str	r5, [r0, #12]
 800c748:	69e3      	ldr	r3, [r4, #28]
 800c74a:	6819      	ldr	r1, [r3, #0]
 800c74c:	b151      	cbz	r1, 800c764 <_dtoa_r+0x5c>
 800c74e:	685a      	ldr	r2, [r3, #4]
 800c750:	604a      	str	r2, [r1, #4]
 800c752:	2301      	movs	r3, #1
 800c754:	4093      	lsls	r3, r2
 800c756:	608b      	str	r3, [r1, #8]
 800c758:	4620      	mov	r0, r4
 800c75a:	f000 fe53 	bl	800d404 <_Bfree>
 800c75e:	69e3      	ldr	r3, [r4, #28]
 800c760:	2200      	movs	r2, #0
 800c762:	601a      	str	r2, [r3, #0]
 800c764:	1e3b      	subs	r3, r7, #0
 800c766:	bfbb      	ittet	lt
 800c768:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800c76c:	9303      	strlt	r3, [sp, #12]
 800c76e:	2300      	movge	r3, #0
 800c770:	2201      	movlt	r2, #1
 800c772:	bfac      	ite	ge
 800c774:	f8c8 3000 	strge.w	r3, [r8]
 800c778:	f8c8 2000 	strlt.w	r2, [r8]
 800c77c:	4b9e      	ldr	r3, [pc, #632]	; (800c9f8 <_dtoa_r+0x2f0>)
 800c77e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800c782:	ea33 0308 	bics.w	r3, r3, r8
 800c786:	d11b      	bne.n	800c7c0 <_dtoa_r+0xb8>
 800c788:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c78a:	f242 730f 	movw	r3, #9999	; 0x270f
 800c78e:	6013      	str	r3, [r2, #0]
 800c790:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800c794:	4333      	orrs	r3, r6
 800c796:	f000 8593 	beq.w	800d2c0 <_dtoa_r+0xbb8>
 800c79a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c79c:	b963      	cbnz	r3, 800c7b8 <_dtoa_r+0xb0>
 800c79e:	4b97      	ldr	r3, [pc, #604]	; (800c9fc <_dtoa_r+0x2f4>)
 800c7a0:	e027      	b.n	800c7f2 <_dtoa_r+0xea>
 800c7a2:	4b97      	ldr	r3, [pc, #604]	; (800ca00 <_dtoa_r+0x2f8>)
 800c7a4:	9300      	str	r3, [sp, #0]
 800c7a6:	3308      	adds	r3, #8
 800c7a8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c7aa:	6013      	str	r3, [r2, #0]
 800c7ac:	9800      	ldr	r0, [sp, #0]
 800c7ae:	b013      	add	sp, #76	; 0x4c
 800c7b0:	ecbd 8b04 	vpop	{d8-d9}
 800c7b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c7b8:	4b90      	ldr	r3, [pc, #576]	; (800c9fc <_dtoa_r+0x2f4>)
 800c7ba:	9300      	str	r3, [sp, #0]
 800c7bc:	3303      	adds	r3, #3
 800c7be:	e7f3      	b.n	800c7a8 <_dtoa_r+0xa0>
 800c7c0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c7c4:	2200      	movs	r2, #0
 800c7c6:	ec51 0b17 	vmov	r0, r1, d7
 800c7ca:	eeb0 8a47 	vmov.f32	s16, s14
 800c7ce:	eef0 8a67 	vmov.f32	s17, s15
 800c7d2:	2300      	movs	r3, #0
 800c7d4:	f7f4 f998 	bl	8000b08 <__aeabi_dcmpeq>
 800c7d8:	4681      	mov	r9, r0
 800c7da:	b160      	cbz	r0, 800c7f6 <_dtoa_r+0xee>
 800c7dc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c7de:	2301      	movs	r3, #1
 800c7e0:	6013      	str	r3, [r2, #0]
 800c7e2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	f000 8568 	beq.w	800d2ba <_dtoa_r+0xbb2>
 800c7ea:	4b86      	ldr	r3, [pc, #536]	; (800ca04 <_dtoa_r+0x2fc>)
 800c7ec:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c7ee:	6013      	str	r3, [r2, #0]
 800c7f0:	3b01      	subs	r3, #1
 800c7f2:	9300      	str	r3, [sp, #0]
 800c7f4:	e7da      	b.n	800c7ac <_dtoa_r+0xa4>
 800c7f6:	aa10      	add	r2, sp, #64	; 0x40
 800c7f8:	a911      	add	r1, sp, #68	; 0x44
 800c7fa:	4620      	mov	r0, r4
 800c7fc:	eeb0 0a48 	vmov.f32	s0, s16
 800c800:	eef0 0a68 	vmov.f32	s1, s17
 800c804:	f001 f99a 	bl	800db3c <__d2b>
 800c808:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800c80c:	4682      	mov	sl, r0
 800c80e:	2d00      	cmp	r5, #0
 800c810:	d07f      	beq.n	800c912 <_dtoa_r+0x20a>
 800c812:	ee18 3a90 	vmov	r3, s17
 800c816:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c81a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800c81e:	ec51 0b18 	vmov	r0, r1, d8
 800c822:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800c826:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800c82a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800c82e:	4619      	mov	r1, r3
 800c830:	2200      	movs	r2, #0
 800c832:	4b75      	ldr	r3, [pc, #468]	; (800ca08 <_dtoa_r+0x300>)
 800c834:	f7f3 fd48 	bl	80002c8 <__aeabi_dsub>
 800c838:	a367      	add	r3, pc, #412	; (adr r3, 800c9d8 <_dtoa_r+0x2d0>)
 800c83a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c83e:	f7f3 fefb 	bl	8000638 <__aeabi_dmul>
 800c842:	a367      	add	r3, pc, #412	; (adr r3, 800c9e0 <_dtoa_r+0x2d8>)
 800c844:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c848:	f7f3 fd40 	bl	80002cc <__adddf3>
 800c84c:	4606      	mov	r6, r0
 800c84e:	4628      	mov	r0, r5
 800c850:	460f      	mov	r7, r1
 800c852:	f7f3 fe87 	bl	8000564 <__aeabi_i2d>
 800c856:	a364      	add	r3, pc, #400	; (adr r3, 800c9e8 <_dtoa_r+0x2e0>)
 800c858:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c85c:	f7f3 feec 	bl	8000638 <__aeabi_dmul>
 800c860:	4602      	mov	r2, r0
 800c862:	460b      	mov	r3, r1
 800c864:	4630      	mov	r0, r6
 800c866:	4639      	mov	r1, r7
 800c868:	f7f3 fd30 	bl	80002cc <__adddf3>
 800c86c:	4606      	mov	r6, r0
 800c86e:	460f      	mov	r7, r1
 800c870:	f7f4 f992 	bl	8000b98 <__aeabi_d2iz>
 800c874:	2200      	movs	r2, #0
 800c876:	4683      	mov	fp, r0
 800c878:	2300      	movs	r3, #0
 800c87a:	4630      	mov	r0, r6
 800c87c:	4639      	mov	r1, r7
 800c87e:	f7f4 f94d 	bl	8000b1c <__aeabi_dcmplt>
 800c882:	b148      	cbz	r0, 800c898 <_dtoa_r+0x190>
 800c884:	4658      	mov	r0, fp
 800c886:	f7f3 fe6d 	bl	8000564 <__aeabi_i2d>
 800c88a:	4632      	mov	r2, r6
 800c88c:	463b      	mov	r3, r7
 800c88e:	f7f4 f93b 	bl	8000b08 <__aeabi_dcmpeq>
 800c892:	b908      	cbnz	r0, 800c898 <_dtoa_r+0x190>
 800c894:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c898:	f1bb 0f16 	cmp.w	fp, #22
 800c89c:	d857      	bhi.n	800c94e <_dtoa_r+0x246>
 800c89e:	4b5b      	ldr	r3, [pc, #364]	; (800ca0c <_dtoa_r+0x304>)
 800c8a0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800c8a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8a8:	ec51 0b18 	vmov	r0, r1, d8
 800c8ac:	f7f4 f936 	bl	8000b1c <__aeabi_dcmplt>
 800c8b0:	2800      	cmp	r0, #0
 800c8b2:	d04e      	beq.n	800c952 <_dtoa_r+0x24a>
 800c8b4:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c8b8:	2300      	movs	r3, #0
 800c8ba:	930c      	str	r3, [sp, #48]	; 0x30
 800c8bc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c8be:	1b5b      	subs	r3, r3, r5
 800c8c0:	1e5a      	subs	r2, r3, #1
 800c8c2:	bf45      	ittet	mi
 800c8c4:	f1c3 0301 	rsbmi	r3, r3, #1
 800c8c8:	9305      	strmi	r3, [sp, #20]
 800c8ca:	2300      	movpl	r3, #0
 800c8cc:	2300      	movmi	r3, #0
 800c8ce:	9206      	str	r2, [sp, #24]
 800c8d0:	bf54      	ite	pl
 800c8d2:	9305      	strpl	r3, [sp, #20]
 800c8d4:	9306      	strmi	r3, [sp, #24]
 800c8d6:	f1bb 0f00 	cmp.w	fp, #0
 800c8da:	db3c      	blt.n	800c956 <_dtoa_r+0x24e>
 800c8dc:	9b06      	ldr	r3, [sp, #24]
 800c8de:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800c8e2:	445b      	add	r3, fp
 800c8e4:	9306      	str	r3, [sp, #24]
 800c8e6:	2300      	movs	r3, #0
 800c8e8:	9308      	str	r3, [sp, #32]
 800c8ea:	9b07      	ldr	r3, [sp, #28]
 800c8ec:	2b09      	cmp	r3, #9
 800c8ee:	d868      	bhi.n	800c9c2 <_dtoa_r+0x2ba>
 800c8f0:	2b05      	cmp	r3, #5
 800c8f2:	bfc4      	itt	gt
 800c8f4:	3b04      	subgt	r3, #4
 800c8f6:	9307      	strgt	r3, [sp, #28]
 800c8f8:	9b07      	ldr	r3, [sp, #28]
 800c8fa:	f1a3 0302 	sub.w	r3, r3, #2
 800c8fe:	bfcc      	ite	gt
 800c900:	2500      	movgt	r5, #0
 800c902:	2501      	movle	r5, #1
 800c904:	2b03      	cmp	r3, #3
 800c906:	f200 8085 	bhi.w	800ca14 <_dtoa_r+0x30c>
 800c90a:	e8df f003 	tbb	[pc, r3]
 800c90e:	3b2e      	.short	0x3b2e
 800c910:	5839      	.short	0x5839
 800c912:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800c916:	441d      	add	r5, r3
 800c918:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800c91c:	2b20      	cmp	r3, #32
 800c91e:	bfc1      	itttt	gt
 800c920:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800c924:	fa08 f803 	lslgt.w	r8, r8, r3
 800c928:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800c92c:	fa26 f303 	lsrgt.w	r3, r6, r3
 800c930:	bfd6      	itet	le
 800c932:	f1c3 0320 	rsble	r3, r3, #32
 800c936:	ea48 0003 	orrgt.w	r0, r8, r3
 800c93a:	fa06 f003 	lslle.w	r0, r6, r3
 800c93e:	f7f3 fe01 	bl	8000544 <__aeabi_ui2d>
 800c942:	2201      	movs	r2, #1
 800c944:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800c948:	3d01      	subs	r5, #1
 800c94a:	920e      	str	r2, [sp, #56]	; 0x38
 800c94c:	e76f      	b.n	800c82e <_dtoa_r+0x126>
 800c94e:	2301      	movs	r3, #1
 800c950:	e7b3      	b.n	800c8ba <_dtoa_r+0x1b2>
 800c952:	900c      	str	r0, [sp, #48]	; 0x30
 800c954:	e7b2      	b.n	800c8bc <_dtoa_r+0x1b4>
 800c956:	9b05      	ldr	r3, [sp, #20]
 800c958:	eba3 030b 	sub.w	r3, r3, fp
 800c95c:	9305      	str	r3, [sp, #20]
 800c95e:	f1cb 0300 	rsb	r3, fp, #0
 800c962:	9308      	str	r3, [sp, #32]
 800c964:	2300      	movs	r3, #0
 800c966:	930b      	str	r3, [sp, #44]	; 0x2c
 800c968:	e7bf      	b.n	800c8ea <_dtoa_r+0x1e2>
 800c96a:	2300      	movs	r3, #0
 800c96c:	9309      	str	r3, [sp, #36]	; 0x24
 800c96e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c970:	2b00      	cmp	r3, #0
 800c972:	dc52      	bgt.n	800ca1a <_dtoa_r+0x312>
 800c974:	2301      	movs	r3, #1
 800c976:	9301      	str	r3, [sp, #4]
 800c978:	9304      	str	r3, [sp, #16]
 800c97a:	461a      	mov	r2, r3
 800c97c:	920a      	str	r2, [sp, #40]	; 0x28
 800c97e:	e00b      	b.n	800c998 <_dtoa_r+0x290>
 800c980:	2301      	movs	r3, #1
 800c982:	e7f3      	b.n	800c96c <_dtoa_r+0x264>
 800c984:	2300      	movs	r3, #0
 800c986:	9309      	str	r3, [sp, #36]	; 0x24
 800c988:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c98a:	445b      	add	r3, fp
 800c98c:	9301      	str	r3, [sp, #4]
 800c98e:	3301      	adds	r3, #1
 800c990:	2b01      	cmp	r3, #1
 800c992:	9304      	str	r3, [sp, #16]
 800c994:	bfb8      	it	lt
 800c996:	2301      	movlt	r3, #1
 800c998:	69e0      	ldr	r0, [r4, #28]
 800c99a:	2100      	movs	r1, #0
 800c99c:	2204      	movs	r2, #4
 800c99e:	f102 0614 	add.w	r6, r2, #20
 800c9a2:	429e      	cmp	r6, r3
 800c9a4:	d93d      	bls.n	800ca22 <_dtoa_r+0x31a>
 800c9a6:	6041      	str	r1, [r0, #4]
 800c9a8:	4620      	mov	r0, r4
 800c9aa:	f000 fceb 	bl	800d384 <_Balloc>
 800c9ae:	9000      	str	r0, [sp, #0]
 800c9b0:	2800      	cmp	r0, #0
 800c9b2:	d139      	bne.n	800ca28 <_dtoa_r+0x320>
 800c9b4:	4b16      	ldr	r3, [pc, #88]	; (800ca10 <_dtoa_r+0x308>)
 800c9b6:	4602      	mov	r2, r0
 800c9b8:	f240 11af 	movw	r1, #431	; 0x1af
 800c9bc:	e6bd      	b.n	800c73a <_dtoa_r+0x32>
 800c9be:	2301      	movs	r3, #1
 800c9c0:	e7e1      	b.n	800c986 <_dtoa_r+0x27e>
 800c9c2:	2501      	movs	r5, #1
 800c9c4:	2300      	movs	r3, #0
 800c9c6:	9307      	str	r3, [sp, #28]
 800c9c8:	9509      	str	r5, [sp, #36]	; 0x24
 800c9ca:	f04f 33ff 	mov.w	r3, #4294967295
 800c9ce:	9301      	str	r3, [sp, #4]
 800c9d0:	9304      	str	r3, [sp, #16]
 800c9d2:	2200      	movs	r2, #0
 800c9d4:	2312      	movs	r3, #18
 800c9d6:	e7d1      	b.n	800c97c <_dtoa_r+0x274>
 800c9d8:	636f4361 	.word	0x636f4361
 800c9dc:	3fd287a7 	.word	0x3fd287a7
 800c9e0:	8b60c8b3 	.word	0x8b60c8b3
 800c9e4:	3fc68a28 	.word	0x3fc68a28
 800c9e8:	509f79fb 	.word	0x509f79fb
 800c9ec:	3fd34413 	.word	0x3fd34413
 800c9f0:	0800fd42 	.word	0x0800fd42
 800c9f4:	0800fd59 	.word	0x0800fd59
 800c9f8:	7ff00000 	.word	0x7ff00000
 800c9fc:	0800fd3e 	.word	0x0800fd3e
 800ca00:	0800fd35 	.word	0x0800fd35
 800ca04:	0800fd0d 	.word	0x0800fd0d
 800ca08:	3ff80000 	.word	0x3ff80000
 800ca0c:	0800fe48 	.word	0x0800fe48
 800ca10:	0800fdb1 	.word	0x0800fdb1
 800ca14:	2301      	movs	r3, #1
 800ca16:	9309      	str	r3, [sp, #36]	; 0x24
 800ca18:	e7d7      	b.n	800c9ca <_dtoa_r+0x2c2>
 800ca1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ca1c:	9301      	str	r3, [sp, #4]
 800ca1e:	9304      	str	r3, [sp, #16]
 800ca20:	e7ba      	b.n	800c998 <_dtoa_r+0x290>
 800ca22:	3101      	adds	r1, #1
 800ca24:	0052      	lsls	r2, r2, #1
 800ca26:	e7ba      	b.n	800c99e <_dtoa_r+0x296>
 800ca28:	69e3      	ldr	r3, [r4, #28]
 800ca2a:	9a00      	ldr	r2, [sp, #0]
 800ca2c:	601a      	str	r2, [r3, #0]
 800ca2e:	9b04      	ldr	r3, [sp, #16]
 800ca30:	2b0e      	cmp	r3, #14
 800ca32:	f200 80a8 	bhi.w	800cb86 <_dtoa_r+0x47e>
 800ca36:	2d00      	cmp	r5, #0
 800ca38:	f000 80a5 	beq.w	800cb86 <_dtoa_r+0x47e>
 800ca3c:	f1bb 0f00 	cmp.w	fp, #0
 800ca40:	dd38      	ble.n	800cab4 <_dtoa_r+0x3ac>
 800ca42:	4bc0      	ldr	r3, [pc, #768]	; (800cd44 <_dtoa_r+0x63c>)
 800ca44:	f00b 020f 	and.w	r2, fp, #15
 800ca48:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ca4c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800ca50:	e9d3 6700 	ldrd	r6, r7, [r3]
 800ca54:	ea4f 182b 	mov.w	r8, fp, asr #4
 800ca58:	d019      	beq.n	800ca8e <_dtoa_r+0x386>
 800ca5a:	4bbb      	ldr	r3, [pc, #748]	; (800cd48 <_dtoa_r+0x640>)
 800ca5c:	ec51 0b18 	vmov	r0, r1, d8
 800ca60:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ca64:	f7f3 ff12 	bl	800088c <__aeabi_ddiv>
 800ca68:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ca6c:	f008 080f 	and.w	r8, r8, #15
 800ca70:	2503      	movs	r5, #3
 800ca72:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800cd48 <_dtoa_r+0x640>
 800ca76:	f1b8 0f00 	cmp.w	r8, #0
 800ca7a:	d10a      	bne.n	800ca92 <_dtoa_r+0x38a>
 800ca7c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ca80:	4632      	mov	r2, r6
 800ca82:	463b      	mov	r3, r7
 800ca84:	f7f3 ff02 	bl	800088c <__aeabi_ddiv>
 800ca88:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ca8c:	e02b      	b.n	800cae6 <_dtoa_r+0x3de>
 800ca8e:	2502      	movs	r5, #2
 800ca90:	e7ef      	b.n	800ca72 <_dtoa_r+0x36a>
 800ca92:	f018 0f01 	tst.w	r8, #1
 800ca96:	d008      	beq.n	800caaa <_dtoa_r+0x3a2>
 800ca98:	4630      	mov	r0, r6
 800ca9a:	4639      	mov	r1, r7
 800ca9c:	e9d9 2300 	ldrd	r2, r3, [r9]
 800caa0:	f7f3 fdca 	bl	8000638 <__aeabi_dmul>
 800caa4:	3501      	adds	r5, #1
 800caa6:	4606      	mov	r6, r0
 800caa8:	460f      	mov	r7, r1
 800caaa:	ea4f 0868 	mov.w	r8, r8, asr #1
 800caae:	f109 0908 	add.w	r9, r9, #8
 800cab2:	e7e0      	b.n	800ca76 <_dtoa_r+0x36e>
 800cab4:	f000 809f 	beq.w	800cbf6 <_dtoa_r+0x4ee>
 800cab8:	f1cb 0600 	rsb	r6, fp, #0
 800cabc:	4ba1      	ldr	r3, [pc, #644]	; (800cd44 <_dtoa_r+0x63c>)
 800cabe:	4fa2      	ldr	r7, [pc, #648]	; (800cd48 <_dtoa_r+0x640>)
 800cac0:	f006 020f 	and.w	r2, r6, #15
 800cac4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cacc:	ec51 0b18 	vmov	r0, r1, d8
 800cad0:	f7f3 fdb2 	bl	8000638 <__aeabi_dmul>
 800cad4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cad8:	1136      	asrs	r6, r6, #4
 800cada:	2300      	movs	r3, #0
 800cadc:	2502      	movs	r5, #2
 800cade:	2e00      	cmp	r6, #0
 800cae0:	d17e      	bne.n	800cbe0 <_dtoa_r+0x4d8>
 800cae2:	2b00      	cmp	r3, #0
 800cae4:	d1d0      	bne.n	800ca88 <_dtoa_r+0x380>
 800cae6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cae8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800caec:	2b00      	cmp	r3, #0
 800caee:	f000 8084 	beq.w	800cbfa <_dtoa_r+0x4f2>
 800caf2:	4b96      	ldr	r3, [pc, #600]	; (800cd4c <_dtoa_r+0x644>)
 800caf4:	2200      	movs	r2, #0
 800caf6:	4640      	mov	r0, r8
 800caf8:	4649      	mov	r1, r9
 800cafa:	f7f4 f80f 	bl	8000b1c <__aeabi_dcmplt>
 800cafe:	2800      	cmp	r0, #0
 800cb00:	d07b      	beq.n	800cbfa <_dtoa_r+0x4f2>
 800cb02:	9b04      	ldr	r3, [sp, #16]
 800cb04:	2b00      	cmp	r3, #0
 800cb06:	d078      	beq.n	800cbfa <_dtoa_r+0x4f2>
 800cb08:	9b01      	ldr	r3, [sp, #4]
 800cb0a:	2b00      	cmp	r3, #0
 800cb0c:	dd39      	ble.n	800cb82 <_dtoa_r+0x47a>
 800cb0e:	4b90      	ldr	r3, [pc, #576]	; (800cd50 <_dtoa_r+0x648>)
 800cb10:	2200      	movs	r2, #0
 800cb12:	4640      	mov	r0, r8
 800cb14:	4649      	mov	r1, r9
 800cb16:	f7f3 fd8f 	bl	8000638 <__aeabi_dmul>
 800cb1a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cb1e:	9e01      	ldr	r6, [sp, #4]
 800cb20:	f10b 37ff 	add.w	r7, fp, #4294967295
 800cb24:	3501      	adds	r5, #1
 800cb26:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800cb2a:	4628      	mov	r0, r5
 800cb2c:	f7f3 fd1a 	bl	8000564 <__aeabi_i2d>
 800cb30:	4642      	mov	r2, r8
 800cb32:	464b      	mov	r3, r9
 800cb34:	f7f3 fd80 	bl	8000638 <__aeabi_dmul>
 800cb38:	4b86      	ldr	r3, [pc, #536]	; (800cd54 <_dtoa_r+0x64c>)
 800cb3a:	2200      	movs	r2, #0
 800cb3c:	f7f3 fbc6 	bl	80002cc <__adddf3>
 800cb40:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800cb44:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cb48:	9303      	str	r3, [sp, #12]
 800cb4a:	2e00      	cmp	r6, #0
 800cb4c:	d158      	bne.n	800cc00 <_dtoa_r+0x4f8>
 800cb4e:	4b82      	ldr	r3, [pc, #520]	; (800cd58 <_dtoa_r+0x650>)
 800cb50:	2200      	movs	r2, #0
 800cb52:	4640      	mov	r0, r8
 800cb54:	4649      	mov	r1, r9
 800cb56:	f7f3 fbb7 	bl	80002c8 <__aeabi_dsub>
 800cb5a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cb5e:	4680      	mov	r8, r0
 800cb60:	4689      	mov	r9, r1
 800cb62:	f7f3 fff9 	bl	8000b58 <__aeabi_dcmpgt>
 800cb66:	2800      	cmp	r0, #0
 800cb68:	f040 8296 	bne.w	800d098 <_dtoa_r+0x990>
 800cb6c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800cb70:	4640      	mov	r0, r8
 800cb72:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800cb76:	4649      	mov	r1, r9
 800cb78:	f7f3 ffd0 	bl	8000b1c <__aeabi_dcmplt>
 800cb7c:	2800      	cmp	r0, #0
 800cb7e:	f040 8289 	bne.w	800d094 <_dtoa_r+0x98c>
 800cb82:	ed8d 8b02 	vstr	d8, [sp, #8]
 800cb86:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	f2c0 814e 	blt.w	800ce2a <_dtoa_r+0x722>
 800cb8e:	f1bb 0f0e 	cmp.w	fp, #14
 800cb92:	f300 814a 	bgt.w	800ce2a <_dtoa_r+0x722>
 800cb96:	4b6b      	ldr	r3, [pc, #428]	; (800cd44 <_dtoa_r+0x63c>)
 800cb98:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800cb9c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800cba0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cba2:	2b00      	cmp	r3, #0
 800cba4:	f280 80dc 	bge.w	800cd60 <_dtoa_r+0x658>
 800cba8:	9b04      	ldr	r3, [sp, #16]
 800cbaa:	2b00      	cmp	r3, #0
 800cbac:	f300 80d8 	bgt.w	800cd60 <_dtoa_r+0x658>
 800cbb0:	f040 826f 	bne.w	800d092 <_dtoa_r+0x98a>
 800cbb4:	4b68      	ldr	r3, [pc, #416]	; (800cd58 <_dtoa_r+0x650>)
 800cbb6:	2200      	movs	r2, #0
 800cbb8:	4640      	mov	r0, r8
 800cbba:	4649      	mov	r1, r9
 800cbbc:	f7f3 fd3c 	bl	8000638 <__aeabi_dmul>
 800cbc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cbc4:	f7f3 ffbe 	bl	8000b44 <__aeabi_dcmpge>
 800cbc8:	9e04      	ldr	r6, [sp, #16]
 800cbca:	4637      	mov	r7, r6
 800cbcc:	2800      	cmp	r0, #0
 800cbce:	f040 8245 	bne.w	800d05c <_dtoa_r+0x954>
 800cbd2:	9d00      	ldr	r5, [sp, #0]
 800cbd4:	2331      	movs	r3, #49	; 0x31
 800cbd6:	f805 3b01 	strb.w	r3, [r5], #1
 800cbda:	f10b 0b01 	add.w	fp, fp, #1
 800cbde:	e241      	b.n	800d064 <_dtoa_r+0x95c>
 800cbe0:	07f2      	lsls	r2, r6, #31
 800cbe2:	d505      	bpl.n	800cbf0 <_dtoa_r+0x4e8>
 800cbe4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cbe8:	f7f3 fd26 	bl	8000638 <__aeabi_dmul>
 800cbec:	3501      	adds	r5, #1
 800cbee:	2301      	movs	r3, #1
 800cbf0:	1076      	asrs	r6, r6, #1
 800cbf2:	3708      	adds	r7, #8
 800cbf4:	e773      	b.n	800cade <_dtoa_r+0x3d6>
 800cbf6:	2502      	movs	r5, #2
 800cbf8:	e775      	b.n	800cae6 <_dtoa_r+0x3de>
 800cbfa:	9e04      	ldr	r6, [sp, #16]
 800cbfc:	465f      	mov	r7, fp
 800cbfe:	e792      	b.n	800cb26 <_dtoa_r+0x41e>
 800cc00:	9900      	ldr	r1, [sp, #0]
 800cc02:	4b50      	ldr	r3, [pc, #320]	; (800cd44 <_dtoa_r+0x63c>)
 800cc04:	ed9d 7b02 	vldr	d7, [sp, #8]
 800cc08:	4431      	add	r1, r6
 800cc0a:	9102      	str	r1, [sp, #8]
 800cc0c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cc0e:	eeb0 9a47 	vmov.f32	s18, s14
 800cc12:	eef0 9a67 	vmov.f32	s19, s15
 800cc16:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800cc1a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800cc1e:	2900      	cmp	r1, #0
 800cc20:	d044      	beq.n	800ccac <_dtoa_r+0x5a4>
 800cc22:	494e      	ldr	r1, [pc, #312]	; (800cd5c <_dtoa_r+0x654>)
 800cc24:	2000      	movs	r0, #0
 800cc26:	f7f3 fe31 	bl	800088c <__aeabi_ddiv>
 800cc2a:	ec53 2b19 	vmov	r2, r3, d9
 800cc2e:	f7f3 fb4b 	bl	80002c8 <__aeabi_dsub>
 800cc32:	9d00      	ldr	r5, [sp, #0]
 800cc34:	ec41 0b19 	vmov	d9, r0, r1
 800cc38:	4649      	mov	r1, r9
 800cc3a:	4640      	mov	r0, r8
 800cc3c:	f7f3 ffac 	bl	8000b98 <__aeabi_d2iz>
 800cc40:	4606      	mov	r6, r0
 800cc42:	f7f3 fc8f 	bl	8000564 <__aeabi_i2d>
 800cc46:	4602      	mov	r2, r0
 800cc48:	460b      	mov	r3, r1
 800cc4a:	4640      	mov	r0, r8
 800cc4c:	4649      	mov	r1, r9
 800cc4e:	f7f3 fb3b 	bl	80002c8 <__aeabi_dsub>
 800cc52:	3630      	adds	r6, #48	; 0x30
 800cc54:	f805 6b01 	strb.w	r6, [r5], #1
 800cc58:	ec53 2b19 	vmov	r2, r3, d9
 800cc5c:	4680      	mov	r8, r0
 800cc5e:	4689      	mov	r9, r1
 800cc60:	f7f3 ff5c 	bl	8000b1c <__aeabi_dcmplt>
 800cc64:	2800      	cmp	r0, #0
 800cc66:	d164      	bne.n	800cd32 <_dtoa_r+0x62a>
 800cc68:	4642      	mov	r2, r8
 800cc6a:	464b      	mov	r3, r9
 800cc6c:	4937      	ldr	r1, [pc, #220]	; (800cd4c <_dtoa_r+0x644>)
 800cc6e:	2000      	movs	r0, #0
 800cc70:	f7f3 fb2a 	bl	80002c8 <__aeabi_dsub>
 800cc74:	ec53 2b19 	vmov	r2, r3, d9
 800cc78:	f7f3 ff50 	bl	8000b1c <__aeabi_dcmplt>
 800cc7c:	2800      	cmp	r0, #0
 800cc7e:	f040 80b6 	bne.w	800cdee <_dtoa_r+0x6e6>
 800cc82:	9b02      	ldr	r3, [sp, #8]
 800cc84:	429d      	cmp	r5, r3
 800cc86:	f43f af7c 	beq.w	800cb82 <_dtoa_r+0x47a>
 800cc8a:	4b31      	ldr	r3, [pc, #196]	; (800cd50 <_dtoa_r+0x648>)
 800cc8c:	ec51 0b19 	vmov	r0, r1, d9
 800cc90:	2200      	movs	r2, #0
 800cc92:	f7f3 fcd1 	bl	8000638 <__aeabi_dmul>
 800cc96:	4b2e      	ldr	r3, [pc, #184]	; (800cd50 <_dtoa_r+0x648>)
 800cc98:	ec41 0b19 	vmov	d9, r0, r1
 800cc9c:	2200      	movs	r2, #0
 800cc9e:	4640      	mov	r0, r8
 800cca0:	4649      	mov	r1, r9
 800cca2:	f7f3 fcc9 	bl	8000638 <__aeabi_dmul>
 800cca6:	4680      	mov	r8, r0
 800cca8:	4689      	mov	r9, r1
 800ccaa:	e7c5      	b.n	800cc38 <_dtoa_r+0x530>
 800ccac:	ec51 0b17 	vmov	r0, r1, d7
 800ccb0:	f7f3 fcc2 	bl	8000638 <__aeabi_dmul>
 800ccb4:	9b02      	ldr	r3, [sp, #8]
 800ccb6:	9d00      	ldr	r5, [sp, #0]
 800ccb8:	930f      	str	r3, [sp, #60]	; 0x3c
 800ccba:	ec41 0b19 	vmov	d9, r0, r1
 800ccbe:	4649      	mov	r1, r9
 800ccc0:	4640      	mov	r0, r8
 800ccc2:	f7f3 ff69 	bl	8000b98 <__aeabi_d2iz>
 800ccc6:	4606      	mov	r6, r0
 800ccc8:	f7f3 fc4c 	bl	8000564 <__aeabi_i2d>
 800cccc:	3630      	adds	r6, #48	; 0x30
 800ccce:	4602      	mov	r2, r0
 800ccd0:	460b      	mov	r3, r1
 800ccd2:	4640      	mov	r0, r8
 800ccd4:	4649      	mov	r1, r9
 800ccd6:	f7f3 faf7 	bl	80002c8 <__aeabi_dsub>
 800ccda:	f805 6b01 	strb.w	r6, [r5], #1
 800ccde:	9b02      	ldr	r3, [sp, #8]
 800cce0:	429d      	cmp	r5, r3
 800cce2:	4680      	mov	r8, r0
 800cce4:	4689      	mov	r9, r1
 800cce6:	f04f 0200 	mov.w	r2, #0
 800ccea:	d124      	bne.n	800cd36 <_dtoa_r+0x62e>
 800ccec:	4b1b      	ldr	r3, [pc, #108]	; (800cd5c <_dtoa_r+0x654>)
 800ccee:	ec51 0b19 	vmov	r0, r1, d9
 800ccf2:	f7f3 faeb 	bl	80002cc <__adddf3>
 800ccf6:	4602      	mov	r2, r0
 800ccf8:	460b      	mov	r3, r1
 800ccfa:	4640      	mov	r0, r8
 800ccfc:	4649      	mov	r1, r9
 800ccfe:	f7f3 ff2b 	bl	8000b58 <__aeabi_dcmpgt>
 800cd02:	2800      	cmp	r0, #0
 800cd04:	d173      	bne.n	800cdee <_dtoa_r+0x6e6>
 800cd06:	ec53 2b19 	vmov	r2, r3, d9
 800cd0a:	4914      	ldr	r1, [pc, #80]	; (800cd5c <_dtoa_r+0x654>)
 800cd0c:	2000      	movs	r0, #0
 800cd0e:	f7f3 fadb 	bl	80002c8 <__aeabi_dsub>
 800cd12:	4602      	mov	r2, r0
 800cd14:	460b      	mov	r3, r1
 800cd16:	4640      	mov	r0, r8
 800cd18:	4649      	mov	r1, r9
 800cd1a:	f7f3 feff 	bl	8000b1c <__aeabi_dcmplt>
 800cd1e:	2800      	cmp	r0, #0
 800cd20:	f43f af2f 	beq.w	800cb82 <_dtoa_r+0x47a>
 800cd24:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800cd26:	1e6b      	subs	r3, r5, #1
 800cd28:	930f      	str	r3, [sp, #60]	; 0x3c
 800cd2a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800cd2e:	2b30      	cmp	r3, #48	; 0x30
 800cd30:	d0f8      	beq.n	800cd24 <_dtoa_r+0x61c>
 800cd32:	46bb      	mov	fp, r7
 800cd34:	e04a      	b.n	800cdcc <_dtoa_r+0x6c4>
 800cd36:	4b06      	ldr	r3, [pc, #24]	; (800cd50 <_dtoa_r+0x648>)
 800cd38:	f7f3 fc7e 	bl	8000638 <__aeabi_dmul>
 800cd3c:	4680      	mov	r8, r0
 800cd3e:	4689      	mov	r9, r1
 800cd40:	e7bd      	b.n	800ccbe <_dtoa_r+0x5b6>
 800cd42:	bf00      	nop
 800cd44:	0800fe48 	.word	0x0800fe48
 800cd48:	0800fe20 	.word	0x0800fe20
 800cd4c:	3ff00000 	.word	0x3ff00000
 800cd50:	40240000 	.word	0x40240000
 800cd54:	401c0000 	.word	0x401c0000
 800cd58:	40140000 	.word	0x40140000
 800cd5c:	3fe00000 	.word	0x3fe00000
 800cd60:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800cd64:	9d00      	ldr	r5, [sp, #0]
 800cd66:	4642      	mov	r2, r8
 800cd68:	464b      	mov	r3, r9
 800cd6a:	4630      	mov	r0, r6
 800cd6c:	4639      	mov	r1, r7
 800cd6e:	f7f3 fd8d 	bl	800088c <__aeabi_ddiv>
 800cd72:	f7f3 ff11 	bl	8000b98 <__aeabi_d2iz>
 800cd76:	9001      	str	r0, [sp, #4]
 800cd78:	f7f3 fbf4 	bl	8000564 <__aeabi_i2d>
 800cd7c:	4642      	mov	r2, r8
 800cd7e:	464b      	mov	r3, r9
 800cd80:	f7f3 fc5a 	bl	8000638 <__aeabi_dmul>
 800cd84:	4602      	mov	r2, r0
 800cd86:	460b      	mov	r3, r1
 800cd88:	4630      	mov	r0, r6
 800cd8a:	4639      	mov	r1, r7
 800cd8c:	f7f3 fa9c 	bl	80002c8 <__aeabi_dsub>
 800cd90:	9e01      	ldr	r6, [sp, #4]
 800cd92:	9f04      	ldr	r7, [sp, #16]
 800cd94:	3630      	adds	r6, #48	; 0x30
 800cd96:	f805 6b01 	strb.w	r6, [r5], #1
 800cd9a:	9e00      	ldr	r6, [sp, #0]
 800cd9c:	1bae      	subs	r6, r5, r6
 800cd9e:	42b7      	cmp	r7, r6
 800cda0:	4602      	mov	r2, r0
 800cda2:	460b      	mov	r3, r1
 800cda4:	d134      	bne.n	800ce10 <_dtoa_r+0x708>
 800cda6:	f7f3 fa91 	bl	80002cc <__adddf3>
 800cdaa:	4642      	mov	r2, r8
 800cdac:	464b      	mov	r3, r9
 800cdae:	4606      	mov	r6, r0
 800cdb0:	460f      	mov	r7, r1
 800cdb2:	f7f3 fed1 	bl	8000b58 <__aeabi_dcmpgt>
 800cdb6:	b9c8      	cbnz	r0, 800cdec <_dtoa_r+0x6e4>
 800cdb8:	4642      	mov	r2, r8
 800cdba:	464b      	mov	r3, r9
 800cdbc:	4630      	mov	r0, r6
 800cdbe:	4639      	mov	r1, r7
 800cdc0:	f7f3 fea2 	bl	8000b08 <__aeabi_dcmpeq>
 800cdc4:	b110      	cbz	r0, 800cdcc <_dtoa_r+0x6c4>
 800cdc6:	9b01      	ldr	r3, [sp, #4]
 800cdc8:	07db      	lsls	r3, r3, #31
 800cdca:	d40f      	bmi.n	800cdec <_dtoa_r+0x6e4>
 800cdcc:	4651      	mov	r1, sl
 800cdce:	4620      	mov	r0, r4
 800cdd0:	f000 fb18 	bl	800d404 <_Bfree>
 800cdd4:	2300      	movs	r3, #0
 800cdd6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800cdd8:	702b      	strb	r3, [r5, #0]
 800cdda:	f10b 0301 	add.w	r3, fp, #1
 800cdde:	6013      	str	r3, [r2, #0]
 800cde0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cde2:	2b00      	cmp	r3, #0
 800cde4:	f43f ace2 	beq.w	800c7ac <_dtoa_r+0xa4>
 800cde8:	601d      	str	r5, [r3, #0]
 800cdea:	e4df      	b.n	800c7ac <_dtoa_r+0xa4>
 800cdec:	465f      	mov	r7, fp
 800cdee:	462b      	mov	r3, r5
 800cdf0:	461d      	mov	r5, r3
 800cdf2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cdf6:	2a39      	cmp	r2, #57	; 0x39
 800cdf8:	d106      	bne.n	800ce08 <_dtoa_r+0x700>
 800cdfa:	9a00      	ldr	r2, [sp, #0]
 800cdfc:	429a      	cmp	r2, r3
 800cdfe:	d1f7      	bne.n	800cdf0 <_dtoa_r+0x6e8>
 800ce00:	9900      	ldr	r1, [sp, #0]
 800ce02:	2230      	movs	r2, #48	; 0x30
 800ce04:	3701      	adds	r7, #1
 800ce06:	700a      	strb	r2, [r1, #0]
 800ce08:	781a      	ldrb	r2, [r3, #0]
 800ce0a:	3201      	adds	r2, #1
 800ce0c:	701a      	strb	r2, [r3, #0]
 800ce0e:	e790      	b.n	800cd32 <_dtoa_r+0x62a>
 800ce10:	4ba3      	ldr	r3, [pc, #652]	; (800d0a0 <_dtoa_r+0x998>)
 800ce12:	2200      	movs	r2, #0
 800ce14:	f7f3 fc10 	bl	8000638 <__aeabi_dmul>
 800ce18:	2200      	movs	r2, #0
 800ce1a:	2300      	movs	r3, #0
 800ce1c:	4606      	mov	r6, r0
 800ce1e:	460f      	mov	r7, r1
 800ce20:	f7f3 fe72 	bl	8000b08 <__aeabi_dcmpeq>
 800ce24:	2800      	cmp	r0, #0
 800ce26:	d09e      	beq.n	800cd66 <_dtoa_r+0x65e>
 800ce28:	e7d0      	b.n	800cdcc <_dtoa_r+0x6c4>
 800ce2a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ce2c:	2a00      	cmp	r2, #0
 800ce2e:	f000 80ca 	beq.w	800cfc6 <_dtoa_r+0x8be>
 800ce32:	9a07      	ldr	r2, [sp, #28]
 800ce34:	2a01      	cmp	r2, #1
 800ce36:	f300 80ad 	bgt.w	800cf94 <_dtoa_r+0x88c>
 800ce3a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ce3c:	2a00      	cmp	r2, #0
 800ce3e:	f000 80a5 	beq.w	800cf8c <_dtoa_r+0x884>
 800ce42:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800ce46:	9e08      	ldr	r6, [sp, #32]
 800ce48:	9d05      	ldr	r5, [sp, #20]
 800ce4a:	9a05      	ldr	r2, [sp, #20]
 800ce4c:	441a      	add	r2, r3
 800ce4e:	9205      	str	r2, [sp, #20]
 800ce50:	9a06      	ldr	r2, [sp, #24]
 800ce52:	2101      	movs	r1, #1
 800ce54:	441a      	add	r2, r3
 800ce56:	4620      	mov	r0, r4
 800ce58:	9206      	str	r2, [sp, #24]
 800ce5a:	f000 fbd3 	bl	800d604 <__i2b>
 800ce5e:	4607      	mov	r7, r0
 800ce60:	b165      	cbz	r5, 800ce7c <_dtoa_r+0x774>
 800ce62:	9b06      	ldr	r3, [sp, #24]
 800ce64:	2b00      	cmp	r3, #0
 800ce66:	dd09      	ble.n	800ce7c <_dtoa_r+0x774>
 800ce68:	42ab      	cmp	r3, r5
 800ce6a:	9a05      	ldr	r2, [sp, #20]
 800ce6c:	bfa8      	it	ge
 800ce6e:	462b      	movge	r3, r5
 800ce70:	1ad2      	subs	r2, r2, r3
 800ce72:	9205      	str	r2, [sp, #20]
 800ce74:	9a06      	ldr	r2, [sp, #24]
 800ce76:	1aed      	subs	r5, r5, r3
 800ce78:	1ad3      	subs	r3, r2, r3
 800ce7a:	9306      	str	r3, [sp, #24]
 800ce7c:	9b08      	ldr	r3, [sp, #32]
 800ce7e:	b1f3      	cbz	r3, 800cebe <_dtoa_r+0x7b6>
 800ce80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ce82:	2b00      	cmp	r3, #0
 800ce84:	f000 80a3 	beq.w	800cfce <_dtoa_r+0x8c6>
 800ce88:	2e00      	cmp	r6, #0
 800ce8a:	dd10      	ble.n	800ceae <_dtoa_r+0x7a6>
 800ce8c:	4639      	mov	r1, r7
 800ce8e:	4632      	mov	r2, r6
 800ce90:	4620      	mov	r0, r4
 800ce92:	f000 fc77 	bl	800d784 <__pow5mult>
 800ce96:	4652      	mov	r2, sl
 800ce98:	4601      	mov	r1, r0
 800ce9a:	4607      	mov	r7, r0
 800ce9c:	4620      	mov	r0, r4
 800ce9e:	f000 fbc7 	bl	800d630 <__multiply>
 800cea2:	4651      	mov	r1, sl
 800cea4:	4680      	mov	r8, r0
 800cea6:	4620      	mov	r0, r4
 800cea8:	f000 faac 	bl	800d404 <_Bfree>
 800ceac:	46c2      	mov	sl, r8
 800ceae:	9b08      	ldr	r3, [sp, #32]
 800ceb0:	1b9a      	subs	r2, r3, r6
 800ceb2:	d004      	beq.n	800cebe <_dtoa_r+0x7b6>
 800ceb4:	4651      	mov	r1, sl
 800ceb6:	4620      	mov	r0, r4
 800ceb8:	f000 fc64 	bl	800d784 <__pow5mult>
 800cebc:	4682      	mov	sl, r0
 800cebe:	2101      	movs	r1, #1
 800cec0:	4620      	mov	r0, r4
 800cec2:	f000 fb9f 	bl	800d604 <__i2b>
 800cec6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cec8:	2b00      	cmp	r3, #0
 800ceca:	4606      	mov	r6, r0
 800cecc:	f340 8081 	ble.w	800cfd2 <_dtoa_r+0x8ca>
 800ced0:	461a      	mov	r2, r3
 800ced2:	4601      	mov	r1, r0
 800ced4:	4620      	mov	r0, r4
 800ced6:	f000 fc55 	bl	800d784 <__pow5mult>
 800ceda:	9b07      	ldr	r3, [sp, #28]
 800cedc:	2b01      	cmp	r3, #1
 800cede:	4606      	mov	r6, r0
 800cee0:	dd7a      	ble.n	800cfd8 <_dtoa_r+0x8d0>
 800cee2:	f04f 0800 	mov.w	r8, #0
 800cee6:	6933      	ldr	r3, [r6, #16]
 800cee8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800ceec:	6918      	ldr	r0, [r3, #16]
 800ceee:	f000 fb3b 	bl	800d568 <__hi0bits>
 800cef2:	f1c0 0020 	rsb	r0, r0, #32
 800cef6:	9b06      	ldr	r3, [sp, #24]
 800cef8:	4418      	add	r0, r3
 800cefa:	f010 001f 	ands.w	r0, r0, #31
 800cefe:	f000 8094 	beq.w	800d02a <_dtoa_r+0x922>
 800cf02:	f1c0 0320 	rsb	r3, r0, #32
 800cf06:	2b04      	cmp	r3, #4
 800cf08:	f340 8085 	ble.w	800d016 <_dtoa_r+0x90e>
 800cf0c:	9b05      	ldr	r3, [sp, #20]
 800cf0e:	f1c0 001c 	rsb	r0, r0, #28
 800cf12:	4403      	add	r3, r0
 800cf14:	9305      	str	r3, [sp, #20]
 800cf16:	9b06      	ldr	r3, [sp, #24]
 800cf18:	4403      	add	r3, r0
 800cf1a:	4405      	add	r5, r0
 800cf1c:	9306      	str	r3, [sp, #24]
 800cf1e:	9b05      	ldr	r3, [sp, #20]
 800cf20:	2b00      	cmp	r3, #0
 800cf22:	dd05      	ble.n	800cf30 <_dtoa_r+0x828>
 800cf24:	4651      	mov	r1, sl
 800cf26:	461a      	mov	r2, r3
 800cf28:	4620      	mov	r0, r4
 800cf2a:	f000 fc85 	bl	800d838 <__lshift>
 800cf2e:	4682      	mov	sl, r0
 800cf30:	9b06      	ldr	r3, [sp, #24]
 800cf32:	2b00      	cmp	r3, #0
 800cf34:	dd05      	ble.n	800cf42 <_dtoa_r+0x83a>
 800cf36:	4631      	mov	r1, r6
 800cf38:	461a      	mov	r2, r3
 800cf3a:	4620      	mov	r0, r4
 800cf3c:	f000 fc7c 	bl	800d838 <__lshift>
 800cf40:	4606      	mov	r6, r0
 800cf42:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cf44:	2b00      	cmp	r3, #0
 800cf46:	d072      	beq.n	800d02e <_dtoa_r+0x926>
 800cf48:	4631      	mov	r1, r6
 800cf4a:	4650      	mov	r0, sl
 800cf4c:	f000 fce0 	bl	800d910 <__mcmp>
 800cf50:	2800      	cmp	r0, #0
 800cf52:	da6c      	bge.n	800d02e <_dtoa_r+0x926>
 800cf54:	2300      	movs	r3, #0
 800cf56:	4651      	mov	r1, sl
 800cf58:	220a      	movs	r2, #10
 800cf5a:	4620      	mov	r0, r4
 800cf5c:	f000 fa74 	bl	800d448 <__multadd>
 800cf60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cf62:	f10b 3bff 	add.w	fp, fp, #4294967295
 800cf66:	4682      	mov	sl, r0
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	f000 81b0 	beq.w	800d2ce <_dtoa_r+0xbc6>
 800cf6e:	2300      	movs	r3, #0
 800cf70:	4639      	mov	r1, r7
 800cf72:	220a      	movs	r2, #10
 800cf74:	4620      	mov	r0, r4
 800cf76:	f000 fa67 	bl	800d448 <__multadd>
 800cf7a:	9b01      	ldr	r3, [sp, #4]
 800cf7c:	2b00      	cmp	r3, #0
 800cf7e:	4607      	mov	r7, r0
 800cf80:	f300 8096 	bgt.w	800d0b0 <_dtoa_r+0x9a8>
 800cf84:	9b07      	ldr	r3, [sp, #28]
 800cf86:	2b02      	cmp	r3, #2
 800cf88:	dc59      	bgt.n	800d03e <_dtoa_r+0x936>
 800cf8a:	e091      	b.n	800d0b0 <_dtoa_r+0x9a8>
 800cf8c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800cf8e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800cf92:	e758      	b.n	800ce46 <_dtoa_r+0x73e>
 800cf94:	9b04      	ldr	r3, [sp, #16]
 800cf96:	1e5e      	subs	r6, r3, #1
 800cf98:	9b08      	ldr	r3, [sp, #32]
 800cf9a:	42b3      	cmp	r3, r6
 800cf9c:	bfbf      	itttt	lt
 800cf9e:	9b08      	ldrlt	r3, [sp, #32]
 800cfa0:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800cfa2:	9608      	strlt	r6, [sp, #32]
 800cfa4:	1af3      	sublt	r3, r6, r3
 800cfa6:	bfb4      	ite	lt
 800cfa8:	18d2      	addlt	r2, r2, r3
 800cfaa:	1b9e      	subge	r6, r3, r6
 800cfac:	9b04      	ldr	r3, [sp, #16]
 800cfae:	bfbc      	itt	lt
 800cfb0:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800cfb2:	2600      	movlt	r6, #0
 800cfb4:	2b00      	cmp	r3, #0
 800cfb6:	bfb7      	itett	lt
 800cfb8:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800cfbc:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800cfc0:	1a9d      	sublt	r5, r3, r2
 800cfc2:	2300      	movlt	r3, #0
 800cfc4:	e741      	b.n	800ce4a <_dtoa_r+0x742>
 800cfc6:	9e08      	ldr	r6, [sp, #32]
 800cfc8:	9d05      	ldr	r5, [sp, #20]
 800cfca:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800cfcc:	e748      	b.n	800ce60 <_dtoa_r+0x758>
 800cfce:	9a08      	ldr	r2, [sp, #32]
 800cfd0:	e770      	b.n	800ceb4 <_dtoa_r+0x7ac>
 800cfd2:	9b07      	ldr	r3, [sp, #28]
 800cfd4:	2b01      	cmp	r3, #1
 800cfd6:	dc19      	bgt.n	800d00c <_dtoa_r+0x904>
 800cfd8:	9b02      	ldr	r3, [sp, #8]
 800cfda:	b9bb      	cbnz	r3, 800d00c <_dtoa_r+0x904>
 800cfdc:	9b03      	ldr	r3, [sp, #12]
 800cfde:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cfe2:	b99b      	cbnz	r3, 800d00c <_dtoa_r+0x904>
 800cfe4:	9b03      	ldr	r3, [sp, #12]
 800cfe6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800cfea:	0d1b      	lsrs	r3, r3, #20
 800cfec:	051b      	lsls	r3, r3, #20
 800cfee:	b183      	cbz	r3, 800d012 <_dtoa_r+0x90a>
 800cff0:	9b05      	ldr	r3, [sp, #20]
 800cff2:	3301      	adds	r3, #1
 800cff4:	9305      	str	r3, [sp, #20]
 800cff6:	9b06      	ldr	r3, [sp, #24]
 800cff8:	3301      	adds	r3, #1
 800cffa:	9306      	str	r3, [sp, #24]
 800cffc:	f04f 0801 	mov.w	r8, #1
 800d000:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d002:	2b00      	cmp	r3, #0
 800d004:	f47f af6f 	bne.w	800cee6 <_dtoa_r+0x7de>
 800d008:	2001      	movs	r0, #1
 800d00a:	e774      	b.n	800cef6 <_dtoa_r+0x7ee>
 800d00c:	f04f 0800 	mov.w	r8, #0
 800d010:	e7f6      	b.n	800d000 <_dtoa_r+0x8f8>
 800d012:	4698      	mov	r8, r3
 800d014:	e7f4      	b.n	800d000 <_dtoa_r+0x8f8>
 800d016:	d082      	beq.n	800cf1e <_dtoa_r+0x816>
 800d018:	9a05      	ldr	r2, [sp, #20]
 800d01a:	331c      	adds	r3, #28
 800d01c:	441a      	add	r2, r3
 800d01e:	9205      	str	r2, [sp, #20]
 800d020:	9a06      	ldr	r2, [sp, #24]
 800d022:	441a      	add	r2, r3
 800d024:	441d      	add	r5, r3
 800d026:	9206      	str	r2, [sp, #24]
 800d028:	e779      	b.n	800cf1e <_dtoa_r+0x816>
 800d02a:	4603      	mov	r3, r0
 800d02c:	e7f4      	b.n	800d018 <_dtoa_r+0x910>
 800d02e:	9b04      	ldr	r3, [sp, #16]
 800d030:	2b00      	cmp	r3, #0
 800d032:	dc37      	bgt.n	800d0a4 <_dtoa_r+0x99c>
 800d034:	9b07      	ldr	r3, [sp, #28]
 800d036:	2b02      	cmp	r3, #2
 800d038:	dd34      	ble.n	800d0a4 <_dtoa_r+0x99c>
 800d03a:	9b04      	ldr	r3, [sp, #16]
 800d03c:	9301      	str	r3, [sp, #4]
 800d03e:	9b01      	ldr	r3, [sp, #4]
 800d040:	b963      	cbnz	r3, 800d05c <_dtoa_r+0x954>
 800d042:	4631      	mov	r1, r6
 800d044:	2205      	movs	r2, #5
 800d046:	4620      	mov	r0, r4
 800d048:	f000 f9fe 	bl	800d448 <__multadd>
 800d04c:	4601      	mov	r1, r0
 800d04e:	4606      	mov	r6, r0
 800d050:	4650      	mov	r0, sl
 800d052:	f000 fc5d 	bl	800d910 <__mcmp>
 800d056:	2800      	cmp	r0, #0
 800d058:	f73f adbb 	bgt.w	800cbd2 <_dtoa_r+0x4ca>
 800d05c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d05e:	9d00      	ldr	r5, [sp, #0]
 800d060:	ea6f 0b03 	mvn.w	fp, r3
 800d064:	f04f 0800 	mov.w	r8, #0
 800d068:	4631      	mov	r1, r6
 800d06a:	4620      	mov	r0, r4
 800d06c:	f000 f9ca 	bl	800d404 <_Bfree>
 800d070:	2f00      	cmp	r7, #0
 800d072:	f43f aeab 	beq.w	800cdcc <_dtoa_r+0x6c4>
 800d076:	f1b8 0f00 	cmp.w	r8, #0
 800d07a:	d005      	beq.n	800d088 <_dtoa_r+0x980>
 800d07c:	45b8      	cmp	r8, r7
 800d07e:	d003      	beq.n	800d088 <_dtoa_r+0x980>
 800d080:	4641      	mov	r1, r8
 800d082:	4620      	mov	r0, r4
 800d084:	f000 f9be 	bl	800d404 <_Bfree>
 800d088:	4639      	mov	r1, r7
 800d08a:	4620      	mov	r0, r4
 800d08c:	f000 f9ba 	bl	800d404 <_Bfree>
 800d090:	e69c      	b.n	800cdcc <_dtoa_r+0x6c4>
 800d092:	2600      	movs	r6, #0
 800d094:	4637      	mov	r7, r6
 800d096:	e7e1      	b.n	800d05c <_dtoa_r+0x954>
 800d098:	46bb      	mov	fp, r7
 800d09a:	4637      	mov	r7, r6
 800d09c:	e599      	b.n	800cbd2 <_dtoa_r+0x4ca>
 800d09e:	bf00      	nop
 800d0a0:	40240000 	.word	0x40240000
 800d0a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d0a6:	2b00      	cmp	r3, #0
 800d0a8:	f000 80c8 	beq.w	800d23c <_dtoa_r+0xb34>
 800d0ac:	9b04      	ldr	r3, [sp, #16]
 800d0ae:	9301      	str	r3, [sp, #4]
 800d0b0:	2d00      	cmp	r5, #0
 800d0b2:	dd05      	ble.n	800d0c0 <_dtoa_r+0x9b8>
 800d0b4:	4639      	mov	r1, r7
 800d0b6:	462a      	mov	r2, r5
 800d0b8:	4620      	mov	r0, r4
 800d0ba:	f000 fbbd 	bl	800d838 <__lshift>
 800d0be:	4607      	mov	r7, r0
 800d0c0:	f1b8 0f00 	cmp.w	r8, #0
 800d0c4:	d05b      	beq.n	800d17e <_dtoa_r+0xa76>
 800d0c6:	6879      	ldr	r1, [r7, #4]
 800d0c8:	4620      	mov	r0, r4
 800d0ca:	f000 f95b 	bl	800d384 <_Balloc>
 800d0ce:	4605      	mov	r5, r0
 800d0d0:	b928      	cbnz	r0, 800d0de <_dtoa_r+0x9d6>
 800d0d2:	4b83      	ldr	r3, [pc, #524]	; (800d2e0 <_dtoa_r+0xbd8>)
 800d0d4:	4602      	mov	r2, r0
 800d0d6:	f240 21ef 	movw	r1, #751	; 0x2ef
 800d0da:	f7ff bb2e 	b.w	800c73a <_dtoa_r+0x32>
 800d0de:	693a      	ldr	r2, [r7, #16]
 800d0e0:	3202      	adds	r2, #2
 800d0e2:	0092      	lsls	r2, r2, #2
 800d0e4:	f107 010c 	add.w	r1, r7, #12
 800d0e8:	300c      	adds	r0, #12
 800d0ea:	f001 fec1 	bl	800ee70 <memcpy>
 800d0ee:	2201      	movs	r2, #1
 800d0f0:	4629      	mov	r1, r5
 800d0f2:	4620      	mov	r0, r4
 800d0f4:	f000 fba0 	bl	800d838 <__lshift>
 800d0f8:	9b00      	ldr	r3, [sp, #0]
 800d0fa:	3301      	adds	r3, #1
 800d0fc:	9304      	str	r3, [sp, #16]
 800d0fe:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d102:	4413      	add	r3, r2
 800d104:	9308      	str	r3, [sp, #32]
 800d106:	9b02      	ldr	r3, [sp, #8]
 800d108:	f003 0301 	and.w	r3, r3, #1
 800d10c:	46b8      	mov	r8, r7
 800d10e:	9306      	str	r3, [sp, #24]
 800d110:	4607      	mov	r7, r0
 800d112:	9b04      	ldr	r3, [sp, #16]
 800d114:	4631      	mov	r1, r6
 800d116:	3b01      	subs	r3, #1
 800d118:	4650      	mov	r0, sl
 800d11a:	9301      	str	r3, [sp, #4]
 800d11c:	f7ff fa6c 	bl	800c5f8 <quorem>
 800d120:	4641      	mov	r1, r8
 800d122:	9002      	str	r0, [sp, #8]
 800d124:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800d128:	4650      	mov	r0, sl
 800d12a:	f000 fbf1 	bl	800d910 <__mcmp>
 800d12e:	463a      	mov	r2, r7
 800d130:	9005      	str	r0, [sp, #20]
 800d132:	4631      	mov	r1, r6
 800d134:	4620      	mov	r0, r4
 800d136:	f000 fc07 	bl	800d948 <__mdiff>
 800d13a:	68c2      	ldr	r2, [r0, #12]
 800d13c:	4605      	mov	r5, r0
 800d13e:	bb02      	cbnz	r2, 800d182 <_dtoa_r+0xa7a>
 800d140:	4601      	mov	r1, r0
 800d142:	4650      	mov	r0, sl
 800d144:	f000 fbe4 	bl	800d910 <__mcmp>
 800d148:	4602      	mov	r2, r0
 800d14a:	4629      	mov	r1, r5
 800d14c:	4620      	mov	r0, r4
 800d14e:	9209      	str	r2, [sp, #36]	; 0x24
 800d150:	f000 f958 	bl	800d404 <_Bfree>
 800d154:	9b07      	ldr	r3, [sp, #28]
 800d156:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d158:	9d04      	ldr	r5, [sp, #16]
 800d15a:	ea43 0102 	orr.w	r1, r3, r2
 800d15e:	9b06      	ldr	r3, [sp, #24]
 800d160:	4319      	orrs	r1, r3
 800d162:	d110      	bne.n	800d186 <_dtoa_r+0xa7e>
 800d164:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800d168:	d029      	beq.n	800d1be <_dtoa_r+0xab6>
 800d16a:	9b05      	ldr	r3, [sp, #20]
 800d16c:	2b00      	cmp	r3, #0
 800d16e:	dd02      	ble.n	800d176 <_dtoa_r+0xa6e>
 800d170:	9b02      	ldr	r3, [sp, #8]
 800d172:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800d176:	9b01      	ldr	r3, [sp, #4]
 800d178:	f883 9000 	strb.w	r9, [r3]
 800d17c:	e774      	b.n	800d068 <_dtoa_r+0x960>
 800d17e:	4638      	mov	r0, r7
 800d180:	e7ba      	b.n	800d0f8 <_dtoa_r+0x9f0>
 800d182:	2201      	movs	r2, #1
 800d184:	e7e1      	b.n	800d14a <_dtoa_r+0xa42>
 800d186:	9b05      	ldr	r3, [sp, #20]
 800d188:	2b00      	cmp	r3, #0
 800d18a:	db04      	blt.n	800d196 <_dtoa_r+0xa8e>
 800d18c:	9907      	ldr	r1, [sp, #28]
 800d18e:	430b      	orrs	r3, r1
 800d190:	9906      	ldr	r1, [sp, #24]
 800d192:	430b      	orrs	r3, r1
 800d194:	d120      	bne.n	800d1d8 <_dtoa_r+0xad0>
 800d196:	2a00      	cmp	r2, #0
 800d198:	dded      	ble.n	800d176 <_dtoa_r+0xa6e>
 800d19a:	4651      	mov	r1, sl
 800d19c:	2201      	movs	r2, #1
 800d19e:	4620      	mov	r0, r4
 800d1a0:	f000 fb4a 	bl	800d838 <__lshift>
 800d1a4:	4631      	mov	r1, r6
 800d1a6:	4682      	mov	sl, r0
 800d1a8:	f000 fbb2 	bl	800d910 <__mcmp>
 800d1ac:	2800      	cmp	r0, #0
 800d1ae:	dc03      	bgt.n	800d1b8 <_dtoa_r+0xab0>
 800d1b0:	d1e1      	bne.n	800d176 <_dtoa_r+0xa6e>
 800d1b2:	f019 0f01 	tst.w	r9, #1
 800d1b6:	d0de      	beq.n	800d176 <_dtoa_r+0xa6e>
 800d1b8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800d1bc:	d1d8      	bne.n	800d170 <_dtoa_r+0xa68>
 800d1be:	9a01      	ldr	r2, [sp, #4]
 800d1c0:	2339      	movs	r3, #57	; 0x39
 800d1c2:	7013      	strb	r3, [r2, #0]
 800d1c4:	462b      	mov	r3, r5
 800d1c6:	461d      	mov	r5, r3
 800d1c8:	3b01      	subs	r3, #1
 800d1ca:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800d1ce:	2a39      	cmp	r2, #57	; 0x39
 800d1d0:	d06c      	beq.n	800d2ac <_dtoa_r+0xba4>
 800d1d2:	3201      	adds	r2, #1
 800d1d4:	701a      	strb	r2, [r3, #0]
 800d1d6:	e747      	b.n	800d068 <_dtoa_r+0x960>
 800d1d8:	2a00      	cmp	r2, #0
 800d1da:	dd07      	ble.n	800d1ec <_dtoa_r+0xae4>
 800d1dc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800d1e0:	d0ed      	beq.n	800d1be <_dtoa_r+0xab6>
 800d1e2:	9a01      	ldr	r2, [sp, #4]
 800d1e4:	f109 0301 	add.w	r3, r9, #1
 800d1e8:	7013      	strb	r3, [r2, #0]
 800d1ea:	e73d      	b.n	800d068 <_dtoa_r+0x960>
 800d1ec:	9b04      	ldr	r3, [sp, #16]
 800d1ee:	9a08      	ldr	r2, [sp, #32]
 800d1f0:	f803 9c01 	strb.w	r9, [r3, #-1]
 800d1f4:	4293      	cmp	r3, r2
 800d1f6:	d043      	beq.n	800d280 <_dtoa_r+0xb78>
 800d1f8:	4651      	mov	r1, sl
 800d1fa:	2300      	movs	r3, #0
 800d1fc:	220a      	movs	r2, #10
 800d1fe:	4620      	mov	r0, r4
 800d200:	f000 f922 	bl	800d448 <__multadd>
 800d204:	45b8      	cmp	r8, r7
 800d206:	4682      	mov	sl, r0
 800d208:	f04f 0300 	mov.w	r3, #0
 800d20c:	f04f 020a 	mov.w	r2, #10
 800d210:	4641      	mov	r1, r8
 800d212:	4620      	mov	r0, r4
 800d214:	d107      	bne.n	800d226 <_dtoa_r+0xb1e>
 800d216:	f000 f917 	bl	800d448 <__multadd>
 800d21a:	4680      	mov	r8, r0
 800d21c:	4607      	mov	r7, r0
 800d21e:	9b04      	ldr	r3, [sp, #16]
 800d220:	3301      	adds	r3, #1
 800d222:	9304      	str	r3, [sp, #16]
 800d224:	e775      	b.n	800d112 <_dtoa_r+0xa0a>
 800d226:	f000 f90f 	bl	800d448 <__multadd>
 800d22a:	4639      	mov	r1, r7
 800d22c:	4680      	mov	r8, r0
 800d22e:	2300      	movs	r3, #0
 800d230:	220a      	movs	r2, #10
 800d232:	4620      	mov	r0, r4
 800d234:	f000 f908 	bl	800d448 <__multadd>
 800d238:	4607      	mov	r7, r0
 800d23a:	e7f0      	b.n	800d21e <_dtoa_r+0xb16>
 800d23c:	9b04      	ldr	r3, [sp, #16]
 800d23e:	9301      	str	r3, [sp, #4]
 800d240:	9d00      	ldr	r5, [sp, #0]
 800d242:	4631      	mov	r1, r6
 800d244:	4650      	mov	r0, sl
 800d246:	f7ff f9d7 	bl	800c5f8 <quorem>
 800d24a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800d24e:	9b00      	ldr	r3, [sp, #0]
 800d250:	f805 9b01 	strb.w	r9, [r5], #1
 800d254:	1aea      	subs	r2, r5, r3
 800d256:	9b01      	ldr	r3, [sp, #4]
 800d258:	4293      	cmp	r3, r2
 800d25a:	dd07      	ble.n	800d26c <_dtoa_r+0xb64>
 800d25c:	4651      	mov	r1, sl
 800d25e:	2300      	movs	r3, #0
 800d260:	220a      	movs	r2, #10
 800d262:	4620      	mov	r0, r4
 800d264:	f000 f8f0 	bl	800d448 <__multadd>
 800d268:	4682      	mov	sl, r0
 800d26a:	e7ea      	b.n	800d242 <_dtoa_r+0xb3a>
 800d26c:	9b01      	ldr	r3, [sp, #4]
 800d26e:	2b00      	cmp	r3, #0
 800d270:	bfc8      	it	gt
 800d272:	461d      	movgt	r5, r3
 800d274:	9b00      	ldr	r3, [sp, #0]
 800d276:	bfd8      	it	le
 800d278:	2501      	movle	r5, #1
 800d27a:	441d      	add	r5, r3
 800d27c:	f04f 0800 	mov.w	r8, #0
 800d280:	4651      	mov	r1, sl
 800d282:	2201      	movs	r2, #1
 800d284:	4620      	mov	r0, r4
 800d286:	f000 fad7 	bl	800d838 <__lshift>
 800d28a:	4631      	mov	r1, r6
 800d28c:	4682      	mov	sl, r0
 800d28e:	f000 fb3f 	bl	800d910 <__mcmp>
 800d292:	2800      	cmp	r0, #0
 800d294:	dc96      	bgt.n	800d1c4 <_dtoa_r+0xabc>
 800d296:	d102      	bne.n	800d29e <_dtoa_r+0xb96>
 800d298:	f019 0f01 	tst.w	r9, #1
 800d29c:	d192      	bne.n	800d1c4 <_dtoa_r+0xabc>
 800d29e:	462b      	mov	r3, r5
 800d2a0:	461d      	mov	r5, r3
 800d2a2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d2a6:	2a30      	cmp	r2, #48	; 0x30
 800d2a8:	d0fa      	beq.n	800d2a0 <_dtoa_r+0xb98>
 800d2aa:	e6dd      	b.n	800d068 <_dtoa_r+0x960>
 800d2ac:	9a00      	ldr	r2, [sp, #0]
 800d2ae:	429a      	cmp	r2, r3
 800d2b0:	d189      	bne.n	800d1c6 <_dtoa_r+0xabe>
 800d2b2:	f10b 0b01 	add.w	fp, fp, #1
 800d2b6:	2331      	movs	r3, #49	; 0x31
 800d2b8:	e796      	b.n	800d1e8 <_dtoa_r+0xae0>
 800d2ba:	4b0a      	ldr	r3, [pc, #40]	; (800d2e4 <_dtoa_r+0xbdc>)
 800d2bc:	f7ff ba99 	b.w	800c7f2 <_dtoa_r+0xea>
 800d2c0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	f47f aa6d 	bne.w	800c7a2 <_dtoa_r+0x9a>
 800d2c8:	4b07      	ldr	r3, [pc, #28]	; (800d2e8 <_dtoa_r+0xbe0>)
 800d2ca:	f7ff ba92 	b.w	800c7f2 <_dtoa_r+0xea>
 800d2ce:	9b01      	ldr	r3, [sp, #4]
 800d2d0:	2b00      	cmp	r3, #0
 800d2d2:	dcb5      	bgt.n	800d240 <_dtoa_r+0xb38>
 800d2d4:	9b07      	ldr	r3, [sp, #28]
 800d2d6:	2b02      	cmp	r3, #2
 800d2d8:	f73f aeb1 	bgt.w	800d03e <_dtoa_r+0x936>
 800d2dc:	e7b0      	b.n	800d240 <_dtoa_r+0xb38>
 800d2de:	bf00      	nop
 800d2e0:	0800fdb1 	.word	0x0800fdb1
 800d2e4:	0800fd0c 	.word	0x0800fd0c
 800d2e8:	0800fd35 	.word	0x0800fd35

0800d2ec <_free_r>:
 800d2ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d2ee:	2900      	cmp	r1, #0
 800d2f0:	d044      	beq.n	800d37c <_free_r+0x90>
 800d2f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d2f6:	9001      	str	r0, [sp, #4]
 800d2f8:	2b00      	cmp	r3, #0
 800d2fa:	f1a1 0404 	sub.w	r4, r1, #4
 800d2fe:	bfb8      	it	lt
 800d300:	18e4      	addlt	r4, r4, r3
 800d302:	f7fe f93b 	bl	800b57c <__malloc_lock>
 800d306:	4a1e      	ldr	r2, [pc, #120]	; (800d380 <_free_r+0x94>)
 800d308:	9801      	ldr	r0, [sp, #4]
 800d30a:	6813      	ldr	r3, [r2, #0]
 800d30c:	b933      	cbnz	r3, 800d31c <_free_r+0x30>
 800d30e:	6063      	str	r3, [r4, #4]
 800d310:	6014      	str	r4, [r2, #0]
 800d312:	b003      	add	sp, #12
 800d314:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d318:	f7fe b936 	b.w	800b588 <__malloc_unlock>
 800d31c:	42a3      	cmp	r3, r4
 800d31e:	d908      	bls.n	800d332 <_free_r+0x46>
 800d320:	6825      	ldr	r5, [r4, #0]
 800d322:	1961      	adds	r1, r4, r5
 800d324:	428b      	cmp	r3, r1
 800d326:	bf01      	itttt	eq
 800d328:	6819      	ldreq	r1, [r3, #0]
 800d32a:	685b      	ldreq	r3, [r3, #4]
 800d32c:	1949      	addeq	r1, r1, r5
 800d32e:	6021      	streq	r1, [r4, #0]
 800d330:	e7ed      	b.n	800d30e <_free_r+0x22>
 800d332:	461a      	mov	r2, r3
 800d334:	685b      	ldr	r3, [r3, #4]
 800d336:	b10b      	cbz	r3, 800d33c <_free_r+0x50>
 800d338:	42a3      	cmp	r3, r4
 800d33a:	d9fa      	bls.n	800d332 <_free_r+0x46>
 800d33c:	6811      	ldr	r1, [r2, #0]
 800d33e:	1855      	adds	r5, r2, r1
 800d340:	42a5      	cmp	r5, r4
 800d342:	d10b      	bne.n	800d35c <_free_r+0x70>
 800d344:	6824      	ldr	r4, [r4, #0]
 800d346:	4421      	add	r1, r4
 800d348:	1854      	adds	r4, r2, r1
 800d34a:	42a3      	cmp	r3, r4
 800d34c:	6011      	str	r1, [r2, #0]
 800d34e:	d1e0      	bne.n	800d312 <_free_r+0x26>
 800d350:	681c      	ldr	r4, [r3, #0]
 800d352:	685b      	ldr	r3, [r3, #4]
 800d354:	6053      	str	r3, [r2, #4]
 800d356:	440c      	add	r4, r1
 800d358:	6014      	str	r4, [r2, #0]
 800d35a:	e7da      	b.n	800d312 <_free_r+0x26>
 800d35c:	d902      	bls.n	800d364 <_free_r+0x78>
 800d35e:	230c      	movs	r3, #12
 800d360:	6003      	str	r3, [r0, #0]
 800d362:	e7d6      	b.n	800d312 <_free_r+0x26>
 800d364:	6825      	ldr	r5, [r4, #0]
 800d366:	1961      	adds	r1, r4, r5
 800d368:	428b      	cmp	r3, r1
 800d36a:	bf04      	itt	eq
 800d36c:	6819      	ldreq	r1, [r3, #0]
 800d36e:	685b      	ldreq	r3, [r3, #4]
 800d370:	6063      	str	r3, [r4, #4]
 800d372:	bf04      	itt	eq
 800d374:	1949      	addeq	r1, r1, r5
 800d376:	6021      	streq	r1, [r4, #0]
 800d378:	6054      	str	r4, [r2, #4]
 800d37a:	e7ca      	b.n	800d312 <_free_r+0x26>
 800d37c:	b003      	add	sp, #12
 800d37e:	bd30      	pop	{r4, r5, pc}
 800d380:	20002200 	.word	0x20002200

0800d384 <_Balloc>:
 800d384:	b570      	push	{r4, r5, r6, lr}
 800d386:	69c6      	ldr	r6, [r0, #28]
 800d388:	4604      	mov	r4, r0
 800d38a:	460d      	mov	r5, r1
 800d38c:	b976      	cbnz	r6, 800d3ac <_Balloc+0x28>
 800d38e:	2010      	movs	r0, #16
 800d390:	f7fe f844 	bl	800b41c <malloc>
 800d394:	4602      	mov	r2, r0
 800d396:	61e0      	str	r0, [r4, #28]
 800d398:	b920      	cbnz	r0, 800d3a4 <_Balloc+0x20>
 800d39a:	4b18      	ldr	r3, [pc, #96]	; (800d3fc <_Balloc+0x78>)
 800d39c:	4818      	ldr	r0, [pc, #96]	; (800d400 <_Balloc+0x7c>)
 800d39e:	216b      	movs	r1, #107	; 0x6b
 800d3a0:	f001 fd7e 	bl	800eea0 <__assert_func>
 800d3a4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d3a8:	6006      	str	r6, [r0, #0]
 800d3aa:	60c6      	str	r6, [r0, #12]
 800d3ac:	69e6      	ldr	r6, [r4, #28]
 800d3ae:	68f3      	ldr	r3, [r6, #12]
 800d3b0:	b183      	cbz	r3, 800d3d4 <_Balloc+0x50>
 800d3b2:	69e3      	ldr	r3, [r4, #28]
 800d3b4:	68db      	ldr	r3, [r3, #12]
 800d3b6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d3ba:	b9b8      	cbnz	r0, 800d3ec <_Balloc+0x68>
 800d3bc:	2101      	movs	r1, #1
 800d3be:	fa01 f605 	lsl.w	r6, r1, r5
 800d3c2:	1d72      	adds	r2, r6, #5
 800d3c4:	0092      	lsls	r2, r2, #2
 800d3c6:	4620      	mov	r0, r4
 800d3c8:	f001 fd88 	bl	800eedc <_calloc_r>
 800d3cc:	b160      	cbz	r0, 800d3e8 <_Balloc+0x64>
 800d3ce:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d3d2:	e00e      	b.n	800d3f2 <_Balloc+0x6e>
 800d3d4:	2221      	movs	r2, #33	; 0x21
 800d3d6:	2104      	movs	r1, #4
 800d3d8:	4620      	mov	r0, r4
 800d3da:	f001 fd7f 	bl	800eedc <_calloc_r>
 800d3de:	69e3      	ldr	r3, [r4, #28]
 800d3e0:	60f0      	str	r0, [r6, #12]
 800d3e2:	68db      	ldr	r3, [r3, #12]
 800d3e4:	2b00      	cmp	r3, #0
 800d3e6:	d1e4      	bne.n	800d3b2 <_Balloc+0x2e>
 800d3e8:	2000      	movs	r0, #0
 800d3ea:	bd70      	pop	{r4, r5, r6, pc}
 800d3ec:	6802      	ldr	r2, [r0, #0]
 800d3ee:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d3f2:	2300      	movs	r3, #0
 800d3f4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d3f8:	e7f7      	b.n	800d3ea <_Balloc+0x66>
 800d3fa:	bf00      	nop
 800d3fc:	0800fd42 	.word	0x0800fd42
 800d400:	0800fdc2 	.word	0x0800fdc2

0800d404 <_Bfree>:
 800d404:	b570      	push	{r4, r5, r6, lr}
 800d406:	69c6      	ldr	r6, [r0, #28]
 800d408:	4605      	mov	r5, r0
 800d40a:	460c      	mov	r4, r1
 800d40c:	b976      	cbnz	r6, 800d42c <_Bfree+0x28>
 800d40e:	2010      	movs	r0, #16
 800d410:	f7fe f804 	bl	800b41c <malloc>
 800d414:	4602      	mov	r2, r0
 800d416:	61e8      	str	r0, [r5, #28]
 800d418:	b920      	cbnz	r0, 800d424 <_Bfree+0x20>
 800d41a:	4b09      	ldr	r3, [pc, #36]	; (800d440 <_Bfree+0x3c>)
 800d41c:	4809      	ldr	r0, [pc, #36]	; (800d444 <_Bfree+0x40>)
 800d41e:	218f      	movs	r1, #143	; 0x8f
 800d420:	f001 fd3e 	bl	800eea0 <__assert_func>
 800d424:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d428:	6006      	str	r6, [r0, #0]
 800d42a:	60c6      	str	r6, [r0, #12]
 800d42c:	b13c      	cbz	r4, 800d43e <_Bfree+0x3a>
 800d42e:	69eb      	ldr	r3, [r5, #28]
 800d430:	6862      	ldr	r2, [r4, #4]
 800d432:	68db      	ldr	r3, [r3, #12]
 800d434:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d438:	6021      	str	r1, [r4, #0]
 800d43a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d43e:	bd70      	pop	{r4, r5, r6, pc}
 800d440:	0800fd42 	.word	0x0800fd42
 800d444:	0800fdc2 	.word	0x0800fdc2

0800d448 <__multadd>:
 800d448:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d44c:	690d      	ldr	r5, [r1, #16]
 800d44e:	4607      	mov	r7, r0
 800d450:	460c      	mov	r4, r1
 800d452:	461e      	mov	r6, r3
 800d454:	f101 0c14 	add.w	ip, r1, #20
 800d458:	2000      	movs	r0, #0
 800d45a:	f8dc 3000 	ldr.w	r3, [ip]
 800d45e:	b299      	uxth	r1, r3
 800d460:	fb02 6101 	mla	r1, r2, r1, r6
 800d464:	0c1e      	lsrs	r6, r3, #16
 800d466:	0c0b      	lsrs	r3, r1, #16
 800d468:	fb02 3306 	mla	r3, r2, r6, r3
 800d46c:	b289      	uxth	r1, r1
 800d46e:	3001      	adds	r0, #1
 800d470:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d474:	4285      	cmp	r5, r0
 800d476:	f84c 1b04 	str.w	r1, [ip], #4
 800d47a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d47e:	dcec      	bgt.n	800d45a <__multadd+0x12>
 800d480:	b30e      	cbz	r6, 800d4c6 <__multadd+0x7e>
 800d482:	68a3      	ldr	r3, [r4, #8]
 800d484:	42ab      	cmp	r3, r5
 800d486:	dc19      	bgt.n	800d4bc <__multadd+0x74>
 800d488:	6861      	ldr	r1, [r4, #4]
 800d48a:	4638      	mov	r0, r7
 800d48c:	3101      	adds	r1, #1
 800d48e:	f7ff ff79 	bl	800d384 <_Balloc>
 800d492:	4680      	mov	r8, r0
 800d494:	b928      	cbnz	r0, 800d4a2 <__multadd+0x5a>
 800d496:	4602      	mov	r2, r0
 800d498:	4b0c      	ldr	r3, [pc, #48]	; (800d4cc <__multadd+0x84>)
 800d49a:	480d      	ldr	r0, [pc, #52]	; (800d4d0 <__multadd+0x88>)
 800d49c:	21ba      	movs	r1, #186	; 0xba
 800d49e:	f001 fcff 	bl	800eea0 <__assert_func>
 800d4a2:	6922      	ldr	r2, [r4, #16]
 800d4a4:	3202      	adds	r2, #2
 800d4a6:	f104 010c 	add.w	r1, r4, #12
 800d4aa:	0092      	lsls	r2, r2, #2
 800d4ac:	300c      	adds	r0, #12
 800d4ae:	f001 fcdf 	bl	800ee70 <memcpy>
 800d4b2:	4621      	mov	r1, r4
 800d4b4:	4638      	mov	r0, r7
 800d4b6:	f7ff ffa5 	bl	800d404 <_Bfree>
 800d4ba:	4644      	mov	r4, r8
 800d4bc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d4c0:	3501      	adds	r5, #1
 800d4c2:	615e      	str	r6, [r3, #20]
 800d4c4:	6125      	str	r5, [r4, #16]
 800d4c6:	4620      	mov	r0, r4
 800d4c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d4cc:	0800fdb1 	.word	0x0800fdb1
 800d4d0:	0800fdc2 	.word	0x0800fdc2

0800d4d4 <__s2b>:
 800d4d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d4d8:	460c      	mov	r4, r1
 800d4da:	4615      	mov	r5, r2
 800d4dc:	461f      	mov	r7, r3
 800d4de:	2209      	movs	r2, #9
 800d4e0:	3308      	adds	r3, #8
 800d4e2:	4606      	mov	r6, r0
 800d4e4:	fb93 f3f2 	sdiv	r3, r3, r2
 800d4e8:	2100      	movs	r1, #0
 800d4ea:	2201      	movs	r2, #1
 800d4ec:	429a      	cmp	r2, r3
 800d4ee:	db09      	blt.n	800d504 <__s2b+0x30>
 800d4f0:	4630      	mov	r0, r6
 800d4f2:	f7ff ff47 	bl	800d384 <_Balloc>
 800d4f6:	b940      	cbnz	r0, 800d50a <__s2b+0x36>
 800d4f8:	4602      	mov	r2, r0
 800d4fa:	4b19      	ldr	r3, [pc, #100]	; (800d560 <__s2b+0x8c>)
 800d4fc:	4819      	ldr	r0, [pc, #100]	; (800d564 <__s2b+0x90>)
 800d4fe:	21d3      	movs	r1, #211	; 0xd3
 800d500:	f001 fcce 	bl	800eea0 <__assert_func>
 800d504:	0052      	lsls	r2, r2, #1
 800d506:	3101      	adds	r1, #1
 800d508:	e7f0      	b.n	800d4ec <__s2b+0x18>
 800d50a:	9b08      	ldr	r3, [sp, #32]
 800d50c:	6143      	str	r3, [r0, #20]
 800d50e:	2d09      	cmp	r5, #9
 800d510:	f04f 0301 	mov.w	r3, #1
 800d514:	6103      	str	r3, [r0, #16]
 800d516:	dd16      	ble.n	800d546 <__s2b+0x72>
 800d518:	f104 0909 	add.w	r9, r4, #9
 800d51c:	46c8      	mov	r8, r9
 800d51e:	442c      	add	r4, r5
 800d520:	f818 3b01 	ldrb.w	r3, [r8], #1
 800d524:	4601      	mov	r1, r0
 800d526:	3b30      	subs	r3, #48	; 0x30
 800d528:	220a      	movs	r2, #10
 800d52a:	4630      	mov	r0, r6
 800d52c:	f7ff ff8c 	bl	800d448 <__multadd>
 800d530:	45a0      	cmp	r8, r4
 800d532:	d1f5      	bne.n	800d520 <__s2b+0x4c>
 800d534:	f1a5 0408 	sub.w	r4, r5, #8
 800d538:	444c      	add	r4, r9
 800d53a:	1b2d      	subs	r5, r5, r4
 800d53c:	1963      	adds	r3, r4, r5
 800d53e:	42bb      	cmp	r3, r7
 800d540:	db04      	blt.n	800d54c <__s2b+0x78>
 800d542:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d546:	340a      	adds	r4, #10
 800d548:	2509      	movs	r5, #9
 800d54a:	e7f6      	b.n	800d53a <__s2b+0x66>
 800d54c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800d550:	4601      	mov	r1, r0
 800d552:	3b30      	subs	r3, #48	; 0x30
 800d554:	220a      	movs	r2, #10
 800d556:	4630      	mov	r0, r6
 800d558:	f7ff ff76 	bl	800d448 <__multadd>
 800d55c:	e7ee      	b.n	800d53c <__s2b+0x68>
 800d55e:	bf00      	nop
 800d560:	0800fdb1 	.word	0x0800fdb1
 800d564:	0800fdc2 	.word	0x0800fdc2

0800d568 <__hi0bits>:
 800d568:	0c03      	lsrs	r3, r0, #16
 800d56a:	041b      	lsls	r3, r3, #16
 800d56c:	b9d3      	cbnz	r3, 800d5a4 <__hi0bits+0x3c>
 800d56e:	0400      	lsls	r0, r0, #16
 800d570:	2310      	movs	r3, #16
 800d572:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800d576:	bf04      	itt	eq
 800d578:	0200      	lsleq	r0, r0, #8
 800d57a:	3308      	addeq	r3, #8
 800d57c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800d580:	bf04      	itt	eq
 800d582:	0100      	lsleq	r0, r0, #4
 800d584:	3304      	addeq	r3, #4
 800d586:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800d58a:	bf04      	itt	eq
 800d58c:	0080      	lsleq	r0, r0, #2
 800d58e:	3302      	addeq	r3, #2
 800d590:	2800      	cmp	r0, #0
 800d592:	db05      	blt.n	800d5a0 <__hi0bits+0x38>
 800d594:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800d598:	f103 0301 	add.w	r3, r3, #1
 800d59c:	bf08      	it	eq
 800d59e:	2320      	moveq	r3, #32
 800d5a0:	4618      	mov	r0, r3
 800d5a2:	4770      	bx	lr
 800d5a4:	2300      	movs	r3, #0
 800d5a6:	e7e4      	b.n	800d572 <__hi0bits+0xa>

0800d5a8 <__lo0bits>:
 800d5a8:	6803      	ldr	r3, [r0, #0]
 800d5aa:	f013 0207 	ands.w	r2, r3, #7
 800d5ae:	d00c      	beq.n	800d5ca <__lo0bits+0x22>
 800d5b0:	07d9      	lsls	r1, r3, #31
 800d5b2:	d422      	bmi.n	800d5fa <__lo0bits+0x52>
 800d5b4:	079a      	lsls	r2, r3, #30
 800d5b6:	bf49      	itett	mi
 800d5b8:	085b      	lsrmi	r3, r3, #1
 800d5ba:	089b      	lsrpl	r3, r3, #2
 800d5bc:	6003      	strmi	r3, [r0, #0]
 800d5be:	2201      	movmi	r2, #1
 800d5c0:	bf5c      	itt	pl
 800d5c2:	6003      	strpl	r3, [r0, #0]
 800d5c4:	2202      	movpl	r2, #2
 800d5c6:	4610      	mov	r0, r2
 800d5c8:	4770      	bx	lr
 800d5ca:	b299      	uxth	r1, r3
 800d5cc:	b909      	cbnz	r1, 800d5d2 <__lo0bits+0x2a>
 800d5ce:	0c1b      	lsrs	r3, r3, #16
 800d5d0:	2210      	movs	r2, #16
 800d5d2:	b2d9      	uxtb	r1, r3
 800d5d4:	b909      	cbnz	r1, 800d5da <__lo0bits+0x32>
 800d5d6:	3208      	adds	r2, #8
 800d5d8:	0a1b      	lsrs	r3, r3, #8
 800d5da:	0719      	lsls	r1, r3, #28
 800d5dc:	bf04      	itt	eq
 800d5de:	091b      	lsreq	r3, r3, #4
 800d5e0:	3204      	addeq	r2, #4
 800d5e2:	0799      	lsls	r1, r3, #30
 800d5e4:	bf04      	itt	eq
 800d5e6:	089b      	lsreq	r3, r3, #2
 800d5e8:	3202      	addeq	r2, #2
 800d5ea:	07d9      	lsls	r1, r3, #31
 800d5ec:	d403      	bmi.n	800d5f6 <__lo0bits+0x4e>
 800d5ee:	085b      	lsrs	r3, r3, #1
 800d5f0:	f102 0201 	add.w	r2, r2, #1
 800d5f4:	d003      	beq.n	800d5fe <__lo0bits+0x56>
 800d5f6:	6003      	str	r3, [r0, #0]
 800d5f8:	e7e5      	b.n	800d5c6 <__lo0bits+0x1e>
 800d5fa:	2200      	movs	r2, #0
 800d5fc:	e7e3      	b.n	800d5c6 <__lo0bits+0x1e>
 800d5fe:	2220      	movs	r2, #32
 800d600:	e7e1      	b.n	800d5c6 <__lo0bits+0x1e>
	...

0800d604 <__i2b>:
 800d604:	b510      	push	{r4, lr}
 800d606:	460c      	mov	r4, r1
 800d608:	2101      	movs	r1, #1
 800d60a:	f7ff febb 	bl	800d384 <_Balloc>
 800d60e:	4602      	mov	r2, r0
 800d610:	b928      	cbnz	r0, 800d61e <__i2b+0x1a>
 800d612:	4b05      	ldr	r3, [pc, #20]	; (800d628 <__i2b+0x24>)
 800d614:	4805      	ldr	r0, [pc, #20]	; (800d62c <__i2b+0x28>)
 800d616:	f240 1145 	movw	r1, #325	; 0x145
 800d61a:	f001 fc41 	bl	800eea0 <__assert_func>
 800d61e:	2301      	movs	r3, #1
 800d620:	6144      	str	r4, [r0, #20]
 800d622:	6103      	str	r3, [r0, #16]
 800d624:	bd10      	pop	{r4, pc}
 800d626:	bf00      	nop
 800d628:	0800fdb1 	.word	0x0800fdb1
 800d62c:	0800fdc2 	.word	0x0800fdc2

0800d630 <__multiply>:
 800d630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d634:	4691      	mov	r9, r2
 800d636:	690a      	ldr	r2, [r1, #16]
 800d638:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d63c:	429a      	cmp	r2, r3
 800d63e:	bfb8      	it	lt
 800d640:	460b      	movlt	r3, r1
 800d642:	460c      	mov	r4, r1
 800d644:	bfbc      	itt	lt
 800d646:	464c      	movlt	r4, r9
 800d648:	4699      	movlt	r9, r3
 800d64a:	6927      	ldr	r7, [r4, #16]
 800d64c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800d650:	68a3      	ldr	r3, [r4, #8]
 800d652:	6861      	ldr	r1, [r4, #4]
 800d654:	eb07 060a 	add.w	r6, r7, sl
 800d658:	42b3      	cmp	r3, r6
 800d65a:	b085      	sub	sp, #20
 800d65c:	bfb8      	it	lt
 800d65e:	3101      	addlt	r1, #1
 800d660:	f7ff fe90 	bl	800d384 <_Balloc>
 800d664:	b930      	cbnz	r0, 800d674 <__multiply+0x44>
 800d666:	4602      	mov	r2, r0
 800d668:	4b44      	ldr	r3, [pc, #272]	; (800d77c <__multiply+0x14c>)
 800d66a:	4845      	ldr	r0, [pc, #276]	; (800d780 <__multiply+0x150>)
 800d66c:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800d670:	f001 fc16 	bl	800eea0 <__assert_func>
 800d674:	f100 0514 	add.w	r5, r0, #20
 800d678:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d67c:	462b      	mov	r3, r5
 800d67e:	2200      	movs	r2, #0
 800d680:	4543      	cmp	r3, r8
 800d682:	d321      	bcc.n	800d6c8 <__multiply+0x98>
 800d684:	f104 0314 	add.w	r3, r4, #20
 800d688:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800d68c:	f109 0314 	add.w	r3, r9, #20
 800d690:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800d694:	9202      	str	r2, [sp, #8]
 800d696:	1b3a      	subs	r2, r7, r4
 800d698:	3a15      	subs	r2, #21
 800d69a:	f022 0203 	bic.w	r2, r2, #3
 800d69e:	3204      	adds	r2, #4
 800d6a0:	f104 0115 	add.w	r1, r4, #21
 800d6a4:	428f      	cmp	r7, r1
 800d6a6:	bf38      	it	cc
 800d6a8:	2204      	movcc	r2, #4
 800d6aa:	9201      	str	r2, [sp, #4]
 800d6ac:	9a02      	ldr	r2, [sp, #8]
 800d6ae:	9303      	str	r3, [sp, #12]
 800d6b0:	429a      	cmp	r2, r3
 800d6b2:	d80c      	bhi.n	800d6ce <__multiply+0x9e>
 800d6b4:	2e00      	cmp	r6, #0
 800d6b6:	dd03      	ble.n	800d6c0 <__multiply+0x90>
 800d6b8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d6bc:	2b00      	cmp	r3, #0
 800d6be:	d05b      	beq.n	800d778 <__multiply+0x148>
 800d6c0:	6106      	str	r6, [r0, #16]
 800d6c2:	b005      	add	sp, #20
 800d6c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d6c8:	f843 2b04 	str.w	r2, [r3], #4
 800d6cc:	e7d8      	b.n	800d680 <__multiply+0x50>
 800d6ce:	f8b3 a000 	ldrh.w	sl, [r3]
 800d6d2:	f1ba 0f00 	cmp.w	sl, #0
 800d6d6:	d024      	beq.n	800d722 <__multiply+0xf2>
 800d6d8:	f104 0e14 	add.w	lr, r4, #20
 800d6dc:	46a9      	mov	r9, r5
 800d6de:	f04f 0c00 	mov.w	ip, #0
 800d6e2:	f85e 2b04 	ldr.w	r2, [lr], #4
 800d6e6:	f8d9 1000 	ldr.w	r1, [r9]
 800d6ea:	fa1f fb82 	uxth.w	fp, r2
 800d6ee:	b289      	uxth	r1, r1
 800d6f0:	fb0a 110b 	mla	r1, sl, fp, r1
 800d6f4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800d6f8:	f8d9 2000 	ldr.w	r2, [r9]
 800d6fc:	4461      	add	r1, ip
 800d6fe:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d702:	fb0a c20b 	mla	r2, sl, fp, ip
 800d706:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800d70a:	b289      	uxth	r1, r1
 800d70c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d710:	4577      	cmp	r7, lr
 800d712:	f849 1b04 	str.w	r1, [r9], #4
 800d716:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d71a:	d8e2      	bhi.n	800d6e2 <__multiply+0xb2>
 800d71c:	9a01      	ldr	r2, [sp, #4]
 800d71e:	f845 c002 	str.w	ip, [r5, r2]
 800d722:	9a03      	ldr	r2, [sp, #12]
 800d724:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800d728:	3304      	adds	r3, #4
 800d72a:	f1b9 0f00 	cmp.w	r9, #0
 800d72e:	d021      	beq.n	800d774 <__multiply+0x144>
 800d730:	6829      	ldr	r1, [r5, #0]
 800d732:	f104 0c14 	add.w	ip, r4, #20
 800d736:	46ae      	mov	lr, r5
 800d738:	f04f 0a00 	mov.w	sl, #0
 800d73c:	f8bc b000 	ldrh.w	fp, [ip]
 800d740:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800d744:	fb09 220b 	mla	r2, r9, fp, r2
 800d748:	4452      	add	r2, sl
 800d74a:	b289      	uxth	r1, r1
 800d74c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d750:	f84e 1b04 	str.w	r1, [lr], #4
 800d754:	f85c 1b04 	ldr.w	r1, [ip], #4
 800d758:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800d75c:	f8be 1000 	ldrh.w	r1, [lr]
 800d760:	fb09 110a 	mla	r1, r9, sl, r1
 800d764:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800d768:	4567      	cmp	r7, ip
 800d76a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800d76e:	d8e5      	bhi.n	800d73c <__multiply+0x10c>
 800d770:	9a01      	ldr	r2, [sp, #4]
 800d772:	50a9      	str	r1, [r5, r2]
 800d774:	3504      	adds	r5, #4
 800d776:	e799      	b.n	800d6ac <__multiply+0x7c>
 800d778:	3e01      	subs	r6, #1
 800d77a:	e79b      	b.n	800d6b4 <__multiply+0x84>
 800d77c:	0800fdb1 	.word	0x0800fdb1
 800d780:	0800fdc2 	.word	0x0800fdc2

0800d784 <__pow5mult>:
 800d784:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d788:	4615      	mov	r5, r2
 800d78a:	f012 0203 	ands.w	r2, r2, #3
 800d78e:	4606      	mov	r6, r0
 800d790:	460f      	mov	r7, r1
 800d792:	d007      	beq.n	800d7a4 <__pow5mult+0x20>
 800d794:	4c25      	ldr	r4, [pc, #148]	; (800d82c <__pow5mult+0xa8>)
 800d796:	3a01      	subs	r2, #1
 800d798:	2300      	movs	r3, #0
 800d79a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d79e:	f7ff fe53 	bl	800d448 <__multadd>
 800d7a2:	4607      	mov	r7, r0
 800d7a4:	10ad      	asrs	r5, r5, #2
 800d7a6:	d03d      	beq.n	800d824 <__pow5mult+0xa0>
 800d7a8:	69f4      	ldr	r4, [r6, #28]
 800d7aa:	b97c      	cbnz	r4, 800d7cc <__pow5mult+0x48>
 800d7ac:	2010      	movs	r0, #16
 800d7ae:	f7fd fe35 	bl	800b41c <malloc>
 800d7b2:	4602      	mov	r2, r0
 800d7b4:	61f0      	str	r0, [r6, #28]
 800d7b6:	b928      	cbnz	r0, 800d7c4 <__pow5mult+0x40>
 800d7b8:	4b1d      	ldr	r3, [pc, #116]	; (800d830 <__pow5mult+0xac>)
 800d7ba:	481e      	ldr	r0, [pc, #120]	; (800d834 <__pow5mult+0xb0>)
 800d7bc:	f240 11b3 	movw	r1, #435	; 0x1b3
 800d7c0:	f001 fb6e 	bl	800eea0 <__assert_func>
 800d7c4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d7c8:	6004      	str	r4, [r0, #0]
 800d7ca:	60c4      	str	r4, [r0, #12]
 800d7cc:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800d7d0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d7d4:	b94c      	cbnz	r4, 800d7ea <__pow5mult+0x66>
 800d7d6:	f240 2171 	movw	r1, #625	; 0x271
 800d7da:	4630      	mov	r0, r6
 800d7dc:	f7ff ff12 	bl	800d604 <__i2b>
 800d7e0:	2300      	movs	r3, #0
 800d7e2:	f8c8 0008 	str.w	r0, [r8, #8]
 800d7e6:	4604      	mov	r4, r0
 800d7e8:	6003      	str	r3, [r0, #0]
 800d7ea:	f04f 0900 	mov.w	r9, #0
 800d7ee:	07eb      	lsls	r3, r5, #31
 800d7f0:	d50a      	bpl.n	800d808 <__pow5mult+0x84>
 800d7f2:	4639      	mov	r1, r7
 800d7f4:	4622      	mov	r2, r4
 800d7f6:	4630      	mov	r0, r6
 800d7f8:	f7ff ff1a 	bl	800d630 <__multiply>
 800d7fc:	4639      	mov	r1, r7
 800d7fe:	4680      	mov	r8, r0
 800d800:	4630      	mov	r0, r6
 800d802:	f7ff fdff 	bl	800d404 <_Bfree>
 800d806:	4647      	mov	r7, r8
 800d808:	106d      	asrs	r5, r5, #1
 800d80a:	d00b      	beq.n	800d824 <__pow5mult+0xa0>
 800d80c:	6820      	ldr	r0, [r4, #0]
 800d80e:	b938      	cbnz	r0, 800d820 <__pow5mult+0x9c>
 800d810:	4622      	mov	r2, r4
 800d812:	4621      	mov	r1, r4
 800d814:	4630      	mov	r0, r6
 800d816:	f7ff ff0b 	bl	800d630 <__multiply>
 800d81a:	6020      	str	r0, [r4, #0]
 800d81c:	f8c0 9000 	str.w	r9, [r0]
 800d820:	4604      	mov	r4, r0
 800d822:	e7e4      	b.n	800d7ee <__pow5mult+0x6a>
 800d824:	4638      	mov	r0, r7
 800d826:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d82a:	bf00      	nop
 800d82c:	0800ff10 	.word	0x0800ff10
 800d830:	0800fd42 	.word	0x0800fd42
 800d834:	0800fdc2 	.word	0x0800fdc2

0800d838 <__lshift>:
 800d838:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d83c:	460c      	mov	r4, r1
 800d83e:	6849      	ldr	r1, [r1, #4]
 800d840:	6923      	ldr	r3, [r4, #16]
 800d842:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d846:	68a3      	ldr	r3, [r4, #8]
 800d848:	4607      	mov	r7, r0
 800d84a:	4691      	mov	r9, r2
 800d84c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d850:	f108 0601 	add.w	r6, r8, #1
 800d854:	42b3      	cmp	r3, r6
 800d856:	db0b      	blt.n	800d870 <__lshift+0x38>
 800d858:	4638      	mov	r0, r7
 800d85a:	f7ff fd93 	bl	800d384 <_Balloc>
 800d85e:	4605      	mov	r5, r0
 800d860:	b948      	cbnz	r0, 800d876 <__lshift+0x3e>
 800d862:	4602      	mov	r2, r0
 800d864:	4b28      	ldr	r3, [pc, #160]	; (800d908 <__lshift+0xd0>)
 800d866:	4829      	ldr	r0, [pc, #164]	; (800d90c <__lshift+0xd4>)
 800d868:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800d86c:	f001 fb18 	bl	800eea0 <__assert_func>
 800d870:	3101      	adds	r1, #1
 800d872:	005b      	lsls	r3, r3, #1
 800d874:	e7ee      	b.n	800d854 <__lshift+0x1c>
 800d876:	2300      	movs	r3, #0
 800d878:	f100 0114 	add.w	r1, r0, #20
 800d87c:	f100 0210 	add.w	r2, r0, #16
 800d880:	4618      	mov	r0, r3
 800d882:	4553      	cmp	r3, sl
 800d884:	db33      	blt.n	800d8ee <__lshift+0xb6>
 800d886:	6920      	ldr	r0, [r4, #16]
 800d888:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d88c:	f104 0314 	add.w	r3, r4, #20
 800d890:	f019 091f 	ands.w	r9, r9, #31
 800d894:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d898:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d89c:	d02b      	beq.n	800d8f6 <__lshift+0xbe>
 800d89e:	f1c9 0e20 	rsb	lr, r9, #32
 800d8a2:	468a      	mov	sl, r1
 800d8a4:	2200      	movs	r2, #0
 800d8a6:	6818      	ldr	r0, [r3, #0]
 800d8a8:	fa00 f009 	lsl.w	r0, r0, r9
 800d8ac:	4310      	orrs	r0, r2
 800d8ae:	f84a 0b04 	str.w	r0, [sl], #4
 800d8b2:	f853 2b04 	ldr.w	r2, [r3], #4
 800d8b6:	459c      	cmp	ip, r3
 800d8b8:	fa22 f20e 	lsr.w	r2, r2, lr
 800d8bc:	d8f3      	bhi.n	800d8a6 <__lshift+0x6e>
 800d8be:	ebac 0304 	sub.w	r3, ip, r4
 800d8c2:	3b15      	subs	r3, #21
 800d8c4:	f023 0303 	bic.w	r3, r3, #3
 800d8c8:	3304      	adds	r3, #4
 800d8ca:	f104 0015 	add.w	r0, r4, #21
 800d8ce:	4584      	cmp	ip, r0
 800d8d0:	bf38      	it	cc
 800d8d2:	2304      	movcc	r3, #4
 800d8d4:	50ca      	str	r2, [r1, r3]
 800d8d6:	b10a      	cbz	r2, 800d8dc <__lshift+0xa4>
 800d8d8:	f108 0602 	add.w	r6, r8, #2
 800d8dc:	3e01      	subs	r6, #1
 800d8de:	4638      	mov	r0, r7
 800d8e0:	612e      	str	r6, [r5, #16]
 800d8e2:	4621      	mov	r1, r4
 800d8e4:	f7ff fd8e 	bl	800d404 <_Bfree>
 800d8e8:	4628      	mov	r0, r5
 800d8ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d8ee:	f842 0f04 	str.w	r0, [r2, #4]!
 800d8f2:	3301      	adds	r3, #1
 800d8f4:	e7c5      	b.n	800d882 <__lshift+0x4a>
 800d8f6:	3904      	subs	r1, #4
 800d8f8:	f853 2b04 	ldr.w	r2, [r3], #4
 800d8fc:	f841 2f04 	str.w	r2, [r1, #4]!
 800d900:	459c      	cmp	ip, r3
 800d902:	d8f9      	bhi.n	800d8f8 <__lshift+0xc0>
 800d904:	e7ea      	b.n	800d8dc <__lshift+0xa4>
 800d906:	bf00      	nop
 800d908:	0800fdb1 	.word	0x0800fdb1
 800d90c:	0800fdc2 	.word	0x0800fdc2

0800d910 <__mcmp>:
 800d910:	b530      	push	{r4, r5, lr}
 800d912:	6902      	ldr	r2, [r0, #16]
 800d914:	690c      	ldr	r4, [r1, #16]
 800d916:	1b12      	subs	r2, r2, r4
 800d918:	d10e      	bne.n	800d938 <__mcmp+0x28>
 800d91a:	f100 0314 	add.w	r3, r0, #20
 800d91e:	3114      	adds	r1, #20
 800d920:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800d924:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800d928:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800d92c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800d930:	42a5      	cmp	r5, r4
 800d932:	d003      	beq.n	800d93c <__mcmp+0x2c>
 800d934:	d305      	bcc.n	800d942 <__mcmp+0x32>
 800d936:	2201      	movs	r2, #1
 800d938:	4610      	mov	r0, r2
 800d93a:	bd30      	pop	{r4, r5, pc}
 800d93c:	4283      	cmp	r3, r0
 800d93e:	d3f3      	bcc.n	800d928 <__mcmp+0x18>
 800d940:	e7fa      	b.n	800d938 <__mcmp+0x28>
 800d942:	f04f 32ff 	mov.w	r2, #4294967295
 800d946:	e7f7      	b.n	800d938 <__mcmp+0x28>

0800d948 <__mdiff>:
 800d948:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d94c:	460c      	mov	r4, r1
 800d94e:	4606      	mov	r6, r0
 800d950:	4611      	mov	r1, r2
 800d952:	4620      	mov	r0, r4
 800d954:	4690      	mov	r8, r2
 800d956:	f7ff ffdb 	bl	800d910 <__mcmp>
 800d95a:	1e05      	subs	r5, r0, #0
 800d95c:	d110      	bne.n	800d980 <__mdiff+0x38>
 800d95e:	4629      	mov	r1, r5
 800d960:	4630      	mov	r0, r6
 800d962:	f7ff fd0f 	bl	800d384 <_Balloc>
 800d966:	b930      	cbnz	r0, 800d976 <__mdiff+0x2e>
 800d968:	4b3a      	ldr	r3, [pc, #232]	; (800da54 <__mdiff+0x10c>)
 800d96a:	4602      	mov	r2, r0
 800d96c:	f240 2137 	movw	r1, #567	; 0x237
 800d970:	4839      	ldr	r0, [pc, #228]	; (800da58 <__mdiff+0x110>)
 800d972:	f001 fa95 	bl	800eea0 <__assert_func>
 800d976:	2301      	movs	r3, #1
 800d978:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d97c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d980:	bfa4      	itt	ge
 800d982:	4643      	movge	r3, r8
 800d984:	46a0      	movge	r8, r4
 800d986:	4630      	mov	r0, r6
 800d988:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800d98c:	bfa6      	itte	ge
 800d98e:	461c      	movge	r4, r3
 800d990:	2500      	movge	r5, #0
 800d992:	2501      	movlt	r5, #1
 800d994:	f7ff fcf6 	bl	800d384 <_Balloc>
 800d998:	b920      	cbnz	r0, 800d9a4 <__mdiff+0x5c>
 800d99a:	4b2e      	ldr	r3, [pc, #184]	; (800da54 <__mdiff+0x10c>)
 800d99c:	4602      	mov	r2, r0
 800d99e:	f240 2145 	movw	r1, #581	; 0x245
 800d9a2:	e7e5      	b.n	800d970 <__mdiff+0x28>
 800d9a4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800d9a8:	6926      	ldr	r6, [r4, #16]
 800d9aa:	60c5      	str	r5, [r0, #12]
 800d9ac:	f104 0914 	add.w	r9, r4, #20
 800d9b0:	f108 0514 	add.w	r5, r8, #20
 800d9b4:	f100 0e14 	add.w	lr, r0, #20
 800d9b8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800d9bc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800d9c0:	f108 0210 	add.w	r2, r8, #16
 800d9c4:	46f2      	mov	sl, lr
 800d9c6:	2100      	movs	r1, #0
 800d9c8:	f859 3b04 	ldr.w	r3, [r9], #4
 800d9cc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800d9d0:	fa11 f88b 	uxtah	r8, r1, fp
 800d9d4:	b299      	uxth	r1, r3
 800d9d6:	0c1b      	lsrs	r3, r3, #16
 800d9d8:	eba8 0801 	sub.w	r8, r8, r1
 800d9dc:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800d9e0:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800d9e4:	fa1f f888 	uxth.w	r8, r8
 800d9e8:	1419      	asrs	r1, r3, #16
 800d9ea:	454e      	cmp	r6, r9
 800d9ec:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800d9f0:	f84a 3b04 	str.w	r3, [sl], #4
 800d9f4:	d8e8      	bhi.n	800d9c8 <__mdiff+0x80>
 800d9f6:	1b33      	subs	r3, r6, r4
 800d9f8:	3b15      	subs	r3, #21
 800d9fa:	f023 0303 	bic.w	r3, r3, #3
 800d9fe:	3304      	adds	r3, #4
 800da00:	3415      	adds	r4, #21
 800da02:	42a6      	cmp	r6, r4
 800da04:	bf38      	it	cc
 800da06:	2304      	movcc	r3, #4
 800da08:	441d      	add	r5, r3
 800da0a:	4473      	add	r3, lr
 800da0c:	469e      	mov	lr, r3
 800da0e:	462e      	mov	r6, r5
 800da10:	4566      	cmp	r6, ip
 800da12:	d30e      	bcc.n	800da32 <__mdiff+0xea>
 800da14:	f10c 0203 	add.w	r2, ip, #3
 800da18:	1b52      	subs	r2, r2, r5
 800da1a:	f022 0203 	bic.w	r2, r2, #3
 800da1e:	3d03      	subs	r5, #3
 800da20:	45ac      	cmp	ip, r5
 800da22:	bf38      	it	cc
 800da24:	2200      	movcc	r2, #0
 800da26:	4413      	add	r3, r2
 800da28:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800da2c:	b17a      	cbz	r2, 800da4e <__mdiff+0x106>
 800da2e:	6107      	str	r7, [r0, #16]
 800da30:	e7a4      	b.n	800d97c <__mdiff+0x34>
 800da32:	f856 8b04 	ldr.w	r8, [r6], #4
 800da36:	fa11 f288 	uxtah	r2, r1, r8
 800da3a:	1414      	asrs	r4, r2, #16
 800da3c:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800da40:	b292      	uxth	r2, r2
 800da42:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800da46:	f84e 2b04 	str.w	r2, [lr], #4
 800da4a:	1421      	asrs	r1, r4, #16
 800da4c:	e7e0      	b.n	800da10 <__mdiff+0xc8>
 800da4e:	3f01      	subs	r7, #1
 800da50:	e7ea      	b.n	800da28 <__mdiff+0xe0>
 800da52:	bf00      	nop
 800da54:	0800fdb1 	.word	0x0800fdb1
 800da58:	0800fdc2 	.word	0x0800fdc2

0800da5c <__ulp>:
 800da5c:	b082      	sub	sp, #8
 800da5e:	ed8d 0b00 	vstr	d0, [sp]
 800da62:	9a01      	ldr	r2, [sp, #4]
 800da64:	4b0f      	ldr	r3, [pc, #60]	; (800daa4 <__ulp+0x48>)
 800da66:	4013      	ands	r3, r2
 800da68:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800da6c:	2b00      	cmp	r3, #0
 800da6e:	dc08      	bgt.n	800da82 <__ulp+0x26>
 800da70:	425b      	negs	r3, r3
 800da72:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800da76:	ea4f 5223 	mov.w	r2, r3, asr #20
 800da7a:	da04      	bge.n	800da86 <__ulp+0x2a>
 800da7c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800da80:	4113      	asrs	r3, r2
 800da82:	2200      	movs	r2, #0
 800da84:	e008      	b.n	800da98 <__ulp+0x3c>
 800da86:	f1a2 0314 	sub.w	r3, r2, #20
 800da8a:	2b1e      	cmp	r3, #30
 800da8c:	bfda      	itte	le
 800da8e:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800da92:	40da      	lsrle	r2, r3
 800da94:	2201      	movgt	r2, #1
 800da96:	2300      	movs	r3, #0
 800da98:	4619      	mov	r1, r3
 800da9a:	4610      	mov	r0, r2
 800da9c:	ec41 0b10 	vmov	d0, r0, r1
 800daa0:	b002      	add	sp, #8
 800daa2:	4770      	bx	lr
 800daa4:	7ff00000 	.word	0x7ff00000

0800daa8 <__b2d>:
 800daa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800daac:	6906      	ldr	r6, [r0, #16]
 800daae:	f100 0814 	add.w	r8, r0, #20
 800dab2:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800dab6:	1f37      	subs	r7, r6, #4
 800dab8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800dabc:	4610      	mov	r0, r2
 800dabe:	f7ff fd53 	bl	800d568 <__hi0bits>
 800dac2:	f1c0 0320 	rsb	r3, r0, #32
 800dac6:	280a      	cmp	r0, #10
 800dac8:	600b      	str	r3, [r1, #0]
 800daca:	491b      	ldr	r1, [pc, #108]	; (800db38 <__b2d+0x90>)
 800dacc:	dc15      	bgt.n	800dafa <__b2d+0x52>
 800dace:	f1c0 0c0b 	rsb	ip, r0, #11
 800dad2:	fa22 f30c 	lsr.w	r3, r2, ip
 800dad6:	45b8      	cmp	r8, r7
 800dad8:	ea43 0501 	orr.w	r5, r3, r1
 800dadc:	bf34      	ite	cc
 800dade:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800dae2:	2300      	movcs	r3, #0
 800dae4:	3015      	adds	r0, #21
 800dae6:	fa02 f000 	lsl.w	r0, r2, r0
 800daea:	fa23 f30c 	lsr.w	r3, r3, ip
 800daee:	4303      	orrs	r3, r0
 800daf0:	461c      	mov	r4, r3
 800daf2:	ec45 4b10 	vmov	d0, r4, r5
 800daf6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dafa:	45b8      	cmp	r8, r7
 800dafc:	bf3a      	itte	cc
 800dafe:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800db02:	f1a6 0708 	subcc.w	r7, r6, #8
 800db06:	2300      	movcs	r3, #0
 800db08:	380b      	subs	r0, #11
 800db0a:	d012      	beq.n	800db32 <__b2d+0x8a>
 800db0c:	f1c0 0120 	rsb	r1, r0, #32
 800db10:	fa23 f401 	lsr.w	r4, r3, r1
 800db14:	4082      	lsls	r2, r0
 800db16:	4322      	orrs	r2, r4
 800db18:	4547      	cmp	r7, r8
 800db1a:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800db1e:	bf8c      	ite	hi
 800db20:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800db24:	2200      	movls	r2, #0
 800db26:	4083      	lsls	r3, r0
 800db28:	40ca      	lsrs	r2, r1
 800db2a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800db2e:	4313      	orrs	r3, r2
 800db30:	e7de      	b.n	800daf0 <__b2d+0x48>
 800db32:	ea42 0501 	orr.w	r5, r2, r1
 800db36:	e7db      	b.n	800daf0 <__b2d+0x48>
 800db38:	3ff00000 	.word	0x3ff00000

0800db3c <__d2b>:
 800db3c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800db40:	460f      	mov	r7, r1
 800db42:	2101      	movs	r1, #1
 800db44:	ec59 8b10 	vmov	r8, r9, d0
 800db48:	4616      	mov	r6, r2
 800db4a:	f7ff fc1b 	bl	800d384 <_Balloc>
 800db4e:	4604      	mov	r4, r0
 800db50:	b930      	cbnz	r0, 800db60 <__d2b+0x24>
 800db52:	4602      	mov	r2, r0
 800db54:	4b24      	ldr	r3, [pc, #144]	; (800dbe8 <__d2b+0xac>)
 800db56:	4825      	ldr	r0, [pc, #148]	; (800dbec <__d2b+0xb0>)
 800db58:	f240 310f 	movw	r1, #783	; 0x30f
 800db5c:	f001 f9a0 	bl	800eea0 <__assert_func>
 800db60:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800db64:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800db68:	bb2d      	cbnz	r5, 800dbb6 <__d2b+0x7a>
 800db6a:	9301      	str	r3, [sp, #4]
 800db6c:	f1b8 0300 	subs.w	r3, r8, #0
 800db70:	d026      	beq.n	800dbc0 <__d2b+0x84>
 800db72:	4668      	mov	r0, sp
 800db74:	9300      	str	r3, [sp, #0]
 800db76:	f7ff fd17 	bl	800d5a8 <__lo0bits>
 800db7a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800db7e:	b1e8      	cbz	r0, 800dbbc <__d2b+0x80>
 800db80:	f1c0 0320 	rsb	r3, r0, #32
 800db84:	fa02 f303 	lsl.w	r3, r2, r3
 800db88:	430b      	orrs	r3, r1
 800db8a:	40c2      	lsrs	r2, r0
 800db8c:	6163      	str	r3, [r4, #20]
 800db8e:	9201      	str	r2, [sp, #4]
 800db90:	9b01      	ldr	r3, [sp, #4]
 800db92:	61a3      	str	r3, [r4, #24]
 800db94:	2b00      	cmp	r3, #0
 800db96:	bf14      	ite	ne
 800db98:	2202      	movne	r2, #2
 800db9a:	2201      	moveq	r2, #1
 800db9c:	6122      	str	r2, [r4, #16]
 800db9e:	b1bd      	cbz	r5, 800dbd0 <__d2b+0x94>
 800dba0:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800dba4:	4405      	add	r5, r0
 800dba6:	603d      	str	r5, [r7, #0]
 800dba8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800dbac:	6030      	str	r0, [r6, #0]
 800dbae:	4620      	mov	r0, r4
 800dbb0:	b003      	add	sp, #12
 800dbb2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dbb6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800dbba:	e7d6      	b.n	800db6a <__d2b+0x2e>
 800dbbc:	6161      	str	r1, [r4, #20]
 800dbbe:	e7e7      	b.n	800db90 <__d2b+0x54>
 800dbc0:	a801      	add	r0, sp, #4
 800dbc2:	f7ff fcf1 	bl	800d5a8 <__lo0bits>
 800dbc6:	9b01      	ldr	r3, [sp, #4]
 800dbc8:	6163      	str	r3, [r4, #20]
 800dbca:	3020      	adds	r0, #32
 800dbcc:	2201      	movs	r2, #1
 800dbce:	e7e5      	b.n	800db9c <__d2b+0x60>
 800dbd0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800dbd4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800dbd8:	6038      	str	r0, [r7, #0]
 800dbda:	6918      	ldr	r0, [r3, #16]
 800dbdc:	f7ff fcc4 	bl	800d568 <__hi0bits>
 800dbe0:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800dbe4:	e7e2      	b.n	800dbac <__d2b+0x70>
 800dbe6:	bf00      	nop
 800dbe8:	0800fdb1 	.word	0x0800fdb1
 800dbec:	0800fdc2 	.word	0x0800fdc2

0800dbf0 <__ratio>:
 800dbf0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dbf4:	4688      	mov	r8, r1
 800dbf6:	4669      	mov	r1, sp
 800dbf8:	4681      	mov	r9, r0
 800dbfa:	f7ff ff55 	bl	800daa8 <__b2d>
 800dbfe:	a901      	add	r1, sp, #4
 800dc00:	4640      	mov	r0, r8
 800dc02:	ec55 4b10 	vmov	r4, r5, d0
 800dc06:	f7ff ff4f 	bl	800daa8 <__b2d>
 800dc0a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800dc0e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800dc12:	eba3 0c02 	sub.w	ip, r3, r2
 800dc16:	e9dd 3200 	ldrd	r3, r2, [sp]
 800dc1a:	1a9b      	subs	r3, r3, r2
 800dc1c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800dc20:	ec51 0b10 	vmov	r0, r1, d0
 800dc24:	2b00      	cmp	r3, #0
 800dc26:	bfd6      	itet	le
 800dc28:	460a      	movle	r2, r1
 800dc2a:	462a      	movgt	r2, r5
 800dc2c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800dc30:	468b      	mov	fp, r1
 800dc32:	462f      	mov	r7, r5
 800dc34:	bfd4      	ite	le
 800dc36:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800dc3a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800dc3e:	4620      	mov	r0, r4
 800dc40:	ee10 2a10 	vmov	r2, s0
 800dc44:	465b      	mov	r3, fp
 800dc46:	4639      	mov	r1, r7
 800dc48:	f7f2 fe20 	bl	800088c <__aeabi_ddiv>
 800dc4c:	ec41 0b10 	vmov	d0, r0, r1
 800dc50:	b003      	add	sp, #12
 800dc52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800dc56 <__copybits>:
 800dc56:	3901      	subs	r1, #1
 800dc58:	b570      	push	{r4, r5, r6, lr}
 800dc5a:	1149      	asrs	r1, r1, #5
 800dc5c:	6914      	ldr	r4, [r2, #16]
 800dc5e:	3101      	adds	r1, #1
 800dc60:	f102 0314 	add.w	r3, r2, #20
 800dc64:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800dc68:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800dc6c:	1f05      	subs	r5, r0, #4
 800dc6e:	42a3      	cmp	r3, r4
 800dc70:	d30c      	bcc.n	800dc8c <__copybits+0x36>
 800dc72:	1aa3      	subs	r3, r4, r2
 800dc74:	3b11      	subs	r3, #17
 800dc76:	f023 0303 	bic.w	r3, r3, #3
 800dc7a:	3211      	adds	r2, #17
 800dc7c:	42a2      	cmp	r2, r4
 800dc7e:	bf88      	it	hi
 800dc80:	2300      	movhi	r3, #0
 800dc82:	4418      	add	r0, r3
 800dc84:	2300      	movs	r3, #0
 800dc86:	4288      	cmp	r0, r1
 800dc88:	d305      	bcc.n	800dc96 <__copybits+0x40>
 800dc8a:	bd70      	pop	{r4, r5, r6, pc}
 800dc8c:	f853 6b04 	ldr.w	r6, [r3], #4
 800dc90:	f845 6f04 	str.w	r6, [r5, #4]!
 800dc94:	e7eb      	b.n	800dc6e <__copybits+0x18>
 800dc96:	f840 3b04 	str.w	r3, [r0], #4
 800dc9a:	e7f4      	b.n	800dc86 <__copybits+0x30>

0800dc9c <__any_on>:
 800dc9c:	f100 0214 	add.w	r2, r0, #20
 800dca0:	6900      	ldr	r0, [r0, #16]
 800dca2:	114b      	asrs	r3, r1, #5
 800dca4:	4298      	cmp	r0, r3
 800dca6:	b510      	push	{r4, lr}
 800dca8:	db11      	blt.n	800dcce <__any_on+0x32>
 800dcaa:	dd0a      	ble.n	800dcc2 <__any_on+0x26>
 800dcac:	f011 011f 	ands.w	r1, r1, #31
 800dcb0:	d007      	beq.n	800dcc2 <__any_on+0x26>
 800dcb2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800dcb6:	fa24 f001 	lsr.w	r0, r4, r1
 800dcba:	fa00 f101 	lsl.w	r1, r0, r1
 800dcbe:	428c      	cmp	r4, r1
 800dcc0:	d10b      	bne.n	800dcda <__any_on+0x3e>
 800dcc2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800dcc6:	4293      	cmp	r3, r2
 800dcc8:	d803      	bhi.n	800dcd2 <__any_on+0x36>
 800dcca:	2000      	movs	r0, #0
 800dccc:	bd10      	pop	{r4, pc}
 800dcce:	4603      	mov	r3, r0
 800dcd0:	e7f7      	b.n	800dcc2 <__any_on+0x26>
 800dcd2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800dcd6:	2900      	cmp	r1, #0
 800dcd8:	d0f5      	beq.n	800dcc6 <__any_on+0x2a>
 800dcda:	2001      	movs	r0, #1
 800dcdc:	e7f6      	b.n	800dccc <__any_on+0x30>

0800dcde <sulp>:
 800dcde:	b570      	push	{r4, r5, r6, lr}
 800dce0:	4604      	mov	r4, r0
 800dce2:	460d      	mov	r5, r1
 800dce4:	ec45 4b10 	vmov	d0, r4, r5
 800dce8:	4616      	mov	r6, r2
 800dcea:	f7ff feb7 	bl	800da5c <__ulp>
 800dcee:	ec51 0b10 	vmov	r0, r1, d0
 800dcf2:	b17e      	cbz	r6, 800dd14 <sulp+0x36>
 800dcf4:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800dcf8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800dcfc:	2b00      	cmp	r3, #0
 800dcfe:	dd09      	ble.n	800dd14 <sulp+0x36>
 800dd00:	051b      	lsls	r3, r3, #20
 800dd02:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800dd06:	2400      	movs	r4, #0
 800dd08:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800dd0c:	4622      	mov	r2, r4
 800dd0e:	462b      	mov	r3, r5
 800dd10:	f7f2 fc92 	bl	8000638 <__aeabi_dmul>
 800dd14:	bd70      	pop	{r4, r5, r6, pc}
	...

0800dd18 <_strtod_l>:
 800dd18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd1c:	ed2d 8b02 	vpush	{d8}
 800dd20:	b09b      	sub	sp, #108	; 0x6c
 800dd22:	4604      	mov	r4, r0
 800dd24:	9213      	str	r2, [sp, #76]	; 0x4c
 800dd26:	2200      	movs	r2, #0
 800dd28:	9216      	str	r2, [sp, #88]	; 0x58
 800dd2a:	460d      	mov	r5, r1
 800dd2c:	f04f 0800 	mov.w	r8, #0
 800dd30:	f04f 0900 	mov.w	r9, #0
 800dd34:	460a      	mov	r2, r1
 800dd36:	9215      	str	r2, [sp, #84]	; 0x54
 800dd38:	7811      	ldrb	r1, [r2, #0]
 800dd3a:	292b      	cmp	r1, #43	; 0x2b
 800dd3c:	d04c      	beq.n	800ddd8 <_strtod_l+0xc0>
 800dd3e:	d83a      	bhi.n	800ddb6 <_strtod_l+0x9e>
 800dd40:	290d      	cmp	r1, #13
 800dd42:	d834      	bhi.n	800ddae <_strtod_l+0x96>
 800dd44:	2908      	cmp	r1, #8
 800dd46:	d834      	bhi.n	800ddb2 <_strtod_l+0x9a>
 800dd48:	2900      	cmp	r1, #0
 800dd4a:	d03d      	beq.n	800ddc8 <_strtod_l+0xb0>
 800dd4c:	2200      	movs	r2, #0
 800dd4e:	920a      	str	r2, [sp, #40]	; 0x28
 800dd50:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800dd52:	7832      	ldrb	r2, [r6, #0]
 800dd54:	2a30      	cmp	r2, #48	; 0x30
 800dd56:	f040 80b4 	bne.w	800dec2 <_strtod_l+0x1aa>
 800dd5a:	7872      	ldrb	r2, [r6, #1]
 800dd5c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800dd60:	2a58      	cmp	r2, #88	; 0x58
 800dd62:	d170      	bne.n	800de46 <_strtod_l+0x12e>
 800dd64:	9302      	str	r3, [sp, #8]
 800dd66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dd68:	9301      	str	r3, [sp, #4]
 800dd6a:	ab16      	add	r3, sp, #88	; 0x58
 800dd6c:	9300      	str	r3, [sp, #0]
 800dd6e:	4a8e      	ldr	r2, [pc, #568]	; (800dfa8 <_strtod_l+0x290>)
 800dd70:	ab17      	add	r3, sp, #92	; 0x5c
 800dd72:	a915      	add	r1, sp, #84	; 0x54
 800dd74:	4620      	mov	r0, r4
 800dd76:	f001 f92f 	bl	800efd8 <__gethex>
 800dd7a:	f010 070f 	ands.w	r7, r0, #15
 800dd7e:	4605      	mov	r5, r0
 800dd80:	d005      	beq.n	800dd8e <_strtod_l+0x76>
 800dd82:	2f06      	cmp	r7, #6
 800dd84:	d12a      	bne.n	800dddc <_strtod_l+0xc4>
 800dd86:	3601      	adds	r6, #1
 800dd88:	2300      	movs	r3, #0
 800dd8a:	9615      	str	r6, [sp, #84]	; 0x54
 800dd8c:	930a      	str	r3, [sp, #40]	; 0x28
 800dd8e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800dd90:	2b00      	cmp	r3, #0
 800dd92:	f040 857f 	bne.w	800e894 <_strtod_l+0xb7c>
 800dd96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dd98:	b1db      	cbz	r3, 800ddd2 <_strtod_l+0xba>
 800dd9a:	4642      	mov	r2, r8
 800dd9c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800dda0:	ec43 2b10 	vmov	d0, r2, r3
 800dda4:	b01b      	add	sp, #108	; 0x6c
 800dda6:	ecbd 8b02 	vpop	{d8}
 800ddaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ddae:	2920      	cmp	r1, #32
 800ddb0:	d1cc      	bne.n	800dd4c <_strtod_l+0x34>
 800ddb2:	3201      	adds	r2, #1
 800ddb4:	e7bf      	b.n	800dd36 <_strtod_l+0x1e>
 800ddb6:	292d      	cmp	r1, #45	; 0x2d
 800ddb8:	d1c8      	bne.n	800dd4c <_strtod_l+0x34>
 800ddba:	2101      	movs	r1, #1
 800ddbc:	910a      	str	r1, [sp, #40]	; 0x28
 800ddbe:	1c51      	adds	r1, r2, #1
 800ddc0:	9115      	str	r1, [sp, #84]	; 0x54
 800ddc2:	7852      	ldrb	r2, [r2, #1]
 800ddc4:	2a00      	cmp	r2, #0
 800ddc6:	d1c3      	bne.n	800dd50 <_strtod_l+0x38>
 800ddc8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ddca:	9515      	str	r5, [sp, #84]	; 0x54
 800ddcc:	2b00      	cmp	r3, #0
 800ddce:	f040 855f 	bne.w	800e890 <_strtod_l+0xb78>
 800ddd2:	4642      	mov	r2, r8
 800ddd4:	464b      	mov	r3, r9
 800ddd6:	e7e3      	b.n	800dda0 <_strtod_l+0x88>
 800ddd8:	2100      	movs	r1, #0
 800ddda:	e7ef      	b.n	800ddbc <_strtod_l+0xa4>
 800dddc:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800ddde:	b13a      	cbz	r2, 800ddf0 <_strtod_l+0xd8>
 800dde0:	2135      	movs	r1, #53	; 0x35
 800dde2:	a818      	add	r0, sp, #96	; 0x60
 800dde4:	f7ff ff37 	bl	800dc56 <__copybits>
 800dde8:	9916      	ldr	r1, [sp, #88]	; 0x58
 800ddea:	4620      	mov	r0, r4
 800ddec:	f7ff fb0a 	bl	800d404 <_Bfree>
 800ddf0:	3f01      	subs	r7, #1
 800ddf2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800ddf4:	2f04      	cmp	r7, #4
 800ddf6:	d806      	bhi.n	800de06 <_strtod_l+0xee>
 800ddf8:	e8df f007 	tbb	[pc, r7]
 800ddfc:	201d0314 	.word	0x201d0314
 800de00:	14          	.byte	0x14
 800de01:	00          	.byte	0x00
 800de02:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 800de06:	05e9      	lsls	r1, r5, #23
 800de08:	bf48      	it	mi
 800de0a:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800de0e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800de12:	0d1b      	lsrs	r3, r3, #20
 800de14:	051b      	lsls	r3, r3, #20
 800de16:	2b00      	cmp	r3, #0
 800de18:	d1b9      	bne.n	800dd8e <_strtod_l+0x76>
 800de1a:	f7fe fbb9 	bl	800c590 <__errno>
 800de1e:	2322      	movs	r3, #34	; 0x22
 800de20:	6003      	str	r3, [r0, #0]
 800de22:	e7b4      	b.n	800dd8e <_strtod_l+0x76>
 800de24:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 800de28:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800de2c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800de30:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800de34:	e7e7      	b.n	800de06 <_strtod_l+0xee>
 800de36:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800dfb0 <_strtod_l+0x298>
 800de3a:	e7e4      	b.n	800de06 <_strtod_l+0xee>
 800de3c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800de40:	f04f 38ff 	mov.w	r8, #4294967295
 800de44:	e7df      	b.n	800de06 <_strtod_l+0xee>
 800de46:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800de48:	1c5a      	adds	r2, r3, #1
 800de4a:	9215      	str	r2, [sp, #84]	; 0x54
 800de4c:	785b      	ldrb	r3, [r3, #1]
 800de4e:	2b30      	cmp	r3, #48	; 0x30
 800de50:	d0f9      	beq.n	800de46 <_strtod_l+0x12e>
 800de52:	2b00      	cmp	r3, #0
 800de54:	d09b      	beq.n	800dd8e <_strtod_l+0x76>
 800de56:	2301      	movs	r3, #1
 800de58:	f04f 0a00 	mov.w	sl, #0
 800de5c:	9304      	str	r3, [sp, #16]
 800de5e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800de60:	930b      	str	r3, [sp, #44]	; 0x2c
 800de62:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800de66:	46d3      	mov	fp, sl
 800de68:	220a      	movs	r2, #10
 800de6a:	9815      	ldr	r0, [sp, #84]	; 0x54
 800de6c:	7806      	ldrb	r6, [r0, #0]
 800de6e:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800de72:	b2d9      	uxtb	r1, r3
 800de74:	2909      	cmp	r1, #9
 800de76:	d926      	bls.n	800dec6 <_strtod_l+0x1ae>
 800de78:	494c      	ldr	r1, [pc, #304]	; (800dfac <_strtod_l+0x294>)
 800de7a:	2201      	movs	r2, #1
 800de7c:	f000 ffe6 	bl	800ee4c <strncmp>
 800de80:	2800      	cmp	r0, #0
 800de82:	d030      	beq.n	800dee6 <_strtod_l+0x1ce>
 800de84:	2000      	movs	r0, #0
 800de86:	4632      	mov	r2, r6
 800de88:	9005      	str	r0, [sp, #20]
 800de8a:	465e      	mov	r6, fp
 800de8c:	4603      	mov	r3, r0
 800de8e:	2a65      	cmp	r2, #101	; 0x65
 800de90:	d001      	beq.n	800de96 <_strtod_l+0x17e>
 800de92:	2a45      	cmp	r2, #69	; 0x45
 800de94:	d113      	bne.n	800debe <_strtod_l+0x1a6>
 800de96:	b91e      	cbnz	r6, 800dea0 <_strtod_l+0x188>
 800de98:	9a04      	ldr	r2, [sp, #16]
 800de9a:	4302      	orrs	r2, r0
 800de9c:	d094      	beq.n	800ddc8 <_strtod_l+0xb0>
 800de9e:	2600      	movs	r6, #0
 800dea0:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800dea2:	1c6a      	adds	r2, r5, #1
 800dea4:	9215      	str	r2, [sp, #84]	; 0x54
 800dea6:	786a      	ldrb	r2, [r5, #1]
 800dea8:	2a2b      	cmp	r2, #43	; 0x2b
 800deaa:	d074      	beq.n	800df96 <_strtod_l+0x27e>
 800deac:	2a2d      	cmp	r2, #45	; 0x2d
 800deae:	d078      	beq.n	800dfa2 <_strtod_l+0x28a>
 800deb0:	f04f 0c00 	mov.w	ip, #0
 800deb4:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800deb8:	2909      	cmp	r1, #9
 800deba:	d97f      	bls.n	800dfbc <_strtod_l+0x2a4>
 800debc:	9515      	str	r5, [sp, #84]	; 0x54
 800debe:	2700      	movs	r7, #0
 800dec0:	e09e      	b.n	800e000 <_strtod_l+0x2e8>
 800dec2:	2300      	movs	r3, #0
 800dec4:	e7c8      	b.n	800de58 <_strtod_l+0x140>
 800dec6:	f1bb 0f08 	cmp.w	fp, #8
 800deca:	bfd8      	it	le
 800decc:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800dece:	f100 0001 	add.w	r0, r0, #1
 800ded2:	bfda      	itte	le
 800ded4:	fb02 3301 	mlale	r3, r2, r1, r3
 800ded8:	9309      	strle	r3, [sp, #36]	; 0x24
 800deda:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800dede:	f10b 0b01 	add.w	fp, fp, #1
 800dee2:	9015      	str	r0, [sp, #84]	; 0x54
 800dee4:	e7c1      	b.n	800de6a <_strtod_l+0x152>
 800dee6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800dee8:	1c5a      	adds	r2, r3, #1
 800deea:	9215      	str	r2, [sp, #84]	; 0x54
 800deec:	785a      	ldrb	r2, [r3, #1]
 800deee:	f1bb 0f00 	cmp.w	fp, #0
 800def2:	d037      	beq.n	800df64 <_strtod_l+0x24c>
 800def4:	9005      	str	r0, [sp, #20]
 800def6:	465e      	mov	r6, fp
 800def8:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800defc:	2b09      	cmp	r3, #9
 800defe:	d912      	bls.n	800df26 <_strtod_l+0x20e>
 800df00:	2301      	movs	r3, #1
 800df02:	e7c4      	b.n	800de8e <_strtod_l+0x176>
 800df04:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800df06:	1c5a      	adds	r2, r3, #1
 800df08:	9215      	str	r2, [sp, #84]	; 0x54
 800df0a:	785a      	ldrb	r2, [r3, #1]
 800df0c:	3001      	adds	r0, #1
 800df0e:	2a30      	cmp	r2, #48	; 0x30
 800df10:	d0f8      	beq.n	800df04 <_strtod_l+0x1ec>
 800df12:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800df16:	2b08      	cmp	r3, #8
 800df18:	f200 84c1 	bhi.w	800e89e <_strtod_l+0xb86>
 800df1c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800df1e:	9005      	str	r0, [sp, #20]
 800df20:	2000      	movs	r0, #0
 800df22:	930b      	str	r3, [sp, #44]	; 0x2c
 800df24:	4606      	mov	r6, r0
 800df26:	3a30      	subs	r2, #48	; 0x30
 800df28:	f100 0301 	add.w	r3, r0, #1
 800df2c:	d014      	beq.n	800df58 <_strtod_l+0x240>
 800df2e:	9905      	ldr	r1, [sp, #20]
 800df30:	4419      	add	r1, r3
 800df32:	9105      	str	r1, [sp, #20]
 800df34:	4633      	mov	r3, r6
 800df36:	eb00 0c06 	add.w	ip, r0, r6
 800df3a:	210a      	movs	r1, #10
 800df3c:	4563      	cmp	r3, ip
 800df3e:	d113      	bne.n	800df68 <_strtod_l+0x250>
 800df40:	1833      	adds	r3, r6, r0
 800df42:	2b08      	cmp	r3, #8
 800df44:	f106 0601 	add.w	r6, r6, #1
 800df48:	4406      	add	r6, r0
 800df4a:	dc1a      	bgt.n	800df82 <_strtod_l+0x26a>
 800df4c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800df4e:	230a      	movs	r3, #10
 800df50:	fb03 2301 	mla	r3, r3, r1, r2
 800df54:	9309      	str	r3, [sp, #36]	; 0x24
 800df56:	2300      	movs	r3, #0
 800df58:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800df5a:	1c51      	adds	r1, r2, #1
 800df5c:	9115      	str	r1, [sp, #84]	; 0x54
 800df5e:	7852      	ldrb	r2, [r2, #1]
 800df60:	4618      	mov	r0, r3
 800df62:	e7c9      	b.n	800def8 <_strtod_l+0x1e0>
 800df64:	4658      	mov	r0, fp
 800df66:	e7d2      	b.n	800df0e <_strtod_l+0x1f6>
 800df68:	2b08      	cmp	r3, #8
 800df6a:	f103 0301 	add.w	r3, r3, #1
 800df6e:	dc03      	bgt.n	800df78 <_strtod_l+0x260>
 800df70:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800df72:	434f      	muls	r7, r1
 800df74:	9709      	str	r7, [sp, #36]	; 0x24
 800df76:	e7e1      	b.n	800df3c <_strtod_l+0x224>
 800df78:	2b10      	cmp	r3, #16
 800df7a:	bfd8      	it	le
 800df7c:	fb01 fa0a 	mulle.w	sl, r1, sl
 800df80:	e7dc      	b.n	800df3c <_strtod_l+0x224>
 800df82:	2e10      	cmp	r6, #16
 800df84:	bfdc      	itt	le
 800df86:	230a      	movle	r3, #10
 800df88:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800df8c:	e7e3      	b.n	800df56 <_strtod_l+0x23e>
 800df8e:	2300      	movs	r3, #0
 800df90:	9305      	str	r3, [sp, #20]
 800df92:	2301      	movs	r3, #1
 800df94:	e780      	b.n	800de98 <_strtod_l+0x180>
 800df96:	f04f 0c00 	mov.w	ip, #0
 800df9a:	1caa      	adds	r2, r5, #2
 800df9c:	9215      	str	r2, [sp, #84]	; 0x54
 800df9e:	78aa      	ldrb	r2, [r5, #2]
 800dfa0:	e788      	b.n	800deb4 <_strtod_l+0x19c>
 800dfa2:	f04f 0c01 	mov.w	ip, #1
 800dfa6:	e7f8      	b.n	800df9a <_strtod_l+0x282>
 800dfa8:	0800ff20 	.word	0x0800ff20
 800dfac:	0800ff1c 	.word	0x0800ff1c
 800dfb0:	7ff00000 	.word	0x7ff00000
 800dfb4:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800dfb6:	1c51      	adds	r1, r2, #1
 800dfb8:	9115      	str	r1, [sp, #84]	; 0x54
 800dfba:	7852      	ldrb	r2, [r2, #1]
 800dfbc:	2a30      	cmp	r2, #48	; 0x30
 800dfbe:	d0f9      	beq.n	800dfb4 <_strtod_l+0x29c>
 800dfc0:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800dfc4:	2908      	cmp	r1, #8
 800dfc6:	f63f af7a 	bhi.w	800debe <_strtod_l+0x1a6>
 800dfca:	3a30      	subs	r2, #48	; 0x30
 800dfcc:	9208      	str	r2, [sp, #32]
 800dfce:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800dfd0:	920c      	str	r2, [sp, #48]	; 0x30
 800dfd2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800dfd4:	1c57      	adds	r7, r2, #1
 800dfd6:	9715      	str	r7, [sp, #84]	; 0x54
 800dfd8:	7852      	ldrb	r2, [r2, #1]
 800dfda:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800dfde:	f1be 0f09 	cmp.w	lr, #9
 800dfe2:	d938      	bls.n	800e056 <_strtod_l+0x33e>
 800dfe4:	990c      	ldr	r1, [sp, #48]	; 0x30
 800dfe6:	1a7f      	subs	r7, r7, r1
 800dfe8:	2f08      	cmp	r7, #8
 800dfea:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800dfee:	dc03      	bgt.n	800dff8 <_strtod_l+0x2e0>
 800dff0:	9908      	ldr	r1, [sp, #32]
 800dff2:	428f      	cmp	r7, r1
 800dff4:	bfa8      	it	ge
 800dff6:	460f      	movge	r7, r1
 800dff8:	f1bc 0f00 	cmp.w	ip, #0
 800dffc:	d000      	beq.n	800e000 <_strtod_l+0x2e8>
 800dffe:	427f      	negs	r7, r7
 800e000:	2e00      	cmp	r6, #0
 800e002:	d14f      	bne.n	800e0a4 <_strtod_l+0x38c>
 800e004:	9904      	ldr	r1, [sp, #16]
 800e006:	4301      	orrs	r1, r0
 800e008:	f47f aec1 	bne.w	800dd8e <_strtod_l+0x76>
 800e00c:	2b00      	cmp	r3, #0
 800e00e:	f47f aedb 	bne.w	800ddc8 <_strtod_l+0xb0>
 800e012:	2a69      	cmp	r2, #105	; 0x69
 800e014:	d029      	beq.n	800e06a <_strtod_l+0x352>
 800e016:	dc26      	bgt.n	800e066 <_strtod_l+0x34e>
 800e018:	2a49      	cmp	r2, #73	; 0x49
 800e01a:	d026      	beq.n	800e06a <_strtod_l+0x352>
 800e01c:	2a4e      	cmp	r2, #78	; 0x4e
 800e01e:	f47f aed3 	bne.w	800ddc8 <_strtod_l+0xb0>
 800e022:	499b      	ldr	r1, [pc, #620]	; (800e290 <_strtod_l+0x578>)
 800e024:	a815      	add	r0, sp, #84	; 0x54
 800e026:	f001 fa17 	bl	800f458 <__match>
 800e02a:	2800      	cmp	r0, #0
 800e02c:	f43f aecc 	beq.w	800ddc8 <_strtod_l+0xb0>
 800e030:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e032:	781b      	ldrb	r3, [r3, #0]
 800e034:	2b28      	cmp	r3, #40	; 0x28
 800e036:	d12f      	bne.n	800e098 <_strtod_l+0x380>
 800e038:	4996      	ldr	r1, [pc, #600]	; (800e294 <_strtod_l+0x57c>)
 800e03a:	aa18      	add	r2, sp, #96	; 0x60
 800e03c:	a815      	add	r0, sp, #84	; 0x54
 800e03e:	f001 fa1f 	bl	800f480 <__hexnan>
 800e042:	2805      	cmp	r0, #5
 800e044:	d128      	bne.n	800e098 <_strtod_l+0x380>
 800e046:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800e048:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800e04c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800e050:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800e054:	e69b      	b.n	800dd8e <_strtod_l+0x76>
 800e056:	9f08      	ldr	r7, [sp, #32]
 800e058:	210a      	movs	r1, #10
 800e05a:	fb01 2107 	mla	r1, r1, r7, r2
 800e05e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800e062:	9208      	str	r2, [sp, #32]
 800e064:	e7b5      	b.n	800dfd2 <_strtod_l+0x2ba>
 800e066:	2a6e      	cmp	r2, #110	; 0x6e
 800e068:	e7d9      	b.n	800e01e <_strtod_l+0x306>
 800e06a:	498b      	ldr	r1, [pc, #556]	; (800e298 <_strtod_l+0x580>)
 800e06c:	a815      	add	r0, sp, #84	; 0x54
 800e06e:	f001 f9f3 	bl	800f458 <__match>
 800e072:	2800      	cmp	r0, #0
 800e074:	f43f aea8 	beq.w	800ddc8 <_strtod_l+0xb0>
 800e078:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e07a:	4988      	ldr	r1, [pc, #544]	; (800e29c <_strtod_l+0x584>)
 800e07c:	3b01      	subs	r3, #1
 800e07e:	a815      	add	r0, sp, #84	; 0x54
 800e080:	9315      	str	r3, [sp, #84]	; 0x54
 800e082:	f001 f9e9 	bl	800f458 <__match>
 800e086:	b910      	cbnz	r0, 800e08e <_strtod_l+0x376>
 800e088:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e08a:	3301      	adds	r3, #1
 800e08c:	9315      	str	r3, [sp, #84]	; 0x54
 800e08e:	f8df 921c 	ldr.w	r9, [pc, #540]	; 800e2ac <_strtod_l+0x594>
 800e092:	f04f 0800 	mov.w	r8, #0
 800e096:	e67a      	b.n	800dd8e <_strtod_l+0x76>
 800e098:	4881      	ldr	r0, [pc, #516]	; (800e2a0 <_strtod_l+0x588>)
 800e09a:	f000 fef9 	bl	800ee90 <nan>
 800e09e:	ec59 8b10 	vmov	r8, r9, d0
 800e0a2:	e674      	b.n	800dd8e <_strtod_l+0x76>
 800e0a4:	9b05      	ldr	r3, [sp, #20]
 800e0a6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e0a8:	1afb      	subs	r3, r7, r3
 800e0aa:	f1bb 0f00 	cmp.w	fp, #0
 800e0ae:	bf08      	it	eq
 800e0b0:	46b3      	moveq	fp, r6
 800e0b2:	2e10      	cmp	r6, #16
 800e0b4:	9308      	str	r3, [sp, #32]
 800e0b6:	4635      	mov	r5, r6
 800e0b8:	bfa8      	it	ge
 800e0ba:	2510      	movge	r5, #16
 800e0bc:	f7f2 fa42 	bl	8000544 <__aeabi_ui2d>
 800e0c0:	2e09      	cmp	r6, #9
 800e0c2:	4680      	mov	r8, r0
 800e0c4:	4689      	mov	r9, r1
 800e0c6:	dd13      	ble.n	800e0f0 <_strtod_l+0x3d8>
 800e0c8:	4b76      	ldr	r3, [pc, #472]	; (800e2a4 <_strtod_l+0x58c>)
 800e0ca:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800e0ce:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800e0d2:	f7f2 fab1 	bl	8000638 <__aeabi_dmul>
 800e0d6:	4680      	mov	r8, r0
 800e0d8:	4650      	mov	r0, sl
 800e0da:	4689      	mov	r9, r1
 800e0dc:	f7f2 fa32 	bl	8000544 <__aeabi_ui2d>
 800e0e0:	4602      	mov	r2, r0
 800e0e2:	460b      	mov	r3, r1
 800e0e4:	4640      	mov	r0, r8
 800e0e6:	4649      	mov	r1, r9
 800e0e8:	f7f2 f8f0 	bl	80002cc <__adddf3>
 800e0ec:	4680      	mov	r8, r0
 800e0ee:	4689      	mov	r9, r1
 800e0f0:	2e0f      	cmp	r6, #15
 800e0f2:	dc38      	bgt.n	800e166 <_strtod_l+0x44e>
 800e0f4:	9b08      	ldr	r3, [sp, #32]
 800e0f6:	2b00      	cmp	r3, #0
 800e0f8:	f43f ae49 	beq.w	800dd8e <_strtod_l+0x76>
 800e0fc:	dd24      	ble.n	800e148 <_strtod_l+0x430>
 800e0fe:	2b16      	cmp	r3, #22
 800e100:	dc0b      	bgt.n	800e11a <_strtod_l+0x402>
 800e102:	4968      	ldr	r1, [pc, #416]	; (800e2a4 <_strtod_l+0x58c>)
 800e104:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800e108:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e10c:	4642      	mov	r2, r8
 800e10e:	464b      	mov	r3, r9
 800e110:	f7f2 fa92 	bl	8000638 <__aeabi_dmul>
 800e114:	4680      	mov	r8, r0
 800e116:	4689      	mov	r9, r1
 800e118:	e639      	b.n	800dd8e <_strtod_l+0x76>
 800e11a:	9a08      	ldr	r2, [sp, #32]
 800e11c:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 800e120:	4293      	cmp	r3, r2
 800e122:	db20      	blt.n	800e166 <_strtod_l+0x44e>
 800e124:	4c5f      	ldr	r4, [pc, #380]	; (800e2a4 <_strtod_l+0x58c>)
 800e126:	f1c6 060f 	rsb	r6, r6, #15
 800e12a:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800e12e:	4642      	mov	r2, r8
 800e130:	464b      	mov	r3, r9
 800e132:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e136:	f7f2 fa7f 	bl	8000638 <__aeabi_dmul>
 800e13a:	9b08      	ldr	r3, [sp, #32]
 800e13c:	1b9e      	subs	r6, r3, r6
 800e13e:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800e142:	e9d4 2300 	ldrd	r2, r3, [r4]
 800e146:	e7e3      	b.n	800e110 <_strtod_l+0x3f8>
 800e148:	9b08      	ldr	r3, [sp, #32]
 800e14a:	3316      	adds	r3, #22
 800e14c:	db0b      	blt.n	800e166 <_strtod_l+0x44e>
 800e14e:	9b05      	ldr	r3, [sp, #20]
 800e150:	1bdf      	subs	r7, r3, r7
 800e152:	4b54      	ldr	r3, [pc, #336]	; (800e2a4 <_strtod_l+0x58c>)
 800e154:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800e158:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e15c:	4640      	mov	r0, r8
 800e15e:	4649      	mov	r1, r9
 800e160:	f7f2 fb94 	bl	800088c <__aeabi_ddiv>
 800e164:	e7d6      	b.n	800e114 <_strtod_l+0x3fc>
 800e166:	9b08      	ldr	r3, [sp, #32]
 800e168:	1b75      	subs	r5, r6, r5
 800e16a:	441d      	add	r5, r3
 800e16c:	2d00      	cmp	r5, #0
 800e16e:	dd70      	ble.n	800e252 <_strtod_l+0x53a>
 800e170:	f015 030f 	ands.w	r3, r5, #15
 800e174:	d00a      	beq.n	800e18c <_strtod_l+0x474>
 800e176:	494b      	ldr	r1, [pc, #300]	; (800e2a4 <_strtod_l+0x58c>)
 800e178:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800e17c:	4642      	mov	r2, r8
 800e17e:	464b      	mov	r3, r9
 800e180:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e184:	f7f2 fa58 	bl	8000638 <__aeabi_dmul>
 800e188:	4680      	mov	r8, r0
 800e18a:	4689      	mov	r9, r1
 800e18c:	f035 050f 	bics.w	r5, r5, #15
 800e190:	d04d      	beq.n	800e22e <_strtod_l+0x516>
 800e192:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800e196:	dd22      	ble.n	800e1de <_strtod_l+0x4c6>
 800e198:	2500      	movs	r5, #0
 800e19a:	46ab      	mov	fp, r5
 800e19c:	9509      	str	r5, [sp, #36]	; 0x24
 800e19e:	9505      	str	r5, [sp, #20]
 800e1a0:	2322      	movs	r3, #34	; 0x22
 800e1a2:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800e2ac <_strtod_l+0x594>
 800e1a6:	6023      	str	r3, [r4, #0]
 800e1a8:	f04f 0800 	mov.w	r8, #0
 800e1ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e1ae:	2b00      	cmp	r3, #0
 800e1b0:	f43f aded 	beq.w	800dd8e <_strtod_l+0x76>
 800e1b4:	9916      	ldr	r1, [sp, #88]	; 0x58
 800e1b6:	4620      	mov	r0, r4
 800e1b8:	f7ff f924 	bl	800d404 <_Bfree>
 800e1bc:	9905      	ldr	r1, [sp, #20]
 800e1be:	4620      	mov	r0, r4
 800e1c0:	f7ff f920 	bl	800d404 <_Bfree>
 800e1c4:	4659      	mov	r1, fp
 800e1c6:	4620      	mov	r0, r4
 800e1c8:	f7ff f91c 	bl	800d404 <_Bfree>
 800e1cc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e1ce:	4620      	mov	r0, r4
 800e1d0:	f7ff f918 	bl	800d404 <_Bfree>
 800e1d4:	4629      	mov	r1, r5
 800e1d6:	4620      	mov	r0, r4
 800e1d8:	f7ff f914 	bl	800d404 <_Bfree>
 800e1dc:	e5d7      	b.n	800dd8e <_strtod_l+0x76>
 800e1de:	4b32      	ldr	r3, [pc, #200]	; (800e2a8 <_strtod_l+0x590>)
 800e1e0:	9304      	str	r3, [sp, #16]
 800e1e2:	2300      	movs	r3, #0
 800e1e4:	112d      	asrs	r5, r5, #4
 800e1e6:	4640      	mov	r0, r8
 800e1e8:	4649      	mov	r1, r9
 800e1ea:	469a      	mov	sl, r3
 800e1ec:	2d01      	cmp	r5, #1
 800e1ee:	dc21      	bgt.n	800e234 <_strtod_l+0x51c>
 800e1f0:	b10b      	cbz	r3, 800e1f6 <_strtod_l+0x4de>
 800e1f2:	4680      	mov	r8, r0
 800e1f4:	4689      	mov	r9, r1
 800e1f6:	492c      	ldr	r1, [pc, #176]	; (800e2a8 <_strtod_l+0x590>)
 800e1f8:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800e1fc:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800e200:	4642      	mov	r2, r8
 800e202:	464b      	mov	r3, r9
 800e204:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e208:	f7f2 fa16 	bl	8000638 <__aeabi_dmul>
 800e20c:	4b27      	ldr	r3, [pc, #156]	; (800e2ac <_strtod_l+0x594>)
 800e20e:	460a      	mov	r2, r1
 800e210:	400b      	ands	r3, r1
 800e212:	4927      	ldr	r1, [pc, #156]	; (800e2b0 <_strtod_l+0x598>)
 800e214:	428b      	cmp	r3, r1
 800e216:	4680      	mov	r8, r0
 800e218:	d8be      	bhi.n	800e198 <_strtod_l+0x480>
 800e21a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800e21e:	428b      	cmp	r3, r1
 800e220:	bf86      	itte	hi
 800e222:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 800e2b4 <_strtod_l+0x59c>
 800e226:	f04f 38ff 	movhi.w	r8, #4294967295
 800e22a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800e22e:	2300      	movs	r3, #0
 800e230:	9304      	str	r3, [sp, #16]
 800e232:	e07b      	b.n	800e32c <_strtod_l+0x614>
 800e234:	07ea      	lsls	r2, r5, #31
 800e236:	d505      	bpl.n	800e244 <_strtod_l+0x52c>
 800e238:	9b04      	ldr	r3, [sp, #16]
 800e23a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e23e:	f7f2 f9fb 	bl	8000638 <__aeabi_dmul>
 800e242:	2301      	movs	r3, #1
 800e244:	9a04      	ldr	r2, [sp, #16]
 800e246:	3208      	adds	r2, #8
 800e248:	f10a 0a01 	add.w	sl, sl, #1
 800e24c:	106d      	asrs	r5, r5, #1
 800e24e:	9204      	str	r2, [sp, #16]
 800e250:	e7cc      	b.n	800e1ec <_strtod_l+0x4d4>
 800e252:	d0ec      	beq.n	800e22e <_strtod_l+0x516>
 800e254:	426d      	negs	r5, r5
 800e256:	f015 020f 	ands.w	r2, r5, #15
 800e25a:	d00a      	beq.n	800e272 <_strtod_l+0x55a>
 800e25c:	4b11      	ldr	r3, [pc, #68]	; (800e2a4 <_strtod_l+0x58c>)
 800e25e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e262:	4640      	mov	r0, r8
 800e264:	4649      	mov	r1, r9
 800e266:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e26a:	f7f2 fb0f 	bl	800088c <__aeabi_ddiv>
 800e26e:	4680      	mov	r8, r0
 800e270:	4689      	mov	r9, r1
 800e272:	112d      	asrs	r5, r5, #4
 800e274:	d0db      	beq.n	800e22e <_strtod_l+0x516>
 800e276:	2d1f      	cmp	r5, #31
 800e278:	dd1e      	ble.n	800e2b8 <_strtod_l+0x5a0>
 800e27a:	2500      	movs	r5, #0
 800e27c:	46ab      	mov	fp, r5
 800e27e:	9509      	str	r5, [sp, #36]	; 0x24
 800e280:	9505      	str	r5, [sp, #20]
 800e282:	2322      	movs	r3, #34	; 0x22
 800e284:	f04f 0800 	mov.w	r8, #0
 800e288:	f04f 0900 	mov.w	r9, #0
 800e28c:	6023      	str	r3, [r4, #0]
 800e28e:	e78d      	b.n	800e1ac <_strtod_l+0x494>
 800e290:	0800fd09 	.word	0x0800fd09
 800e294:	0800ff34 	.word	0x0800ff34
 800e298:	0800fd01 	.word	0x0800fd01
 800e29c:	0800fd38 	.word	0x0800fd38
 800e2a0:	080100c5 	.word	0x080100c5
 800e2a4:	0800fe48 	.word	0x0800fe48
 800e2a8:	0800fe20 	.word	0x0800fe20
 800e2ac:	7ff00000 	.word	0x7ff00000
 800e2b0:	7ca00000 	.word	0x7ca00000
 800e2b4:	7fefffff 	.word	0x7fefffff
 800e2b8:	f015 0310 	ands.w	r3, r5, #16
 800e2bc:	bf18      	it	ne
 800e2be:	236a      	movne	r3, #106	; 0x6a
 800e2c0:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 800e664 <_strtod_l+0x94c>
 800e2c4:	9304      	str	r3, [sp, #16]
 800e2c6:	4640      	mov	r0, r8
 800e2c8:	4649      	mov	r1, r9
 800e2ca:	2300      	movs	r3, #0
 800e2cc:	07ea      	lsls	r2, r5, #31
 800e2ce:	d504      	bpl.n	800e2da <_strtod_l+0x5c2>
 800e2d0:	e9da 2300 	ldrd	r2, r3, [sl]
 800e2d4:	f7f2 f9b0 	bl	8000638 <__aeabi_dmul>
 800e2d8:	2301      	movs	r3, #1
 800e2da:	106d      	asrs	r5, r5, #1
 800e2dc:	f10a 0a08 	add.w	sl, sl, #8
 800e2e0:	d1f4      	bne.n	800e2cc <_strtod_l+0x5b4>
 800e2e2:	b10b      	cbz	r3, 800e2e8 <_strtod_l+0x5d0>
 800e2e4:	4680      	mov	r8, r0
 800e2e6:	4689      	mov	r9, r1
 800e2e8:	9b04      	ldr	r3, [sp, #16]
 800e2ea:	b1bb      	cbz	r3, 800e31c <_strtod_l+0x604>
 800e2ec:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800e2f0:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800e2f4:	2b00      	cmp	r3, #0
 800e2f6:	4649      	mov	r1, r9
 800e2f8:	dd10      	ble.n	800e31c <_strtod_l+0x604>
 800e2fa:	2b1f      	cmp	r3, #31
 800e2fc:	f340 811e 	ble.w	800e53c <_strtod_l+0x824>
 800e300:	2b34      	cmp	r3, #52	; 0x34
 800e302:	bfde      	ittt	le
 800e304:	f04f 33ff 	movle.w	r3, #4294967295
 800e308:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800e30c:	4093      	lslle	r3, r2
 800e30e:	f04f 0800 	mov.w	r8, #0
 800e312:	bfcc      	ite	gt
 800e314:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800e318:	ea03 0901 	andle.w	r9, r3, r1
 800e31c:	2200      	movs	r2, #0
 800e31e:	2300      	movs	r3, #0
 800e320:	4640      	mov	r0, r8
 800e322:	4649      	mov	r1, r9
 800e324:	f7f2 fbf0 	bl	8000b08 <__aeabi_dcmpeq>
 800e328:	2800      	cmp	r0, #0
 800e32a:	d1a6      	bne.n	800e27a <_strtod_l+0x562>
 800e32c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e32e:	9300      	str	r3, [sp, #0]
 800e330:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e332:	4633      	mov	r3, r6
 800e334:	465a      	mov	r2, fp
 800e336:	4620      	mov	r0, r4
 800e338:	f7ff f8cc 	bl	800d4d4 <__s2b>
 800e33c:	9009      	str	r0, [sp, #36]	; 0x24
 800e33e:	2800      	cmp	r0, #0
 800e340:	f43f af2a 	beq.w	800e198 <_strtod_l+0x480>
 800e344:	9a08      	ldr	r2, [sp, #32]
 800e346:	9b05      	ldr	r3, [sp, #20]
 800e348:	2a00      	cmp	r2, #0
 800e34a:	eba3 0307 	sub.w	r3, r3, r7
 800e34e:	bfa8      	it	ge
 800e350:	2300      	movge	r3, #0
 800e352:	930c      	str	r3, [sp, #48]	; 0x30
 800e354:	2500      	movs	r5, #0
 800e356:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800e35a:	9312      	str	r3, [sp, #72]	; 0x48
 800e35c:	46ab      	mov	fp, r5
 800e35e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e360:	4620      	mov	r0, r4
 800e362:	6859      	ldr	r1, [r3, #4]
 800e364:	f7ff f80e 	bl	800d384 <_Balloc>
 800e368:	9005      	str	r0, [sp, #20]
 800e36a:	2800      	cmp	r0, #0
 800e36c:	f43f af18 	beq.w	800e1a0 <_strtod_l+0x488>
 800e370:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e372:	691a      	ldr	r2, [r3, #16]
 800e374:	3202      	adds	r2, #2
 800e376:	f103 010c 	add.w	r1, r3, #12
 800e37a:	0092      	lsls	r2, r2, #2
 800e37c:	300c      	adds	r0, #12
 800e37e:	f000 fd77 	bl	800ee70 <memcpy>
 800e382:	ec49 8b10 	vmov	d0, r8, r9
 800e386:	aa18      	add	r2, sp, #96	; 0x60
 800e388:	a917      	add	r1, sp, #92	; 0x5c
 800e38a:	4620      	mov	r0, r4
 800e38c:	f7ff fbd6 	bl	800db3c <__d2b>
 800e390:	ec49 8b18 	vmov	d8, r8, r9
 800e394:	9016      	str	r0, [sp, #88]	; 0x58
 800e396:	2800      	cmp	r0, #0
 800e398:	f43f af02 	beq.w	800e1a0 <_strtod_l+0x488>
 800e39c:	2101      	movs	r1, #1
 800e39e:	4620      	mov	r0, r4
 800e3a0:	f7ff f930 	bl	800d604 <__i2b>
 800e3a4:	4683      	mov	fp, r0
 800e3a6:	2800      	cmp	r0, #0
 800e3a8:	f43f aefa 	beq.w	800e1a0 <_strtod_l+0x488>
 800e3ac:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800e3ae:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800e3b0:	2e00      	cmp	r6, #0
 800e3b2:	bfab      	itete	ge
 800e3b4:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 800e3b6:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 800e3b8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800e3ba:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 800e3be:	bfac      	ite	ge
 800e3c0:	eb06 0a03 	addge.w	sl, r6, r3
 800e3c4:	1b9f      	sublt	r7, r3, r6
 800e3c6:	9b04      	ldr	r3, [sp, #16]
 800e3c8:	1af6      	subs	r6, r6, r3
 800e3ca:	4416      	add	r6, r2
 800e3cc:	4ba0      	ldr	r3, [pc, #640]	; (800e650 <_strtod_l+0x938>)
 800e3ce:	3e01      	subs	r6, #1
 800e3d0:	429e      	cmp	r6, r3
 800e3d2:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800e3d6:	f280 80c4 	bge.w	800e562 <_strtod_l+0x84a>
 800e3da:	1b9b      	subs	r3, r3, r6
 800e3dc:	2b1f      	cmp	r3, #31
 800e3de:	eba2 0203 	sub.w	r2, r2, r3
 800e3e2:	f04f 0101 	mov.w	r1, #1
 800e3e6:	f300 80b0 	bgt.w	800e54a <_strtod_l+0x832>
 800e3ea:	fa01 f303 	lsl.w	r3, r1, r3
 800e3ee:	930e      	str	r3, [sp, #56]	; 0x38
 800e3f0:	2300      	movs	r3, #0
 800e3f2:	930d      	str	r3, [sp, #52]	; 0x34
 800e3f4:	eb0a 0602 	add.w	r6, sl, r2
 800e3f8:	9b04      	ldr	r3, [sp, #16]
 800e3fa:	45b2      	cmp	sl, r6
 800e3fc:	4417      	add	r7, r2
 800e3fe:	441f      	add	r7, r3
 800e400:	4653      	mov	r3, sl
 800e402:	bfa8      	it	ge
 800e404:	4633      	movge	r3, r6
 800e406:	42bb      	cmp	r3, r7
 800e408:	bfa8      	it	ge
 800e40a:	463b      	movge	r3, r7
 800e40c:	2b00      	cmp	r3, #0
 800e40e:	bfc2      	ittt	gt
 800e410:	1af6      	subgt	r6, r6, r3
 800e412:	1aff      	subgt	r7, r7, r3
 800e414:	ebaa 0a03 	subgt.w	sl, sl, r3
 800e418:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e41a:	2b00      	cmp	r3, #0
 800e41c:	dd17      	ble.n	800e44e <_strtod_l+0x736>
 800e41e:	4659      	mov	r1, fp
 800e420:	461a      	mov	r2, r3
 800e422:	4620      	mov	r0, r4
 800e424:	f7ff f9ae 	bl	800d784 <__pow5mult>
 800e428:	4683      	mov	fp, r0
 800e42a:	2800      	cmp	r0, #0
 800e42c:	f43f aeb8 	beq.w	800e1a0 <_strtod_l+0x488>
 800e430:	4601      	mov	r1, r0
 800e432:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800e434:	4620      	mov	r0, r4
 800e436:	f7ff f8fb 	bl	800d630 <__multiply>
 800e43a:	900b      	str	r0, [sp, #44]	; 0x2c
 800e43c:	2800      	cmp	r0, #0
 800e43e:	f43f aeaf 	beq.w	800e1a0 <_strtod_l+0x488>
 800e442:	9916      	ldr	r1, [sp, #88]	; 0x58
 800e444:	4620      	mov	r0, r4
 800e446:	f7fe ffdd 	bl	800d404 <_Bfree>
 800e44a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e44c:	9316      	str	r3, [sp, #88]	; 0x58
 800e44e:	2e00      	cmp	r6, #0
 800e450:	f300 808c 	bgt.w	800e56c <_strtod_l+0x854>
 800e454:	9b08      	ldr	r3, [sp, #32]
 800e456:	2b00      	cmp	r3, #0
 800e458:	dd08      	ble.n	800e46c <_strtod_l+0x754>
 800e45a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800e45c:	9905      	ldr	r1, [sp, #20]
 800e45e:	4620      	mov	r0, r4
 800e460:	f7ff f990 	bl	800d784 <__pow5mult>
 800e464:	9005      	str	r0, [sp, #20]
 800e466:	2800      	cmp	r0, #0
 800e468:	f43f ae9a 	beq.w	800e1a0 <_strtod_l+0x488>
 800e46c:	2f00      	cmp	r7, #0
 800e46e:	dd08      	ble.n	800e482 <_strtod_l+0x76a>
 800e470:	9905      	ldr	r1, [sp, #20]
 800e472:	463a      	mov	r2, r7
 800e474:	4620      	mov	r0, r4
 800e476:	f7ff f9df 	bl	800d838 <__lshift>
 800e47a:	9005      	str	r0, [sp, #20]
 800e47c:	2800      	cmp	r0, #0
 800e47e:	f43f ae8f 	beq.w	800e1a0 <_strtod_l+0x488>
 800e482:	f1ba 0f00 	cmp.w	sl, #0
 800e486:	dd08      	ble.n	800e49a <_strtod_l+0x782>
 800e488:	4659      	mov	r1, fp
 800e48a:	4652      	mov	r2, sl
 800e48c:	4620      	mov	r0, r4
 800e48e:	f7ff f9d3 	bl	800d838 <__lshift>
 800e492:	4683      	mov	fp, r0
 800e494:	2800      	cmp	r0, #0
 800e496:	f43f ae83 	beq.w	800e1a0 <_strtod_l+0x488>
 800e49a:	9a05      	ldr	r2, [sp, #20]
 800e49c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800e49e:	4620      	mov	r0, r4
 800e4a0:	f7ff fa52 	bl	800d948 <__mdiff>
 800e4a4:	4605      	mov	r5, r0
 800e4a6:	2800      	cmp	r0, #0
 800e4a8:	f43f ae7a 	beq.w	800e1a0 <_strtod_l+0x488>
 800e4ac:	68c3      	ldr	r3, [r0, #12]
 800e4ae:	930b      	str	r3, [sp, #44]	; 0x2c
 800e4b0:	2300      	movs	r3, #0
 800e4b2:	60c3      	str	r3, [r0, #12]
 800e4b4:	4659      	mov	r1, fp
 800e4b6:	f7ff fa2b 	bl	800d910 <__mcmp>
 800e4ba:	2800      	cmp	r0, #0
 800e4bc:	da60      	bge.n	800e580 <_strtod_l+0x868>
 800e4be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e4c0:	ea53 0308 	orrs.w	r3, r3, r8
 800e4c4:	f040 8084 	bne.w	800e5d0 <_strtod_l+0x8b8>
 800e4c8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e4cc:	2b00      	cmp	r3, #0
 800e4ce:	d17f      	bne.n	800e5d0 <_strtod_l+0x8b8>
 800e4d0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800e4d4:	0d1b      	lsrs	r3, r3, #20
 800e4d6:	051b      	lsls	r3, r3, #20
 800e4d8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800e4dc:	d978      	bls.n	800e5d0 <_strtod_l+0x8b8>
 800e4de:	696b      	ldr	r3, [r5, #20]
 800e4e0:	b913      	cbnz	r3, 800e4e8 <_strtod_l+0x7d0>
 800e4e2:	692b      	ldr	r3, [r5, #16]
 800e4e4:	2b01      	cmp	r3, #1
 800e4e6:	dd73      	ble.n	800e5d0 <_strtod_l+0x8b8>
 800e4e8:	4629      	mov	r1, r5
 800e4ea:	2201      	movs	r2, #1
 800e4ec:	4620      	mov	r0, r4
 800e4ee:	f7ff f9a3 	bl	800d838 <__lshift>
 800e4f2:	4659      	mov	r1, fp
 800e4f4:	4605      	mov	r5, r0
 800e4f6:	f7ff fa0b 	bl	800d910 <__mcmp>
 800e4fa:	2800      	cmp	r0, #0
 800e4fc:	dd68      	ble.n	800e5d0 <_strtod_l+0x8b8>
 800e4fe:	9904      	ldr	r1, [sp, #16]
 800e500:	4a54      	ldr	r2, [pc, #336]	; (800e654 <_strtod_l+0x93c>)
 800e502:	464b      	mov	r3, r9
 800e504:	2900      	cmp	r1, #0
 800e506:	f000 8084 	beq.w	800e612 <_strtod_l+0x8fa>
 800e50a:	ea02 0109 	and.w	r1, r2, r9
 800e50e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800e512:	dc7e      	bgt.n	800e612 <_strtod_l+0x8fa>
 800e514:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800e518:	f77f aeb3 	ble.w	800e282 <_strtod_l+0x56a>
 800e51c:	4b4e      	ldr	r3, [pc, #312]	; (800e658 <_strtod_l+0x940>)
 800e51e:	4640      	mov	r0, r8
 800e520:	4649      	mov	r1, r9
 800e522:	2200      	movs	r2, #0
 800e524:	f7f2 f888 	bl	8000638 <__aeabi_dmul>
 800e528:	4b4a      	ldr	r3, [pc, #296]	; (800e654 <_strtod_l+0x93c>)
 800e52a:	400b      	ands	r3, r1
 800e52c:	4680      	mov	r8, r0
 800e52e:	4689      	mov	r9, r1
 800e530:	2b00      	cmp	r3, #0
 800e532:	f47f ae3f 	bne.w	800e1b4 <_strtod_l+0x49c>
 800e536:	2322      	movs	r3, #34	; 0x22
 800e538:	6023      	str	r3, [r4, #0]
 800e53a:	e63b      	b.n	800e1b4 <_strtod_l+0x49c>
 800e53c:	f04f 32ff 	mov.w	r2, #4294967295
 800e540:	fa02 f303 	lsl.w	r3, r2, r3
 800e544:	ea03 0808 	and.w	r8, r3, r8
 800e548:	e6e8      	b.n	800e31c <_strtod_l+0x604>
 800e54a:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800e54e:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800e552:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800e556:	36e2      	adds	r6, #226	; 0xe2
 800e558:	fa01 f306 	lsl.w	r3, r1, r6
 800e55c:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 800e560:	e748      	b.n	800e3f4 <_strtod_l+0x6dc>
 800e562:	2100      	movs	r1, #0
 800e564:	2301      	movs	r3, #1
 800e566:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 800e56a:	e743      	b.n	800e3f4 <_strtod_l+0x6dc>
 800e56c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800e56e:	4632      	mov	r2, r6
 800e570:	4620      	mov	r0, r4
 800e572:	f7ff f961 	bl	800d838 <__lshift>
 800e576:	9016      	str	r0, [sp, #88]	; 0x58
 800e578:	2800      	cmp	r0, #0
 800e57a:	f47f af6b 	bne.w	800e454 <_strtod_l+0x73c>
 800e57e:	e60f      	b.n	800e1a0 <_strtod_l+0x488>
 800e580:	46ca      	mov	sl, r9
 800e582:	d171      	bne.n	800e668 <_strtod_l+0x950>
 800e584:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e586:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e58a:	b352      	cbz	r2, 800e5e2 <_strtod_l+0x8ca>
 800e58c:	4a33      	ldr	r2, [pc, #204]	; (800e65c <_strtod_l+0x944>)
 800e58e:	4293      	cmp	r3, r2
 800e590:	d12a      	bne.n	800e5e8 <_strtod_l+0x8d0>
 800e592:	9b04      	ldr	r3, [sp, #16]
 800e594:	4641      	mov	r1, r8
 800e596:	b1fb      	cbz	r3, 800e5d8 <_strtod_l+0x8c0>
 800e598:	4b2e      	ldr	r3, [pc, #184]	; (800e654 <_strtod_l+0x93c>)
 800e59a:	ea09 0303 	and.w	r3, r9, r3
 800e59e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800e5a2:	f04f 32ff 	mov.w	r2, #4294967295
 800e5a6:	d81a      	bhi.n	800e5de <_strtod_l+0x8c6>
 800e5a8:	0d1b      	lsrs	r3, r3, #20
 800e5aa:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800e5ae:	fa02 f303 	lsl.w	r3, r2, r3
 800e5b2:	4299      	cmp	r1, r3
 800e5b4:	d118      	bne.n	800e5e8 <_strtod_l+0x8d0>
 800e5b6:	4b2a      	ldr	r3, [pc, #168]	; (800e660 <_strtod_l+0x948>)
 800e5b8:	459a      	cmp	sl, r3
 800e5ba:	d102      	bne.n	800e5c2 <_strtod_l+0x8aa>
 800e5bc:	3101      	adds	r1, #1
 800e5be:	f43f adef 	beq.w	800e1a0 <_strtod_l+0x488>
 800e5c2:	4b24      	ldr	r3, [pc, #144]	; (800e654 <_strtod_l+0x93c>)
 800e5c4:	ea0a 0303 	and.w	r3, sl, r3
 800e5c8:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800e5cc:	f04f 0800 	mov.w	r8, #0
 800e5d0:	9b04      	ldr	r3, [sp, #16]
 800e5d2:	2b00      	cmp	r3, #0
 800e5d4:	d1a2      	bne.n	800e51c <_strtod_l+0x804>
 800e5d6:	e5ed      	b.n	800e1b4 <_strtod_l+0x49c>
 800e5d8:	f04f 33ff 	mov.w	r3, #4294967295
 800e5dc:	e7e9      	b.n	800e5b2 <_strtod_l+0x89a>
 800e5de:	4613      	mov	r3, r2
 800e5e0:	e7e7      	b.n	800e5b2 <_strtod_l+0x89a>
 800e5e2:	ea53 0308 	orrs.w	r3, r3, r8
 800e5e6:	d08a      	beq.n	800e4fe <_strtod_l+0x7e6>
 800e5e8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e5ea:	b1e3      	cbz	r3, 800e626 <_strtod_l+0x90e>
 800e5ec:	ea13 0f0a 	tst.w	r3, sl
 800e5f0:	d0ee      	beq.n	800e5d0 <_strtod_l+0x8b8>
 800e5f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e5f4:	9a04      	ldr	r2, [sp, #16]
 800e5f6:	4640      	mov	r0, r8
 800e5f8:	4649      	mov	r1, r9
 800e5fa:	b1c3      	cbz	r3, 800e62e <_strtod_l+0x916>
 800e5fc:	f7ff fb6f 	bl	800dcde <sulp>
 800e600:	4602      	mov	r2, r0
 800e602:	460b      	mov	r3, r1
 800e604:	ec51 0b18 	vmov	r0, r1, d8
 800e608:	f7f1 fe60 	bl	80002cc <__adddf3>
 800e60c:	4680      	mov	r8, r0
 800e60e:	4689      	mov	r9, r1
 800e610:	e7de      	b.n	800e5d0 <_strtod_l+0x8b8>
 800e612:	4013      	ands	r3, r2
 800e614:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800e618:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800e61c:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800e620:	f04f 38ff 	mov.w	r8, #4294967295
 800e624:	e7d4      	b.n	800e5d0 <_strtod_l+0x8b8>
 800e626:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e628:	ea13 0f08 	tst.w	r3, r8
 800e62c:	e7e0      	b.n	800e5f0 <_strtod_l+0x8d8>
 800e62e:	f7ff fb56 	bl	800dcde <sulp>
 800e632:	4602      	mov	r2, r0
 800e634:	460b      	mov	r3, r1
 800e636:	ec51 0b18 	vmov	r0, r1, d8
 800e63a:	f7f1 fe45 	bl	80002c8 <__aeabi_dsub>
 800e63e:	2200      	movs	r2, #0
 800e640:	2300      	movs	r3, #0
 800e642:	4680      	mov	r8, r0
 800e644:	4689      	mov	r9, r1
 800e646:	f7f2 fa5f 	bl	8000b08 <__aeabi_dcmpeq>
 800e64a:	2800      	cmp	r0, #0
 800e64c:	d0c0      	beq.n	800e5d0 <_strtod_l+0x8b8>
 800e64e:	e618      	b.n	800e282 <_strtod_l+0x56a>
 800e650:	fffffc02 	.word	0xfffffc02
 800e654:	7ff00000 	.word	0x7ff00000
 800e658:	39500000 	.word	0x39500000
 800e65c:	000fffff 	.word	0x000fffff
 800e660:	7fefffff 	.word	0x7fefffff
 800e664:	0800ff48 	.word	0x0800ff48
 800e668:	4659      	mov	r1, fp
 800e66a:	4628      	mov	r0, r5
 800e66c:	f7ff fac0 	bl	800dbf0 <__ratio>
 800e670:	ec57 6b10 	vmov	r6, r7, d0
 800e674:	ee10 0a10 	vmov	r0, s0
 800e678:	2200      	movs	r2, #0
 800e67a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800e67e:	4639      	mov	r1, r7
 800e680:	f7f2 fa56 	bl	8000b30 <__aeabi_dcmple>
 800e684:	2800      	cmp	r0, #0
 800e686:	d071      	beq.n	800e76c <_strtod_l+0xa54>
 800e688:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e68a:	2b00      	cmp	r3, #0
 800e68c:	d17c      	bne.n	800e788 <_strtod_l+0xa70>
 800e68e:	f1b8 0f00 	cmp.w	r8, #0
 800e692:	d15a      	bne.n	800e74a <_strtod_l+0xa32>
 800e694:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e698:	2b00      	cmp	r3, #0
 800e69a:	d15d      	bne.n	800e758 <_strtod_l+0xa40>
 800e69c:	4b90      	ldr	r3, [pc, #576]	; (800e8e0 <_strtod_l+0xbc8>)
 800e69e:	2200      	movs	r2, #0
 800e6a0:	4630      	mov	r0, r6
 800e6a2:	4639      	mov	r1, r7
 800e6a4:	f7f2 fa3a 	bl	8000b1c <__aeabi_dcmplt>
 800e6a8:	2800      	cmp	r0, #0
 800e6aa:	d15c      	bne.n	800e766 <_strtod_l+0xa4e>
 800e6ac:	4630      	mov	r0, r6
 800e6ae:	4639      	mov	r1, r7
 800e6b0:	4b8c      	ldr	r3, [pc, #560]	; (800e8e4 <_strtod_l+0xbcc>)
 800e6b2:	2200      	movs	r2, #0
 800e6b4:	f7f1 ffc0 	bl	8000638 <__aeabi_dmul>
 800e6b8:	4606      	mov	r6, r0
 800e6ba:	460f      	mov	r7, r1
 800e6bc:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800e6c0:	9606      	str	r6, [sp, #24]
 800e6c2:	9307      	str	r3, [sp, #28]
 800e6c4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e6c8:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800e6cc:	4b86      	ldr	r3, [pc, #536]	; (800e8e8 <_strtod_l+0xbd0>)
 800e6ce:	ea0a 0303 	and.w	r3, sl, r3
 800e6d2:	930d      	str	r3, [sp, #52]	; 0x34
 800e6d4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e6d6:	4b85      	ldr	r3, [pc, #532]	; (800e8ec <_strtod_l+0xbd4>)
 800e6d8:	429a      	cmp	r2, r3
 800e6da:	f040 8090 	bne.w	800e7fe <_strtod_l+0xae6>
 800e6de:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800e6e2:	ec49 8b10 	vmov	d0, r8, r9
 800e6e6:	f7ff f9b9 	bl	800da5c <__ulp>
 800e6ea:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e6ee:	ec51 0b10 	vmov	r0, r1, d0
 800e6f2:	f7f1 ffa1 	bl	8000638 <__aeabi_dmul>
 800e6f6:	4642      	mov	r2, r8
 800e6f8:	464b      	mov	r3, r9
 800e6fa:	f7f1 fde7 	bl	80002cc <__adddf3>
 800e6fe:	460b      	mov	r3, r1
 800e700:	4979      	ldr	r1, [pc, #484]	; (800e8e8 <_strtod_l+0xbd0>)
 800e702:	4a7b      	ldr	r2, [pc, #492]	; (800e8f0 <_strtod_l+0xbd8>)
 800e704:	4019      	ands	r1, r3
 800e706:	4291      	cmp	r1, r2
 800e708:	4680      	mov	r8, r0
 800e70a:	d944      	bls.n	800e796 <_strtod_l+0xa7e>
 800e70c:	ee18 2a90 	vmov	r2, s17
 800e710:	4b78      	ldr	r3, [pc, #480]	; (800e8f4 <_strtod_l+0xbdc>)
 800e712:	429a      	cmp	r2, r3
 800e714:	d104      	bne.n	800e720 <_strtod_l+0xa08>
 800e716:	ee18 3a10 	vmov	r3, s16
 800e71a:	3301      	adds	r3, #1
 800e71c:	f43f ad40 	beq.w	800e1a0 <_strtod_l+0x488>
 800e720:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 800e8f4 <_strtod_l+0xbdc>
 800e724:	f04f 38ff 	mov.w	r8, #4294967295
 800e728:	9916      	ldr	r1, [sp, #88]	; 0x58
 800e72a:	4620      	mov	r0, r4
 800e72c:	f7fe fe6a 	bl	800d404 <_Bfree>
 800e730:	9905      	ldr	r1, [sp, #20]
 800e732:	4620      	mov	r0, r4
 800e734:	f7fe fe66 	bl	800d404 <_Bfree>
 800e738:	4659      	mov	r1, fp
 800e73a:	4620      	mov	r0, r4
 800e73c:	f7fe fe62 	bl	800d404 <_Bfree>
 800e740:	4629      	mov	r1, r5
 800e742:	4620      	mov	r0, r4
 800e744:	f7fe fe5e 	bl	800d404 <_Bfree>
 800e748:	e609      	b.n	800e35e <_strtod_l+0x646>
 800e74a:	f1b8 0f01 	cmp.w	r8, #1
 800e74e:	d103      	bne.n	800e758 <_strtod_l+0xa40>
 800e750:	f1b9 0f00 	cmp.w	r9, #0
 800e754:	f43f ad95 	beq.w	800e282 <_strtod_l+0x56a>
 800e758:	ed9f 7b55 	vldr	d7, [pc, #340]	; 800e8b0 <_strtod_l+0xb98>
 800e75c:	4f60      	ldr	r7, [pc, #384]	; (800e8e0 <_strtod_l+0xbc8>)
 800e75e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800e762:	2600      	movs	r6, #0
 800e764:	e7ae      	b.n	800e6c4 <_strtod_l+0x9ac>
 800e766:	4f5f      	ldr	r7, [pc, #380]	; (800e8e4 <_strtod_l+0xbcc>)
 800e768:	2600      	movs	r6, #0
 800e76a:	e7a7      	b.n	800e6bc <_strtod_l+0x9a4>
 800e76c:	4b5d      	ldr	r3, [pc, #372]	; (800e8e4 <_strtod_l+0xbcc>)
 800e76e:	4630      	mov	r0, r6
 800e770:	4639      	mov	r1, r7
 800e772:	2200      	movs	r2, #0
 800e774:	f7f1 ff60 	bl	8000638 <__aeabi_dmul>
 800e778:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e77a:	4606      	mov	r6, r0
 800e77c:	460f      	mov	r7, r1
 800e77e:	2b00      	cmp	r3, #0
 800e780:	d09c      	beq.n	800e6bc <_strtod_l+0x9a4>
 800e782:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800e786:	e79d      	b.n	800e6c4 <_strtod_l+0x9ac>
 800e788:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 800e8b8 <_strtod_l+0xba0>
 800e78c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800e790:	ec57 6b17 	vmov	r6, r7, d7
 800e794:	e796      	b.n	800e6c4 <_strtod_l+0x9ac>
 800e796:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800e79a:	9b04      	ldr	r3, [sp, #16]
 800e79c:	46ca      	mov	sl, r9
 800e79e:	2b00      	cmp	r3, #0
 800e7a0:	d1c2      	bne.n	800e728 <_strtod_l+0xa10>
 800e7a2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800e7a6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e7a8:	0d1b      	lsrs	r3, r3, #20
 800e7aa:	051b      	lsls	r3, r3, #20
 800e7ac:	429a      	cmp	r2, r3
 800e7ae:	d1bb      	bne.n	800e728 <_strtod_l+0xa10>
 800e7b0:	4630      	mov	r0, r6
 800e7b2:	4639      	mov	r1, r7
 800e7b4:	f7f2 faa0 	bl	8000cf8 <__aeabi_d2lz>
 800e7b8:	f7f1 ff10 	bl	80005dc <__aeabi_l2d>
 800e7bc:	4602      	mov	r2, r0
 800e7be:	460b      	mov	r3, r1
 800e7c0:	4630      	mov	r0, r6
 800e7c2:	4639      	mov	r1, r7
 800e7c4:	f7f1 fd80 	bl	80002c8 <__aeabi_dsub>
 800e7c8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e7ca:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e7ce:	ea43 0308 	orr.w	r3, r3, r8
 800e7d2:	4313      	orrs	r3, r2
 800e7d4:	4606      	mov	r6, r0
 800e7d6:	460f      	mov	r7, r1
 800e7d8:	d054      	beq.n	800e884 <_strtod_l+0xb6c>
 800e7da:	a339      	add	r3, pc, #228	; (adr r3, 800e8c0 <_strtod_l+0xba8>)
 800e7dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7e0:	f7f2 f99c 	bl	8000b1c <__aeabi_dcmplt>
 800e7e4:	2800      	cmp	r0, #0
 800e7e6:	f47f ace5 	bne.w	800e1b4 <_strtod_l+0x49c>
 800e7ea:	a337      	add	r3, pc, #220	; (adr r3, 800e8c8 <_strtod_l+0xbb0>)
 800e7ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7f0:	4630      	mov	r0, r6
 800e7f2:	4639      	mov	r1, r7
 800e7f4:	f7f2 f9b0 	bl	8000b58 <__aeabi_dcmpgt>
 800e7f8:	2800      	cmp	r0, #0
 800e7fa:	d095      	beq.n	800e728 <_strtod_l+0xa10>
 800e7fc:	e4da      	b.n	800e1b4 <_strtod_l+0x49c>
 800e7fe:	9b04      	ldr	r3, [sp, #16]
 800e800:	b333      	cbz	r3, 800e850 <_strtod_l+0xb38>
 800e802:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e804:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800e808:	d822      	bhi.n	800e850 <_strtod_l+0xb38>
 800e80a:	a331      	add	r3, pc, #196	; (adr r3, 800e8d0 <_strtod_l+0xbb8>)
 800e80c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e810:	4630      	mov	r0, r6
 800e812:	4639      	mov	r1, r7
 800e814:	f7f2 f98c 	bl	8000b30 <__aeabi_dcmple>
 800e818:	b1a0      	cbz	r0, 800e844 <_strtod_l+0xb2c>
 800e81a:	4639      	mov	r1, r7
 800e81c:	4630      	mov	r0, r6
 800e81e:	f7f2 f9e3 	bl	8000be8 <__aeabi_d2uiz>
 800e822:	2801      	cmp	r0, #1
 800e824:	bf38      	it	cc
 800e826:	2001      	movcc	r0, #1
 800e828:	f7f1 fe8c 	bl	8000544 <__aeabi_ui2d>
 800e82c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e82e:	4606      	mov	r6, r0
 800e830:	460f      	mov	r7, r1
 800e832:	bb23      	cbnz	r3, 800e87e <_strtod_l+0xb66>
 800e834:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e838:	9010      	str	r0, [sp, #64]	; 0x40
 800e83a:	9311      	str	r3, [sp, #68]	; 0x44
 800e83c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800e840:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800e844:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e846:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e848:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800e84c:	1a9b      	subs	r3, r3, r2
 800e84e:	930f      	str	r3, [sp, #60]	; 0x3c
 800e850:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800e854:	eeb0 0a48 	vmov.f32	s0, s16
 800e858:	eef0 0a68 	vmov.f32	s1, s17
 800e85c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800e860:	f7ff f8fc 	bl	800da5c <__ulp>
 800e864:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800e868:	ec53 2b10 	vmov	r2, r3, d0
 800e86c:	f7f1 fee4 	bl	8000638 <__aeabi_dmul>
 800e870:	ec53 2b18 	vmov	r2, r3, d8
 800e874:	f7f1 fd2a 	bl	80002cc <__adddf3>
 800e878:	4680      	mov	r8, r0
 800e87a:	4689      	mov	r9, r1
 800e87c:	e78d      	b.n	800e79a <_strtod_l+0xa82>
 800e87e:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800e882:	e7db      	b.n	800e83c <_strtod_l+0xb24>
 800e884:	a314      	add	r3, pc, #80	; (adr r3, 800e8d8 <_strtod_l+0xbc0>)
 800e886:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e88a:	f7f2 f947 	bl	8000b1c <__aeabi_dcmplt>
 800e88e:	e7b3      	b.n	800e7f8 <_strtod_l+0xae0>
 800e890:	2300      	movs	r3, #0
 800e892:	930a      	str	r3, [sp, #40]	; 0x28
 800e894:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800e896:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e898:	6013      	str	r3, [r2, #0]
 800e89a:	f7ff ba7c 	b.w	800dd96 <_strtod_l+0x7e>
 800e89e:	2a65      	cmp	r2, #101	; 0x65
 800e8a0:	f43f ab75 	beq.w	800df8e <_strtod_l+0x276>
 800e8a4:	2a45      	cmp	r2, #69	; 0x45
 800e8a6:	f43f ab72 	beq.w	800df8e <_strtod_l+0x276>
 800e8aa:	2301      	movs	r3, #1
 800e8ac:	f7ff bbaa 	b.w	800e004 <_strtod_l+0x2ec>
 800e8b0:	00000000 	.word	0x00000000
 800e8b4:	bff00000 	.word	0xbff00000
 800e8b8:	00000000 	.word	0x00000000
 800e8bc:	3ff00000 	.word	0x3ff00000
 800e8c0:	94a03595 	.word	0x94a03595
 800e8c4:	3fdfffff 	.word	0x3fdfffff
 800e8c8:	35afe535 	.word	0x35afe535
 800e8cc:	3fe00000 	.word	0x3fe00000
 800e8d0:	ffc00000 	.word	0xffc00000
 800e8d4:	41dfffff 	.word	0x41dfffff
 800e8d8:	94a03595 	.word	0x94a03595
 800e8dc:	3fcfffff 	.word	0x3fcfffff
 800e8e0:	3ff00000 	.word	0x3ff00000
 800e8e4:	3fe00000 	.word	0x3fe00000
 800e8e8:	7ff00000 	.word	0x7ff00000
 800e8ec:	7fe00000 	.word	0x7fe00000
 800e8f0:	7c9fffff 	.word	0x7c9fffff
 800e8f4:	7fefffff 	.word	0x7fefffff

0800e8f8 <_strtod_r>:
 800e8f8:	4b01      	ldr	r3, [pc, #4]	; (800e900 <_strtod_r+0x8>)
 800e8fa:	f7ff ba0d 	b.w	800dd18 <_strtod_l>
 800e8fe:	bf00      	nop
 800e900:	20000168 	.word	0x20000168

0800e904 <_strtol_l.constprop.0>:
 800e904:	2b01      	cmp	r3, #1
 800e906:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e90a:	d001      	beq.n	800e910 <_strtol_l.constprop.0+0xc>
 800e90c:	2b24      	cmp	r3, #36	; 0x24
 800e90e:	d906      	bls.n	800e91e <_strtol_l.constprop.0+0x1a>
 800e910:	f7fd fe3e 	bl	800c590 <__errno>
 800e914:	2316      	movs	r3, #22
 800e916:	6003      	str	r3, [r0, #0]
 800e918:	2000      	movs	r0, #0
 800e91a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e91e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800ea04 <_strtol_l.constprop.0+0x100>
 800e922:	460d      	mov	r5, r1
 800e924:	462e      	mov	r6, r5
 800e926:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e92a:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800e92e:	f017 0708 	ands.w	r7, r7, #8
 800e932:	d1f7      	bne.n	800e924 <_strtol_l.constprop.0+0x20>
 800e934:	2c2d      	cmp	r4, #45	; 0x2d
 800e936:	d132      	bne.n	800e99e <_strtol_l.constprop.0+0x9a>
 800e938:	782c      	ldrb	r4, [r5, #0]
 800e93a:	2701      	movs	r7, #1
 800e93c:	1cb5      	adds	r5, r6, #2
 800e93e:	2b00      	cmp	r3, #0
 800e940:	d05b      	beq.n	800e9fa <_strtol_l.constprop.0+0xf6>
 800e942:	2b10      	cmp	r3, #16
 800e944:	d109      	bne.n	800e95a <_strtol_l.constprop.0+0x56>
 800e946:	2c30      	cmp	r4, #48	; 0x30
 800e948:	d107      	bne.n	800e95a <_strtol_l.constprop.0+0x56>
 800e94a:	782c      	ldrb	r4, [r5, #0]
 800e94c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800e950:	2c58      	cmp	r4, #88	; 0x58
 800e952:	d14d      	bne.n	800e9f0 <_strtol_l.constprop.0+0xec>
 800e954:	786c      	ldrb	r4, [r5, #1]
 800e956:	2310      	movs	r3, #16
 800e958:	3502      	adds	r5, #2
 800e95a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800e95e:	f108 38ff 	add.w	r8, r8, #4294967295
 800e962:	f04f 0e00 	mov.w	lr, #0
 800e966:	fbb8 f9f3 	udiv	r9, r8, r3
 800e96a:	4676      	mov	r6, lr
 800e96c:	fb03 8a19 	mls	sl, r3, r9, r8
 800e970:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800e974:	f1bc 0f09 	cmp.w	ip, #9
 800e978:	d816      	bhi.n	800e9a8 <_strtol_l.constprop.0+0xa4>
 800e97a:	4664      	mov	r4, ip
 800e97c:	42a3      	cmp	r3, r4
 800e97e:	dd24      	ble.n	800e9ca <_strtol_l.constprop.0+0xc6>
 800e980:	f1be 3fff 	cmp.w	lr, #4294967295
 800e984:	d008      	beq.n	800e998 <_strtol_l.constprop.0+0x94>
 800e986:	45b1      	cmp	r9, r6
 800e988:	d31c      	bcc.n	800e9c4 <_strtol_l.constprop.0+0xc0>
 800e98a:	d101      	bne.n	800e990 <_strtol_l.constprop.0+0x8c>
 800e98c:	45a2      	cmp	sl, r4
 800e98e:	db19      	blt.n	800e9c4 <_strtol_l.constprop.0+0xc0>
 800e990:	fb06 4603 	mla	r6, r6, r3, r4
 800e994:	f04f 0e01 	mov.w	lr, #1
 800e998:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e99c:	e7e8      	b.n	800e970 <_strtol_l.constprop.0+0x6c>
 800e99e:	2c2b      	cmp	r4, #43	; 0x2b
 800e9a0:	bf04      	itt	eq
 800e9a2:	782c      	ldrbeq	r4, [r5, #0]
 800e9a4:	1cb5      	addeq	r5, r6, #2
 800e9a6:	e7ca      	b.n	800e93e <_strtol_l.constprop.0+0x3a>
 800e9a8:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800e9ac:	f1bc 0f19 	cmp.w	ip, #25
 800e9b0:	d801      	bhi.n	800e9b6 <_strtol_l.constprop.0+0xb2>
 800e9b2:	3c37      	subs	r4, #55	; 0x37
 800e9b4:	e7e2      	b.n	800e97c <_strtol_l.constprop.0+0x78>
 800e9b6:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800e9ba:	f1bc 0f19 	cmp.w	ip, #25
 800e9be:	d804      	bhi.n	800e9ca <_strtol_l.constprop.0+0xc6>
 800e9c0:	3c57      	subs	r4, #87	; 0x57
 800e9c2:	e7db      	b.n	800e97c <_strtol_l.constprop.0+0x78>
 800e9c4:	f04f 3eff 	mov.w	lr, #4294967295
 800e9c8:	e7e6      	b.n	800e998 <_strtol_l.constprop.0+0x94>
 800e9ca:	f1be 3fff 	cmp.w	lr, #4294967295
 800e9ce:	d105      	bne.n	800e9dc <_strtol_l.constprop.0+0xd8>
 800e9d0:	2322      	movs	r3, #34	; 0x22
 800e9d2:	6003      	str	r3, [r0, #0]
 800e9d4:	4646      	mov	r6, r8
 800e9d6:	b942      	cbnz	r2, 800e9ea <_strtol_l.constprop.0+0xe6>
 800e9d8:	4630      	mov	r0, r6
 800e9da:	e79e      	b.n	800e91a <_strtol_l.constprop.0+0x16>
 800e9dc:	b107      	cbz	r7, 800e9e0 <_strtol_l.constprop.0+0xdc>
 800e9de:	4276      	negs	r6, r6
 800e9e0:	2a00      	cmp	r2, #0
 800e9e2:	d0f9      	beq.n	800e9d8 <_strtol_l.constprop.0+0xd4>
 800e9e4:	f1be 0f00 	cmp.w	lr, #0
 800e9e8:	d000      	beq.n	800e9ec <_strtol_l.constprop.0+0xe8>
 800e9ea:	1e69      	subs	r1, r5, #1
 800e9ec:	6011      	str	r1, [r2, #0]
 800e9ee:	e7f3      	b.n	800e9d8 <_strtol_l.constprop.0+0xd4>
 800e9f0:	2430      	movs	r4, #48	; 0x30
 800e9f2:	2b00      	cmp	r3, #0
 800e9f4:	d1b1      	bne.n	800e95a <_strtol_l.constprop.0+0x56>
 800e9f6:	2308      	movs	r3, #8
 800e9f8:	e7af      	b.n	800e95a <_strtol_l.constprop.0+0x56>
 800e9fa:	2c30      	cmp	r4, #48	; 0x30
 800e9fc:	d0a5      	beq.n	800e94a <_strtol_l.constprop.0+0x46>
 800e9fe:	230a      	movs	r3, #10
 800ea00:	e7ab      	b.n	800e95a <_strtol_l.constprop.0+0x56>
 800ea02:	bf00      	nop
 800ea04:	0800ff71 	.word	0x0800ff71

0800ea08 <_strtol_r>:
 800ea08:	f7ff bf7c 	b.w	800e904 <_strtol_l.constprop.0>

0800ea0c <__ssputs_r>:
 800ea0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ea10:	688e      	ldr	r6, [r1, #8]
 800ea12:	461f      	mov	r7, r3
 800ea14:	42be      	cmp	r6, r7
 800ea16:	680b      	ldr	r3, [r1, #0]
 800ea18:	4682      	mov	sl, r0
 800ea1a:	460c      	mov	r4, r1
 800ea1c:	4690      	mov	r8, r2
 800ea1e:	d82c      	bhi.n	800ea7a <__ssputs_r+0x6e>
 800ea20:	898a      	ldrh	r2, [r1, #12]
 800ea22:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ea26:	d026      	beq.n	800ea76 <__ssputs_r+0x6a>
 800ea28:	6965      	ldr	r5, [r4, #20]
 800ea2a:	6909      	ldr	r1, [r1, #16]
 800ea2c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ea30:	eba3 0901 	sub.w	r9, r3, r1
 800ea34:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ea38:	1c7b      	adds	r3, r7, #1
 800ea3a:	444b      	add	r3, r9
 800ea3c:	106d      	asrs	r5, r5, #1
 800ea3e:	429d      	cmp	r5, r3
 800ea40:	bf38      	it	cc
 800ea42:	461d      	movcc	r5, r3
 800ea44:	0553      	lsls	r3, r2, #21
 800ea46:	d527      	bpl.n	800ea98 <__ssputs_r+0x8c>
 800ea48:	4629      	mov	r1, r5
 800ea4a:	f7fc fd17 	bl	800b47c <_malloc_r>
 800ea4e:	4606      	mov	r6, r0
 800ea50:	b360      	cbz	r0, 800eaac <__ssputs_r+0xa0>
 800ea52:	6921      	ldr	r1, [r4, #16]
 800ea54:	464a      	mov	r2, r9
 800ea56:	f000 fa0b 	bl	800ee70 <memcpy>
 800ea5a:	89a3      	ldrh	r3, [r4, #12]
 800ea5c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ea60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ea64:	81a3      	strh	r3, [r4, #12]
 800ea66:	6126      	str	r6, [r4, #16]
 800ea68:	6165      	str	r5, [r4, #20]
 800ea6a:	444e      	add	r6, r9
 800ea6c:	eba5 0509 	sub.w	r5, r5, r9
 800ea70:	6026      	str	r6, [r4, #0]
 800ea72:	60a5      	str	r5, [r4, #8]
 800ea74:	463e      	mov	r6, r7
 800ea76:	42be      	cmp	r6, r7
 800ea78:	d900      	bls.n	800ea7c <__ssputs_r+0x70>
 800ea7a:	463e      	mov	r6, r7
 800ea7c:	6820      	ldr	r0, [r4, #0]
 800ea7e:	4632      	mov	r2, r6
 800ea80:	4641      	mov	r1, r8
 800ea82:	f000 f9c9 	bl	800ee18 <memmove>
 800ea86:	68a3      	ldr	r3, [r4, #8]
 800ea88:	1b9b      	subs	r3, r3, r6
 800ea8a:	60a3      	str	r3, [r4, #8]
 800ea8c:	6823      	ldr	r3, [r4, #0]
 800ea8e:	4433      	add	r3, r6
 800ea90:	6023      	str	r3, [r4, #0]
 800ea92:	2000      	movs	r0, #0
 800ea94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ea98:	462a      	mov	r2, r5
 800ea9a:	f000 fd9e 	bl	800f5da <_realloc_r>
 800ea9e:	4606      	mov	r6, r0
 800eaa0:	2800      	cmp	r0, #0
 800eaa2:	d1e0      	bne.n	800ea66 <__ssputs_r+0x5a>
 800eaa4:	6921      	ldr	r1, [r4, #16]
 800eaa6:	4650      	mov	r0, sl
 800eaa8:	f7fe fc20 	bl	800d2ec <_free_r>
 800eaac:	230c      	movs	r3, #12
 800eaae:	f8ca 3000 	str.w	r3, [sl]
 800eab2:	89a3      	ldrh	r3, [r4, #12]
 800eab4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800eab8:	81a3      	strh	r3, [r4, #12]
 800eaba:	f04f 30ff 	mov.w	r0, #4294967295
 800eabe:	e7e9      	b.n	800ea94 <__ssputs_r+0x88>

0800eac0 <_svfiprintf_r>:
 800eac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eac4:	4698      	mov	r8, r3
 800eac6:	898b      	ldrh	r3, [r1, #12]
 800eac8:	061b      	lsls	r3, r3, #24
 800eaca:	b09d      	sub	sp, #116	; 0x74
 800eacc:	4607      	mov	r7, r0
 800eace:	460d      	mov	r5, r1
 800ead0:	4614      	mov	r4, r2
 800ead2:	d50e      	bpl.n	800eaf2 <_svfiprintf_r+0x32>
 800ead4:	690b      	ldr	r3, [r1, #16]
 800ead6:	b963      	cbnz	r3, 800eaf2 <_svfiprintf_r+0x32>
 800ead8:	2140      	movs	r1, #64	; 0x40
 800eada:	f7fc fccf 	bl	800b47c <_malloc_r>
 800eade:	6028      	str	r0, [r5, #0]
 800eae0:	6128      	str	r0, [r5, #16]
 800eae2:	b920      	cbnz	r0, 800eaee <_svfiprintf_r+0x2e>
 800eae4:	230c      	movs	r3, #12
 800eae6:	603b      	str	r3, [r7, #0]
 800eae8:	f04f 30ff 	mov.w	r0, #4294967295
 800eaec:	e0d0      	b.n	800ec90 <_svfiprintf_r+0x1d0>
 800eaee:	2340      	movs	r3, #64	; 0x40
 800eaf0:	616b      	str	r3, [r5, #20]
 800eaf2:	2300      	movs	r3, #0
 800eaf4:	9309      	str	r3, [sp, #36]	; 0x24
 800eaf6:	2320      	movs	r3, #32
 800eaf8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800eafc:	f8cd 800c 	str.w	r8, [sp, #12]
 800eb00:	2330      	movs	r3, #48	; 0x30
 800eb02:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800eca8 <_svfiprintf_r+0x1e8>
 800eb06:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800eb0a:	f04f 0901 	mov.w	r9, #1
 800eb0e:	4623      	mov	r3, r4
 800eb10:	469a      	mov	sl, r3
 800eb12:	f813 2b01 	ldrb.w	r2, [r3], #1
 800eb16:	b10a      	cbz	r2, 800eb1c <_svfiprintf_r+0x5c>
 800eb18:	2a25      	cmp	r2, #37	; 0x25
 800eb1a:	d1f9      	bne.n	800eb10 <_svfiprintf_r+0x50>
 800eb1c:	ebba 0b04 	subs.w	fp, sl, r4
 800eb20:	d00b      	beq.n	800eb3a <_svfiprintf_r+0x7a>
 800eb22:	465b      	mov	r3, fp
 800eb24:	4622      	mov	r2, r4
 800eb26:	4629      	mov	r1, r5
 800eb28:	4638      	mov	r0, r7
 800eb2a:	f7ff ff6f 	bl	800ea0c <__ssputs_r>
 800eb2e:	3001      	adds	r0, #1
 800eb30:	f000 80a9 	beq.w	800ec86 <_svfiprintf_r+0x1c6>
 800eb34:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800eb36:	445a      	add	r2, fp
 800eb38:	9209      	str	r2, [sp, #36]	; 0x24
 800eb3a:	f89a 3000 	ldrb.w	r3, [sl]
 800eb3e:	2b00      	cmp	r3, #0
 800eb40:	f000 80a1 	beq.w	800ec86 <_svfiprintf_r+0x1c6>
 800eb44:	2300      	movs	r3, #0
 800eb46:	f04f 32ff 	mov.w	r2, #4294967295
 800eb4a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800eb4e:	f10a 0a01 	add.w	sl, sl, #1
 800eb52:	9304      	str	r3, [sp, #16]
 800eb54:	9307      	str	r3, [sp, #28]
 800eb56:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800eb5a:	931a      	str	r3, [sp, #104]	; 0x68
 800eb5c:	4654      	mov	r4, sl
 800eb5e:	2205      	movs	r2, #5
 800eb60:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eb64:	4850      	ldr	r0, [pc, #320]	; (800eca8 <_svfiprintf_r+0x1e8>)
 800eb66:	f7f1 fb53 	bl	8000210 <memchr>
 800eb6a:	9a04      	ldr	r2, [sp, #16]
 800eb6c:	b9d8      	cbnz	r0, 800eba6 <_svfiprintf_r+0xe6>
 800eb6e:	06d0      	lsls	r0, r2, #27
 800eb70:	bf44      	itt	mi
 800eb72:	2320      	movmi	r3, #32
 800eb74:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800eb78:	0711      	lsls	r1, r2, #28
 800eb7a:	bf44      	itt	mi
 800eb7c:	232b      	movmi	r3, #43	; 0x2b
 800eb7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800eb82:	f89a 3000 	ldrb.w	r3, [sl]
 800eb86:	2b2a      	cmp	r3, #42	; 0x2a
 800eb88:	d015      	beq.n	800ebb6 <_svfiprintf_r+0xf6>
 800eb8a:	9a07      	ldr	r2, [sp, #28]
 800eb8c:	4654      	mov	r4, sl
 800eb8e:	2000      	movs	r0, #0
 800eb90:	f04f 0c0a 	mov.w	ip, #10
 800eb94:	4621      	mov	r1, r4
 800eb96:	f811 3b01 	ldrb.w	r3, [r1], #1
 800eb9a:	3b30      	subs	r3, #48	; 0x30
 800eb9c:	2b09      	cmp	r3, #9
 800eb9e:	d94d      	bls.n	800ec3c <_svfiprintf_r+0x17c>
 800eba0:	b1b0      	cbz	r0, 800ebd0 <_svfiprintf_r+0x110>
 800eba2:	9207      	str	r2, [sp, #28]
 800eba4:	e014      	b.n	800ebd0 <_svfiprintf_r+0x110>
 800eba6:	eba0 0308 	sub.w	r3, r0, r8
 800ebaa:	fa09 f303 	lsl.w	r3, r9, r3
 800ebae:	4313      	orrs	r3, r2
 800ebb0:	9304      	str	r3, [sp, #16]
 800ebb2:	46a2      	mov	sl, r4
 800ebb4:	e7d2      	b.n	800eb5c <_svfiprintf_r+0x9c>
 800ebb6:	9b03      	ldr	r3, [sp, #12]
 800ebb8:	1d19      	adds	r1, r3, #4
 800ebba:	681b      	ldr	r3, [r3, #0]
 800ebbc:	9103      	str	r1, [sp, #12]
 800ebbe:	2b00      	cmp	r3, #0
 800ebc0:	bfbb      	ittet	lt
 800ebc2:	425b      	neglt	r3, r3
 800ebc4:	f042 0202 	orrlt.w	r2, r2, #2
 800ebc8:	9307      	strge	r3, [sp, #28]
 800ebca:	9307      	strlt	r3, [sp, #28]
 800ebcc:	bfb8      	it	lt
 800ebce:	9204      	strlt	r2, [sp, #16]
 800ebd0:	7823      	ldrb	r3, [r4, #0]
 800ebd2:	2b2e      	cmp	r3, #46	; 0x2e
 800ebd4:	d10c      	bne.n	800ebf0 <_svfiprintf_r+0x130>
 800ebd6:	7863      	ldrb	r3, [r4, #1]
 800ebd8:	2b2a      	cmp	r3, #42	; 0x2a
 800ebda:	d134      	bne.n	800ec46 <_svfiprintf_r+0x186>
 800ebdc:	9b03      	ldr	r3, [sp, #12]
 800ebde:	1d1a      	adds	r2, r3, #4
 800ebe0:	681b      	ldr	r3, [r3, #0]
 800ebe2:	9203      	str	r2, [sp, #12]
 800ebe4:	2b00      	cmp	r3, #0
 800ebe6:	bfb8      	it	lt
 800ebe8:	f04f 33ff 	movlt.w	r3, #4294967295
 800ebec:	3402      	adds	r4, #2
 800ebee:	9305      	str	r3, [sp, #20]
 800ebf0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800ecb8 <_svfiprintf_r+0x1f8>
 800ebf4:	7821      	ldrb	r1, [r4, #0]
 800ebf6:	2203      	movs	r2, #3
 800ebf8:	4650      	mov	r0, sl
 800ebfa:	f7f1 fb09 	bl	8000210 <memchr>
 800ebfe:	b138      	cbz	r0, 800ec10 <_svfiprintf_r+0x150>
 800ec00:	9b04      	ldr	r3, [sp, #16]
 800ec02:	eba0 000a 	sub.w	r0, r0, sl
 800ec06:	2240      	movs	r2, #64	; 0x40
 800ec08:	4082      	lsls	r2, r0
 800ec0a:	4313      	orrs	r3, r2
 800ec0c:	3401      	adds	r4, #1
 800ec0e:	9304      	str	r3, [sp, #16]
 800ec10:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ec14:	4825      	ldr	r0, [pc, #148]	; (800ecac <_svfiprintf_r+0x1ec>)
 800ec16:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ec1a:	2206      	movs	r2, #6
 800ec1c:	f7f1 faf8 	bl	8000210 <memchr>
 800ec20:	2800      	cmp	r0, #0
 800ec22:	d038      	beq.n	800ec96 <_svfiprintf_r+0x1d6>
 800ec24:	4b22      	ldr	r3, [pc, #136]	; (800ecb0 <_svfiprintf_r+0x1f0>)
 800ec26:	bb1b      	cbnz	r3, 800ec70 <_svfiprintf_r+0x1b0>
 800ec28:	9b03      	ldr	r3, [sp, #12]
 800ec2a:	3307      	adds	r3, #7
 800ec2c:	f023 0307 	bic.w	r3, r3, #7
 800ec30:	3308      	adds	r3, #8
 800ec32:	9303      	str	r3, [sp, #12]
 800ec34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ec36:	4433      	add	r3, r6
 800ec38:	9309      	str	r3, [sp, #36]	; 0x24
 800ec3a:	e768      	b.n	800eb0e <_svfiprintf_r+0x4e>
 800ec3c:	fb0c 3202 	mla	r2, ip, r2, r3
 800ec40:	460c      	mov	r4, r1
 800ec42:	2001      	movs	r0, #1
 800ec44:	e7a6      	b.n	800eb94 <_svfiprintf_r+0xd4>
 800ec46:	2300      	movs	r3, #0
 800ec48:	3401      	adds	r4, #1
 800ec4a:	9305      	str	r3, [sp, #20]
 800ec4c:	4619      	mov	r1, r3
 800ec4e:	f04f 0c0a 	mov.w	ip, #10
 800ec52:	4620      	mov	r0, r4
 800ec54:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ec58:	3a30      	subs	r2, #48	; 0x30
 800ec5a:	2a09      	cmp	r2, #9
 800ec5c:	d903      	bls.n	800ec66 <_svfiprintf_r+0x1a6>
 800ec5e:	2b00      	cmp	r3, #0
 800ec60:	d0c6      	beq.n	800ebf0 <_svfiprintf_r+0x130>
 800ec62:	9105      	str	r1, [sp, #20]
 800ec64:	e7c4      	b.n	800ebf0 <_svfiprintf_r+0x130>
 800ec66:	fb0c 2101 	mla	r1, ip, r1, r2
 800ec6a:	4604      	mov	r4, r0
 800ec6c:	2301      	movs	r3, #1
 800ec6e:	e7f0      	b.n	800ec52 <_svfiprintf_r+0x192>
 800ec70:	ab03      	add	r3, sp, #12
 800ec72:	9300      	str	r3, [sp, #0]
 800ec74:	462a      	mov	r2, r5
 800ec76:	4b0f      	ldr	r3, [pc, #60]	; (800ecb4 <_svfiprintf_r+0x1f4>)
 800ec78:	a904      	add	r1, sp, #16
 800ec7a:	4638      	mov	r0, r7
 800ec7c:	f7fc fd2a 	bl	800b6d4 <_printf_float>
 800ec80:	1c42      	adds	r2, r0, #1
 800ec82:	4606      	mov	r6, r0
 800ec84:	d1d6      	bne.n	800ec34 <_svfiprintf_r+0x174>
 800ec86:	89ab      	ldrh	r3, [r5, #12]
 800ec88:	065b      	lsls	r3, r3, #25
 800ec8a:	f53f af2d 	bmi.w	800eae8 <_svfiprintf_r+0x28>
 800ec8e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ec90:	b01d      	add	sp, #116	; 0x74
 800ec92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec96:	ab03      	add	r3, sp, #12
 800ec98:	9300      	str	r3, [sp, #0]
 800ec9a:	462a      	mov	r2, r5
 800ec9c:	4b05      	ldr	r3, [pc, #20]	; (800ecb4 <_svfiprintf_r+0x1f4>)
 800ec9e:	a904      	add	r1, sp, #16
 800eca0:	4638      	mov	r0, r7
 800eca2:	f7fc ffbb 	bl	800bc1c <_printf_i>
 800eca6:	e7eb      	b.n	800ec80 <_svfiprintf_r+0x1c0>
 800eca8:	08010071 	.word	0x08010071
 800ecac:	0801007b 	.word	0x0801007b
 800ecb0:	0800b6d5 	.word	0x0800b6d5
 800ecb4:	0800ea0d 	.word	0x0800ea0d
 800ecb8:	08010077 	.word	0x08010077

0800ecbc <__sflush_r>:
 800ecbc:	898a      	ldrh	r2, [r1, #12]
 800ecbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ecc2:	4605      	mov	r5, r0
 800ecc4:	0710      	lsls	r0, r2, #28
 800ecc6:	460c      	mov	r4, r1
 800ecc8:	d458      	bmi.n	800ed7c <__sflush_r+0xc0>
 800ecca:	684b      	ldr	r3, [r1, #4]
 800eccc:	2b00      	cmp	r3, #0
 800ecce:	dc05      	bgt.n	800ecdc <__sflush_r+0x20>
 800ecd0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ecd2:	2b00      	cmp	r3, #0
 800ecd4:	dc02      	bgt.n	800ecdc <__sflush_r+0x20>
 800ecd6:	2000      	movs	r0, #0
 800ecd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ecdc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ecde:	2e00      	cmp	r6, #0
 800ece0:	d0f9      	beq.n	800ecd6 <__sflush_r+0x1a>
 800ece2:	2300      	movs	r3, #0
 800ece4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ece8:	682f      	ldr	r7, [r5, #0]
 800ecea:	6a21      	ldr	r1, [r4, #32]
 800ecec:	602b      	str	r3, [r5, #0]
 800ecee:	d032      	beq.n	800ed56 <__sflush_r+0x9a>
 800ecf0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ecf2:	89a3      	ldrh	r3, [r4, #12]
 800ecf4:	075a      	lsls	r2, r3, #29
 800ecf6:	d505      	bpl.n	800ed04 <__sflush_r+0x48>
 800ecf8:	6863      	ldr	r3, [r4, #4]
 800ecfa:	1ac0      	subs	r0, r0, r3
 800ecfc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ecfe:	b10b      	cbz	r3, 800ed04 <__sflush_r+0x48>
 800ed00:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ed02:	1ac0      	subs	r0, r0, r3
 800ed04:	2300      	movs	r3, #0
 800ed06:	4602      	mov	r2, r0
 800ed08:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ed0a:	6a21      	ldr	r1, [r4, #32]
 800ed0c:	4628      	mov	r0, r5
 800ed0e:	47b0      	blx	r6
 800ed10:	1c43      	adds	r3, r0, #1
 800ed12:	89a3      	ldrh	r3, [r4, #12]
 800ed14:	d106      	bne.n	800ed24 <__sflush_r+0x68>
 800ed16:	6829      	ldr	r1, [r5, #0]
 800ed18:	291d      	cmp	r1, #29
 800ed1a:	d82b      	bhi.n	800ed74 <__sflush_r+0xb8>
 800ed1c:	4a29      	ldr	r2, [pc, #164]	; (800edc4 <__sflush_r+0x108>)
 800ed1e:	410a      	asrs	r2, r1
 800ed20:	07d6      	lsls	r6, r2, #31
 800ed22:	d427      	bmi.n	800ed74 <__sflush_r+0xb8>
 800ed24:	2200      	movs	r2, #0
 800ed26:	6062      	str	r2, [r4, #4]
 800ed28:	04d9      	lsls	r1, r3, #19
 800ed2a:	6922      	ldr	r2, [r4, #16]
 800ed2c:	6022      	str	r2, [r4, #0]
 800ed2e:	d504      	bpl.n	800ed3a <__sflush_r+0x7e>
 800ed30:	1c42      	adds	r2, r0, #1
 800ed32:	d101      	bne.n	800ed38 <__sflush_r+0x7c>
 800ed34:	682b      	ldr	r3, [r5, #0]
 800ed36:	b903      	cbnz	r3, 800ed3a <__sflush_r+0x7e>
 800ed38:	6560      	str	r0, [r4, #84]	; 0x54
 800ed3a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ed3c:	602f      	str	r7, [r5, #0]
 800ed3e:	2900      	cmp	r1, #0
 800ed40:	d0c9      	beq.n	800ecd6 <__sflush_r+0x1a>
 800ed42:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ed46:	4299      	cmp	r1, r3
 800ed48:	d002      	beq.n	800ed50 <__sflush_r+0x94>
 800ed4a:	4628      	mov	r0, r5
 800ed4c:	f7fe face 	bl	800d2ec <_free_r>
 800ed50:	2000      	movs	r0, #0
 800ed52:	6360      	str	r0, [r4, #52]	; 0x34
 800ed54:	e7c0      	b.n	800ecd8 <__sflush_r+0x1c>
 800ed56:	2301      	movs	r3, #1
 800ed58:	4628      	mov	r0, r5
 800ed5a:	47b0      	blx	r6
 800ed5c:	1c41      	adds	r1, r0, #1
 800ed5e:	d1c8      	bne.n	800ecf2 <__sflush_r+0x36>
 800ed60:	682b      	ldr	r3, [r5, #0]
 800ed62:	2b00      	cmp	r3, #0
 800ed64:	d0c5      	beq.n	800ecf2 <__sflush_r+0x36>
 800ed66:	2b1d      	cmp	r3, #29
 800ed68:	d001      	beq.n	800ed6e <__sflush_r+0xb2>
 800ed6a:	2b16      	cmp	r3, #22
 800ed6c:	d101      	bne.n	800ed72 <__sflush_r+0xb6>
 800ed6e:	602f      	str	r7, [r5, #0]
 800ed70:	e7b1      	b.n	800ecd6 <__sflush_r+0x1a>
 800ed72:	89a3      	ldrh	r3, [r4, #12]
 800ed74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ed78:	81a3      	strh	r3, [r4, #12]
 800ed7a:	e7ad      	b.n	800ecd8 <__sflush_r+0x1c>
 800ed7c:	690f      	ldr	r7, [r1, #16]
 800ed7e:	2f00      	cmp	r7, #0
 800ed80:	d0a9      	beq.n	800ecd6 <__sflush_r+0x1a>
 800ed82:	0793      	lsls	r3, r2, #30
 800ed84:	680e      	ldr	r6, [r1, #0]
 800ed86:	bf08      	it	eq
 800ed88:	694b      	ldreq	r3, [r1, #20]
 800ed8a:	600f      	str	r7, [r1, #0]
 800ed8c:	bf18      	it	ne
 800ed8e:	2300      	movne	r3, #0
 800ed90:	eba6 0807 	sub.w	r8, r6, r7
 800ed94:	608b      	str	r3, [r1, #8]
 800ed96:	f1b8 0f00 	cmp.w	r8, #0
 800ed9a:	dd9c      	ble.n	800ecd6 <__sflush_r+0x1a>
 800ed9c:	6a21      	ldr	r1, [r4, #32]
 800ed9e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800eda0:	4643      	mov	r3, r8
 800eda2:	463a      	mov	r2, r7
 800eda4:	4628      	mov	r0, r5
 800eda6:	47b0      	blx	r6
 800eda8:	2800      	cmp	r0, #0
 800edaa:	dc06      	bgt.n	800edba <__sflush_r+0xfe>
 800edac:	89a3      	ldrh	r3, [r4, #12]
 800edae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800edb2:	81a3      	strh	r3, [r4, #12]
 800edb4:	f04f 30ff 	mov.w	r0, #4294967295
 800edb8:	e78e      	b.n	800ecd8 <__sflush_r+0x1c>
 800edba:	4407      	add	r7, r0
 800edbc:	eba8 0800 	sub.w	r8, r8, r0
 800edc0:	e7e9      	b.n	800ed96 <__sflush_r+0xda>
 800edc2:	bf00      	nop
 800edc4:	dfbffffe 	.word	0xdfbffffe

0800edc8 <_fflush_r>:
 800edc8:	b538      	push	{r3, r4, r5, lr}
 800edca:	690b      	ldr	r3, [r1, #16]
 800edcc:	4605      	mov	r5, r0
 800edce:	460c      	mov	r4, r1
 800edd0:	b913      	cbnz	r3, 800edd8 <_fflush_r+0x10>
 800edd2:	2500      	movs	r5, #0
 800edd4:	4628      	mov	r0, r5
 800edd6:	bd38      	pop	{r3, r4, r5, pc}
 800edd8:	b118      	cbz	r0, 800ede2 <_fflush_r+0x1a>
 800edda:	6a03      	ldr	r3, [r0, #32]
 800eddc:	b90b      	cbnz	r3, 800ede2 <_fflush_r+0x1a>
 800edde:	f7fd fadb 	bl	800c398 <__sinit>
 800ede2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ede6:	2b00      	cmp	r3, #0
 800ede8:	d0f3      	beq.n	800edd2 <_fflush_r+0xa>
 800edea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800edec:	07d0      	lsls	r0, r2, #31
 800edee:	d404      	bmi.n	800edfa <_fflush_r+0x32>
 800edf0:	0599      	lsls	r1, r3, #22
 800edf2:	d402      	bmi.n	800edfa <_fflush_r+0x32>
 800edf4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800edf6:	f7fd fbf6 	bl	800c5e6 <__retarget_lock_acquire_recursive>
 800edfa:	4628      	mov	r0, r5
 800edfc:	4621      	mov	r1, r4
 800edfe:	f7ff ff5d 	bl	800ecbc <__sflush_r>
 800ee02:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ee04:	07da      	lsls	r2, r3, #31
 800ee06:	4605      	mov	r5, r0
 800ee08:	d4e4      	bmi.n	800edd4 <_fflush_r+0xc>
 800ee0a:	89a3      	ldrh	r3, [r4, #12]
 800ee0c:	059b      	lsls	r3, r3, #22
 800ee0e:	d4e1      	bmi.n	800edd4 <_fflush_r+0xc>
 800ee10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ee12:	f7fd fbe9 	bl	800c5e8 <__retarget_lock_release_recursive>
 800ee16:	e7dd      	b.n	800edd4 <_fflush_r+0xc>

0800ee18 <memmove>:
 800ee18:	4288      	cmp	r0, r1
 800ee1a:	b510      	push	{r4, lr}
 800ee1c:	eb01 0402 	add.w	r4, r1, r2
 800ee20:	d902      	bls.n	800ee28 <memmove+0x10>
 800ee22:	4284      	cmp	r4, r0
 800ee24:	4623      	mov	r3, r4
 800ee26:	d807      	bhi.n	800ee38 <memmove+0x20>
 800ee28:	1e43      	subs	r3, r0, #1
 800ee2a:	42a1      	cmp	r1, r4
 800ee2c:	d008      	beq.n	800ee40 <memmove+0x28>
 800ee2e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ee32:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ee36:	e7f8      	b.n	800ee2a <memmove+0x12>
 800ee38:	4402      	add	r2, r0
 800ee3a:	4601      	mov	r1, r0
 800ee3c:	428a      	cmp	r2, r1
 800ee3e:	d100      	bne.n	800ee42 <memmove+0x2a>
 800ee40:	bd10      	pop	{r4, pc}
 800ee42:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ee46:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ee4a:	e7f7      	b.n	800ee3c <memmove+0x24>

0800ee4c <strncmp>:
 800ee4c:	b510      	push	{r4, lr}
 800ee4e:	b16a      	cbz	r2, 800ee6c <strncmp+0x20>
 800ee50:	3901      	subs	r1, #1
 800ee52:	1884      	adds	r4, r0, r2
 800ee54:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ee58:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800ee5c:	429a      	cmp	r2, r3
 800ee5e:	d103      	bne.n	800ee68 <strncmp+0x1c>
 800ee60:	42a0      	cmp	r0, r4
 800ee62:	d001      	beq.n	800ee68 <strncmp+0x1c>
 800ee64:	2a00      	cmp	r2, #0
 800ee66:	d1f5      	bne.n	800ee54 <strncmp+0x8>
 800ee68:	1ad0      	subs	r0, r2, r3
 800ee6a:	bd10      	pop	{r4, pc}
 800ee6c:	4610      	mov	r0, r2
 800ee6e:	e7fc      	b.n	800ee6a <strncmp+0x1e>

0800ee70 <memcpy>:
 800ee70:	440a      	add	r2, r1
 800ee72:	4291      	cmp	r1, r2
 800ee74:	f100 33ff 	add.w	r3, r0, #4294967295
 800ee78:	d100      	bne.n	800ee7c <memcpy+0xc>
 800ee7a:	4770      	bx	lr
 800ee7c:	b510      	push	{r4, lr}
 800ee7e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ee82:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ee86:	4291      	cmp	r1, r2
 800ee88:	d1f9      	bne.n	800ee7e <memcpy+0xe>
 800ee8a:	bd10      	pop	{r4, pc}
 800ee8c:	0000      	movs	r0, r0
	...

0800ee90 <nan>:
 800ee90:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800ee98 <nan+0x8>
 800ee94:	4770      	bx	lr
 800ee96:	bf00      	nop
 800ee98:	00000000 	.word	0x00000000
 800ee9c:	7ff80000 	.word	0x7ff80000

0800eea0 <__assert_func>:
 800eea0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800eea2:	4614      	mov	r4, r2
 800eea4:	461a      	mov	r2, r3
 800eea6:	4b09      	ldr	r3, [pc, #36]	; (800eecc <__assert_func+0x2c>)
 800eea8:	681b      	ldr	r3, [r3, #0]
 800eeaa:	4605      	mov	r5, r0
 800eeac:	68d8      	ldr	r0, [r3, #12]
 800eeae:	b14c      	cbz	r4, 800eec4 <__assert_func+0x24>
 800eeb0:	4b07      	ldr	r3, [pc, #28]	; (800eed0 <__assert_func+0x30>)
 800eeb2:	9100      	str	r1, [sp, #0]
 800eeb4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800eeb8:	4906      	ldr	r1, [pc, #24]	; (800eed4 <__assert_func+0x34>)
 800eeba:	462b      	mov	r3, r5
 800eebc:	f000 fbca 	bl	800f654 <fiprintf>
 800eec0:	f000 fbda 	bl	800f678 <abort>
 800eec4:	4b04      	ldr	r3, [pc, #16]	; (800eed8 <__assert_func+0x38>)
 800eec6:	461c      	mov	r4, r3
 800eec8:	e7f3      	b.n	800eeb2 <__assert_func+0x12>
 800eeca:	bf00      	nop
 800eecc:	20000164 	.word	0x20000164
 800eed0:	0801008a 	.word	0x0801008a
 800eed4:	08010097 	.word	0x08010097
 800eed8:	080100c5 	.word	0x080100c5

0800eedc <_calloc_r>:
 800eedc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800eede:	fba1 2402 	umull	r2, r4, r1, r2
 800eee2:	b94c      	cbnz	r4, 800eef8 <_calloc_r+0x1c>
 800eee4:	4611      	mov	r1, r2
 800eee6:	9201      	str	r2, [sp, #4]
 800eee8:	f7fc fac8 	bl	800b47c <_malloc_r>
 800eeec:	9a01      	ldr	r2, [sp, #4]
 800eeee:	4605      	mov	r5, r0
 800eef0:	b930      	cbnz	r0, 800ef00 <_calloc_r+0x24>
 800eef2:	4628      	mov	r0, r5
 800eef4:	b003      	add	sp, #12
 800eef6:	bd30      	pop	{r4, r5, pc}
 800eef8:	220c      	movs	r2, #12
 800eefa:	6002      	str	r2, [r0, #0]
 800eefc:	2500      	movs	r5, #0
 800eefe:	e7f8      	b.n	800eef2 <_calloc_r+0x16>
 800ef00:	4621      	mov	r1, r4
 800ef02:	f7fd fae2 	bl	800c4ca <memset>
 800ef06:	e7f4      	b.n	800eef2 <_calloc_r+0x16>

0800ef08 <rshift>:
 800ef08:	6903      	ldr	r3, [r0, #16]
 800ef0a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800ef0e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ef12:	ea4f 1261 	mov.w	r2, r1, asr #5
 800ef16:	f100 0414 	add.w	r4, r0, #20
 800ef1a:	dd45      	ble.n	800efa8 <rshift+0xa0>
 800ef1c:	f011 011f 	ands.w	r1, r1, #31
 800ef20:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800ef24:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800ef28:	d10c      	bne.n	800ef44 <rshift+0x3c>
 800ef2a:	f100 0710 	add.w	r7, r0, #16
 800ef2e:	4629      	mov	r1, r5
 800ef30:	42b1      	cmp	r1, r6
 800ef32:	d334      	bcc.n	800ef9e <rshift+0x96>
 800ef34:	1a9b      	subs	r3, r3, r2
 800ef36:	009b      	lsls	r3, r3, #2
 800ef38:	1eea      	subs	r2, r5, #3
 800ef3a:	4296      	cmp	r6, r2
 800ef3c:	bf38      	it	cc
 800ef3e:	2300      	movcc	r3, #0
 800ef40:	4423      	add	r3, r4
 800ef42:	e015      	b.n	800ef70 <rshift+0x68>
 800ef44:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800ef48:	f1c1 0820 	rsb	r8, r1, #32
 800ef4c:	40cf      	lsrs	r7, r1
 800ef4e:	f105 0e04 	add.w	lr, r5, #4
 800ef52:	46a1      	mov	r9, r4
 800ef54:	4576      	cmp	r6, lr
 800ef56:	46f4      	mov	ip, lr
 800ef58:	d815      	bhi.n	800ef86 <rshift+0x7e>
 800ef5a:	1a9a      	subs	r2, r3, r2
 800ef5c:	0092      	lsls	r2, r2, #2
 800ef5e:	3a04      	subs	r2, #4
 800ef60:	3501      	adds	r5, #1
 800ef62:	42ae      	cmp	r6, r5
 800ef64:	bf38      	it	cc
 800ef66:	2200      	movcc	r2, #0
 800ef68:	18a3      	adds	r3, r4, r2
 800ef6a:	50a7      	str	r7, [r4, r2]
 800ef6c:	b107      	cbz	r7, 800ef70 <rshift+0x68>
 800ef6e:	3304      	adds	r3, #4
 800ef70:	1b1a      	subs	r2, r3, r4
 800ef72:	42a3      	cmp	r3, r4
 800ef74:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800ef78:	bf08      	it	eq
 800ef7a:	2300      	moveq	r3, #0
 800ef7c:	6102      	str	r2, [r0, #16]
 800ef7e:	bf08      	it	eq
 800ef80:	6143      	streq	r3, [r0, #20]
 800ef82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ef86:	f8dc c000 	ldr.w	ip, [ip]
 800ef8a:	fa0c fc08 	lsl.w	ip, ip, r8
 800ef8e:	ea4c 0707 	orr.w	r7, ip, r7
 800ef92:	f849 7b04 	str.w	r7, [r9], #4
 800ef96:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ef9a:	40cf      	lsrs	r7, r1
 800ef9c:	e7da      	b.n	800ef54 <rshift+0x4c>
 800ef9e:	f851 cb04 	ldr.w	ip, [r1], #4
 800efa2:	f847 cf04 	str.w	ip, [r7, #4]!
 800efa6:	e7c3      	b.n	800ef30 <rshift+0x28>
 800efa8:	4623      	mov	r3, r4
 800efaa:	e7e1      	b.n	800ef70 <rshift+0x68>

0800efac <__hexdig_fun>:
 800efac:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800efb0:	2b09      	cmp	r3, #9
 800efb2:	d802      	bhi.n	800efba <__hexdig_fun+0xe>
 800efb4:	3820      	subs	r0, #32
 800efb6:	b2c0      	uxtb	r0, r0
 800efb8:	4770      	bx	lr
 800efba:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800efbe:	2b05      	cmp	r3, #5
 800efc0:	d801      	bhi.n	800efc6 <__hexdig_fun+0x1a>
 800efc2:	3847      	subs	r0, #71	; 0x47
 800efc4:	e7f7      	b.n	800efb6 <__hexdig_fun+0xa>
 800efc6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800efca:	2b05      	cmp	r3, #5
 800efcc:	d801      	bhi.n	800efd2 <__hexdig_fun+0x26>
 800efce:	3827      	subs	r0, #39	; 0x27
 800efd0:	e7f1      	b.n	800efb6 <__hexdig_fun+0xa>
 800efd2:	2000      	movs	r0, #0
 800efd4:	4770      	bx	lr
	...

0800efd8 <__gethex>:
 800efd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800efdc:	4617      	mov	r7, r2
 800efde:	680a      	ldr	r2, [r1, #0]
 800efe0:	b085      	sub	sp, #20
 800efe2:	f102 0b02 	add.w	fp, r2, #2
 800efe6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800efea:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800efee:	4681      	mov	r9, r0
 800eff0:	468a      	mov	sl, r1
 800eff2:	9302      	str	r3, [sp, #8]
 800eff4:	32fe      	adds	r2, #254	; 0xfe
 800eff6:	eb02 030b 	add.w	r3, r2, fp
 800effa:	46d8      	mov	r8, fp
 800effc:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800f000:	9301      	str	r3, [sp, #4]
 800f002:	2830      	cmp	r0, #48	; 0x30
 800f004:	d0f7      	beq.n	800eff6 <__gethex+0x1e>
 800f006:	f7ff ffd1 	bl	800efac <__hexdig_fun>
 800f00a:	4604      	mov	r4, r0
 800f00c:	2800      	cmp	r0, #0
 800f00e:	d138      	bne.n	800f082 <__gethex+0xaa>
 800f010:	49a7      	ldr	r1, [pc, #668]	; (800f2b0 <__gethex+0x2d8>)
 800f012:	2201      	movs	r2, #1
 800f014:	4640      	mov	r0, r8
 800f016:	f7ff ff19 	bl	800ee4c <strncmp>
 800f01a:	4606      	mov	r6, r0
 800f01c:	2800      	cmp	r0, #0
 800f01e:	d169      	bne.n	800f0f4 <__gethex+0x11c>
 800f020:	f898 0001 	ldrb.w	r0, [r8, #1]
 800f024:	465d      	mov	r5, fp
 800f026:	f7ff ffc1 	bl	800efac <__hexdig_fun>
 800f02a:	2800      	cmp	r0, #0
 800f02c:	d064      	beq.n	800f0f8 <__gethex+0x120>
 800f02e:	465a      	mov	r2, fp
 800f030:	7810      	ldrb	r0, [r2, #0]
 800f032:	2830      	cmp	r0, #48	; 0x30
 800f034:	4690      	mov	r8, r2
 800f036:	f102 0201 	add.w	r2, r2, #1
 800f03a:	d0f9      	beq.n	800f030 <__gethex+0x58>
 800f03c:	f7ff ffb6 	bl	800efac <__hexdig_fun>
 800f040:	2301      	movs	r3, #1
 800f042:	fab0 f480 	clz	r4, r0
 800f046:	0964      	lsrs	r4, r4, #5
 800f048:	465e      	mov	r6, fp
 800f04a:	9301      	str	r3, [sp, #4]
 800f04c:	4642      	mov	r2, r8
 800f04e:	4615      	mov	r5, r2
 800f050:	3201      	adds	r2, #1
 800f052:	7828      	ldrb	r0, [r5, #0]
 800f054:	f7ff ffaa 	bl	800efac <__hexdig_fun>
 800f058:	2800      	cmp	r0, #0
 800f05a:	d1f8      	bne.n	800f04e <__gethex+0x76>
 800f05c:	4994      	ldr	r1, [pc, #592]	; (800f2b0 <__gethex+0x2d8>)
 800f05e:	2201      	movs	r2, #1
 800f060:	4628      	mov	r0, r5
 800f062:	f7ff fef3 	bl	800ee4c <strncmp>
 800f066:	b978      	cbnz	r0, 800f088 <__gethex+0xb0>
 800f068:	b946      	cbnz	r6, 800f07c <__gethex+0xa4>
 800f06a:	1c6e      	adds	r6, r5, #1
 800f06c:	4632      	mov	r2, r6
 800f06e:	4615      	mov	r5, r2
 800f070:	3201      	adds	r2, #1
 800f072:	7828      	ldrb	r0, [r5, #0]
 800f074:	f7ff ff9a 	bl	800efac <__hexdig_fun>
 800f078:	2800      	cmp	r0, #0
 800f07a:	d1f8      	bne.n	800f06e <__gethex+0x96>
 800f07c:	1b73      	subs	r3, r6, r5
 800f07e:	009e      	lsls	r6, r3, #2
 800f080:	e004      	b.n	800f08c <__gethex+0xb4>
 800f082:	2400      	movs	r4, #0
 800f084:	4626      	mov	r6, r4
 800f086:	e7e1      	b.n	800f04c <__gethex+0x74>
 800f088:	2e00      	cmp	r6, #0
 800f08a:	d1f7      	bne.n	800f07c <__gethex+0xa4>
 800f08c:	782b      	ldrb	r3, [r5, #0]
 800f08e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800f092:	2b50      	cmp	r3, #80	; 0x50
 800f094:	d13d      	bne.n	800f112 <__gethex+0x13a>
 800f096:	786b      	ldrb	r3, [r5, #1]
 800f098:	2b2b      	cmp	r3, #43	; 0x2b
 800f09a:	d02f      	beq.n	800f0fc <__gethex+0x124>
 800f09c:	2b2d      	cmp	r3, #45	; 0x2d
 800f09e:	d031      	beq.n	800f104 <__gethex+0x12c>
 800f0a0:	1c69      	adds	r1, r5, #1
 800f0a2:	f04f 0b00 	mov.w	fp, #0
 800f0a6:	7808      	ldrb	r0, [r1, #0]
 800f0a8:	f7ff ff80 	bl	800efac <__hexdig_fun>
 800f0ac:	1e42      	subs	r2, r0, #1
 800f0ae:	b2d2      	uxtb	r2, r2
 800f0b0:	2a18      	cmp	r2, #24
 800f0b2:	d82e      	bhi.n	800f112 <__gethex+0x13a>
 800f0b4:	f1a0 0210 	sub.w	r2, r0, #16
 800f0b8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800f0bc:	f7ff ff76 	bl	800efac <__hexdig_fun>
 800f0c0:	f100 3cff 	add.w	ip, r0, #4294967295
 800f0c4:	fa5f fc8c 	uxtb.w	ip, ip
 800f0c8:	f1bc 0f18 	cmp.w	ip, #24
 800f0cc:	d91d      	bls.n	800f10a <__gethex+0x132>
 800f0ce:	f1bb 0f00 	cmp.w	fp, #0
 800f0d2:	d000      	beq.n	800f0d6 <__gethex+0xfe>
 800f0d4:	4252      	negs	r2, r2
 800f0d6:	4416      	add	r6, r2
 800f0d8:	f8ca 1000 	str.w	r1, [sl]
 800f0dc:	b1dc      	cbz	r4, 800f116 <__gethex+0x13e>
 800f0de:	9b01      	ldr	r3, [sp, #4]
 800f0e0:	2b00      	cmp	r3, #0
 800f0e2:	bf14      	ite	ne
 800f0e4:	f04f 0800 	movne.w	r8, #0
 800f0e8:	f04f 0806 	moveq.w	r8, #6
 800f0ec:	4640      	mov	r0, r8
 800f0ee:	b005      	add	sp, #20
 800f0f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f0f4:	4645      	mov	r5, r8
 800f0f6:	4626      	mov	r6, r4
 800f0f8:	2401      	movs	r4, #1
 800f0fa:	e7c7      	b.n	800f08c <__gethex+0xb4>
 800f0fc:	f04f 0b00 	mov.w	fp, #0
 800f100:	1ca9      	adds	r1, r5, #2
 800f102:	e7d0      	b.n	800f0a6 <__gethex+0xce>
 800f104:	f04f 0b01 	mov.w	fp, #1
 800f108:	e7fa      	b.n	800f100 <__gethex+0x128>
 800f10a:	230a      	movs	r3, #10
 800f10c:	fb03 0002 	mla	r0, r3, r2, r0
 800f110:	e7d0      	b.n	800f0b4 <__gethex+0xdc>
 800f112:	4629      	mov	r1, r5
 800f114:	e7e0      	b.n	800f0d8 <__gethex+0x100>
 800f116:	eba5 0308 	sub.w	r3, r5, r8
 800f11a:	3b01      	subs	r3, #1
 800f11c:	4621      	mov	r1, r4
 800f11e:	2b07      	cmp	r3, #7
 800f120:	dc0a      	bgt.n	800f138 <__gethex+0x160>
 800f122:	4648      	mov	r0, r9
 800f124:	f7fe f92e 	bl	800d384 <_Balloc>
 800f128:	4604      	mov	r4, r0
 800f12a:	b940      	cbnz	r0, 800f13e <__gethex+0x166>
 800f12c:	4b61      	ldr	r3, [pc, #388]	; (800f2b4 <__gethex+0x2dc>)
 800f12e:	4602      	mov	r2, r0
 800f130:	21e4      	movs	r1, #228	; 0xe4
 800f132:	4861      	ldr	r0, [pc, #388]	; (800f2b8 <__gethex+0x2e0>)
 800f134:	f7ff feb4 	bl	800eea0 <__assert_func>
 800f138:	3101      	adds	r1, #1
 800f13a:	105b      	asrs	r3, r3, #1
 800f13c:	e7ef      	b.n	800f11e <__gethex+0x146>
 800f13e:	f100 0a14 	add.w	sl, r0, #20
 800f142:	2300      	movs	r3, #0
 800f144:	495a      	ldr	r1, [pc, #360]	; (800f2b0 <__gethex+0x2d8>)
 800f146:	f8cd a004 	str.w	sl, [sp, #4]
 800f14a:	469b      	mov	fp, r3
 800f14c:	45a8      	cmp	r8, r5
 800f14e:	d342      	bcc.n	800f1d6 <__gethex+0x1fe>
 800f150:	9801      	ldr	r0, [sp, #4]
 800f152:	f840 bb04 	str.w	fp, [r0], #4
 800f156:	eba0 000a 	sub.w	r0, r0, sl
 800f15a:	1080      	asrs	r0, r0, #2
 800f15c:	6120      	str	r0, [r4, #16]
 800f15e:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800f162:	4658      	mov	r0, fp
 800f164:	f7fe fa00 	bl	800d568 <__hi0bits>
 800f168:	683d      	ldr	r5, [r7, #0]
 800f16a:	eba8 0000 	sub.w	r0, r8, r0
 800f16e:	42a8      	cmp	r0, r5
 800f170:	dd59      	ble.n	800f226 <__gethex+0x24e>
 800f172:	eba0 0805 	sub.w	r8, r0, r5
 800f176:	4641      	mov	r1, r8
 800f178:	4620      	mov	r0, r4
 800f17a:	f7fe fd8f 	bl	800dc9c <__any_on>
 800f17e:	4683      	mov	fp, r0
 800f180:	b1b8      	cbz	r0, 800f1b2 <__gethex+0x1da>
 800f182:	f108 33ff 	add.w	r3, r8, #4294967295
 800f186:	1159      	asrs	r1, r3, #5
 800f188:	f003 021f 	and.w	r2, r3, #31
 800f18c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800f190:	f04f 0b01 	mov.w	fp, #1
 800f194:	fa0b f202 	lsl.w	r2, fp, r2
 800f198:	420a      	tst	r2, r1
 800f19a:	d00a      	beq.n	800f1b2 <__gethex+0x1da>
 800f19c:	455b      	cmp	r3, fp
 800f19e:	dd06      	ble.n	800f1ae <__gethex+0x1d6>
 800f1a0:	f1a8 0102 	sub.w	r1, r8, #2
 800f1a4:	4620      	mov	r0, r4
 800f1a6:	f7fe fd79 	bl	800dc9c <__any_on>
 800f1aa:	2800      	cmp	r0, #0
 800f1ac:	d138      	bne.n	800f220 <__gethex+0x248>
 800f1ae:	f04f 0b02 	mov.w	fp, #2
 800f1b2:	4641      	mov	r1, r8
 800f1b4:	4620      	mov	r0, r4
 800f1b6:	f7ff fea7 	bl	800ef08 <rshift>
 800f1ba:	4446      	add	r6, r8
 800f1bc:	68bb      	ldr	r3, [r7, #8]
 800f1be:	42b3      	cmp	r3, r6
 800f1c0:	da41      	bge.n	800f246 <__gethex+0x26e>
 800f1c2:	4621      	mov	r1, r4
 800f1c4:	4648      	mov	r0, r9
 800f1c6:	f7fe f91d 	bl	800d404 <_Bfree>
 800f1ca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f1cc:	2300      	movs	r3, #0
 800f1ce:	6013      	str	r3, [r2, #0]
 800f1d0:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800f1d4:	e78a      	b.n	800f0ec <__gethex+0x114>
 800f1d6:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800f1da:	2a2e      	cmp	r2, #46	; 0x2e
 800f1dc:	d014      	beq.n	800f208 <__gethex+0x230>
 800f1de:	2b20      	cmp	r3, #32
 800f1e0:	d106      	bne.n	800f1f0 <__gethex+0x218>
 800f1e2:	9b01      	ldr	r3, [sp, #4]
 800f1e4:	f843 bb04 	str.w	fp, [r3], #4
 800f1e8:	f04f 0b00 	mov.w	fp, #0
 800f1ec:	9301      	str	r3, [sp, #4]
 800f1ee:	465b      	mov	r3, fp
 800f1f0:	7828      	ldrb	r0, [r5, #0]
 800f1f2:	9303      	str	r3, [sp, #12]
 800f1f4:	f7ff feda 	bl	800efac <__hexdig_fun>
 800f1f8:	9b03      	ldr	r3, [sp, #12]
 800f1fa:	f000 000f 	and.w	r0, r0, #15
 800f1fe:	4098      	lsls	r0, r3
 800f200:	ea4b 0b00 	orr.w	fp, fp, r0
 800f204:	3304      	adds	r3, #4
 800f206:	e7a1      	b.n	800f14c <__gethex+0x174>
 800f208:	45a8      	cmp	r8, r5
 800f20a:	d8e8      	bhi.n	800f1de <__gethex+0x206>
 800f20c:	2201      	movs	r2, #1
 800f20e:	4628      	mov	r0, r5
 800f210:	9303      	str	r3, [sp, #12]
 800f212:	f7ff fe1b 	bl	800ee4c <strncmp>
 800f216:	4926      	ldr	r1, [pc, #152]	; (800f2b0 <__gethex+0x2d8>)
 800f218:	9b03      	ldr	r3, [sp, #12]
 800f21a:	2800      	cmp	r0, #0
 800f21c:	d1df      	bne.n	800f1de <__gethex+0x206>
 800f21e:	e795      	b.n	800f14c <__gethex+0x174>
 800f220:	f04f 0b03 	mov.w	fp, #3
 800f224:	e7c5      	b.n	800f1b2 <__gethex+0x1da>
 800f226:	da0b      	bge.n	800f240 <__gethex+0x268>
 800f228:	eba5 0800 	sub.w	r8, r5, r0
 800f22c:	4621      	mov	r1, r4
 800f22e:	4642      	mov	r2, r8
 800f230:	4648      	mov	r0, r9
 800f232:	f7fe fb01 	bl	800d838 <__lshift>
 800f236:	eba6 0608 	sub.w	r6, r6, r8
 800f23a:	4604      	mov	r4, r0
 800f23c:	f100 0a14 	add.w	sl, r0, #20
 800f240:	f04f 0b00 	mov.w	fp, #0
 800f244:	e7ba      	b.n	800f1bc <__gethex+0x1e4>
 800f246:	687b      	ldr	r3, [r7, #4]
 800f248:	42b3      	cmp	r3, r6
 800f24a:	dd73      	ble.n	800f334 <__gethex+0x35c>
 800f24c:	1b9e      	subs	r6, r3, r6
 800f24e:	42b5      	cmp	r5, r6
 800f250:	dc34      	bgt.n	800f2bc <__gethex+0x2e4>
 800f252:	68fb      	ldr	r3, [r7, #12]
 800f254:	2b02      	cmp	r3, #2
 800f256:	d023      	beq.n	800f2a0 <__gethex+0x2c8>
 800f258:	2b03      	cmp	r3, #3
 800f25a:	d025      	beq.n	800f2a8 <__gethex+0x2d0>
 800f25c:	2b01      	cmp	r3, #1
 800f25e:	d115      	bne.n	800f28c <__gethex+0x2b4>
 800f260:	42b5      	cmp	r5, r6
 800f262:	d113      	bne.n	800f28c <__gethex+0x2b4>
 800f264:	2d01      	cmp	r5, #1
 800f266:	d10b      	bne.n	800f280 <__gethex+0x2a8>
 800f268:	9a02      	ldr	r2, [sp, #8]
 800f26a:	687b      	ldr	r3, [r7, #4]
 800f26c:	6013      	str	r3, [r2, #0]
 800f26e:	2301      	movs	r3, #1
 800f270:	6123      	str	r3, [r4, #16]
 800f272:	f8ca 3000 	str.w	r3, [sl]
 800f276:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f278:	f04f 0862 	mov.w	r8, #98	; 0x62
 800f27c:	601c      	str	r4, [r3, #0]
 800f27e:	e735      	b.n	800f0ec <__gethex+0x114>
 800f280:	1e69      	subs	r1, r5, #1
 800f282:	4620      	mov	r0, r4
 800f284:	f7fe fd0a 	bl	800dc9c <__any_on>
 800f288:	2800      	cmp	r0, #0
 800f28a:	d1ed      	bne.n	800f268 <__gethex+0x290>
 800f28c:	4621      	mov	r1, r4
 800f28e:	4648      	mov	r0, r9
 800f290:	f7fe f8b8 	bl	800d404 <_Bfree>
 800f294:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f296:	2300      	movs	r3, #0
 800f298:	6013      	str	r3, [r2, #0]
 800f29a:	f04f 0850 	mov.w	r8, #80	; 0x50
 800f29e:	e725      	b.n	800f0ec <__gethex+0x114>
 800f2a0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f2a2:	2b00      	cmp	r3, #0
 800f2a4:	d1f2      	bne.n	800f28c <__gethex+0x2b4>
 800f2a6:	e7df      	b.n	800f268 <__gethex+0x290>
 800f2a8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f2aa:	2b00      	cmp	r3, #0
 800f2ac:	d1dc      	bne.n	800f268 <__gethex+0x290>
 800f2ae:	e7ed      	b.n	800f28c <__gethex+0x2b4>
 800f2b0:	0800ff1c 	.word	0x0800ff1c
 800f2b4:	0800fdb1 	.word	0x0800fdb1
 800f2b8:	080100c6 	.word	0x080100c6
 800f2bc:	f106 38ff 	add.w	r8, r6, #4294967295
 800f2c0:	f1bb 0f00 	cmp.w	fp, #0
 800f2c4:	d133      	bne.n	800f32e <__gethex+0x356>
 800f2c6:	f1b8 0f00 	cmp.w	r8, #0
 800f2ca:	d004      	beq.n	800f2d6 <__gethex+0x2fe>
 800f2cc:	4641      	mov	r1, r8
 800f2ce:	4620      	mov	r0, r4
 800f2d0:	f7fe fce4 	bl	800dc9c <__any_on>
 800f2d4:	4683      	mov	fp, r0
 800f2d6:	ea4f 1268 	mov.w	r2, r8, asr #5
 800f2da:	2301      	movs	r3, #1
 800f2dc:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800f2e0:	f008 081f 	and.w	r8, r8, #31
 800f2e4:	fa03 f308 	lsl.w	r3, r3, r8
 800f2e8:	4213      	tst	r3, r2
 800f2ea:	4631      	mov	r1, r6
 800f2ec:	4620      	mov	r0, r4
 800f2ee:	bf18      	it	ne
 800f2f0:	f04b 0b02 	orrne.w	fp, fp, #2
 800f2f4:	1bad      	subs	r5, r5, r6
 800f2f6:	f7ff fe07 	bl	800ef08 <rshift>
 800f2fa:	687e      	ldr	r6, [r7, #4]
 800f2fc:	f04f 0802 	mov.w	r8, #2
 800f300:	f1bb 0f00 	cmp.w	fp, #0
 800f304:	d04a      	beq.n	800f39c <__gethex+0x3c4>
 800f306:	68fb      	ldr	r3, [r7, #12]
 800f308:	2b02      	cmp	r3, #2
 800f30a:	d016      	beq.n	800f33a <__gethex+0x362>
 800f30c:	2b03      	cmp	r3, #3
 800f30e:	d018      	beq.n	800f342 <__gethex+0x36a>
 800f310:	2b01      	cmp	r3, #1
 800f312:	d109      	bne.n	800f328 <__gethex+0x350>
 800f314:	f01b 0f02 	tst.w	fp, #2
 800f318:	d006      	beq.n	800f328 <__gethex+0x350>
 800f31a:	f8da 3000 	ldr.w	r3, [sl]
 800f31e:	ea4b 0b03 	orr.w	fp, fp, r3
 800f322:	f01b 0f01 	tst.w	fp, #1
 800f326:	d10f      	bne.n	800f348 <__gethex+0x370>
 800f328:	f048 0810 	orr.w	r8, r8, #16
 800f32c:	e036      	b.n	800f39c <__gethex+0x3c4>
 800f32e:	f04f 0b01 	mov.w	fp, #1
 800f332:	e7d0      	b.n	800f2d6 <__gethex+0x2fe>
 800f334:	f04f 0801 	mov.w	r8, #1
 800f338:	e7e2      	b.n	800f300 <__gethex+0x328>
 800f33a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f33c:	f1c3 0301 	rsb	r3, r3, #1
 800f340:	930f      	str	r3, [sp, #60]	; 0x3c
 800f342:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f344:	2b00      	cmp	r3, #0
 800f346:	d0ef      	beq.n	800f328 <__gethex+0x350>
 800f348:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800f34c:	f104 0214 	add.w	r2, r4, #20
 800f350:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800f354:	9301      	str	r3, [sp, #4]
 800f356:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800f35a:	2300      	movs	r3, #0
 800f35c:	4694      	mov	ip, r2
 800f35e:	f852 1b04 	ldr.w	r1, [r2], #4
 800f362:	f1b1 3fff 	cmp.w	r1, #4294967295
 800f366:	d01e      	beq.n	800f3a6 <__gethex+0x3ce>
 800f368:	3101      	adds	r1, #1
 800f36a:	f8cc 1000 	str.w	r1, [ip]
 800f36e:	f1b8 0f02 	cmp.w	r8, #2
 800f372:	f104 0214 	add.w	r2, r4, #20
 800f376:	d13d      	bne.n	800f3f4 <__gethex+0x41c>
 800f378:	683b      	ldr	r3, [r7, #0]
 800f37a:	3b01      	subs	r3, #1
 800f37c:	42ab      	cmp	r3, r5
 800f37e:	d10b      	bne.n	800f398 <__gethex+0x3c0>
 800f380:	1169      	asrs	r1, r5, #5
 800f382:	2301      	movs	r3, #1
 800f384:	f005 051f 	and.w	r5, r5, #31
 800f388:	fa03 f505 	lsl.w	r5, r3, r5
 800f38c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f390:	421d      	tst	r5, r3
 800f392:	bf18      	it	ne
 800f394:	f04f 0801 	movne.w	r8, #1
 800f398:	f048 0820 	orr.w	r8, r8, #32
 800f39c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f39e:	601c      	str	r4, [r3, #0]
 800f3a0:	9b02      	ldr	r3, [sp, #8]
 800f3a2:	601e      	str	r6, [r3, #0]
 800f3a4:	e6a2      	b.n	800f0ec <__gethex+0x114>
 800f3a6:	4290      	cmp	r0, r2
 800f3a8:	f842 3c04 	str.w	r3, [r2, #-4]
 800f3ac:	d8d6      	bhi.n	800f35c <__gethex+0x384>
 800f3ae:	68a2      	ldr	r2, [r4, #8]
 800f3b0:	4593      	cmp	fp, r2
 800f3b2:	db17      	blt.n	800f3e4 <__gethex+0x40c>
 800f3b4:	6861      	ldr	r1, [r4, #4]
 800f3b6:	4648      	mov	r0, r9
 800f3b8:	3101      	adds	r1, #1
 800f3ba:	f7fd ffe3 	bl	800d384 <_Balloc>
 800f3be:	4682      	mov	sl, r0
 800f3c0:	b918      	cbnz	r0, 800f3ca <__gethex+0x3f2>
 800f3c2:	4b1b      	ldr	r3, [pc, #108]	; (800f430 <__gethex+0x458>)
 800f3c4:	4602      	mov	r2, r0
 800f3c6:	2184      	movs	r1, #132	; 0x84
 800f3c8:	e6b3      	b.n	800f132 <__gethex+0x15a>
 800f3ca:	6922      	ldr	r2, [r4, #16]
 800f3cc:	3202      	adds	r2, #2
 800f3ce:	f104 010c 	add.w	r1, r4, #12
 800f3d2:	0092      	lsls	r2, r2, #2
 800f3d4:	300c      	adds	r0, #12
 800f3d6:	f7ff fd4b 	bl	800ee70 <memcpy>
 800f3da:	4621      	mov	r1, r4
 800f3dc:	4648      	mov	r0, r9
 800f3de:	f7fe f811 	bl	800d404 <_Bfree>
 800f3e2:	4654      	mov	r4, sl
 800f3e4:	6922      	ldr	r2, [r4, #16]
 800f3e6:	1c51      	adds	r1, r2, #1
 800f3e8:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800f3ec:	6121      	str	r1, [r4, #16]
 800f3ee:	2101      	movs	r1, #1
 800f3f0:	6151      	str	r1, [r2, #20]
 800f3f2:	e7bc      	b.n	800f36e <__gethex+0x396>
 800f3f4:	6921      	ldr	r1, [r4, #16]
 800f3f6:	4559      	cmp	r1, fp
 800f3f8:	dd0b      	ble.n	800f412 <__gethex+0x43a>
 800f3fa:	2101      	movs	r1, #1
 800f3fc:	4620      	mov	r0, r4
 800f3fe:	f7ff fd83 	bl	800ef08 <rshift>
 800f402:	68bb      	ldr	r3, [r7, #8]
 800f404:	3601      	adds	r6, #1
 800f406:	42b3      	cmp	r3, r6
 800f408:	f6ff aedb 	blt.w	800f1c2 <__gethex+0x1ea>
 800f40c:	f04f 0801 	mov.w	r8, #1
 800f410:	e7c2      	b.n	800f398 <__gethex+0x3c0>
 800f412:	f015 051f 	ands.w	r5, r5, #31
 800f416:	d0f9      	beq.n	800f40c <__gethex+0x434>
 800f418:	9b01      	ldr	r3, [sp, #4]
 800f41a:	441a      	add	r2, r3
 800f41c:	f1c5 0520 	rsb	r5, r5, #32
 800f420:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800f424:	f7fe f8a0 	bl	800d568 <__hi0bits>
 800f428:	42a8      	cmp	r0, r5
 800f42a:	dbe6      	blt.n	800f3fa <__gethex+0x422>
 800f42c:	e7ee      	b.n	800f40c <__gethex+0x434>
 800f42e:	bf00      	nop
 800f430:	0800fdb1 	.word	0x0800fdb1

0800f434 <L_shift>:
 800f434:	f1c2 0208 	rsb	r2, r2, #8
 800f438:	0092      	lsls	r2, r2, #2
 800f43a:	b570      	push	{r4, r5, r6, lr}
 800f43c:	f1c2 0620 	rsb	r6, r2, #32
 800f440:	6843      	ldr	r3, [r0, #4]
 800f442:	6804      	ldr	r4, [r0, #0]
 800f444:	fa03 f506 	lsl.w	r5, r3, r6
 800f448:	432c      	orrs	r4, r5
 800f44a:	40d3      	lsrs	r3, r2
 800f44c:	6004      	str	r4, [r0, #0]
 800f44e:	f840 3f04 	str.w	r3, [r0, #4]!
 800f452:	4288      	cmp	r0, r1
 800f454:	d3f4      	bcc.n	800f440 <L_shift+0xc>
 800f456:	bd70      	pop	{r4, r5, r6, pc}

0800f458 <__match>:
 800f458:	b530      	push	{r4, r5, lr}
 800f45a:	6803      	ldr	r3, [r0, #0]
 800f45c:	3301      	adds	r3, #1
 800f45e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f462:	b914      	cbnz	r4, 800f46a <__match+0x12>
 800f464:	6003      	str	r3, [r0, #0]
 800f466:	2001      	movs	r0, #1
 800f468:	bd30      	pop	{r4, r5, pc}
 800f46a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f46e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800f472:	2d19      	cmp	r5, #25
 800f474:	bf98      	it	ls
 800f476:	3220      	addls	r2, #32
 800f478:	42a2      	cmp	r2, r4
 800f47a:	d0f0      	beq.n	800f45e <__match+0x6>
 800f47c:	2000      	movs	r0, #0
 800f47e:	e7f3      	b.n	800f468 <__match+0x10>

0800f480 <__hexnan>:
 800f480:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f484:	680b      	ldr	r3, [r1, #0]
 800f486:	6801      	ldr	r1, [r0, #0]
 800f488:	115e      	asrs	r6, r3, #5
 800f48a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800f48e:	f013 031f 	ands.w	r3, r3, #31
 800f492:	b087      	sub	sp, #28
 800f494:	bf18      	it	ne
 800f496:	3604      	addne	r6, #4
 800f498:	2500      	movs	r5, #0
 800f49a:	1f37      	subs	r7, r6, #4
 800f49c:	4682      	mov	sl, r0
 800f49e:	4690      	mov	r8, r2
 800f4a0:	9301      	str	r3, [sp, #4]
 800f4a2:	f846 5c04 	str.w	r5, [r6, #-4]
 800f4a6:	46b9      	mov	r9, r7
 800f4a8:	463c      	mov	r4, r7
 800f4aa:	9502      	str	r5, [sp, #8]
 800f4ac:	46ab      	mov	fp, r5
 800f4ae:	784a      	ldrb	r2, [r1, #1]
 800f4b0:	1c4b      	adds	r3, r1, #1
 800f4b2:	9303      	str	r3, [sp, #12]
 800f4b4:	b342      	cbz	r2, 800f508 <__hexnan+0x88>
 800f4b6:	4610      	mov	r0, r2
 800f4b8:	9105      	str	r1, [sp, #20]
 800f4ba:	9204      	str	r2, [sp, #16]
 800f4bc:	f7ff fd76 	bl	800efac <__hexdig_fun>
 800f4c0:	2800      	cmp	r0, #0
 800f4c2:	d14f      	bne.n	800f564 <__hexnan+0xe4>
 800f4c4:	9a04      	ldr	r2, [sp, #16]
 800f4c6:	9905      	ldr	r1, [sp, #20]
 800f4c8:	2a20      	cmp	r2, #32
 800f4ca:	d818      	bhi.n	800f4fe <__hexnan+0x7e>
 800f4cc:	9b02      	ldr	r3, [sp, #8]
 800f4ce:	459b      	cmp	fp, r3
 800f4d0:	dd13      	ble.n	800f4fa <__hexnan+0x7a>
 800f4d2:	454c      	cmp	r4, r9
 800f4d4:	d206      	bcs.n	800f4e4 <__hexnan+0x64>
 800f4d6:	2d07      	cmp	r5, #7
 800f4d8:	dc04      	bgt.n	800f4e4 <__hexnan+0x64>
 800f4da:	462a      	mov	r2, r5
 800f4dc:	4649      	mov	r1, r9
 800f4de:	4620      	mov	r0, r4
 800f4e0:	f7ff ffa8 	bl	800f434 <L_shift>
 800f4e4:	4544      	cmp	r4, r8
 800f4e6:	d950      	bls.n	800f58a <__hexnan+0x10a>
 800f4e8:	2300      	movs	r3, #0
 800f4ea:	f1a4 0904 	sub.w	r9, r4, #4
 800f4ee:	f844 3c04 	str.w	r3, [r4, #-4]
 800f4f2:	f8cd b008 	str.w	fp, [sp, #8]
 800f4f6:	464c      	mov	r4, r9
 800f4f8:	461d      	mov	r5, r3
 800f4fa:	9903      	ldr	r1, [sp, #12]
 800f4fc:	e7d7      	b.n	800f4ae <__hexnan+0x2e>
 800f4fe:	2a29      	cmp	r2, #41	; 0x29
 800f500:	d155      	bne.n	800f5ae <__hexnan+0x12e>
 800f502:	3102      	adds	r1, #2
 800f504:	f8ca 1000 	str.w	r1, [sl]
 800f508:	f1bb 0f00 	cmp.w	fp, #0
 800f50c:	d04f      	beq.n	800f5ae <__hexnan+0x12e>
 800f50e:	454c      	cmp	r4, r9
 800f510:	d206      	bcs.n	800f520 <__hexnan+0xa0>
 800f512:	2d07      	cmp	r5, #7
 800f514:	dc04      	bgt.n	800f520 <__hexnan+0xa0>
 800f516:	462a      	mov	r2, r5
 800f518:	4649      	mov	r1, r9
 800f51a:	4620      	mov	r0, r4
 800f51c:	f7ff ff8a 	bl	800f434 <L_shift>
 800f520:	4544      	cmp	r4, r8
 800f522:	d934      	bls.n	800f58e <__hexnan+0x10e>
 800f524:	f1a8 0204 	sub.w	r2, r8, #4
 800f528:	4623      	mov	r3, r4
 800f52a:	f853 1b04 	ldr.w	r1, [r3], #4
 800f52e:	f842 1f04 	str.w	r1, [r2, #4]!
 800f532:	429f      	cmp	r7, r3
 800f534:	d2f9      	bcs.n	800f52a <__hexnan+0xaa>
 800f536:	1b3b      	subs	r3, r7, r4
 800f538:	f023 0303 	bic.w	r3, r3, #3
 800f53c:	3304      	adds	r3, #4
 800f53e:	3e03      	subs	r6, #3
 800f540:	3401      	adds	r4, #1
 800f542:	42a6      	cmp	r6, r4
 800f544:	bf38      	it	cc
 800f546:	2304      	movcc	r3, #4
 800f548:	4443      	add	r3, r8
 800f54a:	2200      	movs	r2, #0
 800f54c:	f843 2b04 	str.w	r2, [r3], #4
 800f550:	429f      	cmp	r7, r3
 800f552:	d2fb      	bcs.n	800f54c <__hexnan+0xcc>
 800f554:	683b      	ldr	r3, [r7, #0]
 800f556:	b91b      	cbnz	r3, 800f560 <__hexnan+0xe0>
 800f558:	4547      	cmp	r7, r8
 800f55a:	d126      	bne.n	800f5aa <__hexnan+0x12a>
 800f55c:	2301      	movs	r3, #1
 800f55e:	603b      	str	r3, [r7, #0]
 800f560:	2005      	movs	r0, #5
 800f562:	e025      	b.n	800f5b0 <__hexnan+0x130>
 800f564:	3501      	adds	r5, #1
 800f566:	2d08      	cmp	r5, #8
 800f568:	f10b 0b01 	add.w	fp, fp, #1
 800f56c:	dd06      	ble.n	800f57c <__hexnan+0xfc>
 800f56e:	4544      	cmp	r4, r8
 800f570:	d9c3      	bls.n	800f4fa <__hexnan+0x7a>
 800f572:	2300      	movs	r3, #0
 800f574:	f844 3c04 	str.w	r3, [r4, #-4]
 800f578:	2501      	movs	r5, #1
 800f57a:	3c04      	subs	r4, #4
 800f57c:	6822      	ldr	r2, [r4, #0]
 800f57e:	f000 000f 	and.w	r0, r0, #15
 800f582:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800f586:	6020      	str	r0, [r4, #0]
 800f588:	e7b7      	b.n	800f4fa <__hexnan+0x7a>
 800f58a:	2508      	movs	r5, #8
 800f58c:	e7b5      	b.n	800f4fa <__hexnan+0x7a>
 800f58e:	9b01      	ldr	r3, [sp, #4]
 800f590:	2b00      	cmp	r3, #0
 800f592:	d0df      	beq.n	800f554 <__hexnan+0xd4>
 800f594:	f1c3 0320 	rsb	r3, r3, #32
 800f598:	f04f 32ff 	mov.w	r2, #4294967295
 800f59c:	40da      	lsrs	r2, r3
 800f59e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800f5a2:	4013      	ands	r3, r2
 800f5a4:	f846 3c04 	str.w	r3, [r6, #-4]
 800f5a8:	e7d4      	b.n	800f554 <__hexnan+0xd4>
 800f5aa:	3f04      	subs	r7, #4
 800f5ac:	e7d2      	b.n	800f554 <__hexnan+0xd4>
 800f5ae:	2004      	movs	r0, #4
 800f5b0:	b007      	add	sp, #28
 800f5b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f5b6 <__ascii_mbtowc>:
 800f5b6:	b082      	sub	sp, #8
 800f5b8:	b901      	cbnz	r1, 800f5bc <__ascii_mbtowc+0x6>
 800f5ba:	a901      	add	r1, sp, #4
 800f5bc:	b142      	cbz	r2, 800f5d0 <__ascii_mbtowc+0x1a>
 800f5be:	b14b      	cbz	r3, 800f5d4 <__ascii_mbtowc+0x1e>
 800f5c0:	7813      	ldrb	r3, [r2, #0]
 800f5c2:	600b      	str	r3, [r1, #0]
 800f5c4:	7812      	ldrb	r2, [r2, #0]
 800f5c6:	1e10      	subs	r0, r2, #0
 800f5c8:	bf18      	it	ne
 800f5ca:	2001      	movne	r0, #1
 800f5cc:	b002      	add	sp, #8
 800f5ce:	4770      	bx	lr
 800f5d0:	4610      	mov	r0, r2
 800f5d2:	e7fb      	b.n	800f5cc <__ascii_mbtowc+0x16>
 800f5d4:	f06f 0001 	mvn.w	r0, #1
 800f5d8:	e7f8      	b.n	800f5cc <__ascii_mbtowc+0x16>

0800f5da <_realloc_r>:
 800f5da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f5de:	4680      	mov	r8, r0
 800f5e0:	4614      	mov	r4, r2
 800f5e2:	460e      	mov	r6, r1
 800f5e4:	b921      	cbnz	r1, 800f5f0 <_realloc_r+0x16>
 800f5e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f5ea:	4611      	mov	r1, r2
 800f5ec:	f7fb bf46 	b.w	800b47c <_malloc_r>
 800f5f0:	b92a      	cbnz	r2, 800f5fe <_realloc_r+0x24>
 800f5f2:	f7fd fe7b 	bl	800d2ec <_free_r>
 800f5f6:	4625      	mov	r5, r4
 800f5f8:	4628      	mov	r0, r5
 800f5fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f5fe:	f000 f842 	bl	800f686 <_malloc_usable_size_r>
 800f602:	4284      	cmp	r4, r0
 800f604:	4607      	mov	r7, r0
 800f606:	d802      	bhi.n	800f60e <_realloc_r+0x34>
 800f608:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f60c:	d812      	bhi.n	800f634 <_realloc_r+0x5a>
 800f60e:	4621      	mov	r1, r4
 800f610:	4640      	mov	r0, r8
 800f612:	f7fb ff33 	bl	800b47c <_malloc_r>
 800f616:	4605      	mov	r5, r0
 800f618:	2800      	cmp	r0, #0
 800f61a:	d0ed      	beq.n	800f5f8 <_realloc_r+0x1e>
 800f61c:	42bc      	cmp	r4, r7
 800f61e:	4622      	mov	r2, r4
 800f620:	4631      	mov	r1, r6
 800f622:	bf28      	it	cs
 800f624:	463a      	movcs	r2, r7
 800f626:	f7ff fc23 	bl	800ee70 <memcpy>
 800f62a:	4631      	mov	r1, r6
 800f62c:	4640      	mov	r0, r8
 800f62e:	f7fd fe5d 	bl	800d2ec <_free_r>
 800f632:	e7e1      	b.n	800f5f8 <_realloc_r+0x1e>
 800f634:	4635      	mov	r5, r6
 800f636:	e7df      	b.n	800f5f8 <_realloc_r+0x1e>

0800f638 <__ascii_wctomb>:
 800f638:	b149      	cbz	r1, 800f64e <__ascii_wctomb+0x16>
 800f63a:	2aff      	cmp	r2, #255	; 0xff
 800f63c:	bf85      	ittet	hi
 800f63e:	238a      	movhi	r3, #138	; 0x8a
 800f640:	6003      	strhi	r3, [r0, #0]
 800f642:	700a      	strbls	r2, [r1, #0]
 800f644:	f04f 30ff 	movhi.w	r0, #4294967295
 800f648:	bf98      	it	ls
 800f64a:	2001      	movls	r0, #1
 800f64c:	4770      	bx	lr
 800f64e:	4608      	mov	r0, r1
 800f650:	4770      	bx	lr
	...

0800f654 <fiprintf>:
 800f654:	b40e      	push	{r1, r2, r3}
 800f656:	b503      	push	{r0, r1, lr}
 800f658:	4601      	mov	r1, r0
 800f65a:	ab03      	add	r3, sp, #12
 800f65c:	4805      	ldr	r0, [pc, #20]	; (800f674 <fiprintf+0x20>)
 800f65e:	f853 2b04 	ldr.w	r2, [r3], #4
 800f662:	6800      	ldr	r0, [r0, #0]
 800f664:	9301      	str	r3, [sp, #4]
 800f666:	f000 f83f 	bl	800f6e8 <_vfiprintf_r>
 800f66a:	b002      	add	sp, #8
 800f66c:	f85d eb04 	ldr.w	lr, [sp], #4
 800f670:	b003      	add	sp, #12
 800f672:	4770      	bx	lr
 800f674:	20000164 	.word	0x20000164

0800f678 <abort>:
 800f678:	b508      	push	{r3, lr}
 800f67a:	2006      	movs	r0, #6
 800f67c:	f000 fa0c 	bl	800fa98 <raise>
 800f680:	2001      	movs	r0, #1
 800f682:	f7f2 fb1b 	bl	8001cbc <_exit>

0800f686 <_malloc_usable_size_r>:
 800f686:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f68a:	1f18      	subs	r0, r3, #4
 800f68c:	2b00      	cmp	r3, #0
 800f68e:	bfbc      	itt	lt
 800f690:	580b      	ldrlt	r3, [r1, r0]
 800f692:	18c0      	addlt	r0, r0, r3
 800f694:	4770      	bx	lr

0800f696 <__sfputc_r>:
 800f696:	6893      	ldr	r3, [r2, #8]
 800f698:	3b01      	subs	r3, #1
 800f69a:	2b00      	cmp	r3, #0
 800f69c:	b410      	push	{r4}
 800f69e:	6093      	str	r3, [r2, #8]
 800f6a0:	da08      	bge.n	800f6b4 <__sfputc_r+0x1e>
 800f6a2:	6994      	ldr	r4, [r2, #24]
 800f6a4:	42a3      	cmp	r3, r4
 800f6a6:	db01      	blt.n	800f6ac <__sfputc_r+0x16>
 800f6a8:	290a      	cmp	r1, #10
 800f6aa:	d103      	bne.n	800f6b4 <__sfputc_r+0x1e>
 800f6ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f6b0:	f000 b934 	b.w	800f91c <__swbuf_r>
 800f6b4:	6813      	ldr	r3, [r2, #0]
 800f6b6:	1c58      	adds	r0, r3, #1
 800f6b8:	6010      	str	r0, [r2, #0]
 800f6ba:	7019      	strb	r1, [r3, #0]
 800f6bc:	4608      	mov	r0, r1
 800f6be:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f6c2:	4770      	bx	lr

0800f6c4 <__sfputs_r>:
 800f6c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f6c6:	4606      	mov	r6, r0
 800f6c8:	460f      	mov	r7, r1
 800f6ca:	4614      	mov	r4, r2
 800f6cc:	18d5      	adds	r5, r2, r3
 800f6ce:	42ac      	cmp	r4, r5
 800f6d0:	d101      	bne.n	800f6d6 <__sfputs_r+0x12>
 800f6d2:	2000      	movs	r0, #0
 800f6d4:	e007      	b.n	800f6e6 <__sfputs_r+0x22>
 800f6d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f6da:	463a      	mov	r2, r7
 800f6dc:	4630      	mov	r0, r6
 800f6de:	f7ff ffda 	bl	800f696 <__sfputc_r>
 800f6e2:	1c43      	adds	r3, r0, #1
 800f6e4:	d1f3      	bne.n	800f6ce <__sfputs_r+0xa>
 800f6e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800f6e8 <_vfiprintf_r>:
 800f6e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f6ec:	460d      	mov	r5, r1
 800f6ee:	b09d      	sub	sp, #116	; 0x74
 800f6f0:	4614      	mov	r4, r2
 800f6f2:	4698      	mov	r8, r3
 800f6f4:	4606      	mov	r6, r0
 800f6f6:	b118      	cbz	r0, 800f700 <_vfiprintf_r+0x18>
 800f6f8:	6a03      	ldr	r3, [r0, #32]
 800f6fa:	b90b      	cbnz	r3, 800f700 <_vfiprintf_r+0x18>
 800f6fc:	f7fc fe4c 	bl	800c398 <__sinit>
 800f700:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f702:	07d9      	lsls	r1, r3, #31
 800f704:	d405      	bmi.n	800f712 <_vfiprintf_r+0x2a>
 800f706:	89ab      	ldrh	r3, [r5, #12]
 800f708:	059a      	lsls	r2, r3, #22
 800f70a:	d402      	bmi.n	800f712 <_vfiprintf_r+0x2a>
 800f70c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f70e:	f7fc ff6a 	bl	800c5e6 <__retarget_lock_acquire_recursive>
 800f712:	89ab      	ldrh	r3, [r5, #12]
 800f714:	071b      	lsls	r3, r3, #28
 800f716:	d501      	bpl.n	800f71c <_vfiprintf_r+0x34>
 800f718:	692b      	ldr	r3, [r5, #16]
 800f71a:	b99b      	cbnz	r3, 800f744 <_vfiprintf_r+0x5c>
 800f71c:	4629      	mov	r1, r5
 800f71e:	4630      	mov	r0, r6
 800f720:	f000 f93a 	bl	800f998 <__swsetup_r>
 800f724:	b170      	cbz	r0, 800f744 <_vfiprintf_r+0x5c>
 800f726:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f728:	07dc      	lsls	r4, r3, #31
 800f72a:	d504      	bpl.n	800f736 <_vfiprintf_r+0x4e>
 800f72c:	f04f 30ff 	mov.w	r0, #4294967295
 800f730:	b01d      	add	sp, #116	; 0x74
 800f732:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f736:	89ab      	ldrh	r3, [r5, #12]
 800f738:	0598      	lsls	r0, r3, #22
 800f73a:	d4f7      	bmi.n	800f72c <_vfiprintf_r+0x44>
 800f73c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f73e:	f7fc ff53 	bl	800c5e8 <__retarget_lock_release_recursive>
 800f742:	e7f3      	b.n	800f72c <_vfiprintf_r+0x44>
 800f744:	2300      	movs	r3, #0
 800f746:	9309      	str	r3, [sp, #36]	; 0x24
 800f748:	2320      	movs	r3, #32
 800f74a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f74e:	f8cd 800c 	str.w	r8, [sp, #12]
 800f752:	2330      	movs	r3, #48	; 0x30
 800f754:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800f908 <_vfiprintf_r+0x220>
 800f758:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f75c:	f04f 0901 	mov.w	r9, #1
 800f760:	4623      	mov	r3, r4
 800f762:	469a      	mov	sl, r3
 800f764:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f768:	b10a      	cbz	r2, 800f76e <_vfiprintf_r+0x86>
 800f76a:	2a25      	cmp	r2, #37	; 0x25
 800f76c:	d1f9      	bne.n	800f762 <_vfiprintf_r+0x7a>
 800f76e:	ebba 0b04 	subs.w	fp, sl, r4
 800f772:	d00b      	beq.n	800f78c <_vfiprintf_r+0xa4>
 800f774:	465b      	mov	r3, fp
 800f776:	4622      	mov	r2, r4
 800f778:	4629      	mov	r1, r5
 800f77a:	4630      	mov	r0, r6
 800f77c:	f7ff ffa2 	bl	800f6c4 <__sfputs_r>
 800f780:	3001      	adds	r0, #1
 800f782:	f000 80a9 	beq.w	800f8d8 <_vfiprintf_r+0x1f0>
 800f786:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f788:	445a      	add	r2, fp
 800f78a:	9209      	str	r2, [sp, #36]	; 0x24
 800f78c:	f89a 3000 	ldrb.w	r3, [sl]
 800f790:	2b00      	cmp	r3, #0
 800f792:	f000 80a1 	beq.w	800f8d8 <_vfiprintf_r+0x1f0>
 800f796:	2300      	movs	r3, #0
 800f798:	f04f 32ff 	mov.w	r2, #4294967295
 800f79c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f7a0:	f10a 0a01 	add.w	sl, sl, #1
 800f7a4:	9304      	str	r3, [sp, #16]
 800f7a6:	9307      	str	r3, [sp, #28]
 800f7a8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f7ac:	931a      	str	r3, [sp, #104]	; 0x68
 800f7ae:	4654      	mov	r4, sl
 800f7b0:	2205      	movs	r2, #5
 800f7b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f7b6:	4854      	ldr	r0, [pc, #336]	; (800f908 <_vfiprintf_r+0x220>)
 800f7b8:	f7f0 fd2a 	bl	8000210 <memchr>
 800f7bc:	9a04      	ldr	r2, [sp, #16]
 800f7be:	b9d8      	cbnz	r0, 800f7f8 <_vfiprintf_r+0x110>
 800f7c0:	06d1      	lsls	r1, r2, #27
 800f7c2:	bf44      	itt	mi
 800f7c4:	2320      	movmi	r3, #32
 800f7c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f7ca:	0713      	lsls	r3, r2, #28
 800f7cc:	bf44      	itt	mi
 800f7ce:	232b      	movmi	r3, #43	; 0x2b
 800f7d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f7d4:	f89a 3000 	ldrb.w	r3, [sl]
 800f7d8:	2b2a      	cmp	r3, #42	; 0x2a
 800f7da:	d015      	beq.n	800f808 <_vfiprintf_r+0x120>
 800f7dc:	9a07      	ldr	r2, [sp, #28]
 800f7de:	4654      	mov	r4, sl
 800f7e0:	2000      	movs	r0, #0
 800f7e2:	f04f 0c0a 	mov.w	ip, #10
 800f7e6:	4621      	mov	r1, r4
 800f7e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f7ec:	3b30      	subs	r3, #48	; 0x30
 800f7ee:	2b09      	cmp	r3, #9
 800f7f0:	d94d      	bls.n	800f88e <_vfiprintf_r+0x1a6>
 800f7f2:	b1b0      	cbz	r0, 800f822 <_vfiprintf_r+0x13a>
 800f7f4:	9207      	str	r2, [sp, #28]
 800f7f6:	e014      	b.n	800f822 <_vfiprintf_r+0x13a>
 800f7f8:	eba0 0308 	sub.w	r3, r0, r8
 800f7fc:	fa09 f303 	lsl.w	r3, r9, r3
 800f800:	4313      	orrs	r3, r2
 800f802:	9304      	str	r3, [sp, #16]
 800f804:	46a2      	mov	sl, r4
 800f806:	e7d2      	b.n	800f7ae <_vfiprintf_r+0xc6>
 800f808:	9b03      	ldr	r3, [sp, #12]
 800f80a:	1d19      	adds	r1, r3, #4
 800f80c:	681b      	ldr	r3, [r3, #0]
 800f80e:	9103      	str	r1, [sp, #12]
 800f810:	2b00      	cmp	r3, #0
 800f812:	bfbb      	ittet	lt
 800f814:	425b      	neglt	r3, r3
 800f816:	f042 0202 	orrlt.w	r2, r2, #2
 800f81a:	9307      	strge	r3, [sp, #28]
 800f81c:	9307      	strlt	r3, [sp, #28]
 800f81e:	bfb8      	it	lt
 800f820:	9204      	strlt	r2, [sp, #16]
 800f822:	7823      	ldrb	r3, [r4, #0]
 800f824:	2b2e      	cmp	r3, #46	; 0x2e
 800f826:	d10c      	bne.n	800f842 <_vfiprintf_r+0x15a>
 800f828:	7863      	ldrb	r3, [r4, #1]
 800f82a:	2b2a      	cmp	r3, #42	; 0x2a
 800f82c:	d134      	bne.n	800f898 <_vfiprintf_r+0x1b0>
 800f82e:	9b03      	ldr	r3, [sp, #12]
 800f830:	1d1a      	adds	r2, r3, #4
 800f832:	681b      	ldr	r3, [r3, #0]
 800f834:	9203      	str	r2, [sp, #12]
 800f836:	2b00      	cmp	r3, #0
 800f838:	bfb8      	it	lt
 800f83a:	f04f 33ff 	movlt.w	r3, #4294967295
 800f83e:	3402      	adds	r4, #2
 800f840:	9305      	str	r3, [sp, #20]
 800f842:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800f918 <_vfiprintf_r+0x230>
 800f846:	7821      	ldrb	r1, [r4, #0]
 800f848:	2203      	movs	r2, #3
 800f84a:	4650      	mov	r0, sl
 800f84c:	f7f0 fce0 	bl	8000210 <memchr>
 800f850:	b138      	cbz	r0, 800f862 <_vfiprintf_r+0x17a>
 800f852:	9b04      	ldr	r3, [sp, #16]
 800f854:	eba0 000a 	sub.w	r0, r0, sl
 800f858:	2240      	movs	r2, #64	; 0x40
 800f85a:	4082      	lsls	r2, r0
 800f85c:	4313      	orrs	r3, r2
 800f85e:	3401      	adds	r4, #1
 800f860:	9304      	str	r3, [sp, #16]
 800f862:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f866:	4829      	ldr	r0, [pc, #164]	; (800f90c <_vfiprintf_r+0x224>)
 800f868:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f86c:	2206      	movs	r2, #6
 800f86e:	f7f0 fccf 	bl	8000210 <memchr>
 800f872:	2800      	cmp	r0, #0
 800f874:	d03f      	beq.n	800f8f6 <_vfiprintf_r+0x20e>
 800f876:	4b26      	ldr	r3, [pc, #152]	; (800f910 <_vfiprintf_r+0x228>)
 800f878:	bb1b      	cbnz	r3, 800f8c2 <_vfiprintf_r+0x1da>
 800f87a:	9b03      	ldr	r3, [sp, #12]
 800f87c:	3307      	adds	r3, #7
 800f87e:	f023 0307 	bic.w	r3, r3, #7
 800f882:	3308      	adds	r3, #8
 800f884:	9303      	str	r3, [sp, #12]
 800f886:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f888:	443b      	add	r3, r7
 800f88a:	9309      	str	r3, [sp, #36]	; 0x24
 800f88c:	e768      	b.n	800f760 <_vfiprintf_r+0x78>
 800f88e:	fb0c 3202 	mla	r2, ip, r2, r3
 800f892:	460c      	mov	r4, r1
 800f894:	2001      	movs	r0, #1
 800f896:	e7a6      	b.n	800f7e6 <_vfiprintf_r+0xfe>
 800f898:	2300      	movs	r3, #0
 800f89a:	3401      	adds	r4, #1
 800f89c:	9305      	str	r3, [sp, #20]
 800f89e:	4619      	mov	r1, r3
 800f8a0:	f04f 0c0a 	mov.w	ip, #10
 800f8a4:	4620      	mov	r0, r4
 800f8a6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f8aa:	3a30      	subs	r2, #48	; 0x30
 800f8ac:	2a09      	cmp	r2, #9
 800f8ae:	d903      	bls.n	800f8b8 <_vfiprintf_r+0x1d0>
 800f8b0:	2b00      	cmp	r3, #0
 800f8b2:	d0c6      	beq.n	800f842 <_vfiprintf_r+0x15a>
 800f8b4:	9105      	str	r1, [sp, #20]
 800f8b6:	e7c4      	b.n	800f842 <_vfiprintf_r+0x15a>
 800f8b8:	fb0c 2101 	mla	r1, ip, r1, r2
 800f8bc:	4604      	mov	r4, r0
 800f8be:	2301      	movs	r3, #1
 800f8c0:	e7f0      	b.n	800f8a4 <_vfiprintf_r+0x1bc>
 800f8c2:	ab03      	add	r3, sp, #12
 800f8c4:	9300      	str	r3, [sp, #0]
 800f8c6:	462a      	mov	r2, r5
 800f8c8:	4b12      	ldr	r3, [pc, #72]	; (800f914 <_vfiprintf_r+0x22c>)
 800f8ca:	a904      	add	r1, sp, #16
 800f8cc:	4630      	mov	r0, r6
 800f8ce:	f7fb ff01 	bl	800b6d4 <_printf_float>
 800f8d2:	4607      	mov	r7, r0
 800f8d4:	1c78      	adds	r0, r7, #1
 800f8d6:	d1d6      	bne.n	800f886 <_vfiprintf_r+0x19e>
 800f8d8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f8da:	07d9      	lsls	r1, r3, #31
 800f8dc:	d405      	bmi.n	800f8ea <_vfiprintf_r+0x202>
 800f8de:	89ab      	ldrh	r3, [r5, #12]
 800f8e0:	059a      	lsls	r2, r3, #22
 800f8e2:	d402      	bmi.n	800f8ea <_vfiprintf_r+0x202>
 800f8e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f8e6:	f7fc fe7f 	bl	800c5e8 <__retarget_lock_release_recursive>
 800f8ea:	89ab      	ldrh	r3, [r5, #12]
 800f8ec:	065b      	lsls	r3, r3, #25
 800f8ee:	f53f af1d 	bmi.w	800f72c <_vfiprintf_r+0x44>
 800f8f2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f8f4:	e71c      	b.n	800f730 <_vfiprintf_r+0x48>
 800f8f6:	ab03      	add	r3, sp, #12
 800f8f8:	9300      	str	r3, [sp, #0]
 800f8fa:	462a      	mov	r2, r5
 800f8fc:	4b05      	ldr	r3, [pc, #20]	; (800f914 <_vfiprintf_r+0x22c>)
 800f8fe:	a904      	add	r1, sp, #16
 800f900:	4630      	mov	r0, r6
 800f902:	f7fc f98b 	bl	800bc1c <_printf_i>
 800f906:	e7e4      	b.n	800f8d2 <_vfiprintf_r+0x1ea>
 800f908:	08010071 	.word	0x08010071
 800f90c:	0801007b 	.word	0x0801007b
 800f910:	0800b6d5 	.word	0x0800b6d5
 800f914:	0800f6c5 	.word	0x0800f6c5
 800f918:	08010077 	.word	0x08010077

0800f91c <__swbuf_r>:
 800f91c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f91e:	460e      	mov	r6, r1
 800f920:	4614      	mov	r4, r2
 800f922:	4605      	mov	r5, r0
 800f924:	b118      	cbz	r0, 800f92e <__swbuf_r+0x12>
 800f926:	6a03      	ldr	r3, [r0, #32]
 800f928:	b90b      	cbnz	r3, 800f92e <__swbuf_r+0x12>
 800f92a:	f7fc fd35 	bl	800c398 <__sinit>
 800f92e:	69a3      	ldr	r3, [r4, #24]
 800f930:	60a3      	str	r3, [r4, #8]
 800f932:	89a3      	ldrh	r3, [r4, #12]
 800f934:	071a      	lsls	r2, r3, #28
 800f936:	d525      	bpl.n	800f984 <__swbuf_r+0x68>
 800f938:	6923      	ldr	r3, [r4, #16]
 800f93a:	b31b      	cbz	r3, 800f984 <__swbuf_r+0x68>
 800f93c:	6823      	ldr	r3, [r4, #0]
 800f93e:	6922      	ldr	r2, [r4, #16]
 800f940:	1a98      	subs	r0, r3, r2
 800f942:	6963      	ldr	r3, [r4, #20]
 800f944:	b2f6      	uxtb	r6, r6
 800f946:	4283      	cmp	r3, r0
 800f948:	4637      	mov	r7, r6
 800f94a:	dc04      	bgt.n	800f956 <__swbuf_r+0x3a>
 800f94c:	4621      	mov	r1, r4
 800f94e:	4628      	mov	r0, r5
 800f950:	f7ff fa3a 	bl	800edc8 <_fflush_r>
 800f954:	b9e0      	cbnz	r0, 800f990 <__swbuf_r+0x74>
 800f956:	68a3      	ldr	r3, [r4, #8]
 800f958:	3b01      	subs	r3, #1
 800f95a:	60a3      	str	r3, [r4, #8]
 800f95c:	6823      	ldr	r3, [r4, #0]
 800f95e:	1c5a      	adds	r2, r3, #1
 800f960:	6022      	str	r2, [r4, #0]
 800f962:	701e      	strb	r6, [r3, #0]
 800f964:	6962      	ldr	r2, [r4, #20]
 800f966:	1c43      	adds	r3, r0, #1
 800f968:	429a      	cmp	r2, r3
 800f96a:	d004      	beq.n	800f976 <__swbuf_r+0x5a>
 800f96c:	89a3      	ldrh	r3, [r4, #12]
 800f96e:	07db      	lsls	r3, r3, #31
 800f970:	d506      	bpl.n	800f980 <__swbuf_r+0x64>
 800f972:	2e0a      	cmp	r6, #10
 800f974:	d104      	bne.n	800f980 <__swbuf_r+0x64>
 800f976:	4621      	mov	r1, r4
 800f978:	4628      	mov	r0, r5
 800f97a:	f7ff fa25 	bl	800edc8 <_fflush_r>
 800f97e:	b938      	cbnz	r0, 800f990 <__swbuf_r+0x74>
 800f980:	4638      	mov	r0, r7
 800f982:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f984:	4621      	mov	r1, r4
 800f986:	4628      	mov	r0, r5
 800f988:	f000 f806 	bl	800f998 <__swsetup_r>
 800f98c:	2800      	cmp	r0, #0
 800f98e:	d0d5      	beq.n	800f93c <__swbuf_r+0x20>
 800f990:	f04f 37ff 	mov.w	r7, #4294967295
 800f994:	e7f4      	b.n	800f980 <__swbuf_r+0x64>
	...

0800f998 <__swsetup_r>:
 800f998:	b538      	push	{r3, r4, r5, lr}
 800f99a:	4b2a      	ldr	r3, [pc, #168]	; (800fa44 <__swsetup_r+0xac>)
 800f99c:	4605      	mov	r5, r0
 800f99e:	6818      	ldr	r0, [r3, #0]
 800f9a0:	460c      	mov	r4, r1
 800f9a2:	b118      	cbz	r0, 800f9ac <__swsetup_r+0x14>
 800f9a4:	6a03      	ldr	r3, [r0, #32]
 800f9a6:	b90b      	cbnz	r3, 800f9ac <__swsetup_r+0x14>
 800f9a8:	f7fc fcf6 	bl	800c398 <__sinit>
 800f9ac:	89a3      	ldrh	r3, [r4, #12]
 800f9ae:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f9b2:	0718      	lsls	r0, r3, #28
 800f9b4:	d422      	bmi.n	800f9fc <__swsetup_r+0x64>
 800f9b6:	06d9      	lsls	r1, r3, #27
 800f9b8:	d407      	bmi.n	800f9ca <__swsetup_r+0x32>
 800f9ba:	2309      	movs	r3, #9
 800f9bc:	602b      	str	r3, [r5, #0]
 800f9be:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800f9c2:	81a3      	strh	r3, [r4, #12]
 800f9c4:	f04f 30ff 	mov.w	r0, #4294967295
 800f9c8:	e034      	b.n	800fa34 <__swsetup_r+0x9c>
 800f9ca:	0758      	lsls	r0, r3, #29
 800f9cc:	d512      	bpl.n	800f9f4 <__swsetup_r+0x5c>
 800f9ce:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f9d0:	b141      	cbz	r1, 800f9e4 <__swsetup_r+0x4c>
 800f9d2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f9d6:	4299      	cmp	r1, r3
 800f9d8:	d002      	beq.n	800f9e0 <__swsetup_r+0x48>
 800f9da:	4628      	mov	r0, r5
 800f9dc:	f7fd fc86 	bl	800d2ec <_free_r>
 800f9e0:	2300      	movs	r3, #0
 800f9e2:	6363      	str	r3, [r4, #52]	; 0x34
 800f9e4:	89a3      	ldrh	r3, [r4, #12]
 800f9e6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f9ea:	81a3      	strh	r3, [r4, #12]
 800f9ec:	2300      	movs	r3, #0
 800f9ee:	6063      	str	r3, [r4, #4]
 800f9f0:	6923      	ldr	r3, [r4, #16]
 800f9f2:	6023      	str	r3, [r4, #0]
 800f9f4:	89a3      	ldrh	r3, [r4, #12]
 800f9f6:	f043 0308 	orr.w	r3, r3, #8
 800f9fa:	81a3      	strh	r3, [r4, #12]
 800f9fc:	6923      	ldr	r3, [r4, #16]
 800f9fe:	b94b      	cbnz	r3, 800fa14 <__swsetup_r+0x7c>
 800fa00:	89a3      	ldrh	r3, [r4, #12]
 800fa02:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800fa06:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fa0a:	d003      	beq.n	800fa14 <__swsetup_r+0x7c>
 800fa0c:	4621      	mov	r1, r4
 800fa0e:	4628      	mov	r0, r5
 800fa10:	f000 f884 	bl	800fb1c <__smakebuf_r>
 800fa14:	89a0      	ldrh	r0, [r4, #12]
 800fa16:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800fa1a:	f010 0301 	ands.w	r3, r0, #1
 800fa1e:	d00a      	beq.n	800fa36 <__swsetup_r+0x9e>
 800fa20:	2300      	movs	r3, #0
 800fa22:	60a3      	str	r3, [r4, #8]
 800fa24:	6963      	ldr	r3, [r4, #20]
 800fa26:	425b      	negs	r3, r3
 800fa28:	61a3      	str	r3, [r4, #24]
 800fa2a:	6923      	ldr	r3, [r4, #16]
 800fa2c:	b943      	cbnz	r3, 800fa40 <__swsetup_r+0xa8>
 800fa2e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800fa32:	d1c4      	bne.n	800f9be <__swsetup_r+0x26>
 800fa34:	bd38      	pop	{r3, r4, r5, pc}
 800fa36:	0781      	lsls	r1, r0, #30
 800fa38:	bf58      	it	pl
 800fa3a:	6963      	ldrpl	r3, [r4, #20]
 800fa3c:	60a3      	str	r3, [r4, #8]
 800fa3e:	e7f4      	b.n	800fa2a <__swsetup_r+0x92>
 800fa40:	2000      	movs	r0, #0
 800fa42:	e7f7      	b.n	800fa34 <__swsetup_r+0x9c>
 800fa44:	20000164 	.word	0x20000164

0800fa48 <_raise_r>:
 800fa48:	291f      	cmp	r1, #31
 800fa4a:	b538      	push	{r3, r4, r5, lr}
 800fa4c:	4604      	mov	r4, r0
 800fa4e:	460d      	mov	r5, r1
 800fa50:	d904      	bls.n	800fa5c <_raise_r+0x14>
 800fa52:	2316      	movs	r3, #22
 800fa54:	6003      	str	r3, [r0, #0]
 800fa56:	f04f 30ff 	mov.w	r0, #4294967295
 800fa5a:	bd38      	pop	{r3, r4, r5, pc}
 800fa5c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800fa5e:	b112      	cbz	r2, 800fa66 <_raise_r+0x1e>
 800fa60:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800fa64:	b94b      	cbnz	r3, 800fa7a <_raise_r+0x32>
 800fa66:	4620      	mov	r0, r4
 800fa68:	f000 f830 	bl	800facc <_getpid_r>
 800fa6c:	462a      	mov	r2, r5
 800fa6e:	4601      	mov	r1, r0
 800fa70:	4620      	mov	r0, r4
 800fa72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fa76:	f000 b817 	b.w	800faa8 <_kill_r>
 800fa7a:	2b01      	cmp	r3, #1
 800fa7c:	d00a      	beq.n	800fa94 <_raise_r+0x4c>
 800fa7e:	1c59      	adds	r1, r3, #1
 800fa80:	d103      	bne.n	800fa8a <_raise_r+0x42>
 800fa82:	2316      	movs	r3, #22
 800fa84:	6003      	str	r3, [r0, #0]
 800fa86:	2001      	movs	r0, #1
 800fa88:	e7e7      	b.n	800fa5a <_raise_r+0x12>
 800fa8a:	2400      	movs	r4, #0
 800fa8c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800fa90:	4628      	mov	r0, r5
 800fa92:	4798      	blx	r3
 800fa94:	2000      	movs	r0, #0
 800fa96:	e7e0      	b.n	800fa5a <_raise_r+0x12>

0800fa98 <raise>:
 800fa98:	4b02      	ldr	r3, [pc, #8]	; (800faa4 <raise+0xc>)
 800fa9a:	4601      	mov	r1, r0
 800fa9c:	6818      	ldr	r0, [r3, #0]
 800fa9e:	f7ff bfd3 	b.w	800fa48 <_raise_r>
 800faa2:	bf00      	nop
 800faa4:	20000164 	.word	0x20000164

0800faa8 <_kill_r>:
 800faa8:	b538      	push	{r3, r4, r5, lr}
 800faaa:	4d07      	ldr	r5, [pc, #28]	; (800fac8 <_kill_r+0x20>)
 800faac:	2300      	movs	r3, #0
 800faae:	4604      	mov	r4, r0
 800fab0:	4608      	mov	r0, r1
 800fab2:	4611      	mov	r1, r2
 800fab4:	602b      	str	r3, [r5, #0]
 800fab6:	f7f2 f8f1 	bl	8001c9c <_kill>
 800faba:	1c43      	adds	r3, r0, #1
 800fabc:	d102      	bne.n	800fac4 <_kill_r+0x1c>
 800fabe:	682b      	ldr	r3, [r5, #0]
 800fac0:	b103      	cbz	r3, 800fac4 <_kill_r+0x1c>
 800fac2:	6023      	str	r3, [r4, #0]
 800fac4:	bd38      	pop	{r3, r4, r5, pc}
 800fac6:	bf00      	nop
 800fac8:	20002344 	.word	0x20002344

0800facc <_getpid_r>:
 800facc:	f7f2 b8de 	b.w	8001c8c <_getpid>

0800fad0 <__swhatbuf_r>:
 800fad0:	b570      	push	{r4, r5, r6, lr}
 800fad2:	460c      	mov	r4, r1
 800fad4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fad8:	2900      	cmp	r1, #0
 800fada:	b096      	sub	sp, #88	; 0x58
 800fadc:	4615      	mov	r5, r2
 800fade:	461e      	mov	r6, r3
 800fae0:	da0d      	bge.n	800fafe <__swhatbuf_r+0x2e>
 800fae2:	89a3      	ldrh	r3, [r4, #12]
 800fae4:	f013 0f80 	tst.w	r3, #128	; 0x80
 800fae8:	f04f 0100 	mov.w	r1, #0
 800faec:	bf0c      	ite	eq
 800faee:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800faf2:	2340      	movne	r3, #64	; 0x40
 800faf4:	2000      	movs	r0, #0
 800faf6:	6031      	str	r1, [r6, #0]
 800faf8:	602b      	str	r3, [r5, #0]
 800fafa:	b016      	add	sp, #88	; 0x58
 800fafc:	bd70      	pop	{r4, r5, r6, pc}
 800fafe:	466a      	mov	r2, sp
 800fb00:	f000 f848 	bl	800fb94 <_fstat_r>
 800fb04:	2800      	cmp	r0, #0
 800fb06:	dbec      	blt.n	800fae2 <__swhatbuf_r+0x12>
 800fb08:	9901      	ldr	r1, [sp, #4]
 800fb0a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800fb0e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800fb12:	4259      	negs	r1, r3
 800fb14:	4159      	adcs	r1, r3
 800fb16:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fb1a:	e7eb      	b.n	800faf4 <__swhatbuf_r+0x24>

0800fb1c <__smakebuf_r>:
 800fb1c:	898b      	ldrh	r3, [r1, #12]
 800fb1e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800fb20:	079d      	lsls	r5, r3, #30
 800fb22:	4606      	mov	r6, r0
 800fb24:	460c      	mov	r4, r1
 800fb26:	d507      	bpl.n	800fb38 <__smakebuf_r+0x1c>
 800fb28:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800fb2c:	6023      	str	r3, [r4, #0]
 800fb2e:	6123      	str	r3, [r4, #16]
 800fb30:	2301      	movs	r3, #1
 800fb32:	6163      	str	r3, [r4, #20]
 800fb34:	b002      	add	sp, #8
 800fb36:	bd70      	pop	{r4, r5, r6, pc}
 800fb38:	ab01      	add	r3, sp, #4
 800fb3a:	466a      	mov	r2, sp
 800fb3c:	f7ff ffc8 	bl	800fad0 <__swhatbuf_r>
 800fb40:	9900      	ldr	r1, [sp, #0]
 800fb42:	4605      	mov	r5, r0
 800fb44:	4630      	mov	r0, r6
 800fb46:	f7fb fc99 	bl	800b47c <_malloc_r>
 800fb4a:	b948      	cbnz	r0, 800fb60 <__smakebuf_r+0x44>
 800fb4c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fb50:	059a      	lsls	r2, r3, #22
 800fb52:	d4ef      	bmi.n	800fb34 <__smakebuf_r+0x18>
 800fb54:	f023 0303 	bic.w	r3, r3, #3
 800fb58:	f043 0302 	orr.w	r3, r3, #2
 800fb5c:	81a3      	strh	r3, [r4, #12]
 800fb5e:	e7e3      	b.n	800fb28 <__smakebuf_r+0xc>
 800fb60:	89a3      	ldrh	r3, [r4, #12]
 800fb62:	6020      	str	r0, [r4, #0]
 800fb64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fb68:	81a3      	strh	r3, [r4, #12]
 800fb6a:	9b00      	ldr	r3, [sp, #0]
 800fb6c:	6163      	str	r3, [r4, #20]
 800fb6e:	9b01      	ldr	r3, [sp, #4]
 800fb70:	6120      	str	r0, [r4, #16]
 800fb72:	b15b      	cbz	r3, 800fb8c <__smakebuf_r+0x70>
 800fb74:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fb78:	4630      	mov	r0, r6
 800fb7a:	f000 f81d 	bl	800fbb8 <_isatty_r>
 800fb7e:	b128      	cbz	r0, 800fb8c <__smakebuf_r+0x70>
 800fb80:	89a3      	ldrh	r3, [r4, #12]
 800fb82:	f023 0303 	bic.w	r3, r3, #3
 800fb86:	f043 0301 	orr.w	r3, r3, #1
 800fb8a:	81a3      	strh	r3, [r4, #12]
 800fb8c:	89a3      	ldrh	r3, [r4, #12]
 800fb8e:	431d      	orrs	r5, r3
 800fb90:	81a5      	strh	r5, [r4, #12]
 800fb92:	e7cf      	b.n	800fb34 <__smakebuf_r+0x18>

0800fb94 <_fstat_r>:
 800fb94:	b538      	push	{r3, r4, r5, lr}
 800fb96:	4d07      	ldr	r5, [pc, #28]	; (800fbb4 <_fstat_r+0x20>)
 800fb98:	2300      	movs	r3, #0
 800fb9a:	4604      	mov	r4, r0
 800fb9c:	4608      	mov	r0, r1
 800fb9e:	4611      	mov	r1, r2
 800fba0:	602b      	str	r3, [r5, #0]
 800fba2:	f7f2 f8da 	bl	8001d5a <_fstat>
 800fba6:	1c43      	adds	r3, r0, #1
 800fba8:	d102      	bne.n	800fbb0 <_fstat_r+0x1c>
 800fbaa:	682b      	ldr	r3, [r5, #0]
 800fbac:	b103      	cbz	r3, 800fbb0 <_fstat_r+0x1c>
 800fbae:	6023      	str	r3, [r4, #0]
 800fbb0:	bd38      	pop	{r3, r4, r5, pc}
 800fbb2:	bf00      	nop
 800fbb4:	20002344 	.word	0x20002344

0800fbb8 <_isatty_r>:
 800fbb8:	b538      	push	{r3, r4, r5, lr}
 800fbba:	4d06      	ldr	r5, [pc, #24]	; (800fbd4 <_isatty_r+0x1c>)
 800fbbc:	2300      	movs	r3, #0
 800fbbe:	4604      	mov	r4, r0
 800fbc0:	4608      	mov	r0, r1
 800fbc2:	602b      	str	r3, [r5, #0]
 800fbc4:	f7f2 f8d9 	bl	8001d7a <_isatty>
 800fbc8:	1c43      	adds	r3, r0, #1
 800fbca:	d102      	bne.n	800fbd2 <_isatty_r+0x1a>
 800fbcc:	682b      	ldr	r3, [r5, #0]
 800fbce:	b103      	cbz	r3, 800fbd2 <_isatty_r+0x1a>
 800fbd0:	6023      	str	r3, [r4, #0]
 800fbd2:	bd38      	pop	{r3, r4, r5, pc}
 800fbd4:	20002344 	.word	0x20002344

0800fbd8 <_init>:
 800fbd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fbda:	bf00      	nop
 800fbdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fbde:	bc08      	pop	{r3}
 800fbe0:	469e      	mov	lr, r3
 800fbe2:	4770      	bx	lr

0800fbe4 <_fini>:
 800fbe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fbe6:	bf00      	nop
 800fbe8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fbea:	bc08      	pop	{r3}
 800fbec:	469e      	mov	lr, r3
 800fbee:	4770      	bx	lr
